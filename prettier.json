{
    "{C571BEF1-A20C-4765-9DF3-0CCADD31E621}": {
        "source": "const prettier = require( '/node_modules/prettier' )\r\nconst babylon = require( '/node_modules/parser-babylon' )\r\n\r\nmodule.exports = {\r\n    prettier,\r\n    babylon\r\n}\r\n",
        "path": "{prettier}/index.js",
        "mapping": {
            "/node_modules/prettier": "{B9BCE6E9-58DC-4609-A8C6-AB85ACD70447}",
            "/node_modules/parser-babylon": "{3EBBA1C9-1E4E-40C3-8398-DC2E5C7C5849}"
        }
    },
    "{B9BCE6E9-58DC-4609-A8C6-AB85ACD70447}": {
        "source": "(function (global, factory) {\r\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n  typeof define === 'function' && define.amd ? define(factory) :\r\n  (global = global || self, global.prettier = factory());\r\n}(this, (function () { 'use strict';\r\n\r\n  var name = \"prettier\";\r\n  var version = \"2.0.5\";\r\n  var description = \"Prettier is an opinionated code formatter\";\r\n  var bin = \"./bin/prettier.js\";\r\n  var repository = \"prettier/prettier\";\r\n  var homepage = \"https://prettier.io\";\r\n  var author = \"James Long\";\r\n  var license = \"MIT\";\r\n  var main = \"./index.js\";\r\n  var engines = {\r\n  \tnode: \">=10.13.0\"\r\n  };\r\n  var dependencies = {\r\n  \t\"@angular/compiler\": \"9.0.5\",\r\n  \t\"@babel/code-frame\": \"7.8.0\",\r\n  \t\"@babel/parser\": \"7.9.4\",\r\n  \t\"@glimmer/syntax\": \"0.50.0\",\r\n  \t\"@iarna/toml\": \"2.2.3\",\r\n  \t\"@typescript-eslint/typescript-estree\": \"2.26.0\",\r\n  \t\"angular-estree-parser\": \"1.3.0\",\r\n  \t\"angular-html-parser\": \"1.4.0\",\r\n  \tcamelcase: \"5.3.1\",\r\n  \tchalk: \"4.0.0\",\r\n  \t\"ci-info\": \"watson/ci-info#f43f6a1cefff47fb361c88cf4b943fdbcaafe540\",\r\n  \t\"cjk-regex\": \"2.0.0\",\r\n  \tcosmiconfig: \"6.0.0\",\r\n  \tdashify: \"2.0.0\",\r\n  \tdedent: \"0.7.0\",\r\n  \tdiff: \"4.0.2\",\r\n  \teditorconfig: \"0.15.3\",\r\n  \t\"editorconfig-to-prettier\": \"0.1.1\",\r\n  \t\"escape-string-regexp\": \"2.0.0\",\r\n  \tesutils: \"2.0.3\",\r\n  \t\"fast-glob\": \"3.2.2\",\r\n  \t\"find-parent-dir\": \"0.3.0\",\r\n  \t\"find-project-root\": \"1.1.1\",\r\n  \t\"flow-parser\": \"0.122.0\",\r\n  \t\"get-stream\": \"5.1.0\",\r\n  \tglobby: \"11.0.0\",\r\n  \tgraphql: \"15.0.0\",\r\n  \t\"html-element-attributes\": \"2.2.1\",\r\n  \t\"html-styles\": \"1.0.0\",\r\n  \t\"html-tag-names\": \"1.1.5\",\r\n  \tignore: \"4.0.6\",\r\n  \t\"jest-docblock\": \"25.2.6\",\r\n  \t\"json-stable-stringify\": \"1.0.1\",\r\n  \tleven: \"3.1.0\",\r\n  \t\"lines-and-columns\": \"1.1.6\",\r\n  \t\"linguist-languages\": \"7.9.0\",\r\n  \tlodash: \"4.17.15\",\r\n  \tmem: \"6.0.1\",\r\n  \tminimatch: \"3.0.4\",\r\n  \tminimist: \"1.2.5\",\r\n  \t\"n-readlines\": \"1.0.0\",\r\n  \t\"please-upgrade-node\": \"3.2.0\",\r\n  \t\"postcss-less\": \"3.1.4\",\r\n  \t\"postcss-media-query-parser\": \"0.2.3\",\r\n  \t\"postcss-scss\": \"2.0.0\",\r\n  \t\"postcss-selector-parser\": \"2.2.3\",\r\n  \t\"postcss-values-parser\": \"2.0.1\",\r\n  \t\"regexp-util\": \"1.2.2\",\r\n  \t\"remark-math\": \"1.0.6\",\r\n  \t\"remark-parse\": \"5.0.0\",\r\n  \tresolve: \"1.16.1\",\r\n  \tsemver: \"7.1.3\",\r\n  \tsrcset: \"2.0.1\",\r\n  \t\"string-width\": \"4.2.0\",\r\n  \ttypescript: \"3.8.3\",\r\n  \t\"unicode-regex\": \"3.0.0\",\r\n  \tunified: \"9.0.0\",\r\n  \tvnopts: \"1.0.2\",\r\n  \t\"yaml-unist-parser\": \"1.1.1\"\r\n  };\r\n  var devDependencies = {\r\n  \t\"@babel/core\": \"7.9.0\",\r\n  \t\"@babel/preset-env\": \"7.9.0\",\r\n  \t\"@rollup/plugin-alias\": \"3.0.1\",\r\n  \t\"@rollup/plugin-commonjs\": \"11.0.2\",\r\n  \t\"@rollup/plugin-json\": \"4.0.2\",\r\n  \t\"@rollup/plugin-node-resolve\": \"7.1.1\",\r\n  \t\"@rollup/plugin-replace\": \"2.3.1\",\r\n  \t\"babel-loader\": \"8.1.0\",\r\n  \tbenchmark: \"2.1.4\",\r\n  \t\"builtin-modules\": \"3.1.0\",\r\n  \tcodecov: \"3.6.5\",\r\n  \t\"cross-env\": \"7.0.2\",\r\n  \tcspell: \"4.0.55\",\r\n  \teslint: \"6.8.0\",\r\n  \t\"eslint-config-prettier\": \"6.10.1\",\r\n  \t\"eslint-formatter-friendly\": \"7.0.0\",\r\n  \t\"eslint-plugin-import\": \"2.20.2\",\r\n  \t\"eslint-plugin-prettier\": \"3.1.2\",\r\n  \t\"eslint-plugin-react\": \"7.19.0\",\r\n  \t\"eslint-plugin-unicorn\": \"18.0.1\",\r\n  \texeca: \"4.0.0\",\r\n  \tjest: \"25.2.7\",\r\n  \t\"jest-snapshot-serializer-ansi\": \"1.0.0\",\r\n  \t\"jest-snapshot-serializer-raw\": \"1.1.0\",\r\n  \t\"jest-watch-typeahead\": \"0.5.0\",\r\n  \tprettier: \"2.0.4\",\r\n  \trimraf: \"3.0.2\",\r\n  \trollup: \"2.3.2\",\r\n  \t\"rollup-plugin-babel\": \"4.4.0\",\r\n  \t\"rollup-plugin-node-globals\": \"1.4.0\",\r\n  \t\"rollup-plugin-terser\": \"5.3.0\",\r\n  \tshelljs: \"0.8.3\",\r\n  \t\"snapshot-diff\": \"0.7.0\",\r\n  \t\"strip-ansi\": \"6.0.0\",\r\n  \t\"synchronous-promise\": \"2.0.10\",\r\n  \ttempy: \"0.5.0\",\r\n  \t\"terser-webpack-plugin\": \"2.3.5\",\r\n  \twebpack: \"4.42.1\"\r\n  };\r\n  var scripts = {\r\n  \tprepublishOnly: \"echo \\\"Error: must publish from dist/\\\" && exit 1\",\r\n  \t\"prepare-release\": \"yarn && yarn build && yarn test:dist\",\r\n  \ttest: \"jest\",\r\n  \t\"test:dist\": \"cross-env NODE_ENV=production jest\",\r\n  \t\"test:dist-standalone\": \"cross-env NODE_ENV=production TEST_STANDALONE=1 jest tests/\",\r\n  \t\"test:integration\": \"jest tests_integration\",\r\n  \t\"perf:repeat\": \"yarn && yarn build && cross-env NODE_ENV=production node ./dist/bin-prettier.js --debug-repeat ${PERF_REPEAT:-1000} --loglevel debug ${PERF_FILE:-./index.js} > /dev/null\",\r\n  \t\"perf:repeat-inspect\": \"yarn && yarn build && cross-env NODE_ENV=production node --inspect-brk ./dist/bin-prettier.js --debug-repeat ${PERF_REPEAT:-1000} --loglevel debug ${PERF_FILE:-./index.js} > /dev/null\",\r\n  \t\"perf:benchmark\": \"yarn && yarn build && cross-env NODE_ENV=production node ./dist/bin-prettier.js --debug-benchmark --loglevel debug ${PERF_FILE:-./index.js} > /dev/null\",\r\n  \t\"lint:typecheck\": \"tsc\",\r\n  \t\"lint:eslint\": \"cross-env EFF_NO_LINK_RULES=true eslint . --format friendly\",\r\n  \t\"lint:changelog\": \"node ./scripts/lint-changelog.js\",\r\n  \t\"lint:prettier\": \"prettier \\\"**/*.{md,json,yml,html,css}\\\" --check\",\r\n  \t\"lint:dist\": \"eslint --no-eslintrc --no-ignore --env=es6,browser --parser-options=ecmaVersion:2016 \\\"dist/!(bin-prettier|index|third-party).js\\\"\",\r\n  \t\"lint:spellcheck\": \"cspell {bin,scripts,src,website}/**/*.js {docs,website/blog,changelog_unreleased}/**/*.md\",\r\n  \t\"lint:deps\": \"node ./scripts/check-deps.js\",\r\n  \tbuild: \"node --max-old-space-size=3072 ./scripts/build/build.js\",\r\n  \t\"build-docs\": \"node ./scripts/build-docs.js\"\r\n  };\r\n  var _package = {\r\n  \tname: name,\r\n  \tversion: version,\r\n  \tdescription: description,\r\n  \tbin: bin,\r\n  \trepository: repository,\r\n  \thomepage: homepage,\r\n  \tauthor: author,\r\n  \tlicense: license,\r\n  \tmain: main,\r\n  \tengines: engines,\r\n  \tdependencies: dependencies,\r\n  \tdevDependencies: devDependencies,\r\n  \tscripts: scripts\r\n  };\r\n\r\n  var _package$1 = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    name: name,\r\n    version: version,\r\n    description: description,\r\n    bin: bin,\r\n    repository: repository,\r\n    homepage: homepage,\r\n    author: author,\r\n    license: license,\r\n    main: main,\r\n    engines: engines,\r\n    dependencies: dependencies,\r\n    devDependencies: devDependencies,\r\n    scripts: scripts,\r\n    'default': _package\r\n  });\r\n\r\n  function Diff() {}\r\n\r\n  Diff.prototype = {\r\n    diff: function diff(oldString, newString) {\r\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n      var callback = options.callback;\r\n\r\n      if (typeof options === 'function') {\r\n        callback = options;\r\n        options = {};\r\n      }\r\n\r\n      this.options = options;\r\n      var self = this;\r\n\r\n      function done(value) {\r\n        if (callback) {\r\n          setTimeout(function () {\r\n            callback(undefined, value);\r\n          }, 0);\r\n          return true;\r\n        } else {\r\n          return value;\r\n        }\r\n      } // Allow subclasses to massage the input prior to running\r\n\r\n\r\n      oldString = this.castInput(oldString);\r\n      newString = this.castInput(newString);\r\n      oldString = this.removeEmpty(this.tokenize(oldString));\r\n      newString = this.removeEmpty(this.tokenize(newString));\r\n      var newLen = newString.length,\r\n          oldLen = oldString.length;\r\n      var editLength = 1;\r\n      var maxEditLength = newLen + oldLen;\r\n      var bestPath = [{\r\n        newPos: -1,\r\n        components: []\r\n      }]; // Seed editLength = 0, i.e. the content starts with the same values\r\n\r\n      var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);\r\n\r\n      if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\r\n        // Identity per the equality and tokenizer\r\n        return done([{\r\n          value: this.join(newString),\r\n          count: newString.length\r\n        }]);\r\n      } // Main worker method. checks all permutations of a given edit length for acceptance.\r\n\r\n\r\n      function execEditLength() {\r\n        for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {\r\n          var basePath = void 0;\r\n\r\n          var addPath = bestPath[diagonalPath - 1],\r\n              removePath = bestPath[diagonalPath + 1],\r\n              _oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;\r\n\r\n          if (addPath) {\r\n            // No one else is going to attempt to use this value, clear it\r\n            bestPath[diagonalPath - 1] = undefined;\r\n          }\r\n\r\n          var canAdd = addPath && addPath.newPos + 1 < newLen,\r\n              canRemove = removePath && 0 <= _oldPos && _oldPos < oldLen;\r\n\r\n          if (!canAdd && !canRemove) {\r\n            // If this path is a terminal then prune\r\n            bestPath[diagonalPath] = undefined;\r\n            continue;\r\n          } // Select the diagonal that we want to branch from. We select the prior\r\n          // path whose position in the new string is the farthest from the origin\r\n          // and does not pass the bounds of the diff graph\r\n\r\n\r\n          if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {\r\n            basePath = clonePath(removePath);\r\n            self.pushComponent(basePath.components, undefined, true);\r\n          } else {\r\n            basePath = addPath; // No need to clone, we've pulled it from the list\r\n\r\n            basePath.newPos++;\r\n            self.pushComponent(basePath.components, true, undefined);\r\n          }\r\n\r\n          _oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath); // If we have hit the end of both strings, then we are done\r\n\r\n          if (basePath.newPos + 1 >= newLen && _oldPos + 1 >= oldLen) {\r\n            return done(buildValues(self, basePath.components, newString, oldString, self.useLongestToken));\r\n          } else {\r\n            // Otherwise track this path as a potential candidate and continue.\r\n            bestPath[diagonalPath] = basePath;\r\n          }\r\n        }\r\n\r\n        editLength++;\r\n      } // Performs the length of edit iteration. Is a bit fugly as this has to support the\r\n      // sync and async mode which is never fun. Loops over execEditLength until a value\r\n      // is produced.\r\n\r\n\r\n      if (callback) {\r\n        (function exec() {\r\n          setTimeout(function () {\r\n            // This should not happen, but we want to be safe.\r\n\r\n            /* istanbul ignore next */\r\n            if (editLength > maxEditLength) {\r\n              return callback();\r\n            }\r\n\r\n            if (!execEditLength()) {\r\n              exec();\r\n            }\r\n          }, 0);\r\n        })();\r\n      } else {\r\n        while (editLength <= maxEditLength) {\r\n          var ret = execEditLength();\r\n\r\n          if (ret) {\r\n            return ret;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    pushComponent: function pushComponent(components, added, removed) {\r\n      var last = components[components.length - 1];\r\n\r\n      if (last && last.added === added && last.removed === removed) {\r\n        // We need to clone here as the component clone operation is just\r\n        // as shallow array clone\r\n        components[components.length - 1] = {\r\n          count: last.count + 1,\r\n          added: added,\r\n          removed: removed\r\n        };\r\n      } else {\r\n        components.push({\r\n          count: 1,\r\n          added: added,\r\n          removed: removed\r\n        });\r\n      }\r\n    },\r\n    extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {\r\n      var newLen = newString.length,\r\n          oldLen = oldString.length,\r\n          newPos = basePath.newPos,\r\n          oldPos = newPos - diagonalPath,\r\n          commonCount = 0;\r\n\r\n      while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {\r\n        newPos++;\r\n        oldPos++;\r\n        commonCount++;\r\n      }\r\n\r\n      if (commonCount) {\r\n        basePath.components.push({\r\n          count: commonCount\r\n        });\r\n      }\r\n\r\n      basePath.newPos = newPos;\r\n      return oldPos;\r\n    },\r\n    equals: function equals(left, right) {\r\n      if (this.options.comparator) {\r\n        return this.options.comparator(left, right);\r\n      } else {\r\n        return left === right || this.options.ignoreCase && left.toLowerCase() === right.toLowerCase();\r\n      }\r\n    },\r\n    removeEmpty: function removeEmpty(array) {\r\n      var ret = [];\r\n\r\n      for (var i = 0; i < array.length; i++) {\r\n        if (array[i]) {\r\n          ret.push(array[i]);\r\n        }\r\n      }\r\n\r\n      return ret;\r\n    },\r\n    castInput: function castInput(value) {\r\n      return value;\r\n    },\r\n    tokenize: function tokenize(value) {\r\n      return value.split('');\r\n    },\r\n    join: function join(chars) {\r\n      return chars.join('');\r\n    }\r\n  };\r\n\r\n  function buildValues(diff, components, newString, oldString, useLongestToken) {\r\n    var componentPos = 0,\r\n        componentLen = components.length,\r\n        newPos = 0,\r\n        oldPos = 0;\r\n\r\n    for (; componentPos < componentLen; componentPos++) {\r\n      var component = components[componentPos];\r\n\r\n      if (!component.removed) {\r\n        if (!component.added && useLongestToken) {\r\n          var value = newString.slice(newPos, newPos + component.count);\r\n          value = value.map(function (value, i) {\r\n            var oldValue = oldString[oldPos + i];\r\n            return oldValue.length > value.length ? oldValue : value;\r\n          });\r\n          component.value = diff.join(value);\r\n        } else {\r\n          component.value = diff.join(newString.slice(newPos, newPos + component.count));\r\n        }\r\n\r\n        newPos += component.count; // Common case\r\n\r\n        if (!component.added) {\r\n          oldPos += component.count;\r\n        }\r\n      } else {\r\n        component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));\r\n        oldPos += component.count; // Reverse add and remove so removes are output first to match common convention\r\n        // The diffing algorithm is tied to add then remove output and this is the simplest\r\n        // route to get the desired output with minimal overhead.\r\n\r\n        if (componentPos && components[componentPos - 1].added) {\r\n          var tmp = components[componentPos - 1];\r\n          components[componentPos - 1] = components[componentPos];\r\n          components[componentPos] = tmp;\r\n        }\r\n      }\r\n    } // Special case handle for when one terminal is ignored (i.e. whitespace).\r\n    // For this case we merge the terminal into the prior string and drop the change.\r\n    // This is only available for string mode.\r\n\r\n\r\n    var lastComponent = components[componentLen - 1];\r\n\r\n    if (componentLen > 1 && typeof lastComponent.value === 'string' && (lastComponent.added || lastComponent.removed) && diff.equals('', lastComponent.value)) {\r\n      components[componentLen - 2].value += lastComponent.value;\r\n      components.pop();\r\n    }\r\n\r\n    return components;\r\n  }\r\n\r\n  function clonePath(path) {\r\n    return {\r\n      newPos: path.newPos,\r\n      components: path.components.slice(0)\r\n    };\r\n  }\r\n\r\n  var characterDiff = new Diff();\r\n\r\n  function diffChars(oldStr, newStr, options) {\r\n    return characterDiff.diff(oldStr, newStr, options);\r\n  }\r\n\r\n  function generateOptions(options, defaults) {\r\n    if (typeof options === 'function') {\r\n      defaults.callback = options;\r\n    } else if (options) {\r\n      for (var name in options) {\r\n        /* istanbul ignore else */\r\n        if (options.hasOwnProperty(name)) {\r\n          defaults[name] = options[name];\r\n        }\r\n      }\r\n    }\r\n\r\n    return defaults;\r\n  } //\r\n  // Ranges and exceptions:\r\n  // Latin-1 Supplement, 0080–00FF\r\n  //  - U+00D7  × Multiplication sign\r\n  //  - U+00F7  ÷ Division sign\r\n  // Latin Extended-A, 0100–017F\r\n  // Latin Extended-B, 0180–024F\r\n  // IPA Extensions, 0250–02AF\r\n  // Spacing Modifier Letters, 02B0–02FF\r\n  //  - U+02C7  ˇ &#711;  Caron\r\n  //  - U+02D8  ˘ &#728;  Breve\r\n  //  - U+02D9  ˙ &#729;  Dot Above\r\n  //  - U+02DA  ˚ &#730;  Ring Above\r\n  //  - U+02DB  ˛ &#731;  Ogonek\r\n  //  - U+02DC  ˜ &#732;  Small Tilde\r\n  //  - U+02DD  ˝ &#733;  Double Acute Accent\r\n  // Latin Extended Additional, 1E00–1EFF\r\n\r\n\r\n  var extendedWordChars = /^[A-Za-z\\xC0-\\u02C6\\u02C8-\\u02D7\\u02DE-\\u02FF\\u1E00-\\u1EFF]+$/;\r\n  var reWhitespace = /\\S/;\r\n  var wordDiff = new Diff();\r\n\r\n  wordDiff.equals = function (left, right) {\r\n    if (this.options.ignoreCase) {\r\n      left = left.toLowerCase();\r\n      right = right.toLowerCase();\r\n    }\r\n\r\n    return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);\r\n  };\r\n\r\n  wordDiff.tokenize = function (value) {\r\n    var tokens = value.split(/(\\s+|[()[\\]{}'\"]|\\b)/); // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.\r\n\r\n    for (var i = 0; i < tokens.length - 1; i++) {\r\n      // If we have an empty string in the next field and we have only word chars before and after, merge\r\n      if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {\r\n        tokens[i] += tokens[i + 2];\r\n        tokens.splice(i + 1, 2);\r\n        i--;\r\n      }\r\n    }\r\n\r\n    return tokens;\r\n  };\r\n\r\n  function diffWords(oldStr, newStr, options) {\r\n    options = generateOptions(options, {\r\n      ignoreWhitespace: true\r\n    });\r\n    return wordDiff.diff(oldStr, newStr, options);\r\n  }\r\n\r\n  function diffWordsWithSpace(oldStr, newStr, options) {\r\n    return wordDiff.diff(oldStr, newStr, options);\r\n  }\r\n\r\n  var lineDiff = new Diff();\r\n\r\n  lineDiff.tokenize = function (value) {\r\n    var retLines = [],\r\n        linesAndNewlines = value.split(/(\\n|\\r\\n)/); // Ignore the final empty token that occurs if the string ends with a new line\r\n\r\n    if (!linesAndNewlines[linesAndNewlines.length - 1]) {\r\n      linesAndNewlines.pop();\r\n    } // Merge the content and line separators into single tokens\r\n\r\n\r\n    for (var i = 0; i < linesAndNewlines.length; i++) {\r\n      var line = linesAndNewlines[i];\r\n\r\n      if (i % 2 && !this.options.newlineIsToken) {\r\n        retLines[retLines.length - 1] += line;\r\n      } else {\r\n        if (this.options.ignoreWhitespace) {\r\n          line = line.trim();\r\n        }\r\n\r\n        retLines.push(line);\r\n      }\r\n    }\r\n\r\n    return retLines;\r\n  };\r\n\r\n  function diffLines(oldStr, newStr, callback) {\r\n    return lineDiff.diff(oldStr, newStr, callback);\r\n  }\r\n\r\n  function diffTrimmedLines(oldStr, newStr, callback) {\r\n    var options = generateOptions(callback, {\r\n      ignoreWhitespace: true\r\n    });\r\n    return lineDiff.diff(oldStr, newStr, options);\r\n  }\r\n\r\n  var sentenceDiff = new Diff();\r\n\r\n  sentenceDiff.tokenize = function (value) {\r\n    return value.split(/(\\S.+?[.!?])(?=\\s+|$)/);\r\n  };\r\n\r\n  function diffSentences(oldStr, newStr, callback) {\r\n    return sentenceDiff.diff(oldStr, newStr, callback);\r\n  }\r\n\r\n  var cssDiff = new Diff();\r\n\r\n  cssDiff.tokenize = function (value) {\r\n    return value.split(/([{}:;,]|\\s+)/);\r\n  };\r\n\r\n  function diffCss(oldStr, newStr, callback) {\r\n    return cssDiff.diff(oldStr, newStr, callback);\r\n  }\r\n\r\n  function _typeof(obj) {\r\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\r\n      _typeof = function _typeof(obj) {\r\n        return typeof obj;\r\n      };\r\n    } else {\r\n      _typeof = function _typeof(obj) {\r\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\r\n      };\r\n    }\r\n\r\n    return _typeof(obj);\r\n  }\r\n\r\n  function _toConsumableArray(arr) {\r\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\r\n  }\r\n\r\n  function _arrayWithoutHoles(arr) {\r\n    if (Array.isArray(arr)) {\r\n      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\r\n\r\n      return arr2;\r\n    }\r\n  }\r\n\r\n  function _iterableToArray(iter) {\r\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\r\n  }\r\n\r\n  function _nonIterableSpread() {\r\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\r\n  }\r\n\r\n  var objectPrototypeToString = Object.prototype.toString;\r\n  var jsonDiff = new Diff(); // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a\r\n  // dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:\r\n\r\n  jsonDiff.useLongestToken = true;\r\n  jsonDiff.tokenize = lineDiff.tokenize;\r\n\r\n  jsonDiff.castInput = function (value) {\r\n    var _this$options = this.options,\r\n        undefinedReplacement = _this$options.undefinedReplacement,\r\n        _this$options$stringi = _this$options.stringifyReplacer,\r\n        stringifyReplacer = _this$options$stringi === void 0 ? function (k, v) {\r\n      return typeof v === 'undefined' ? undefinedReplacement : v;\r\n    } : _this$options$stringi;\r\n    return typeof value === 'string' ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, '  ');\r\n  };\r\n\r\n  jsonDiff.equals = function (left, right) {\r\n    return Diff.prototype.equals.call(jsonDiff, left.replace(/,([\\r\\n])/g, '$1'), right.replace(/,([\\r\\n])/g, '$1'));\r\n  };\r\n\r\n  function diffJson(oldObj, newObj, options) {\r\n    return jsonDiff.diff(oldObj, newObj, options);\r\n  } // This function handles the presence of circular references by bailing out when encountering an\r\n  // object that is already on the \"stack\" of items being processed. Accepts an optional replacer\r\n\r\n\r\n  function canonicalize(obj, stack, replacementStack, replacer, key) {\r\n    stack = stack || [];\r\n    replacementStack = replacementStack || [];\r\n\r\n    if (replacer) {\r\n      obj = replacer(key, obj);\r\n    }\r\n\r\n    var i;\r\n\r\n    for (i = 0; i < stack.length; i += 1) {\r\n      if (stack[i] === obj) {\r\n        return replacementStack[i];\r\n      }\r\n    }\r\n\r\n    var canonicalizedObj;\r\n\r\n    if ('[object Array]' === objectPrototypeToString.call(obj)) {\r\n      stack.push(obj);\r\n      canonicalizedObj = new Array(obj.length);\r\n      replacementStack.push(canonicalizedObj);\r\n\r\n      for (i = 0; i < obj.length; i += 1) {\r\n        canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);\r\n      }\r\n\r\n      stack.pop();\r\n      replacementStack.pop();\r\n      return canonicalizedObj;\r\n    }\r\n\r\n    if (obj && obj.toJSON) {\r\n      obj = obj.toJSON();\r\n    }\r\n\r\n    if (_typeof(obj) === 'object' && obj !== null) {\r\n      stack.push(obj);\r\n      canonicalizedObj = {};\r\n      replacementStack.push(canonicalizedObj);\r\n\r\n      var sortedKeys = [],\r\n          _key;\r\n\r\n      for (_key in obj) {\r\n        /* istanbul ignore else */\r\n        if (obj.hasOwnProperty(_key)) {\r\n          sortedKeys.push(_key);\r\n        }\r\n      }\r\n\r\n      sortedKeys.sort();\r\n\r\n      for (i = 0; i < sortedKeys.length; i += 1) {\r\n        _key = sortedKeys[i];\r\n        canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);\r\n      }\r\n\r\n      stack.pop();\r\n      replacementStack.pop();\r\n    } else {\r\n      canonicalizedObj = obj;\r\n    }\r\n\r\n    return canonicalizedObj;\r\n  }\r\n\r\n  var arrayDiff = new Diff();\r\n\r\n  arrayDiff.tokenize = function (value) {\r\n    return value.slice();\r\n  };\r\n\r\n  arrayDiff.join = arrayDiff.removeEmpty = function (value) {\r\n    return value;\r\n  };\r\n\r\n  function diffArrays(oldArr, newArr, callback) {\r\n    return arrayDiff.diff(oldArr, newArr, callback);\r\n  }\r\n\r\n  function parsePatch(uniDiff) {\r\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n    var diffstr = uniDiff.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/),\r\n        delimiters = uniDiff.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [],\r\n        list = [],\r\n        i = 0;\r\n\r\n    function parseIndex() {\r\n      var index = {};\r\n      list.push(index); // Parse diff metadata\r\n\r\n      while (i < diffstr.length) {\r\n        var line = diffstr[i]; // File header found, end parsing diff metadata\r\n\r\n        if (/^(\\-\\-\\-|\\+\\+\\+|@@)\\s/.test(line)) {\r\n          break;\r\n        } // Diff index\r\n\r\n\r\n        var header = /^(?:Index:|diff(?: -r \\w+)+)\\s+(.+?)\\s*$/.exec(line);\r\n\r\n        if (header) {\r\n          index.index = header[1];\r\n        }\r\n\r\n        i++;\r\n      } // Parse file headers if they are defined. Unified diff requires them, but\r\n      // there's no technical issues to have an isolated hunk without file header\r\n\r\n\r\n      parseFileHeader(index);\r\n      parseFileHeader(index); // Parse hunks\r\n\r\n      index.hunks = [];\r\n\r\n      while (i < diffstr.length) {\r\n        var _line = diffstr[i];\r\n\r\n        if (/^(Index:|diff|\\-\\-\\-|\\+\\+\\+)\\s/.test(_line)) {\r\n          break;\r\n        } else if (/^@@/.test(_line)) {\r\n          index.hunks.push(parseHunk());\r\n        } else if (_line && options.strict) {\r\n          // Ignore unexpected content unless in strict mode\r\n          throw new Error('Unknown line ' + (i + 1) + ' ' + JSON.stringify(_line));\r\n        } else {\r\n          i++;\r\n        }\r\n      }\r\n    } // Parses the --- and +++ headers, if none are found, no lines\r\n    // are consumed.\r\n\r\n\r\n    function parseFileHeader(index) {\r\n      var fileHeader = /^(---|\\+\\+\\+)\\s+(.*)$/.exec(diffstr[i]);\r\n\r\n      if (fileHeader) {\r\n        var keyPrefix = fileHeader[1] === '---' ? 'old' : 'new';\r\n        var data = fileHeader[2].split('\\t', 2);\r\n        var fileName = data[0].replace(/\\\\\\\\/g, '\\\\');\r\n\r\n        if (/^\".*\"$/.test(fileName)) {\r\n          fileName = fileName.substr(1, fileName.length - 2);\r\n        }\r\n\r\n        index[keyPrefix + 'FileName'] = fileName;\r\n        index[keyPrefix + 'Header'] = (data[1] || '').trim();\r\n        i++;\r\n      }\r\n    } // Parses a hunk\r\n    // This assumes that we are at the start of a hunk.\r\n\r\n\r\n    function parseHunk() {\r\n      var chunkHeaderIndex = i,\r\n          chunkHeaderLine = diffstr[i++],\r\n          chunkHeader = chunkHeaderLine.split(/@@ -(\\d+)(?:,(\\d+))? \\+(\\d+)(?:,(\\d+))? @@/);\r\n      var hunk = {\r\n        oldStart: +chunkHeader[1],\r\n        oldLines: +chunkHeader[2] || 1,\r\n        newStart: +chunkHeader[3],\r\n        newLines: +chunkHeader[4] || 1,\r\n        lines: [],\r\n        linedelimiters: []\r\n      };\r\n      var addCount = 0,\r\n          removeCount = 0;\r\n\r\n      for (; i < diffstr.length; i++) {\r\n        // Lines starting with '---' could be mistaken for the \"remove line\" operation\r\n        // But they could be the header for the next file. Therefore prune such cases out.\r\n        if (diffstr[i].indexOf('--- ') === 0 && i + 2 < diffstr.length && diffstr[i + 1].indexOf('+++ ') === 0 && diffstr[i + 2].indexOf('@@') === 0) {\r\n          break;\r\n        }\r\n\r\n        var operation = diffstr[i].length == 0 && i != diffstr.length - 1 ? ' ' : diffstr[i][0];\r\n\r\n        if (operation === '+' || operation === '-' || operation === ' ' || operation === '\\\\') {\r\n          hunk.lines.push(diffstr[i]);\r\n          hunk.linedelimiters.push(delimiters[i] || '\\n');\r\n\r\n          if (operation === '+') {\r\n            addCount++;\r\n          } else if (operation === '-') {\r\n            removeCount++;\r\n          } else if (operation === ' ') {\r\n            addCount++;\r\n            removeCount++;\r\n          }\r\n        } else {\r\n          break;\r\n        }\r\n      } // Handle the empty block count case\r\n\r\n\r\n      if (!addCount && hunk.newLines === 1) {\r\n        hunk.newLines = 0;\r\n      }\r\n\r\n      if (!removeCount && hunk.oldLines === 1) {\r\n        hunk.oldLines = 0;\r\n      } // Perform optional sanity checking\r\n\r\n\r\n      if (options.strict) {\r\n        if (addCount !== hunk.newLines) {\r\n          throw new Error('Added line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\r\n        }\r\n\r\n        if (removeCount !== hunk.oldLines) {\r\n          throw new Error('Removed line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\r\n        }\r\n      }\r\n\r\n      return hunk;\r\n    }\r\n\r\n    while (i < diffstr.length) {\r\n      parseIndex();\r\n    }\r\n\r\n    return list;\r\n  } // Iterator that traverses in the range of [min, max], stepping\r\n  // by distance from a given start position. I.e. for [0, 4], with\r\n  // start of 2, this will iterate 2, 3, 1, 4, 0.\r\n\r\n\r\n  function distanceIterator(start, minLine, maxLine) {\r\n    var wantForward = true,\r\n        backwardExhausted = false,\r\n        forwardExhausted = false,\r\n        localOffset = 1;\r\n    return function iterator() {\r\n      if (wantForward && !forwardExhausted) {\r\n        if (backwardExhausted) {\r\n          localOffset++;\r\n        } else {\r\n          wantForward = false;\r\n        } // Check if trying to fit beyond text length, and if not, check it fits\r\n        // after offset location (or desired location on first iteration)\r\n\r\n\r\n        if (start + localOffset <= maxLine) {\r\n          return localOffset;\r\n        }\r\n\r\n        forwardExhausted = true;\r\n      }\r\n\r\n      if (!backwardExhausted) {\r\n        if (!forwardExhausted) {\r\n          wantForward = true;\r\n        } // Check if trying to fit before text beginning, and if not, check it fits\r\n        // before offset location\r\n\r\n\r\n        if (minLine <= start - localOffset) {\r\n          return -localOffset++;\r\n        }\r\n\r\n        backwardExhausted = true;\r\n        return iterator();\r\n      } // We tried to fit hunk before text beginning and beyond text length, then\r\n      // hunk can't fit on the text. Return undefined\r\n\r\n    };\r\n  }\r\n\r\n  function applyPatch(source, uniDiff) {\r\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n\r\n    if (typeof uniDiff === 'string') {\r\n      uniDiff = parsePatch(uniDiff);\r\n    }\r\n\r\n    if (Array.isArray(uniDiff)) {\r\n      if (uniDiff.length > 1) {\r\n        throw new Error('applyPatch only works with a single input.');\r\n      }\r\n\r\n      uniDiff = uniDiff[0];\r\n    } // Apply the diff to the input\r\n\r\n\r\n    var lines = source.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/),\r\n        delimiters = source.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [],\r\n        hunks = uniDiff.hunks,\r\n        compareLine = options.compareLine || function (lineNumber, line, operation, patchContent) {\r\n      return line === patchContent;\r\n    },\r\n        errorCount = 0,\r\n        fuzzFactor = options.fuzzFactor || 0,\r\n        minLine = 0,\r\n        offset = 0,\r\n        removeEOFNL,\r\n        addEOFNL;\r\n    /**\r\n     * Checks if the hunk exactly fits on the provided location\r\n     */\r\n\r\n\r\n    function hunkFits(hunk, toPos) {\r\n      for (var j = 0; j < hunk.lines.length; j++) {\r\n        var line = hunk.lines[j],\r\n            operation = line.length > 0 ? line[0] : ' ',\r\n            content = line.length > 0 ? line.substr(1) : line;\r\n\r\n        if (operation === ' ' || operation === '-') {\r\n          // Context sanity check\r\n          if (!compareLine(toPos + 1, lines[toPos], operation, content)) {\r\n            errorCount++;\r\n\r\n            if (errorCount > fuzzFactor) {\r\n              return false;\r\n            }\r\n          }\r\n\r\n          toPos++;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    } // Search best fit offsets for each hunk based on the previous ones\r\n\r\n\r\n    for (var i = 0; i < hunks.length; i++) {\r\n      var hunk = hunks[i],\r\n          maxLine = lines.length - hunk.oldLines,\r\n          localOffset = 0,\r\n          toPos = offset + hunk.oldStart - 1;\r\n      var iterator = distanceIterator(toPos, minLine, maxLine);\r\n\r\n      for (; localOffset !== undefined; localOffset = iterator()) {\r\n        if (hunkFits(hunk, toPos + localOffset)) {\r\n          hunk.offset = offset += localOffset;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (localOffset === undefined) {\r\n        return false;\r\n      } // Set lower text limit to end of the current hunk, so next ones don't try\r\n      // to fit over already patched text\r\n\r\n\r\n      minLine = hunk.offset + hunk.oldStart + hunk.oldLines;\r\n    } // Apply patch hunks\r\n\r\n\r\n    var diffOffset = 0;\r\n\r\n    for (var _i = 0; _i < hunks.length; _i++) {\r\n      var _hunk = hunks[_i],\r\n          _toPos = _hunk.oldStart + _hunk.offset + diffOffset - 1;\r\n\r\n      diffOffset += _hunk.newLines - _hunk.oldLines;\r\n\r\n      if (_toPos < 0) {\r\n        // Creating a new file\r\n        _toPos = 0;\r\n      }\r\n\r\n      for (var j = 0; j < _hunk.lines.length; j++) {\r\n        var line = _hunk.lines[j],\r\n            operation = line.length > 0 ? line[0] : ' ',\r\n            content = line.length > 0 ? line.substr(1) : line,\r\n            delimiter = _hunk.linedelimiters[j];\r\n\r\n        if (operation === ' ') {\r\n          _toPos++;\r\n        } else if (operation === '-') {\r\n          lines.splice(_toPos, 1);\r\n          delimiters.splice(_toPos, 1);\r\n          /* istanbul ignore else */\r\n        } else if (operation === '+') {\r\n          lines.splice(_toPos, 0, content);\r\n          delimiters.splice(_toPos, 0, delimiter);\r\n          _toPos++;\r\n        } else if (operation === '\\\\') {\r\n          var previousOperation = _hunk.lines[j - 1] ? _hunk.lines[j - 1][0] : null;\r\n\r\n          if (previousOperation === '+') {\r\n            removeEOFNL = true;\r\n          } else if (previousOperation === '-') {\r\n            addEOFNL = true;\r\n          }\r\n        }\r\n      }\r\n    } // Handle EOFNL insertion/removal\r\n\r\n\r\n    if (removeEOFNL) {\r\n      while (!lines[lines.length - 1]) {\r\n        lines.pop();\r\n        delimiters.pop();\r\n      }\r\n    } else if (addEOFNL) {\r\n      lines.push('');\r\n      delimiters.push('\\n');\r\n    }\r\n\r\n    for (var _k = 0; _k < lines.length - 1; _k++) {\r\n      lines[_k] = lines[_k] + delimiters[_k];\r\n    }\r\n\r\n    return lines.join('');\r\n  } // Wrapper that supports multiple file patches via callbacks.\r\n\r\n\r\n  function applyPatches(uniDiff, options) {\r\n    if (typeof uniDiff === 'string') {\r\n      uniDiff = parsePatch(uniDiff);\r\n    }\r\n\r\n    var currentIndex = 0;\r\n\r\n    function processIndex() {\r\n      var index = uniDiff[currentIndex++];\r\n\r\n      if (!index) {\r\n        return options.complete();\r\n      }\r\n\r\n      options.loadFile(index, function (err, data) {\r\n        if (err) {\r\n          return options.complete(err);\r\n        }\r\n\r\n        var updatedContent = applyPatch(data, index, options);\r\n        options.patched(index, updatedContent, function (err) {\r\n          if (err) {\r\n            return options.complete(err);\r\n          }\r\n\r\n          processIndex();\r\n        });\r\n      });\r\n    }\r\n\r\n    processIndex();\r\n  }\r\n\r\n  function structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\r\n    if (!options) {\r\n      options = {};\r\n    }\r\n\r\n    if (typeof options.context === 'undefined') {\r\n      options.context = 4;\r\n    }\r\n\r\n    var diff = diffLines(oldStr, newStr, options);\r\n    diff.push({\r\n      value: '',\r\n      lines: []\r\n    }); // Append an empty value to make cleanup easier\r\n\r\n    function contextLines(lines) {\r\n      return lines.map(function (entry) {\r\n        return ' ' + entry;\r\n      });\r\n    }\r\n\r\n    var hunks = [];\r\n    var oldRangeStart = 0,\r\n        newRangeStart = 0,\r\n        curRange = [],\r\n        oldLine = 1,\r\n        newLine = 1;\r\n\r\n    var _loop = function _loop(i) {\r\n      var current = diff[i],\r\n          lines = current.lines || current.value.replace(/\\n$/, '').split('\\n');\r\n      current.lines = lines;\r\n\r\n      if (current.added || current.removed) {\r\n        var _curRange; // If we have previous context, start with that\r\n\r\n\r\n        if (!oldRangeStart) {\r\n          var prev = diff[i - 1];\r\n          oldRangeStart = oldLine;\r\n          newRangeStart = newLine;\r\n\r\n          if (prev) {\r\n            curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];\r\n            oldRangeStart -= curRange.length;\r\n            newRangeStart -= curRange.length;\r\n          }\r\n        } // Output our changes\r\n\r\n\r\n        (_curRange = curRange).push.apply(_curRange, _toConsumableArray(lines.map(function (entry) {\r\n          return (current.added ? '+' : '-') + entry;\r\n        }))); // Track the updated file position\r\n\r\n\r\n        if (current.added) {\r\n          newLine += lines.length;\r\n        } else {\r\n          oldLine += lines.length;\r\n        }\r\n      } else {\r\n        // Identical context lines. Track line changes\r\n        if (oldRangeStart) {\r\n          // Close out any changes that have been output (or join overlapping)\r\n          if (lines.length <= options.context * 2 && i < diff.length - 2) {\r\n            var _curRange2; // Overlapping\r\n\r\n\r\n            (_curRange2 = curRange).push.apply(_curRange2, _toConsumableArray(contextLines(lines)));\r\n          } else {\r\n            var _curRange3; // end the range and output\r\n\r\n\r\n            var contextSize = Math.min(lines.length, options.context);\r\n\r\n            (_curRange3 = curRange).push.apply(_curRange3, _toConsumableArray(contextLines(lines.slice(0, contextSize))));\r\n\r\n            var hunk = {\r\n              oldStart: oldRangeStart,\r\n              oldLines: oldLine - oldRangeStart + contextSize,\r\n              newStart: newRangeStart,\r\n              newLines: newLine - newRangeStart + contextSize,\r\n              lines: curRange\r\n            };\r\n\r\n            if (i >= diff.length - 2 && lines.length <= options.context) {\r\n              // EOF is inside this hunk\r\n              var oldEOFNewline = /\\n$/.test(oldStr);\r\n              var newEOFNewline = /\\n$/.test(newStr);\r\n              var noNlBeforeAdds = lines.length == 0 && curRange.length > hunk.oldLines;\r\n\r\n              if (!oldEOFNewline && noNlBeforeAdds) {\r\n                // special case: old has no eol and no trailing context; no-nl can end up before adds\r\n                curRange.splice(hunk.oldLines, 0, '\\\\ No newline at end of file');\r\n              }\r\n\r\n              if (!oldEOFNewline && !noNlBeforeAdds || !newEOFNewline) {\r\n                curRange.push('\\\\ No newline at end of file');\r\n              }\r\n            }\r\n\r\n            hunks.push(hunk);\r\n            oldRangeStart = 0;\r\n            newRangeStart = 0;\r\n            curRange = [];\r\n          }\r\n        }\r\n\r\n        oldLine += lines.length;\r\n        newLine += lines.length;\r\n      }\r\n    };\r\n\r\n    for (var i = 0; i < diff.length; i++) {\r\n      _loop(i);\r\n    }\r\n\r\n    return {\r\n      oldFileName: oldFileName,\r\n      newFileName: newFileName,\r\n      oldHeader: oldHeader,\r\n      newHeader: newHeader,\r\n      hunks: hunks\r\n    };\r\n  }\r\n\r\n  function createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\r\n    var diff = structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options);\r\n    var ret = [];\r\n\r\n    if (oldFileName == newFileName) {\r\n      ret.push('Index: ' + oldFileName);\r\n    }\r\n\r\n    ret.push('===================================================================');\r\n    ret.push('--- ' + diff.oldFileName + (typeof diff.oldHeader === 'undefined' ? '' : '\\t' + diff.oldHeader));\r\n    ret.push('+++ ' + diff.newFileName + (typeof diff.newHeader === 'undefined' ? '' : '\\t' + diff.newHeader));\r\n\r\n    for (var i = 0; i < diff.hunks.length; i++) {\r\n      var hunk = diff.hunks[i];\r\n      ret.push('@@ -' + hunk.oldStart + ',' + hunk.oldLines + ' +' + hunk.newStart + ',' + hunk.newLines + ' @@');\r\n      ret.push.apply(ret, hunk.lines);\r\n    }\r\n\r\n    return ret.join('\\n') + '\\n';\r\n  }\r\n\r\n  function createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {\r\n    return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);\r\n  }\r\n\r\n  function arrayEqual(a, b) {\r\n    if (a.length !== b.length) {\r\n      return false;\r\n    }\r\n\r\n    return arrayStartsWith(a, b);\r\n  }\r\n\r\n  function arrayStartsWith(array, start) {\r\n    if (start.length > array.length) {\r\n      return false;\r\n    }\r\n\r\n    for (var i = 0; i < start.length; i++) {\r\n      if (start[i] !== array[i]) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function calcLineCount(hunk) {\r\n    var _calcOldNewLineCount = calcOldNewLineCount(hunk.lines),\r\n        oldLines = _calcOldNewLineCount.oldLines,\r\n        newLines = _calcOldNewLineCount.newLines;\r\n\r\n    if (oldLines !== undefined) {\r\n      hunk.oldLines = oldLines;\r\n    } else {\r\n      delete hunk.oldLines;\r\n    }\r\n\r\n    if (newLines !== undefined) {\r\n      hunk.newLines = newLines;\r\n    } else {\r\n      delete hunk.newLines;\r\n    }\r\n  }\r\n\r\n  function merge(mine, theirs, base) {\r\n    mine = loadPatch(mine, base);\r\n    theirs = loadPatch(theirs, base);\r\n    var ret = {}; // For index we just let it pass through as it doesn't have any necessary meaning.\r\n    // Leaving sanity checks on this to the API consumer that may know more about the\r\n    // meaning in their own context.\r\n\r\n    if (mine.index || theirs.index) {\r\n      ret.index = mine.index || theirs.index;\r\n    }\r\n\r\n    if (mine.newFileName || theirs.newFileName) {\r\n      if (!fileNameChanged(mine)) {\r\n        // No header or no change in ours, use theirs (and ours if theirs does not exist)\r\n        ret.oldFileName = theirs.oldFileName || mine.oldFileName;\r\n        ret.newFileName = theirs.newFileName || mine.newFileName;\r\n        ret.oldHeader = theirs.oldHeader || mine.oldHeader;\r\n        ret.newHeader = theirs.newHeader || mine.newHeader;\r\n      } else if (!fileNameChanged(theirs)) {\r\n        // No header or no change in theirs, use ours\r\n        ret.oldFileName = mine.oldFileName;\r\n        ret.newFileName = mine.newFileName;\r\n        ret.oldHeader = mine.oldHeader;\r\n        ret.newHeader = mine.newHeader;\r\n      } else {\r\n        // Both changed... figure it out\r\n        ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);\r\n        ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);\r\n        ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);\r\n        ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);\r\n      }\r\n    }\r\n\r\n    ret.hunks = [];\r\n    var mineIndex = 0,\r\n        theirsIndex = 0,\r\n        mineOffset = 0,\r\n        theirsOffset = 0;\r\n\r\n    while (mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length) {\r\n      var mineCurrent = mine.hunks[mineIndex] || {\r\n        oldStart: Infinity\r\n      },\r\n          theirsCurrent = theirs.hunks[theirsIndex] || {\r\n        oldStart: Infinity\r\n      };\r\n\r\n      if (hunkBefore(mineCurrent, theirsCurrent)) {\r\n        // This patch does not overlap with any of the others, yay.\r\n        ret.hunks.push(cloneHunk(mineCurrent, mineOffset));\r\n        mineIndex++;\r\n        theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;\r\n      } else if (hunkBefore(theirsCurrent, mineCurrent)) {\r\n        // This patch does not overlap with any of the others, yay.\r\n        ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));\r\n        theirsIndex++;\r\n        mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;\r\n      } else {\r\n        // Overlap, merge as best we can\r\n        var mergedHunk = {\r\n          oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),\r\n          oldLines: 0,\r\n          newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),\r\n          newLines: 0,\r\n          lines: []\r\n        };\r\n        mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);\r\n        theirsIndex++;\r\n        mineIndex++;\r\n        ret.hunks.push(mergedHunk);\r\n      }\r\n    }\r\n\r\n    return ret;\r\n  }\r\n\r\n  function loadPatch(param, base) {\r\n    if (typeof param === 'string') {\r\n      if (/^@@/m.test(param) || /^Index:/m.test(param)) {\r\n        return parsePatch(param)[0];\r\n      }\r\n\r\n      if (!base) {\r\n        throw new Error('Must provide a base reference or pass in a patch');\r\n      }\r\n\r\n      return structuredPatch(undefined, undefined, base, param);\r\n    }\r\n\r\n    return param;\r\n  }\r\n\r\n  function fileNameChanged(patch) {\r\n    return patch.newFileName && patch.newFileName !== patch.oldFileName;\r\n  }\r\n\r\n  function selectField(index, mine, theirs) {\r\n    if (mine === theirs) {\r\n      return mine;\r\n    } else {\r\n      index.conflict = true;\r\n      return {\r\n        mine: mine,\r\n        theirs: theirs\r\n      };\r\n    }\r\n  }\r\n\r\n  function hunkBefore(test, check) {\r\n    return test.oldStart < check.oldStart && test.oldStart + test.oldLines < check.oldStart;\r\n  }\r\n\r\n  function cloneHunk(hunk, offset) {\r\n    return {\r\n      oldStart: hunk.oldStart,\r\n      oldLines: hunk.oldLines,\r\n      newStart: hunk.newStart + offset,\r\n      newLines: hunk.newLines,\r\n      lines: hunk.lines\r\n    };\r\n  }\r\n\r\n  function mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {\r\n    // This will generally result in a conflicted hunk, but there are cases where the context\r\n    // is the only overlap where we can successfully merge the content here.\r\n    var mine = {\r\n      offset: mineOffset,\r\n      lines: mineLines,\r\n      index: 0\r\n    },\r\n        their = {\r\n      offset: theirOffset,\r\n      lines: theirLines,\r\n      index: 0\r\n    }; // Handle any leading content\r\n\r\n    insertLeading(hunk, mine, their);\r\n    insertLeading(hunk, their, mine); // Now in the overlap content. Scan through and select the best changes from each.\r\n\r\n    while (mine.index < mine.lines.length && their.index < their.lines.length) {\r\n      var mineCurrent = mine.lines[mine.index],\r\n          theirCurrent = their.lines[their.index];\r\n\r\n      if ((mineCurrent[0] === '-' || mineCurrent[0] === '+') && (theirCurrent[0] === '-' || theirCurrent[0] === '+')) {\r\n        // Both modified ...\r\n        mutualChange(hunk, mine, their);\r\n      } else if (mineCurrent[0] === '+' && theirCurrent[0] === ' ') {\r\n        var _hunk$lines; // Mine inserted\r\n\r\n\r\n        (_hunk$lines = hunk.lines).push.apply(_hunk$lines, _toConsumableArray(collectChange(mine)));\r\n      } else if (theirCurrent[0] === '+' && mineCurrent[0] === ' ') {\r\n        var _hunk$lines2; // Theirs inserted\r\n\r\n\r\n        (_hunk$lines2 = hunk.lines).push.apply(_hunk$lines2, _toConsumableArray(collectChange(their)));\r\n      } else if (mineCurrent[0] === '-' && theirCurrent[0] === ' ') {\r\n        // Mine removed or edited\r\n        removal(hunk, mine, their);\r\n      } else if (theirCurrent[0] === '-' && mineCurrent[0] === ' ') {\r\n        // Their removed or edited\r\n        removal(hunk, their, mine, true);\r\n      } else if (mineCurrent === theirCurrent) {\r\n        // Context identity\r\n        hunk.lines.push(mineCurrent);\r\n        mine.index++;\r\n        their.index++;\r\n      } else {\r\n        // Context mismatch\r\n        conflict(hunk, collectChange(mine), collectChange(their));\r\n      }\r\n    } // Now push anything that may be remaining\r\n\r\n\r\n    insertTrailing(hunk, mine);\r\n    insertTrailing(hunk, their);\r\n    calcLineCount(hunk);\r\n  }\r\n\r\n  function mutualChange(hunk, mine, their) {\r\n    var myChanges = collectChange(mine),\r\n        theirChanges = collectChange(their);\r\n\r\n    if (allRemoves(myChanges) && allRemoves(theirChanges)) {\r\n      // Special case for remove changes that are supersets of one another\r\n      if (arrayStartsWith(myChanges, theirChanges) && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {\r\n        var _hunk$lines3;\r\n\r\n        (_hunk$lines3 = hunk.lines).push.apply(_hunk$lines3, _toConsumableArray(myChanges));\r\n\r\n        return;\r\n      } else if (arrayStartsWith(theirChanges, myChanges) && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {\r\n        var _hunk$lines4;\r\n\r\n        (_hunk$lines4 = hunk.lines).push.apply(_hunk$lines4, _toConsumableArray(theirChanges));\r\n\r\n        return;\r\n      }\r\n    } else if (arrayEqual(myChanges, theirChanges)) {\r\n      var _hunk$lines5;\r\n\r\n      (_hunk$lines5 = hunk.lines).push.apply(_hunk$lines5, _toConsumableArray(myChanges));\r\n\r\n      return;\r\n    }\r\n\r\n    conflict(hunk, myChanges, theirChanges);\r\n  }\r\n\r\n  function removal(hunk, mine, their, swap) {\r\n    var myChanges = collectChange(mine),\r\n        theirChanges = collectContext(their, myChanges);\r\n\r\n    if (theirChanges.merged) {\r\n      var _hunk$lines6;\r\n\r\n      (_hunk$lines6 = hunk.lines).push.apply(_hunk$lines6, _toConsumableArray(theirChanges.merged));\r\n    } else {\r\n      conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges);\r\n    }\r\n  }\r\n\r\n  function conflict(hunk, mine, their) {\r\n    hunk.conflict = true;\r\n    hunk.lines.push({\r\n      conflict: true,\r\n      mine: mine,\r\n      theirs: their\r\n    });\r\n  }\r\n\r\n  function insertLeading(hunk, insert, their) {\r\n    while (insert.offset < their.offset && insert.index < insert.lines.length) {\r\n      var line = insert.lines[insert.index++];\r\n      hunk.lines.push(line);\r\n      insert.offset++;\r\n    }\r\n  }\r\n\r\n  function insertTrailing(hunk, insert) {\r\n    while (insert.index < insert.lines.length) {\r\n      var line = insert.lines[insert.index++];\r\n      hunk.lines.push(line);\r\n    }\r\n  }\r\n\r\n  function collectChange(state) {\r\n    var ret = [],\r\n        operation = state.lines[state.index][0];\r\n\r\n    while (state.index < state.lines.length) {\r\n      var line = state.lines[state.index]; // Group additions that are immediately after subtractions and treat them as one \"atomic\" modify change.\r\n\r\n      if (operation === '-' && line[0] === '+') {\r\n        operation = '+';\r\n      }\r\n\r\n      if (operation === line[0]) {\r\n        ret.push(line);\r\n        state.index++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return ret;\r\n  }\r\n\r\n  function collectContext(state, matchChanges) {\r\n    var changes = [],\r\n        merged = [],\r\n        matchIndex = 0,\r\n        contextChanges = false,\r\n        conflicted = false;\r\n\r\n    while (matchIndex < matchChanges.length && state.index < state.lines.length) {\r\n      var change = state.lines[state.index],\r\n          match = matchChanges[matchIndex]; // Once we've hit our add, then we are done\r\n\r\n      if (match[0] === '+') {\r\n        break;\r\n      }\r\n\r\n      contextChanges = contextChanges || change[0] !== ' ';\r\n      merged.push(match);\r\n      matchIndex++; // Consume any additions in the other block as a conflict to attempt\r\n      // to pull in the remaining context after this\r\n\r\n      if (change[0] === '+') {\r\n        conflicted = true;\r\n\r\n        while (change[0] === '+') {\r\n          changes.push(change);\r\n          change = state.lines[++state.index];\r\n        }\r\n      }\r\n\r\n      if (match.substr(1) === change.substr(1)) {\r\n        changes.push(change);\r\n        state.index++;\r\n      } else {\r\n        conflicted = true;\r\n      }\r\n    }\r\n\r\n    if ((matchChanges[matchIndex] || '')[0] === '+' && contextChanges) {\r\n      conflicted = true;\r\n    }\r\n\r\n    if (conflicted) {\r\n      return changes;\r\n    }\r\n\r\n    while (matchIndex < matchChanges.length) {\r\n      merged.push(matchChanges[matchIndex++]);\r\n    }\r\n\r\n    return {\r\n      merged: merged,\r\n      changes: changes\r\n    };\r\n  }\r\n\r\n  function allRemoves(changes) {\r\n    return changes.reduce(function (prev, change) {\r\n      return prev && change[0] === '-';\r\n    }, true);\r\n  }\r\n\r\n  function skipRemoveSuperset(state, removeChanges, delta) {\r\n    for (var i = 0; i < delta; i++) {\r\n      var changeContent = removeChanges[removeChanges.length - delta + i].substr(1);\r\n\r\n      if (state.lines[state.index + i] !== ' ' + changeContent) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    state.index += delta;\r\n    return true;\r\n  }\r\n\r\n  function calcOldNewLineCount(lines) {\r\n    var oldLines = 0;\r\n    var newLines = 0;\r\n    lines.forEach(function (line) {\r\n      if (typeof line !== 'string') {\r\n        var myCount = calcOldNewLineCount(line.mine);\r\n        var theirCount = calcOldNewLineCount(line.theirs);\r\n\r\n        if (oldLines !== undefined) {\r\n          if (myCount.oldLines === theirCount.oldLines) {\r\n            oldLines += myCount.oldLines;\r\n          } else {\r\n            oldLines = undefined;\r\n          }\r\n        }\r\n\r\n        if (newLines !== undefined) {\r\n          if (myCount.newLines === theirCount.newLines) {\r\n            newLines += myCount.newLines;\r\n          } else {\r\n            newLines = undefined;\r\n          }\r\n        }\r\n      } else {\r\n        if (newLines !== undefined && (line[0] === '+' || line[0] === ' ')) {\r\n          newLines++;\r\n        }\r\n\r\n        if (oldLines !== undefined && (line[0] === '-' || line[0] === ' ')) {\r\n          oldLines++;\r\n        }\r\n      }\r\n    });\r\n    return {\r\n      oldLines: oldLines,\r\n      newLines: newLines\r\n    };\r\n  } // See: http://code.google.com/p/google-diff-match-patch/wiki/API\r\n\r\n\r\n  function convertChangesToDMP(changes) {\r\n    var ret = [],\r\n        change,\r\n        operation;\r\n\r\n    for (var i = 0; i < changes.length; i++) {\r\n      change = changes[i];\r\n\r\n      if (change.added) {\r\n        operation = 1;\r\n      } else if (change.removed) {\r\n        operation = -1;\r\n      } else {\r\n        operation = 0;\r\n      }\r\n\r\n      ret.push([operation, change.value]);\r\n    }\r\n\r\n    return ret;\r\n  }\r\n\r\n  function convertChangesToXML(changes) {\r\n    var ret = [];\r\n\r\n    for (var i = 0; i < changes.length; i++) {\r\n      var change = changes[i];\r\n\r\n      if (change.added) {\r\n        ret.push('<ins>');\r\n      } else if (change.removed) {\r\n        ret.push('<del>');\r\n      }\r\n\r\n      ret.push(escapeHTML(change.value));\r\n\r\n      if (change.added) {\r\n        ret.push('</ins>');\r\n      } else if (change.removed) {\r\n        ret.push('</del>');\r\n      }\r\n    }\r\n\r\n    return ret.join('');\r\n  }\r\n\r\n  function escapeHTML(s) {\r\n    var n = s;\r\n    n = n.replace(/&/g, '&amp;');\r\n    n = n.replace(/</g, '&lt;');\r\n    n = n.replace(/>/g, '&gt;');\r\n    n = n.replace(/\"/g, '&quot;');\r\n    return n;\r\n  }\r\n\r\n  var index_es6 = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    Diff: Diff,\r\n    diffChars: diffChars,\r\n    diffWords: diffWords,\r\n    diffWordsWithSpace: diffWordsWithSpace,\r\n    diffLines: diffLines,\r\n    diffTrimmedLines: diffTrimmedLines,\r\n    diffSentences: diffSentences,\r\n    diffCss: diffCss,\r\n    diffJson: diffJson,\r\n    diffArrays: diffArrays,\r\n    structuredPatch: structuredPatch,\r\n    createTwoFilesPatch: createTwoFilesPatch,\r\n    createPatch: createPatch,\r\n    applyPatch: applyPatch,\r\n    applyPatches: applyPatches,\r\n    parsePatch: parsePatch,\r\n    merge: merge,\r\n    convertChangesToDMP: convertChangesToDMP,\r\n    convertChangesToXML: convertChangesToXML,\r\n    canonicalize: canonicalize\r\n  });\r\n\r\n  var _shim_fs = {};\r\n\r\n  var _shim_fs$1 = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    'default': _shim_fs\r\n  });\r\n\r\n  const sep = /[\\\\/]/;\r\n  function extname(path) {\r\n    const filename = basename(path);\r\n    const dotIndex = filename.lastIndexOf(\".\");\r\n    if (dotIndex === -1) return \"\";\r\n    return filename.slice(dotIndex);\r\n  }\r\n  function basename(path) {\r\n    return path.split(sep).pop();\r\n  }\r\n  function isAbsolute() {\r\n    return true;\r\n  }\r\n\r\n  var path = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    extname: extname,\r\n    basename: basename,\r\n    isAbsolute: isAbsolute\r\n  });\r\n\r\n  var global$1 = typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {};\r\n\r\n  var lookup = [];\r\n  var revLookup = [];\r\n  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\r\n  var inited = false;\r\n\r\n  function init() {\r\n    inited = true;\r\n    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n    for (var i = 0, len = code.length; i < len; ++i) {\r\n      lookup[i] = code[i];\r\n      revLookup[code.charCodeAt(i)] = i;\r\n    }\r\n\r\n    revLookup['-'.charCodeAt(0)] = 62;\r\n    revLookup['_'.charCodeAt(0)] = 63;\r\n  }\r\n\r\n  function toByteArray(b64) {\r\n    if (!inited) {\r\n      init();\r\n    }\r\n\r\n    var i, j, l, tmp, placeHolders, arr;\r\n    var len = b64.length;\r\n\r\n    if (len % 4 > 0) {\r\n      throw new Error('Invalid string. Length must be a multiple of 4');\r\n    } // the number of equal signs (place holders)\r\n    // if there are two placeholders, than the two characters before it\r\n    // represent one byte\r\n    // if there is only one, then the three characters before it represent 2 bytes\r\n    // this is just a cheap hack to not do indexOf twice\r\n\r\n\r\n    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0; // base64 is 4/3 + up to two characters of the original data\r\n\r\n    arr = new Arr(len * 3 / 4 - placeHolders); // if there are placeholders, only get up to the last complete 4 chars\r\n\r\n    l = placeHolders > 0 ? len - 4 : len;\r\n    var L = 0;\r\n\r\n    for (i = 0, j = 0; i < l; i += 4, j += 3) {\r\n      tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\r\n      arr[L++] = tmp >> 16 & 0xFF;\r\n      arr[L++] = tmp >> 8 & 0xFF;\r\n      arr[L++] = tmp & 0xFF;\r\n    }\r\n\r\n    if (placeHolders === 2) {\r\n      tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\r\n      arr[L++] = tmp & 0xFF;\r\n    } else if (placeHolders === 1) {\r\n      tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\r\n      arr[L++] = tmp >> 8 & 0xFF;\r\n      arr[L++] = tmp & 0xFF;\r\n    }\r\n\r\n    return arr;\r\n  }\r\n\r\n  function tripletToBase64(num) {\r\n    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\r\n  }\r\n\r\n  function encodeChunk(uint8, start, end) {\r\n    var tmp;\r\n    var output = [];\r\n\r\n    for (var i = start; i < end; i += 3) {\r\n      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];\r\n      output.push(tripletToBase64(tmp));\r\n    }\r\n\r\n    return output.join('');\r\n  }\r\n\r\n  function fromByteArray(uint8) {\r\n    if (!inited) {\r\n      init();\r\n    }\r\n\r\n    var tmp;\r\n    var len = uint8.length;\r\n    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\r\n\r\n    var output = '';\r\n    var parts = [];\r\n    var maxChunkLength = 16383; // must be multiple of 3\r\n    // go through the array every three bytes, we'll deal with trailing stuff later\r\n\r\n    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\r\n      parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\r\n    } // pad the end with zeros, but make sure to not forget the extra bytes\r\n\r\n\r\n    if (extraBytes === 1) {\r\n      tmp = uint8[len - 1];\r\n      output += lookup[tmp >> 2];\r\n      output += lookup[tmp << 4 & 0x3F];\r\n      output += '==';\r\n    } else if (extraBytes === 2) {\r\n      tmp = (uint8[len - 2] << 8) + uint8[len - 1];\r\n      output += lookup[tmp >> 10];\r\n      output += lookup[tmp >> 4 & 0x3F];\r\n      output += lookup[tmp << 2 & 0x3F];\r\n      output += '=';\r\n    }\r\n\r\n    parts.push(output);\r\n    return parts.join('');\r\n  }\r\n\r\n  function read(buffer, offset, isLE, mLen, nBytes) {\r\n    var e, m;\r\n    var eLen = nBytes * 8 - mLen - 1;\r\n    var eMax = (1 << eLen) - 1;\r\n    var eBias = eMax >> 1;\r\n    var nBits = -7;\r\n    var i = isLE ? nBytes - 1 : 0;\r\n    var d = isLE ? -1 : 1;\r\n    var s = buffer[offset + i];\r\n    i += d;\r\n    e = s & (1 << -nBits) - 1;\r\n    s >>= -nBits;\r\n    nBits += eLen;\r\n\r\n    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\r\n\r\n    m = e & (1 << -nBits) - 1;\r\n    e >>= -nBits;\r\n    nBits += mLen;\r\n\r\n    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\r\n\r\n    if (e === 0) {\r\n      e = 1 - eBias;\r\n    } else if (e === eMax) {\r\n      return m ? NaN : (s ? -1 : 1) * Infinity;\r\n    } else {\r\n      m = m + Math.pow(2, mLen);\r\n      e = e - eBias;\r\n    }\r\n\r\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\r\n  }\r\n  function write(buffer, value, offset, isLE, mLen, nBytes) {\r\n    var e, m, c;\r\n    var eLen = nBytes * 8 - mLen - 1;\r\n    var eMax = (1 << eLen) - 1;\r\n    var eBias = eMax >> 1;\r\n    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\r\n    var i = isLE ? 0 : nBytes - 1;\r\n    var d = isLE ? 1 : -1;\r\n    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\r\n    value = Math.abs(value);\r\n\r\n    if (isNaN(value) || value === Infinity) {\r\n      m = isNaN(value) ? 1 : 0;\r\n      e = eMax;\r\n    } else {\r\n      e = Math.floor(Math.log(value) / Math.LN2);\r\n\r\n      if (value * (c = Math.pow(2, -e)) < 1) {\r\n        e--;\r\n        c *= 2;\r\n      }\r\n\r\n      if (e + eBias >= 1) {\r\n        value += rt / c;\r\n      } else {\r\n        value += rt * Math.pow(2, 1 - eBias);\r\n      }\r\n\r\n      if (value * c >= 2) {\r\n        e++;\r\n        c /= 2;\r\n      }\r\n\r\n      if (e + eBias >= eMax) {\r\n        m = 0;\r\n        e = eMax;\r\n      } else if (e + eBias >= 1) {\r\n        m = (value * c - 1) * Math.pow(2, mLen);\r\n        e = e + eBias;\r\n      } else {\r\n        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\r\n        e = 0;\r\n      }\r\n    }\r\n\r\n    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\r\n\r\n    e = e << mLen | m;\r\n    eLen += mLen;\r\n\r\n    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\r\n\r\n    buffer[offset + i - d] |= s * 128;\r\n  }\r\n\r\n  var toString = {}.toString;\r\n  var isArray = Array.isArray || function (arr) {\r\n    return toString.call(arr) == '[object Array]';\r\n  };\r\n\r\n  var INSPECT_MAX_BYTES = 50;\r\n  /**\r\n   * If `Buffer.TYPED_ARRAY_SUPPORT`:\r\n   *   === true    Use Uint8Array implementation (fastest)\r\n   *   === false   Use Object implementation (most compatible, even IE6)\r\n   *\r\n   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\r\n   * Opera 11.6+, iOS 4.2+.\r\n   *\r\n   * Due to various browser bugs, sometimes the Object implementation will be used even\r\n   * when the browser supports typed arrays.\r\n   *\r\n   * Note:\r\n   *\r\n   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\r\n   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\r\n   *\r\n   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\r\n   *\r\n   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\r\n   *     incorrect length in some situations.\r\n\r\n   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\r\n   * get the Object implementation, which is slower but behaves correctly.\r\n   */\r\n\r\n  Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined ? global$1.TYPED_ARRAY_SUPPORT : true;\r\n\r\n  function kMaxLength() {\r\n    return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;\r\n  }\r\n\r\n  function createBuffer(that, length) {\r\n    if (kMaxLength() < length) {\r\n      throw new RangeError('Invalid typed array length');\r\n    }\r\n\r\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\r\n      // Return an augmented `Uint8Array` instance, for best performance\r\n      that = new Uint8Array(length);\r\n      that.__proto__ = Buffer.prototype;\r\n    } else {\r\n      // Fallback: Return an object instance of the Buffer class\r\n      if (that === null) {\r\n        that = new Buffer(length);\r\n      }\r\n\r\n      that.length = length;\r\n    }\r\n\r\n    return that;\r\n  }\r\n  /**\r\n   * The Buffer constructor returns instances of `Uint8Array` that have their\r\n   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\r\n   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\r\n   * and the `Uint8Array` methods. Square bracket notation works as expected -- it\r\n   * returns a single octet.\r\n   *\r\n   * The `Uint8Array` prototype remains unmodified.\r\n   */\r\n\r\n\r\n  function Buffer(arg, encodingOrOffset, length) {\r\n    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\r\n      return new Buffer(arg, encodingOrOffset, length);\r\n    } // Common case.\r\n\r\n\r\n    if (typeof arg === 'number') {\r\n      if (typeof encodingOrOffset === 'string') {\r\n        throw new Error('If encoding is specified then the first argument must be a string');\r\n      }\r\n\r\n      return allocUnsafe(this, arg);\r\n    }\r\n\r\n    return from(this, arg, encodingOrOffset, length);\r\n  }\r\n  Buffer.poolSize = 8192; // not used by this implementation\r\n  // TODO: Legacy, not needed anymore. Remove in next major version.\r\n\r\n  Buffer._augment = function (arr) {\r\n    arr.__proto__ = Buffer.prototype;\r\n    return arr;\r\n  };\r\n\r\n  function from(that, value, encodingOrOffset, length) {\r\n    if (typeof value === 'number') {\r\n      throw new TypeError('\"value\" argument must not be a number');\r\n    }\r\n\r\n    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\r\n      return fromArrayBuffer(that, value, encodingOrOffset, length);\r\n    }\r\n\r\n    if (typeof value === 'string') {\r\n      return fromString(that, value, encodingOrOffset);\r\n    }\r\n\r\n    return fromObject(that, value);\r\n  }\r\n  /**\r\n   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\r\n   * if value is a number.\r\n   * Buffer.from(str[, encoding])\r\n   * Buffer.from(array)\r\n   * Buffer.from(buffer)\r\n   * Buffer.from(arrayBuffer[, byteOffset[, length]])\r\n   **/\r\n\r\n\r\n  Buffer.from = function (value, encodingOrOffset, length) {\r\n    return from(null, value, encodingOrOffset, length);\r\n  };\r\n\r\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\r\n    Buffer.prototype.__proto__ = Uint8Array.prototype;\r\n    Buffer.__proto__ = Uint8Array;\r\n  }\r\n\r\n  function assertSize(size) {\r\n    if (typeof size !== 'number') {\r\n      throw new TypeError('\"size\" argument must be a number');\r\n    } else if (size < 0) {\r\n      throw new RangeError('\"size\" argument must not be negative');\r\n    }\r\n  }\r\n\r\n  function alloc(that, size, fill, encoding) {\r\n    assertSize(size);\r\n\r\n    if (size <= 0) {\r\n      return createBuffer(that, size);\r\n    }\r\n\r\n    if (fill !== undefined) {\r\n      // Only pay attention to encoding if it's a string. This\r\n      // prevents accidentally sending in a number that would\r\n      // be interpretted as a start offset.\r\n      return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);\r\n    }\r\n\r\n    return createBuffer(that, size);\r\n  }\r\n  /**\r\n   * Creates a new filled Buffer instance.\r\n   * alloc(size[, fill[, encoding]])\r\n   **/\r\n\r\n\r\n  Buffer.alloc = function (size, fill, encoding) {\r\n    return alloc(null, size, fill, encoding);\r\n  };\r\n\r\n  function allocUnsafe(that, size) {\r\n    assertSize(size);\r\n    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\r\n\r\n    if (!Buffer.TYPED_ARRAY_SUPPORT) {\r\n      for (var i = 0; i < size; ++i) {\r\n        that[i] = 0;\r\n      }\r\n    }\r\n\r\n    return that;\r\n  }\r\n  /**\r\n   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\r\n   * */\r\n\r\n\r\n  Buffer.allocUnsafe = function (size) {\r\n    return allocUnsafe(null, size);\r\n  };\r\n  /**\r\n   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\r\n   */\r\n\r\n\r\n  Buffer.allocUnsafeSlow = function (size) {\r\n    return allocUnsafe(null, size);\r\n  };\r\n\r\n  function fromString(that, string, encoding) {\r\n    if (typeof encoding !== 'string' || encoding === '') {\r\n      encoding = 'utf8';\r\n    }\r\n\r\n    if (!Buffer.isEncoding(encoding)) {\r\n      throw new TypeError('\"encoding\" must be a valid string encoding');\r\n    }\r\n\r\n    var length = byteLength(string, encoding) | 0;\r\n    that = createBuffer(that, length);\r\n    var actual = that.write(string, encoding);\r\n\r\n    if (actual !== length) {\r\n      // Writing a hex string, for example, that contains invalid characters will\r\n      // cause everything after the first invalid character to be ignored. (e.g.\r\n      // 'abxxcd' will be treated as 'ab')\r\n      that = that.slice(0, actual);\r\n    }\r\n\r\n    return that;\r\n  }\r\n\r\n  function fromArrayLike(that, array) {\r\n    var length = array.length < 0 ? 0 : checked(array.length) | 0;\r\n    that = createBuffer(that, length);\r\n\r\n    for (var i = 0; i < length; i += 1) {\r\n      that[i] = array[i] & 255;\r\n    }\r\n\r\n    return that;\r\n  }\r\n\r\n  function fromArrayBuffer(that, array, byteOffset, length) {\r\n    array.byteLength; // this throws if `array` is not a valid ArrayBuffer\r\n\r\n    if (byteOffset < 0 || array.byteLength < byteOffset) {\r\n      throw new RangeError('\\'offset\\' is out of bounds');\r\n    }\r\n\r\n    if (array.byteLength < byteOffset + (length || 0)) {\r\n      throw new RangeError('\\'length\\' is out of bounds');\r\n    }\r\n\r\n    if (byteOffset === undefined && length === undefined) {\r\n      array = new Uint8Array(array);\r\n    } else if (length === undefined) {\r\n      array = new Uint8Array(array, byteOffset);\r\n    } else {\r\n      array = new Uint8Array(array, byteOffset, length);\r\n    }\r\n\r\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\r\n      // Return an augmented `Uint8Array` instance, for best performance\r\n      that = array;\r\n      that.__proto__ = Buffer.prototype;\r\n    } else {\r\n      // Fallback: Return an object instance of the Buffer class\r\n      that = fromArrayLike(that, array);\r\n    }\r\n\r\n    return that;\r\n  }\r\n\r\n  function fromObject(that, obj) {\r\n    if (internalIsBuffer(obj)) {\r\n      var len = checked(obj.length) | 0;\r\n      that = createBuffer(that, len);\r\n\r\n      if (that.length === 0) {\r\n        return that;\r\n      }\r\n\r\n      obj.copy(that, 0, 0, len);\r\n      return that;\r\n    }\r\n\r\n    if (obj) {\r\n      if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {\r\n        if (typeof obj.length !== 'number' || isnan(obj.length)) {\r\n          return createBuffer(that, 0);\r\n        }\r\n\r\n        return fromArrayLike(that, obj);\r\n      }\r\n\r\n      if (obj.type === 'Buffer' && isArray(obj.data)) {\r\n        return fromArrayLike(that, obj.data);\r\n      }\r\n    }\r\n\r\n    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');\r\n  }\r\n\r\n  function checked(length) {\r\n    // Note: cannot use `length < kMaxLength()` here because that fails when\r\n    // length is NaN (which is otherwise coerced to zero.)\r\n    if (length >= kMaxLength()) {\r\n      throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');\r\n    }\r\n\r\n    return length | 0;\r\n  }\r\n  Buffer.isBuffer = isBuffer;\r\n\r\n  function internalIsBuffer(b) {\r\n    return !!(b != null && b._isBuffer);\r\n  }\r\n\r\n  Buffer.compare = function compare(a, b) {\r\n    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {\r\n      throw new TypeError('Arguments must be Buffers');\r\n    }\r\n\r\n    if (a === b) return 0;\r\n    var x = a.length;\r\n    var y = b.length;\r\n\r\n    for (var i = 0, len = Math.min(x, y); i < len; ++i) {\r\n      if (a[i] !== b[i]) {\r\n        x = a[i];\r\n        y = b[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (x < y) return -1;\r\n    if (y < x) return 1;\r\n    return 0;\r\n  };\r\n\r\n  Buffer.isEncoding = function isEncoding(encoding) {\r\n    switch (String(encoding).toLowerCase()) {\r\n      case 'hex':\r\n      case 'utf8':\r\n      case 'utf-8':\r\n      case 'ascii':\r\n      case 'latin1':\r\n      case 'binary':\r\n      case 'base64':\r\n      case 'ucs2':\r\n      case 'ucs-2':\r\n      case 'utf16le':\r\n      case 'utf-16le':\r\n        return true;\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  };\r\n\r\n  Buffer.concat = function concat(list, length) {\r\n    if (!isArray(list)) {\r\n      throw new TypeError('\"list\" argument must be an Array of Buffers');\r\n    }\r\n\r\n    if (list.length === 0) {\r\n      return Buffer.alloc(0);\r\n    }\r\n\r\n    var i;\r\n\r\n    if (length === undefined) {\r\n      length = 0;\r\n\r\n      for (i = 0; i < list.length; ++i) {\r\n        length += list[i].length;\r\n      }\r\n    }\r\n\r\n    var buffer = Buffer.allocUnsafe(length);\r\n    var pos = 0;\r\n\r\n    for (i = 0; i < list.length; ++i) {\r\n      var buf = list[i];\r\n\r\n      if (!internalIsBuffer(buf)) {\r\n        throw new TypeError('\"list\" argument must be an Array of Buffers');\r\n      }\r\n\r\n      buf.copy(buffer, pos);\r\n      pos += buf.length;\r\n    }\r\n\r\n    return buffer;\r\n  };\r\n\r\n  function byteLength(string, encoding) {\r\n    if (internalIsBuffer(string)) {\r\n      return string.length;\r\n    }\r\n\r\n    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\r\n      return string.byteLength;\r\n    }\r\n\r\n    if (typeof string !== 'string') {\r\n      string = '' + string;\r\n    }\r\n\r\n    var len = string.length;\r\n    if (len === 0) return 0; // Use a for loop to avoid recursion\r\n\r\n    var loweredCase = false;\r\n\r\n    for (;;) {\r\n      switch (encoding) {\r\n        case 'ascii':\r\n        case 'latin1':\r\n        case 'binary':\r\n          return len;\r\n\r\n        case 'utf8':\r\n        case 'utf-8':\r\n        case undefined:\r\n          return utf8ToBytes(string).length;\r\n\r\n        case 'ucs2':\r\n        case 'ucs-2':\r\n        case 'utf16le':\r\n        case 'utf-16le':\r\n          return len * 2;\r\n\r\n        case 'hex':\r\n          return len >>> 1;\r\n\r\n        case 'base64':\r\n          return base64ToBytes(string).length;\r\n\r\n        default:\r\n          if (loweredCase) return utf8ToBytes(string).length; // assume utf8\r\n\r\n          encoding = ('' + encoding).toLowerCase();\r\n          loweredCase = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  Buffer.byteLength = byteLength;\r\n\r\n  function slowToString(encoding, start, end) {\r\n    var loweredCase = false; // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\r\n    // property of a typed array.\r\n    // This behaves neither like String nor Uint8Array in that we set start/end\r\n    // to their upper/lower bounds if the value passed is out of range.\r\n    // undefined is handled specially as per ECMA-262 6th Edition,\r\n    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\r\n\r\n    if (start === undefined || start < 0) {\r\n      start = 0;\r\n    } // Return early if start > this.length. Done here to prevent potential uint32\r\n    // coercion fail below.\r\n\r\n\r\n    if (start > this.length) {\r\n      return '';\r\n    }\r\n\r\n    if (end === undefined || end > this.length) {\r\n      end = this.length;\r\n    }\r\n\r\n    if (end <= 0) {\r\n      return '';\r\n    } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\r\n\r\n\r\n    end >>>= 0;\r\n    start >>>= 0;\r\n\r\n    if (end <= start) {\r\n      return '';\r\n    }\r\n\r\n    if (!encoding) encoding = 'utf8';\r\n\r\n    while (true) {\r\n      switch (encoding) {\r\n        case 'hex':\r\n          return hexSlice(this, start, end);\r\n\r\n        case 'utf8':\r\n        case 'utf-8':\r\n          return utf8Slice(this, start, end);\r\n\r\n        case 'ascii':\r\n          return asciiSlice(this, start, end);\r\n\r\n        case 'latin1':\r\n        case 'binary':\r\n          return latin1Slice(this, start, end);\r\n\r\n        case 'base64':\r\n          return base64Slice(this, start, end);\r\n\r\n        case 'ucs2':\r\n        case 'ucs-2':\r\n        case 'utf16le':\r\n        case 'utf-16le':\r\n          return utf16leSlice(this, start, end);\r\n\r\n        default:\r\n          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\r\n          encoding = (encoding + '').toLowerCase();\r\n          loweredCase = true;\r\n      }\r\n    }\r\n  } // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\r\n  // Buffer instances.\r\n\r\n\r\n  Buffer.prototype._isBuffer = true;\r\n\r\n  function swap(b, n, m) {\r\n    var i = b[n];\r\n    b[n] = b[m];\r\n    b[m] = i;\r\n  }\r\n\r\n  Buffer.prototype.swap16 = function swap16() {\r\n    var len = this.length;\r\n\r\n    if (len % 2 !== 0) {\r\n      throw new RangeError('Buffer size must be a multiple of 16-bits');\r\n    }\r\n\r\n    for (var i = 0; i < len; i += 2) {\r\n      swap(this, i, i + 1);\r\n    }\r\n\r\n    return this;\r\n  };\r\n\r\n  Buffer.prototype.swap32 = function swap32() {\r\n    var len = this.length;\r\n\r\n    if (len % 4 !== 0) {\r\n      throw new RangeError('Buffer size must be a multiple of 32-bits');\r\n    }\r\n\r\n    for (var i = 0; i < len; i += 4) {\r\n      swap(this, i, i + 3);\r\n      swap(this, i + 1, i + 2);\r\n    }\r\n\r\n    return this;\r\n  };\r\n\r\n  Buffer.prototype.swap64 = function swap64() {\r\n    var len = this.length;\r\n\r\n    if (len % 8 !== 0) {\r\n      throw new RangeError('Buffer size must be a multiple of 64-bits');\r\n    }\r\n\r\n    for (var i = 0; i < len; i += 8) {\r\n      swap(this, i, i + 7);\r\n      swap(this, i + 1, i + 6);\r\n      swap(this, i + 2, i + 5);\r\n      swap(this, i + 3, i + 4);\r\n    }\r\n\r\n    return this;\r\n  };\r\n\r\n  Buffer.prototype.toString = function toString() {\r\n    var length = this.length | 0;\r\n    if (length === 0) return '';\r\n    if (arguments.length === 0) return utf8Slice(this, 0, length);\r\n    return slowToString.apply(this, arguments);\r\n  };\r\n\r\n  Buffer.prototype.equals = function equals(b) {\r\n    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer');\r\n    if (this === b) return true;\r\n    return Buffer.compare(this, b) === 0;\r\n  };\r\n\r\n  Buffer.prototype.inspect = function inspect() {\r\n    var str = '';\r\n    var max = INSPECT_MAX_BYTES;\r\n\r\n    if (this.length > 0) {\r\n      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');\r\n      if (this.length > max) str += ' ... ';\r\n    }\r\n\r\n    return '<Buffer ' + str + '>';\r\n  };\r\n\r\n  Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\r\n    if (!internalIsBuffer(target)) {\r\n      throw new TypeError('Argument must be a Buffer');\r\n    }\r\n\r\n    if (start === undefined) {\r\n      start = 0;\r\n    }\r\n\r\n    if (end === undefined) {\r\n      end = target ? target.length : 0;\r\n    }\r\n\r\n    if (thisStart === undefined) {\r\n      thisStart = 0;\r\n    }\r\n\r\n    if (thisEnd === undefined) {\r\n      thisEnd = this.length;\r\n    }\r\n\r\n    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\r\n      throw new RangeError('out of range index');\r\n    }\r\n\r\n    if (thisStart >= thisEnd && start >= end) {\r\n      return 0;\r\n    }\r\n\r\n    if (thisStart >= thisEnd) {\r\n      return -1;\r\n    }\r\n\r\n    if (start >= end) {\r\n      return 1;\r\n    }\r\n\r\n    start >>>= 0;\r\n    end >>>= 0;\r\n    thisStart >>>= 0;\r\n    thisEnd >>>= 0;\r\n    if (this === target) return 0;\r\n    var x = thisEnd - thisStart;\r\n    var y = end - start;\r\n    var len = Math.min(x, y);\r\n    var thisCopy = this.slice(thisStart, thisEnd);\r\n    var targetCopy = target.slice(start, end);\r\n\r\n    for (var i = 0; i < len; ++i) {\r\n      if (thisCopy[i] !== targetCopy[i]) {\r\n        x = thisCopy[i];\r\n        y = targetCopy[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (x < y) return -1;\r\n    if (y < x) return 1;\r\n    return 0;\r\n  }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\r\n  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.\r\n  //\r\n  // Arguments:\r\n  // - buffer - a Buffer to search\r\n  // - val - a string, Buffer, or number\r\n  // - byteOffset - an index into `buffer`; will be clamped to an int32\r\n  // - encoding - an optional encoding, relevant is val is a string\r\n  // - dir - true for indexOf, false for lastIndexOf\r\n\r\n\r\n  function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\r\n    // Empty buffer means no match\r\n    if (buffer.length === 0) return -1; // Normalize byteOffset\r\n\r\n    if (typeof byteOffset === 'string') {\r\n      encoding = byteOffset;\r\n      byteOffset = 0;\r\n    } else if (byteOffset > 0x7fffffff) {\r\n      byteOffset = 0x7fffffff;\r\n    } else if (byteOffset < -0x80000000) {\r\n      byteOffset = -0x80000000;\r\n    }\r\n\r\n    byteOffset = +byteOffset; // Coerce to Number.\r\n\r\n    if (isNaN(byteOffset)) {\r\n      // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\r\n      byteOffset = dir ? 0 : buffer.length - 1;\r\n    } // Normalize byteOffset: negative offsets start from the end of the buffer\r\n\r\n\r\n    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\r\n\r\n    if (byteOffset >= buffer.length) {\r\n      if (dir) return -1;else byteOffset = buffer.length - 1;\r\n    } else if (byteOffset < 0) {\r\n      if (dir) byteOffset = 0;else return -1;\r\n    } // Normalize val\r\n\r\n\r\n    if (typeof val === 'string') {\r\n      val = Buffer.from(val, encoding);\r\n    } // Finally, search either indexOf (if dir is true) or lastIndexOf\r\n\r\n\r\n    if (internalIsBuffer(val)) {\r\n      // Special case: looking for empty string/buffer always fails\r\n      if (val.length === 0) {\r\n        return -1;\r\n      }\r\n\r\n      return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\r\n    } else if (typeof val === 'number') {\r\n      val = val & 0xFF; // Search for a byte value [0-255]\r\n\r\n      if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {\r\n        if (dir) {\r\n          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\r\n        } else {\r\n          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\r\n        }\r\n      }\r\n\r\n      return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\r\n    }\r\n\r\n    throw new TypeError('val must be string, number or Buffer');\r\n  }\r\n\r\n  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\r\n    var indexSize = 1;\r\n    var arrLength = arr.length;\r\n    var valLength = val.length;\r\n\r\n    if (encoding !== undefined) {\r\n      encoding = String(encoding).toLowerCase();\r\n\r\n      if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {\r\n        if (arr.length < 2 || val.length < 2) {\r\n          return -1;\r\n        }\r\n\r\n        indexSize = 2;\r\n        arrLength /= 2;\r\n        valLength /= 2;\r\n        byteOffset /= 2;\r\n      }\r\n    }\r\n\r\n    function read(buf, i) {\r\n      if (indexSize === 1) {\r\n        return buf[i];\r\n      } else {\r\n        return buf.readUInt16BE(i * indexSize);\r\n      }\r\n    }\r\n\r\n    var i;\r\n\r\n    if (dir) {\r\n      var foundIndex = -1;\r\n\r\n      for (i = byteOffset; i < arrLength; i++) {\r\n        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\r\n          if (foundIndex === -1) foundIndex = i;\r\n          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\r\n        } else {\r\n          if (foundIndex !== -1) i -= i - foundIndex;\r\n          foundIndex = -1;\r\n        }\r\n      }\r\n    } else {\r\n      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\r\n\r\n      for (i = byteOffset; i >= 0; i--) {\r\n        var found = true;\r\n\r\n        for (var j = 0; j < valLength; j++) {\r\n          if (read(arr, i + j) !== read(val, j)) {\r\n            found = false;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (found) return i;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  Buffer.prototype.includes = function includes(val, byteOffset, encoding) {\r\n    return this.indexOf(val, byteOffset, encoding) !== -1;\r\n  };\r\n\r\n  Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\r\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\r\n  };\r\n\r\n  Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\r\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\r\n  };\r\n\r\n  function hexWrite(buf, string, offset, length) {\r\n    offset = Number(offset) || 0;\r\n    var remaining = buf.length - offset;\r\n\r\n    if (!length) {\r\n      length = remaining;\r\n    } else {\r\n      length = Number(length);\r\n\r\n      if (length > remaining) {\r\n        length = remaining;\r\n      }\r\n    } // must be an even number of digits\r\n\r\n\r\n    var strLen = string.length;\r\n    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');\r\n\r\n    if (length > strLen / 2) {\r\n      length = strLen / 2;\r\n    }\r\n\r\n    for (var i = 0; i < length; ++i) {\r\n      var parsed = parseInt(string.substr(i * 2, 2), 16);\r\n      if (isNaN(parsed)) return i;\r\n      buf[offset + i] = parsed;\r\n    }\r\n\r\n    return i;\r\n  }\r\n\r\n  function utf8Write(buf, string, offset, length) {\r\n    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\r\n  }\r\n\r\n  function asciiWrite(buf, string, offset, length) {\r\n    return blitBuffer(asciiToBytes(string), buf, offset, length);\r\n  }\r\n\r\n  function latin1Write(buf, string, offset, length) {\r\n    return asciiWrite(buf, string, offset, length);\r\n  }\r\n\r\n  function base64Write(buf, string, offset, length) {\r\n    return blitBuffer(base64ToBytes(string), buf, offset, length);\r\n  }\r\n\r\n  function ucs2Write(buf, string, offset, length) {\r\n    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\r\n  }\r\n\r\n  Buffer.prototype.write = function write(string, offset, length, encoding) {\r\n    // Buffer#write(string)\r\n    if (offset === undefined) {\r\n      encoding = 'utf8';\r\n      length = this.length;\r\n      offset = 0; // Buffer#write(string, encoding)\r\n    } else if (length === undefined && typeof offset === 'string') {\r\n      encoding = offset;\r\n      length = this.length;\r\n      offset = 0; // Buffer#write(string, offset[, length][, encoding])\r\n    } else if (isFinite(offset)) {\r\n      offset = offset | 0;\r\n\r\n      if (isFinite(length)) {\r\n        length = length | 0;\r\n        if (encoding === undefined) encoding = 'utf8';\r\n      } else {\r\n        encoding = length;\r\n        length = undefined;\r\n      } // legacy write(string, encoding, offset, length) - remove in v0.13\r\n\r\n    } else {\r\n      throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');\r\n    }\r\n\r\n    var remaining = this.length - offset;\r\n    if (length === undefined || length > remaining) length = remaining;\r\n\r\n    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\r\n      throw new RangeError('Attempt to write outside buffer bounds');\r\n    }\r\n\r\n    if (!encoding) encoding = 'utf8';\r\n    var loweredCase = false;\r\n\r\n    for (;;) {\r\n      switch (encoding) {\r\n        case 'hex':\r\n          return hexWrite(this, string, offset, length);\r\n\r\n        case 'utf8':\r\n        case 'utf-8':\r\n          return utf8Write(this, string, offset, length);\r\n\r\n        case 'ascii':\r\n          return asciiWrite(this, string, offset, length);\r\n\r\n        case 'latin1':\r\n        case 'binary':\r\n          return latin1Write(this, string, offset, length);\r\n\r\n        case 'base64':\r\n          // Warning: maxLength not taken into account in base64Write\r\n          return base64Write(this, string, offset, length);\r\n\r\n        case 'ucs2':\r\n        case 'ucs-2':\r\n        case 'utf16le':\r\n        case 'utf-16le':\r\n          return ucs2Write(this, string, offset, length);\r\n\r\n        default:\r\n          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\r\n          encoding = ('' + encoding).toLowerCase();\r\n          loweredCase = true;\r\n      }\r\n    }\r\n  };\r\n\r\n  Buffer.prototype.toJSON = function toJSON() {\r\n    return {\r\n      type: 'Buffer',\r\n      data: Array.prototype.slice.call(this._arr || this, 0)\r\n    };\r\n  };\r\n\r\n  function base64Slice(buf, start, end) {\r\n    if (start === 0 && end === buf.length) {\r\n      return fromByteArray(buf);\r\n    } else {\r\n      return fromByteArray(buf.slice(start, end));\r\n    }\r\n  }\r\n\r\n  function utf8Slice(buf, start, end) {\r\n    end = Math.min(buf.length, end);\r\n    var res = [];\r\n    var i = start;\r\n\r\n    while (i < end) {\r\n      var firstByte = buf[i];\r\n      var codePoint = null;\r\n      var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\r\n\r\n      if (i + bytesPerSequence <= end) {\r\n        var secondByte, thirdByte, fourthByte, tempCodePoint;\r\n\r\n        switch (bytesPerSequence) {\r\n          case 1:\r\n            if (firstByte < 0x80) {\r\n              codePoint = firstByte;\r\n            }\r\n\r\n            break;\r\n\r\n          case 2:\r\n            secondByte = buf[i + 1];\r\n\r\n            if ((secondByte & 0xC0) === 0x80) {\r\n              tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\r\n\r\n              if (tempCodePoint > 0x7F) {\r\n                codePoint = tempCodePoint;\r\n              }\r\n            }\r\n\r\n            break;\r\n\r\n          case 3:\r\n            secondByte = buf[i + 1];\r\n            thirdByte = buf[i + 2];\r\n\r\n            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\r\n              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\r\n\r\n              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\r\n                codePoint = tempCodePoint;\r\n              }\r\n            }\r\n\r\n            break;\r\n\r\n          case 4:\r\n            secondByte = buf[i + 1];\r\n            thirdByte = buf[i + 2];\r\n            fourthByte = buf[i + 3];\r\n\r\n            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\r\n              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\r\n\r\n              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\r\n                codePoint = tempCodePoint;\r\n              }\r\n            }\r\n\r\n        }\r\n      }\r\n\r\n      if (codePoint === null) {\r\n        // we did not generate a valid codePoint so insert a\r\n        // replacement char (U+FFFD) and advance only 1 byte\r\n        codePoint = 0xFFFD;\r\n        bytesPerSequence = 1;\r\n      } else if (codePoint > 0xFFFF) {\r\n        // encode to utf16 (surrogate pair dance)\r\n        codePoint -= 0x10000;\r\n        res.push(codePoint >>> 10 & 0x3FF | 0xD800);\r\n        codePoint = 0xDC00 | codePoint & 0x3FF;\r\n      }\r\n\r\n      res.push(codePoint);\r\n      i += bytesPerSequence;\r\n    }\r\n\r\n    return decodeCodePointsArray(res);\r\n  } // Based on http://stackoverflow.com/a/22747272/680742, the browser with\r\n  // the lowest limit is Chrome, with 0x10000 args.\r\n  // We go 1 magnitude less, for safety\r\n\r\n\r\n  var MAX_ARGUMENTS_LENGTH = 0x1000;\r\n\r\n  function decodeCodePointsArray(codePoints) {\r\n    var len = codePoints.length;\r\n\r\n    if (len <= MAX_ARGUMENTS_LENGTH) {\r\n      return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\r\n    } // Decode in chunks to avoid \"call stack size exceeded\".\r\n\r\n\r\n    var res = '';\r\n    var i = 0;\r\n\r\n    while (i < len) {\r\n      res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  function asciiSlice(buf, start, end) {\r\n    var ret = '';\r\n    end = Math.min(buf.length, end);\r\n\r\n    for (var i = start; i < end; ++i) {\r\n      ret += String.fromCharCode(buf[i] & 0x7F);\r\n    }\r\n\r\n    return ret;\r\n  }\r\n\r\n  function latin1Slice(buf, start, end) {\r\n    var ret = '';\r\n    end = Math.min(buf.length, end);\r\n\r\n    for (var i = start; i < end; ++i) {\r\n      ret += String.fromCharCode(buf[i]);\r\n    }\r\n\r\n    return ret;\r\n  }\r\n\r\n  function hexSlice(buf, start, end) {\r\n    var len = buf.length;\r\n    if (!start || start < 0) start = 0;\r\n    if (!end || end < 0 || end > len) end = len;\r\n    var out = '';\r\n\r\n    for (var i = start; i < end; ++i) {\r\n      out += toHex(buf[i]);\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  function utf16leSlice(buf, start, end) {\r\n    var bytes = buf.slice(start, end);\r\n    var res = '';\r\n\r\n    for (var i = 0; i < bytes.length; i += 2) {\r\n      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  Buffer.prototype.slice = function slice(start, end) {\r\n    var len = this.length;\r\n    start = ~~start;\r\n    end = end === undefined ? len : ~~end;\r\n\r\n    if (start < 0) {\r\n      start += len;\r\n      if (start < 0) start = 0;\r\n    } else if (start > len) {\r\n      start = len;\r\n    }\r\n\r\n    if (end < 0) {\r\n      end += len;\r\n      if (end < 0) end = 0;\r\n    } else if (end > len) {\r\n      end = len;\r\n    }\r\n\r\n    if (end < start) end = start;\r\n    var newBuf;\r\n\r\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\r\n      newBuf = this.subarray(start, end);\r\n      newBuf.__proto__ = Buffer.prototype;\r\n    } else {\r\n      var sliceLen = end - start;\r\n      newBuf = new Buffer(sliceLen, undefined);\r\n\r\n      for (var i = 0; i < sliceLen; ++i) {\r\n        newBuf[i] = this[i + start];\r\n      }\r\n    }\r\n\r\n    return newBuf;\r\n  };\r\n  /*\r\n   * Need to make sure that buffer isn't trying to write out of bounds.\r\n   */\r\n\r\n\r\n  function checkOffset(offset, ext, length) {\r\n    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');\r\n    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');\r\n  }\r\n\r\n  Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\r\n    offset = offset | 0;\r\n    byteLength = byteLength | 0;\r\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\r\n    var val = this[offset];\r\n    var mul = 1;\r\n    var i = 0;\r\n\r\n    while (++i < byteLength && (mul *= 0x100)) {\r\n      val += this[offset + i] * mul;\r\n    }\r\n\r\n    return val;\r\n  };\r\n\r\n  Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\r\n    offset = offset | 0;\r\n    byteLength = byteLength | 0;\r\n\r\n    if (!noAssert) {\r\n      checkOffset(offset, byteLength, this.length);\r\n    }\r\n\r\n    var val = this[offset + --byteLength];\r\n    var mul = 1;\r\n\r\n    while (byteLength > 0 && (mul *= 0x100)) {\r\n      val += this[offset + --byteLength] * mul;\r\n    }\r\n\r\n    return val;\r\n  };\r\n\r\n  Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\r\n    if (!noAssert) checkOffset(offset, 1, this.length);\r\n    return this[offset];\r\n  };\r\n\r\n  Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\r\n    if (!noAssert) checkOffset(offset, 2, this.length);\r\n    return this[offset] | this[offset + 1] << 8;\r\n  };\r\n\r\n  Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\r\n    if (!noAssert) checkOffset(offset, 2, this.length);\r\n    return this[offset] << 8 | this[offset + 1];\r\n  };\r\n\r\n  Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\r\n    if (!noAssert) checkOffset(offset, 4, this.length);\r\n    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\r\n  };\r\n\r\n  Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\r\n    if (!noAssert) checkOffset(offset, 4, this.length);\r\n    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\r\n  };\r\n\r\n  Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\r\n    offset = offset | 0;\r\n    byteLength = byteLength | 0;\r\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\r\n    var val = this[offset];\r\n    var mul = 1;\r\n    var i = 0;\r\n\r\n    while (++i < byteLength && (mul *= 0x100)) {\r\n      val += this[offset + i] * mul;\r\n    }\r\n\r\n    mul *= 0x80;\r\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength);\r\n    return val;\r\n  };\r\n\r\n  Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\r\n    offset = offset | 0;\r\n    byteLength = byteLength | 0;\r\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\r\n    var i = byteLength;\r\n    var mul = 1;\r\n    var val = this[offset + --i];\r\n\r\n    while (i > 0 && (mul *= 0x100)) {\r\n      val += this[offset + --i] * mul;\r\n    }\r\n\r\n    mul *= 0x80;\r\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength);\r\n    return val;\r\n  };\r\n\r\n  Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {\r\n    if (!noAssert) checkOffset(offset, 1, this.length);\r\n    if (!(this[offset] & 0x80)) return this[offset];\r\n    return (0xff - this[offset] + 1) * -1;\r\n  };\r\n\r\n  Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\r\n    if (!noAssert) checkOffset(offset, 2, this.length);\r\n    var val = this[offset] | this[offset + 1] << 8;\r\n    return val & 0x8000 ? val | 0xFFFF0000 : val;\r\n  };\r\n\r\n  Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\r\n    if (!noAssert) checkOffset(offset, 2, this.length);\r\n    var val = this[offset + 1] | this[offset] << 8;\r\n    return val & 0x8000 ? val | 0xFFFF0000 : val;\r\n  };\r\n\r\n  Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\r\n    if (!noAssert) checkOffset(offset, 4, this.length);\r\n    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\r\n  };\r\n\r\n  Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\r\n    if (!noAssert) checkOffset(offset, 4, this.length);\r\n    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\r\n  };\r\n\r\n  Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\r\n    if (!noAssert) checkOffset(offset, 4, this.length);\r\n    return read(this, offset, true, 23, 4);\r\n  };\r\n\r\n  Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\r\n    if (!noAssert) checkOffset(offset, 4, this.length);\r\n    return read(this, offset, false, 23, 4);\r\n  };\r\n\r\n  Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\r\n    if (!noAssert) checkOffset(offset, 8, this.length);\r\n    return read(this, offset, true, 52, 8);\r\n  };\r\n\r\n  Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\r\n    if (!noAssert) checkOffset(offset, 8, this.length);\r\n    return read(this, offset, false, 52, 8);\r\n  };\r\n\r\n  function checkInt(buf, value, offset, ext, max, min) {\r\n    if (!internalIsBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\r\n    if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\r\n    if (offset + ext > buf.length) throw new RangeError('Index out of range');\r\n  }\r\n\r\n  Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\r\n    value = +value;\r\n    offset = offset | 0;\r\n    byteLength = byteLength | 0;\r\n\r\n    if (!noAssert) {\r\n      var maxBytes = Math.pow(2, 8 * byteLength) - 1;\r\n      checkInt(this, value, offset, byteLength, maxBytes, 0);\r\n    }\r\n\r\n    var mul = 1;\r\n    var i = 0;\r\n    this[offset] = value & 0xFF;\r\n\r\n    while (++i < byteLength && (mul *= 0x100)) {\r\n      this[offset + i] = value / mul & 0xFF;\r\n    }\r\n\r\n    return offset + byteLength;\r\n  };\r\n\r\n  Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\r\n    value = +value;\r\n    offset = offset | 0;\r\n    byteLength = byteLength | 0;\r\n\r\n    if (!noAssert) {\r\n      var maxBytes = Math.pow(2, 8 * byteLength) - 1;\r\n      checkInt(this, value, offset, byteLength, maxBytes, 0);\r\n    }\r\n\r\n    var i = byteLength - 1;\r\n    var mul = 1;\r\n    this[offset + i] = value & 0xFF;\r\n\r\n    while (--i >= 0 && (mul *= 0x100)) {\r\n      this[offset + i] = value / mul & 0xFF;\r\n    }\r\n\r\n    return offset + byteLength;\r\n  };\r\n\r\n  Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\r\n    value = +value;\r\n    offset = offset | 0;\r\n    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\r\n    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\r\n    this[offset] = value & 0xff;\r\n    return offset + 1;\r\n  };\r\n\r\n  function objectWriteUInt16(buf, value, offset, littleEndian) {\r\n    if (value < 0) value = 0xffff + value + 1;\r\n\r\n    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\r\n      buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;\r\n    }\r\n  }\r\n\r\n  Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\r\n    value = +value;\r\n    offset = offset | 0;\r\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\r\n\r\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\r\n      this[offset] = value & 0xff;\r\n      this[offset + 1] = value >>> 8;\r\n    } else {\r\n      objectWriteUInt16(this, value, offset, true);\r\n    }\r\n\r\n    return offset + 2;\r\n  };\r\n\r\n  Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\r\n    value = +value;\r\n    offset = offset | 0;\r\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\r\n\r\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\r\n      this[offset] = value >>> 8;\r\n      this[offset + 1] = value & 0xff;\r\n    } else {\r\n      objectWriteUInt16(this, value, offset, false);\r\n    }\r\n\r\n    return offset + 2;\r\n  };\r\n\r\n  function objectWriteUInt32(buf, value, offset, littleEndian) {\r\n    if (value < 0) value = 0xffffffff + value + 1;\r\n\r\n    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\r\n      buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;\r\n    }\r\n  }\r\n\r\n  Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\r\n    value = +value;\r\n    offset = offset | 0;\r\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\r\n\r\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\r\n      this[offset + 3] = value >>> 24;\r\n      this[offset + 2] = value >>> 16;\r\n      this[offset + 1] = value >>> 8;\r\n      this[offset] = value & 0xff;\r\n    } else {\r\n      objectWriteUInt32(this, value, offset, true);\r\n    }\r\n\r\n    return offset + 4;\r\n  };\r\n\r\n  Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\r\n    value = +value;\r\n    offset = offset | 0;\r\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\r\n\r\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\r\n      this[offset] = value >>> 24;\r\n      this[offset + 1] = value >>> 16;\r\n      this[offset + 2] = value >>> 8;\r\n      this[offset + 3] = value & 0xff;\r\n    } else {\r\n      objectWriteUInt32(this, value, offset, false);\r\n    }\r\n\r\n    return offset + 4;\r\n  };\r\n\r\n  Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\r\n    value = +value;\r\n    offset = offset | 0;\r\n\r\n    if (!noAssert) {\r\n      var limit = Math.pow(2, 8 * byteLength - 1);\r\n      checkInt(this, value, offset, byteLength, limit - 1, -limit);\r\n    }\r\n\r\n    var i = 0;\r\n    var mul = 1;\r\n    var sub = 0;\r\n    this[offset] = value & 0xFF;\r\n\r\n    while (++i < byteLength && (mul *= 0x100)) {\r\n      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\r\n        sub = 1;\r\n      }\r\n\r\n      this[offset + i] = (value / mul >> 0) - sub & 0xFF;\r\n    }\r\n\r\n    return offset + byteLength;\r\n  };\r\n\r\n  Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\r\n    value = +value;\r\n    offset = offset | 0;\r\n\r\n    if (!noAssert) {\r\n      var limit = Math.pow(2, 8 * byteLength - 1);\r\n      checkInt(this, value, offset, byteLength, limit - 1, -limit);\r\n    }\r\n\r\n    var i = byteLength - 1;\r\n    var mul = 1;\r\n    var sub = 0;\r\n    this[offset + i] = value & 0xFF;\r\n\r\n    while (--i >= 0 && (mul *= 0x100)) {\r\n      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\r\n        sub = 1;\r\n      }\r\n\r\n      this[offset + i] = (value / mul >> 0) - sub & 0xFF;\r\n    }\r\n\r\n    return offset + byteLength;\r\n  };\r\n\r\n  Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\r\n    value = +value;\r\n    offset = offset | 0;\r\n    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\r\n    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\r\n    if (value < 0) value = 0xff + value + 1;\r\n    this[offset] = value & 0xff;\r\n    return offset + 1;\r\n  };\r\n\r\n  Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\r\n    value = +value;\r\n    offset = offset | 0;\r\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\r\n\r\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\r\n      this[offset] = value & 0xff;\r\n      this[offset + 1] = value >>> 8;\r\n    } else {\r\n      objectWriteUInt16(this, value, offset, true);\r\n    }\r\n\r\n    return offset + 2;\r\n  };\r\n\r\n  Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\r\n    value = +value;\r\n    offset = offset | 0;\r\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\r\n\r\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\r\n      this[offset] = value >>> 8;\r\n      this[offset + 1] = value & 0xff;\r\n    } else {\r\n      objectWriteUInt16(this, value, offset, false);\r\n    }\r\n\r\n    return offset + 2;\r\n  };\r\n\r\n  Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\r\n    value = +value;\r\n    offset = offset | 0;\r\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\r\n\r\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\r\n      this[offset] = value & 0xff;\r\n      this[offset + 1] = value >>> 8;\r\n      this[offset + 2] = value >>> 16;\r\n      this[offset + 3] = value >>> 24;\r\n    } else {\r\n      objectWriteUInt32(this, value, offset, true);\r\n    }\r\n\r\n    return offset + 4;\r\n  };\r\n\r\n  Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\r\n    value = +value;\r\n    offset = offset | 0;\r\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\r\n    if (value < 0) value = 0xffffffff + value + 1;\r\n\r\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\r\n      this[offset] = value >>> 24;\r\n      this[offset + 1] = value >>> 16;\r\n      this[offset + 2] = value >>> 8;\r\n      this[offset + 3] = value & 0xff;\r\n    } else {\r\n      objectWriteUInt32(this, value, offset, false);\r\n    }\r\n\r\n    return offset + 4;\r\n  };\r\n\r\n  function checkIEEE754(buf, value, offset, ext, max, min) {\r\n    if (offset + ext > buf.length) throw new RangeError('Index out of range');\r\n    if (offset < 0) throw new RangeError('Index out of range');\r\n  }\r\n\r\n  function writeFloat(buf, value, offset, littleEndian, noAssert) {\r\n    if (!noAssert) {\r\n      checkIEEE754(buf, value, offset, 4);\r\n    }\r\n\r\n    write(buf, value, offset, littleEndian, 23, 4);\r\n    return offset + 4;\r\n  }\r\n\r\n  Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\r\n    return writeFloat(this, value, offset, true, noAssert);\r\n  };\r\n\r\n  Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\r\n    return writeFloat(this, value, offset, false, noAssert);\r\n  };\r\n\r\n  function writeDouble(buf, value, offset, littleEndian, noAssert) {\r\n    if (!noAssert) {\r\n      checkIEEE754(buf, value, offset, 8);\r\n    }\r\n\r\n    write(buf, value, offset, littleEndian, 52, 8);\r\n    return offset + 8;\r\n  }\r\n\r\n  Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\r\n    return writeDouble(this, value, offset, true, noAssert);\r\n  };\r\n\r\n  Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\r\n    return writeDouble(this, value, offset, false, noAssert);\r\n  }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\r\n\r\n\r\n  Buffer.prototype.copy = function copy(target, targetStart, start, end) {\r\n    if (!start) start = 0;\r\n    if (!end && end !== 0) end = this.length;\r\n    if (targetStart >= target.length) targetStart = target.length;\r\n    if (!targetStart) targetStart = 0;\r\n    if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done\r\n\r\n    if (end === start) return 0;\r\n    if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions\r\n\r\n    if (targetStart < 0) {\r\n      throw new RangeError('targetStart out of bounds');\r\n    }\r\n\r\n    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');\r\n    if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?\r\n\r\n    if (end > this.length) end = this.length;\r\n\r\n    if (target.length - targetStart < end - start) {\r\n      end = target.length - targetStart + start;\r\n    }\r\n\r\n    var len = end - start;\r\n    var i;\r\n\r\n    if (this === target && start < targetStart && targetStart < end) {\r\n      // descending copy from end\r\n      for (i = len - 1; i >= 0; --i) {\r\n        target[i + targetStart] = this[i + start];\r\n      }\r\n    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\r\n      // ascending copy from start\r\n      for (i = 0; i < len; ++i) {\r\n        target[i + targetStart] = this[i + start];\r\n      }\r\n    } else {\r\n      Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);\r\n    }\r\n\r\n    return len;\r\n  }; // Usage:\r\n  //    buffer.fill(number[, offset[, end]])\r\n  //    buffer.fill(buffer[, offset[, end]])\r\n  //    buffer.fill(string[, offset[, end]][, encoding])\r\n\r\n\r\n  Buffer.prototype.fill = function fill(val, start, end, encoding) {\r\n    // Handle string cases:\r\n    if (typeof val === 'string') {\r\n      if (typeof start === 'string') {\r\n        encoding = start;\r\n        start = 0;\r\n        end = this.length;\r\n      } else if (typeof end === 'string') {\r\n        encoding = end;\r\n        end = this.length;\r\n      }\r\n\r\n      if (val.length === 1) {\r\n        var code = val.charCodeAt(0);\r\n\r\n        if (code < 256) {\r\n          val = code;\r\n        }\r\n      }\r\n\r\n      if (encoding !== undefined && typeof encoding !== 'string') {\r\n        throw new TypeError('encoding must be a string');\r\n      }\r\n\r\n      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\r\n        throw new TypeError('Unknown encoding: ' + encoding);\r\n      }\r\n    } else if (typeof val === 'number') {\r\n      val = val & 255;\r\n    } // Invalid ranges are not set to a default, so can range check early.\r\n\r\n\r\n    if (start < 0 || this.length < start || this.length < end) {\r\n      throw new RangeError('Out of range index');\r\n    }\r\n\r\n    if (end <= start) {\r\n      return this;\r\n    }\r\n\r\n    start = start >>> 0;\r\n    end = end === undefined ? this.length : end >>> 0;\r\n    if (!val) val = 0;\r\n    var i;\r\n\r\n    if (typeof val === 'number') {\r\n      for (i = start; i < end; ++i) {\r\n        this[i] = val;\r\n      }\r\n    } else {\r\n      var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());\r\n      var len = bytes.length;\r\n\r\n      for (i = 0; i < end - start; ++i) {\r\n        this[i + start] = bytes[i % len];\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }; // HELPER FUNCTIONS\r\n  // ================\r\n\r\n\r\n  var INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g;\r\n\r\n  function base64clean(str) {\r\n    // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\r\n    str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''\r\n\r\n    if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\r\n\r\n    while (str.length % 4 !== 0) {\r\n      str = str + '=';\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n  function stringtrim(str) {\r\n    if (str.trim) return str.trim();\r\n    return str.replace(/^\\s+|\\s+$/g, '');\r\n  }\r\n\r\n  function toHex(n) {\r\n    if (n < 16) return '0' + n.toString(16);\r\n    return n.toString(16);\r\n  }\r\n\r\n  function utf8ToBytes(string, units) {\r\n    units = units || Infinity;\r\n    var codePoint;\r\n    var length = string.length;\r\n    var leadSurrogate = null;\r\n    var bytes = [];\r\n\r\n    for (var i = 0; i < length; ++i) {\r\n      codePoint = string.charCodeAt(i); // is surrogate component\r\n\r\n      if (codePoint > 0xD7FF && codePoint < 0xE000) {\r\n        // last char was a lead\r\n        if (!leadSurrogate) {\r\n          // no lead yet\r\n          if (codePoint > 0xDBFF) {\r\n            // unexpected trail\r\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\r\n            continue;\r\n          } else if (i + 1 === length) {\r\n            // unpaired lead\r\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\r\n            continue;\r\n          } // valid lead\r\n\r\n\r\n          leadSurrogate = codePoint;\r\n          continue;\r\n        } // 2 leads in a row\r\n\r\n\r\n        if (codePoint < 0xDC00) {\r\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\r\n          leadSurrogate = codePoint;\r\n          continue;\r\n        } // valid surrogate pair\r\n\r\n\r\n        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\r\n      } else if (leadSurrogate) {\r\n        // valid bmp char, but last char was a lead\r\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\r\n      }\r\n\r\n      leadSurrogate = null; // encode utf8\r\n\r\n      if (codePoint < 0x80) {\r\n        if ((units -= 1) < 0) break;\r\n        bytes.push(codePoint);\r\n      } else if (codePoint < 0x800) {\r\n        if ((units -= 2) < 0) break;\r\n        bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\r\n      } else if (codePoint < 0x10000) {\r\n        if ((units -= 3) < 0) break;\r\n        bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\r\n      } else if (codePoint < 0x110000) {\r\n        if ((units -= 4) < 0) break;\r\n        bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\r\n      } else {\r\n        throw new Error('Invalid code point');\r\n      }\r\n    }\r\n\r\n    return bytes;\r\n  }\r\n\r\n  function asciiToBytes(str) {\r\n    var byteArray = [];\r\n\r\n    for (var i = 0; i < str.length; ++i) {\r\n      // Node's code seems to be doing this and not & 0x7F..\r\n      byteArray.push(str.charCodeAt(i) & 0xFF);\r\n    }\r\n\r\n    return byteArray;\r\n  }\r\n\r\n  function utf16leToBytes(str, units) {\r\n    var c, hi, lo;\r\n    var byteArray = [];\r\n\r\n    for (var i = 0; i < str.length; ++i) {\r\n      if ((units -= 2) < 0) break;\r\n      c = str.charCodeAt(i);\r\n      hi = c >> 8;\r\n      lo = c % 256;\r\n      byteArray.push(lo);\r\n      byteArray.push(hi);\r\n    }\r\n\r\n    return byteArray;\r\n  }\r\n\r\n  function base64ToBytes(str) {\r\n    return toByteArray(base64clean(str));\r\n  }\r\n\r\n  function blitBuffer(src, dst, offset, length) {\r\n    for (var i = 0; i < length; ++i) {\r\n      if (i + offset >= dst.length || i >= src.length) break;\r\n      dst[i + offset] = src[i];\r\n    }\r\n\r\n    return i;\r\n  }\r\n\r\n  function isnan(val) {\r\n    return val !== val; // eslint-disable-line no-self-compare\r\n  } // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence\r\n  // The _isBuffer check is for Safari 5-7 support, because it's missing\r\n  // Object.prototype.constructor. Remove this eventually\r\n\r\n\r\n  function isBuffer(obj) {\r\n    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));\r\n  }\r\n\r\n  function isFastBuffer(obj) {\r\n    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);\r\n  } // For Node v0.10 support. Remove this eventually.\r\n\r\n\r\n  function isSlowBuffer(obj) {\r\n    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0));\r\n  }\r\n\r\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\r\n\r\n  function unwrapExports (x) {\r\n  \treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\r\n  }\r\n\r\n  function createCommonjsModule(fn, module) {\r\n  \treturn module = { exports: {} }, fn(module, module.exports), module.exports;\r\n  }\r\n\r\n  function getCjsExportFromNamespace (n) {\r\n  \treturn n && n['default'] || n;\r\n  }\r\n\r\n  var fs = getCjsExportFromNamespace(_shim_fs$1);\r\n\r\n  /**\r\n   * @class\r\n   */\r\n\r\n\r\n  class LineByLine {\r\n    constructor(file, options) {\r\n      options = options || {};\r\n      if (!options.readChunk) options.readChunk = 1024;\r\n\r\n      if (!options.newLineCharacter) {\r\n        options.newLineCharacter = 0x0a; //linux line ending\r\n      } else {\r\n        options.newLineCharacter = options.newLineCharacter.charCodeAt(0);\r\n      }\r\n\r\n      if (typeof file === 'number') {\r\n        this.fd = file;\r\n      } else {\r\n        this.fd = fs.openSync(file, 'r');\r\n      }\r\n\r\n      this.options = options;\r\n      this.newLineCharacter = options.newLineCharacter;\r\n      this.reset();\r\n    }\r\n\r\n    _searchInBuffer(buffer, hexNeedle) {\r\n      let found = -1;\r\n\r\n      for (let i = 0; i <= buffer.length; i++) {\r\n        let b_byte = buffer[i];\r\n\r\n        if (b_byte === hexNeedle) {\r\n          found = i;\r\n          break;\r\n        }\r\n      }\r\n\r\n      return found;\r\n    }\r\n\r\n    reset() {\r\n      this.eofReached = false;\r\n      this.linesCache = [];\r\n      this.fdPosition = 0;\r\n    }\r\n\r\n    close() {\r\n      fs.closeSync(this.fd);\r\n      this.fd = null;\r\n    }\r\n\r\n    _extractLines(buffer) {\r\n      let line;\r\n      const lines = [];\r\n      let bufferPosition = 0;\r\n      let lastNewLineBufferPosition = 0;\r\n\r\n      while (true) {\r\n        let bufferPositionValue = buffer[bufferPosition++];\r\n\r\n        if (bufferPositionValue === this.newLineCharacter) {\r\n          line = buffer.slice(lastNewLineBufferPosition, bufferPosition);\r\n          lines.push(line);\r\n          lastNewLineBufferPosition = bufferPosition;\r\n        } else if (!bufferPositionValue) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      let leftovers = buffer.slice(lastNewLineBufferPosition, bufferPosition);\r\n\r\n      if (leftovers.length) {\r\n        lines.push(leftovers);\r\n      }\r\n\r\n      return lines;\r\n    }\r\n\r\n    _readChunk(lineLeftovers) {\r\n      let totalBytesRead = 0;\r\n      let bytesRead;\r\n      const buffers = [];\r\n\r\n      do {\r\n        const readBuffer = new Buffer(this.options.readChunk);\r\n        bytesRead = fs.readSync(this.fd, readBuffer, 0, this.options.readChunk, this.fdPosition);\r\n        totalBytesRead = totalBytesRead + bytesRead;\r\n        this.fdPosition = this.fdPosition + bytesRead;\r\n        buffers.push(readBuffer);\r\n      } while (bytesRead && this._searchInBuffer(buffers[buffers.length - 1], this.options.newLineCharacter) === -1);\r\n\r\n      let bufferData = Buffer.concat(buffers);\r\n\r\n      if (bytesRead < this.options.readChunk) {\r\n        this.eofReached = true;\r\n        bufferData = bufferData.slice(0, totalBytesRead);\r\n      }\r\n\r\n      if (totalBytesRead) {\r\n        this.linesCache = this._extractLines(bufferData);\r\n\r\n        if (lineLeftovers) {\r\n          this.linesCache[0] = Buffer.concat([lineLeftovers, this.linesCache[0]]);\r\n        }\r\n      }\r\n\r\n      return totalBytesRead;\r\n    }\r\n\r\n    next() {\r\n      if (!this.fd) return false;\r\n      let line = false;\r\n\r\n      if (this.eofReached && this.linesCache.length === 0) {\r\n        return line;\r\n      }\r\n\r\n      let bytesRead;\r\n\r\n      if (!this.linesCache.length) {\r\n        bytesRead = this._readChunk();\r\n      }\r\n\r\n      if (this.linesCache.length) {\r\n        line = this.linesCache.shift();\r\n        const lastLineCharacter = line[line.length - 1];\r\n\r\n        if (lastLineCharacter !== 0x0a) {\r\n          bytesRead = this._readChunk(line);\r\n\r\n          if (bytesRead) {\r\n            line = this.linesCache.shift();\r\n          }\r\n        }\r\n      }\r\n\r\n      if (this.eofReached && this.linesCache.length === 0) {\r\n        this.close();\r\n      }\r\n\r\n      if (line && line[line.length - 1] === this.newLineCharacter) {\r\n        line = line.slice(0, line.length - 1);\r\n      }\r\n\r\n      return line;\r\n    }\r\n\r\n  }\r\n\r\n  var readlines = LineByLine;\r\n\r\n  /**\r\n   * The inverse of `_.toPairs`; this method returns an object composed\r\n   * from key-value `pairs`.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.0.0\r\n   * @category Array\r\n   * @param {Array} pairs The key-value pairs.\r\n   * @returns {Object} Returns the new object.\r\n   * @example\r\n   *\r\n   * _.fromPairs([['a', 1], ['b', 2]]);\r\n   * // => { 'a': 1, 'b': 2 }\r\n   */\r\n  function fromPairs(pairs) {\r\n    var index = -1,\r\n        length = pairs == null ? 0 : pairs.length,\r\n        result = {};\r\n\r\n    while (++index < length) {\r\n      var pair = pairs[index];\r\n      result[pair[0]] = pair[1];\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  var fromPairs_1 = fromPairs;\r\n\r\n  class ConfigError extends Error {}\r\n\r\n  class DebugError extends Error {}\r\n\r\n  class UndefinedParserError extends Error {}\r\n\r\n  var errors = {\r\n    ConfigError,\r\n    DebugError,\r\n    UndefinedParserError\r\n  };\r\n\r\n  function _objectWithoutPropertiesLoose(source, excluded) {\r\n    if (source == null) return {};\r\n    var target = {};\r\n    var sourceKeys = Object.keys(source);\r\n    var key, i;\r\n\r\n    for (i = 0; i < sourceKeys.length; i++) {\r\n      key = sourceKeys[i];\r\n      if (excluded.indexOf(key) >= 0) continue;\r\n      target[key] = source[key];\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  function _taggedTemplateLiteral(strings, raw) {\r\n    if (!raw) {\r\n      raw = strings.slice(0);\r\n    }\r\n\r\n    return Object.freeze(Object.defineProperties(strings, {\r\n      raw: {\r\n        value: Object.freeze(raw)\r\n      }\r\n    }));\r\n  }\r\n\r\n  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js\r\n\r\n  function defaultSetTimout() {\r\n    throw new Error('setTimeout has not been defined');\r\n  }\r\n\r\n  function defaultClearTimeout() {\r\n    throw new Error('clearTimeout has not been defined');\r\n  }\r\n\r\n  var cachedSetTimeout = defaultSetTimout;\r\n  var cachedClearTimeout = defaultClearTimeout;\r\n\r\n  if (typeof global$1.setTimeout === 'function') {\r\n    cachedSetTimeout = setTimeout;\r\n  }\r\n\r\n  if (typeof global$1.clearTimeout === 'function') {\r\n    cachedClearTimeout = clearTimeout;\r\n  }\r\n\r\n  function runTimeout(fun) {\r\n    if (cachedSetTimeout === setTimeout) {\r\n      //normal enviroments in sane situations\r\n      return setTimeout(fun, 0);\r\n    } // if setTimeout wasn't available but was latter defined\r\n\r\n\r\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\r\n      cachedSetTimeout = setTimeout;\r\n      return setTimeout(fun, 0);\r\n    }\r\n\r\n    try {\r\n      // when when somebody has screwed with setTimeout but no I.E. maddness\r\n      return cachedSetTimeout(fun, 0);\r\n    } catch (e) {\r\n      try {\r\n        // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\r\n        return cachedSetTimeout.call(null, fun, 0);\r\n      } catch (e) {\r\n        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\r\n        return cachedSetTimeout.call(this, fun, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  function runClearTimeout(marker) {\r\n    if (cachedClearTimeout === clearTimeout) {\r\n      //normal enviroments in sane situations\r\n      return clearTimeout(marker);\r\n    } // if clearTimeout wasn't available but was latter defined\r\n\r\n\r\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\r\n      cachedClearTimeout = clearTimeout;\r\n      return clearTimeout(marker);\r\n    }\r\n\r\n    try {\r\n      // when when somebody has screwed with setTimeout but no I.E. maddness\r\n      return cachedClearTimeout(marker);\r\n    } catch (e) {\r\n      try {\r\n        // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\r\n        return cachedClearTimeout.call(null, marker);\r\n      } catch (e) {\r\n        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\r\n        // Some versions of I.E. have different rules for clearTimeout vs setTimeout\r\n        return cachedClearTimeout.call(this, marker);\r\n      }\r\n    }\r\n  }\r\n\r\n  var queue = [];\r\n  var draining = false;\r\n  var currentQueue;\r\n  var queueIndex = -1;\r\n\r\n  function cleanUpNextTick() {\r\n    if (!draining || !currentQueue) {\r\n      return;\r\n    }\r\n\r\n    draining = false;\r\n\r\n    if (currentQueue.length) {\r\n      queue = currentQueue.concat(queue);\r\n    } else {\r\n      queueIndex = -1;\r\n    }\r\n\r\n    if (queue.length) {\r\n      drainQueue();\r\n    }\r\n  }\r\n\r\n  function drainQueue() {\r\n    if (draining) {\r\n      return;\r\n    }\r\n\r\n    var timeout = runTimeout(cleanUpNextTick);\r\n    draining = true;\r\n    var len = queue.length;\r\n\r\n    while (len) {\r\n      currentQueue = queue;\r\n      queue = [];\r\n\r\n      while (++queueIndex < len) {\r\n        if (currentQueue) {\r\n          currentQueue[queueIndex].run();\r\n        }\r\n      }\r\n\r\n      queueIndex = -1;\r\n      len = queue.length;\r\n    }\r\n\r\n    currentQueue = null;\r\n    draining = false;\r\n    runClearTimeout(timeout);\r\n  }\r\n\r\n  function nextTick(fun) {\r\n    var args = new Array(arguments.length - 1);\r\n\r\n    if (arguments.length > 1) {\r\n      for (var i = 1; i < arguments.length; i++) {\r\n        args[i - 1] = arguments[i];\r\n      }\r\n    }\r\n\r\n    queue.push(new Item(fun, args));\r\n\r\n    if (queue.length === 1 && !draining) {\r\n      runTimeout(drainQueue);\r\n    }\r\n  } // v8 likes predictible objects\r\n\r\n  function Item(fun, array) {\r\n    this.fun = fun;\r\n    this.array = array;\r\n  }\r\n\r\n  Item.prototype.run = function () {\r\n    this.fun.apply(null, this.array);\r\n  };\r\n\r\n  var title = 'browser';\r\n  var platform = 'browser';\r\n  var browser = true;\r\n  var env = {};\r\n  var argv = [];\r\n  var version$1 = ''; // empty string to avoid regexp issues\r\n\r\n  var versions = {};\r\n  var release = {};\r\n  var config = {};\r\n\r\n  function noop() {}\r\n\r\n  var on = noop;\r\n  var addListener = noop;\r\n  var once = noop;\r\n  var off = noop;\r\n  var removeListener = noop;\r\n  var removeAllListeners = noop;\r\n  var emit = noop;\r\n  function binding(name) {\r\n    throw new Error('process.binding is not supported');\r\n  }\r\n  function cwd() {\r\n    return '/';\r\n  }\r\n  function chdir(dir) {\r\n    throw new Error('process.chdir is not supported');\r\n  }\r\n  function umask() {\r\n    return 0;\r\n  } // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js\r\n\r\n  var performance = global$1.performance || {};\r\n\r\n  var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function () {\r\n    return new Date().getTime();\r\n  }; // generate timestamp or delta\r\n  // see http://nodejs.org/api/process.html#process_process_hrtime\r\n\r\n\r\n  function hrtime(previousTimestamp) {\r\n    var clocktime = performanceNow.call(performance) * 1e-3;\r\n    var seconds = Math.floor(clocktime);\r\n    var nanoseconds = Math.floor(clocktime % 1 * 1e9);\r\n\r\n    if (previousTimestamp) {\r\n      seconds = seconds - previousTimestamp[0];\r\n      nanoseconds = nanoseconds - previousTimestamp[1];\r\n\r\n      if (nanoseconds < 0) {\r\n        seconds--;\r\n        nanoseconds += 1e9;\r\n      }\r\n    }\r\n\r\n    return [seconds, nanoseconds];\r\n  }\r\n  var startTime = new Date();\r\n  function uptime() {\r\n    var currentTime = new Date();\r\n    var dif = currentTime - startTime;\r\n    return dif / 1000;\r\n  }\r\n  var process = {\r\n    nextTick: nextTick,\r\n    title: title,\r\n    browser: browser,\r\n    env: env,\r\n    argv: argv,\r\n    version: version$1,\r\n    versions: versions,\r\n    on: on,\r\n    addListener: addListener,\r\n    once: once,\r\n    off: off,\r\n    removeListener: removeListener,\r\n    removeAllListeners: removeAllListeners,\r\n    emit: emit,\r\n    binding: binding,\r\n    cwd: cwd,\r\n    chdir: chdir,\r\n    umask: umask,\r\n    hrtime: hrtime,\r\n    platform: platform,\r\n    release: release,\r\n    config: config,\r\n    uptime: uptime\r\n  };\r\n\r\n  const debug = typeof process === 'object' && process.env && process.env.NODE_DEBUG && /\\bsemver\\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error('SEMVER', ...args) : () => {};\r\n  var debug_1 = debug;\r\n\r\n  // Note: this is the semver.org version of the spec that it implements\r\n  // Not necessarily the package version of this code.\r\n  const SEMVER_SPEC_VERSION = '2.0.0';\r\n  const MAX_LENGTH = 256;\r\n  const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||\r\n  /* istanbul ignore next */\r\n  9007199254740991; // Max safe segment length for coercion.\r\n\r\n  const MAX_SAFE_COMPONENT_LENGTH = 16;\r\n  var constants = {\r\n    SEMVER_SPEC_VERSION,\r\n    MAX_LENGTH,\r\n    MAX_SAFE_INTEGER,\r\n    MAX_SAFE_COMPONENT_LENGTH\r\n  };\r\n\r\n  var re_1 = createCommonjsModule(function (module, exports) {\r\n    const {\r\n      MAX_SAFE_COMPONENT_LENGTH\r\n    } = constants;\r\n    exports = module.exports = {}; // The actual regexps go on exports.re\r\n\r\n    const re = exports.re = [];\r\n    const src = exports.src = [];\r\n    const t = exports.t = {};\r\n    let R = 0;\r\n\r\n    const createToken = (name, value, isGlobal) => {\r\n      const index = R++;\r\n      debug_1(index, value);\r\n      t[name] = index;\r\n      src[index] = value;\r\n      re[index] = new RegExp(value, isGlobal ? 'g' : undefined);\r\n    }; // The following Regular Expressions can be used for tokenizing,\r\n    // validating, and parsing SemVer version strings.\r\n    // ## Numeric Identifier\r\n    // A single `0`, or a non-zero digit followed by zero or more digits.\r\n\r\n\r\n    createToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*');\r\n    createToken('NUMERICIDENTIFIERLOOSE', '[0-9]+'); // ## Non-numeric Identifier\r\n    // Zero or more digits, followed by a letter or hyphen, and then zero or\r\n    // more letters, digits, or hyphens.\r\n\r\n    createToken('NONNUMERICIDENTIFIER', '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*'); // ## Main Version\r\n    // Three dot-separated numeric identifiers.\r\n\r\n    createToken('MAINVERSION', \"(\".concat(src[t.NUMERICIDENTIFIER], \")\\\\.\") + \"(\".concat(src[t.NUMERICIDENTIFIER], \")\\\\.\") + \"(\".concat(src[t.NUMERICIDENTIFIER], \")\"));\r\n    createToken('MAINVERSIONLOOSE', \"(\".concat(src[t.NUMERICIDENTIFIERLOOSE], \")\\\\.\") + \"(\".concat(src[t.NUMERICIDENTIFIERLOOSE], \")\\\\.\") + \"(\".concat(src[t.NUMERICIDENTIFIERLOOSE], \")\")); // ## Pre-release Version Identifier\r\n    // A numeric identifier, or a non-numeric identifier.\r\n\r\n    createToken('PRERELEASEIDENTIFIER', \"(?:\".concat(src[t.NUMERICIDENTIFIER], \"|\").concat(src[t.NONNUMERICIDENTIFIER], \")\"));\r\n    createToken('PRERELEASEIDENTIFIERLOOSE', \"(?:\".concat(src[t.NUMERICIDENTIFIERLOOSE], \"|\").concat(src[t.NONNUMERICIDENTIFIER], \")\")); // ## Pre-release Version\r\n    // Hyphen, followed by one or more dot-separated pre-release version\r\n    // identifiers.\r\n\r\n    createToken('PRERELEASE', \"(?:-(\".concat(src[t.PRERELEASEIDENTIFIER], \"(?:\\\\.\").concat(src[t.PRERELEASEIDENTIFIER], \")*))\"));\r\n    createToken('PRERELEASELOOSE', \"(?:-?(\".concat(src[t.PRERELEASEIDENTIFIERLOOSE], \"(?:\\\\.\").concat(src[t.PRERELEASEIDENTIFIERLOOSE], \")*))\")); // ## Build Metadata Identifier\r\n    // Any combination of digits, letters, or hyphens.\r\n\r\n    createToken('BUILDIDENTIFIER', '[0-9A-Za-z-]+'); // ## Build Metadata\r\n    // Plus sign, followed by one or more period-separated build metadata\r\n    // identifiers.\r\n\r\n    createToken('BUILD', \"(?:\\\\+(\".concat(src[t.BUILDIDENTIFIER], \"(?:\\\\.\").concat(src[t.BUILDIDENTIFIER], \")*))\")); // ## Full Version String\r\n    // A main version, followed optionally by a pre-release version and\r\n    // build metadata.\r\n    // Note that the only major, minor, patch, and pre-release sections of\r\n    // the version string are capturing groups.  The build metadata is not a\r\n    // capturing group, because it should not ever be used in version\r\n    // comparison.\r\n\r\n    createToken('FULLPLAIN', \"v?\".concat(src[t.MAINVERSION]).concat(src[t.PRERELEASE], \"?\").concat(src[t.BUILD], \"?\"));\r\n    createToken('FULL', \"^\".concat(src[t.FULLPLAIN], \"$\")); // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\r\n    // also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\r\n    // common in the npm registry.\r\n\r\n    createToken('LOOSEPLAIN', \"[v=\\\\s]*\".concat(src[t.MAINVERSIONLOOSE]).concat(src[t.PRERELEASELOOSE], \"?\").concat(src[t.BUILD], \"?\"));\r\n    createToken('LOOSE', \"^\".concat(src[t.LOOSEPLAIN], \"$\"));\r\n    createToken('GTLT', '((?:<|>)?=?)'); // Something like \"2.*\" or \"1.2.x\".\r\n    // Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\r\n    // Only the first item is strictly required.\r\n\r\n    createToken('XRANGEIDENTIFIERLOOSE', \"\".concat(src[t.NUMERICIDENTIFIERLOOSE], \"|x|X|\\\\*\"));\r\n    createToken('XRANGEIDENTIFIER', \"\".concat(src[t.NUMERICIDENTIFIER], \"|x|X|\\\\*\"));\r\n    createToken('XRANGEPLAIN', \"[v=\\\\s]*(\".concat(src[t.XRANGEIDENTIFIER], \")\") + \"(?:\\\\.(\".concat(src[t.XRANGEIDENTIFIER], \")\") + \"(?:\\\\.(\".concat(src[t.XRANGEIDENTIFIER], \")\") + \"(?:\".concat(src[t.PRERELEASE], \")?\").concat(src[t.BUILD], \"?\") + \")?)?\");\r\n    createToken('XRANGEPLAINLOOSE', \"[v=\\\\s]*(\".concat(src[t.XRANGEIDENTIFIERLOOSE], \")\") + \"(?:\\\\.(\".concat(src[t.XRANGEIDENTIFIERLOOSE], \")\") + \"(?:\\\\.(\".concat(src[t.XRANGEIDENTIFIERLOOSE], \")\") + \"(?:\".concat(src[t.PRERELEASELOOSE], \")?\").concat(src[t.BUILD], \"?\") + \")?)?\");\r\n    createToken('XRANGE', \"^\".concat(src[t.GTLT], \"\\\\s*\").concat(src[t.XRANGEPLAIN], \"$\"));\r\n    createToken('XRANGELOOSE', \"^\".concat(src[t.GTLT], \"\\\\s*\").concat(src[t.XRANGEPLAINLOOSE], \"$\")); // Coercion.\r\n    // Extract anything that could conceivably be a part of a valid semver\r\n\r\n    createToken('COERCE', \"\".concat('(^|[^\\\\d])' + '(\\\\d{1,').concat(MAX_SAFE_COMPONENT_LENGTH, \"})\") + \"(?:\\\\.(\\\\d{1,\".concat(MAX_SAFE_COMPONENT_LENGTH, \"}))?\") + \"(?:\\\\.(\\\\d{1,\".concat(MAX_SAFE_COMPONENT_LENGTH, \"}))?\") + \"(?:$|[^\\\\d])\");\r\n    createToken('COERCERTL', src[t.COERCE], true); // Tilde ranges.\r\n    // Meaning is \"reasonably at or greater than\"\r\n\r\n    createToken('LONETILDE', '(?:~>?)');\r\n    createToken('TILDETRIM', \"(\\\\s*)\".concat(src[t.LONETILDE], \"\\\\s+\"), true);\r\n    exports.tildeTrimReplace = '$1~';\r\n    createToken('TILDE', \"^\".concat(src[t.LONETILDE]).concat(src[t.XRANGEPLAIN], \"$\"));\r\n    createToken('TILDELOOSE', \"^\".concat(src[t.LONETILDE]).concat(src[t.XRANGEPLAINLOOSE], \"$\")); // Caret ranges.\r\n    // Meaning is \"at least and backwards compatible with\"\r\n\r\n    createToken('LONECARET', '(?:\\\\^)');\r\n    createToken('CARETTRIM', \"(\\\\s*)\".concat(src[t.LONECARET], \"\\\\s+\"), true);\r\n    exports.caretTrimReplace = '$1^';\r\n    createToken('CARET', \"^\".concat(src[t.LONECARET]).concat(src[t.XRANGEPLAIN], \"$\"));\r\n    createToken('CARETLOOSE', \"^\".concat(src[t.LONECARET]).concat(src[t.XRANGEPLAINLOOSE], \"$\")); // A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\r\n\r\n    createToken('COMPARATORLOOSE', \"^\".concat(src[t.GTLT], \"\\\\s*(\").concat(src[t.LOOSEPLAIN], \")$|^$\"));\r\n    createToken('COMPARATOR', \"^\".concat(src[t.GTLT], \"\\\\s*(\").concat(src[t.FULLPLAIN], \")$|^$\")); // An expression to strip any whitespace between the gtlt and the thing\r\n    // it modifies, so that `> 1.2.3` ==> `>1.2.3`\r\n\r\n    createToken('COMPARATORTRIM', \"(\\\\s*)\".concat(src[t.GTLT], \"\\\\s*(\").concat(src[t.LOOSEPLAIN], \"|\").concat(src[t.XRANGEPLAIN], \")\"), true);\r\n    exports.comparatorTrimReplace = '$1$2$3'; // Something like `1.2.3 - 1.2.4`\r\n    // Note that these all use the loose form, because they'll be\r\n    // checked against either the strict or loose comparator form\r\n    // later.\r\n\r\n    createToken('HYPHENRANGE', \"^\\\\s*(\".concat(src[t.XRANGEPLAIN], \")\") + \"\\\\s+-\\\\s+\" + \"(\".concat(src[t.XRANGEPLAIN], \")\") + \"\\\\s*$\");\r\n    createToken('HYPHENRANGELOOSE', \"^\\\\s*(\".concat(src[t.XRANGEPLAINLOOSE], \")\") + \"\\\\s+-\\\\s+\" + \"(\".concat(src[t.XRANGEPLAINLOOSE], \")\") + \"\\\\s*$\"); // Star ranges basically just allow anything at all.\r\n\r\n    createToken('STAR', '(<|>)?=?\\\\s*\\\\*');\r\n  });\r\n  var re_2 = re_1.re;\r\n  var re_3 = re_1.src;\r\n  var re_4 = re_1.t;\r\n  var re_5 = re_1.tildeTrimReplace;\r\n  var re_6 = re_1.caretTrimReplace;\r\n  var re_7 = re_1.comparatorTrimReplace;\r\n\r\n  const numeric = /^[0-9]+$/;\r\n\r\n  const compareIdentifiers = (a, b) => {\r\n    const anum = numeric.test(a);\r\n    const bnum = numeric.test(b);\r\n\r\n    if (anum && bnum) {\r\n      a = +a;\r\n      b = +b;\r\n    }\r\n\r\n    return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;\r\n  };\r\n\r\n  const rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);\r\n\r\n  var identifiers = {\r\n    compareIdentifiers,\r\n    rcompareIdentifiers\r\n  };\r\n\r\n  const {\r\n    MAX_LENGTH: MAX_LENGTH$1,\r\n    MAX_SAFE_INTEGER: MAX_SAFE_INTEGER$1\r\n  } = constants;\r\n  const {\r\n    re,\r\n    t\r\n  } = re_1;\r\n  const {\r\n    compareIdentifiers: compareIdentifiers$1\r\n  } = identifiers;\r\n\r\n  class SemVer {\r\n    constructor(version, options) {\r\n      if (!options || typeof options !== 'object') {\r\n        options = {\r\n          loose: !!options,\r\n          includePrerelease: false\r\n        };\r\n      }\r\n\r\n      if (version instanceof SemVer) {\r\n        if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) {\r\n          return version;\r\n        } else {\r\n          version = version.version;\r\n        }\r\n      } else if (typeof version !== 'string') {\r\n        throw new TypeError(\"Invalid Version: \".concat(version));\r\n      }\r\n\r\n      if (version.length > MAX_LENGTH$1) {\r\n        throw new TypeError(\"version is longer than \".concat(MAX_LENGTH$1, \" characters\"));\r\n      }\r\n\r\n      debug_1('SemVer', version, options);\r\n      this.options = options;\r\n      this.loose = !!options.loose; // this isn't actually relevant for versions, but keep it so that we\r\n      // don't run into trouble passing this.options around.\r\n\r\n      this.includePrerelease = !!options.includePrerelease;\r\n      const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);\r\n\r\n      if (!m) {\r\n        throw new TypeError(\"Invalid Version: \".concat(version));\r\n      }\r\n\r\n      this.raw = version; // these are actually numbers\r\n\r\n      this.major = +m[1];\r\n      this.minor = +m[2];\r\n      this.patch = +m[3];\r\n\r\n      if (this.major > MAX_SAFE_INTEGER$1 || this.major < 0) {\r\n        throw new TypeError('Invalid major version');\r\n      }\r\n\r\n      if (this.minor > MAX_SAFE_INTEGER$1 || this.minor < 0) {\r\n        throw new TypeError('Invalid minor version');\r\n      }\r\n\r\n      if (this.patch > MAX_SAFE_INTEGER$1 || this.patch < 0) {\r\n        throw new TypeError('Invalid patch version');\r\n      } // numberify any prerelease numeric ids\r\n\r\n\r\n      if (!m[4]) {\r\n        this.prerelease = [];\r\n      } else {\r\n        this.prerelease = m[4].split('.').map(id => {\r\n          if (/^[0-9]+$/.test(id)) {\r\n            const num = +id;\r\n\r\n            if (num >= 0 && num < MAX_SAFE_INTEGER$1) {\r\n              return num;\r\n            }\r\n          }\r\n\r\n          return id;\r\n        });\r\n      }\r\n\r\n      this.build = m[5] ? m[5].split('.') : [];\r\n      this.format();\r\n    }\r\n\r\n    format() {\r\n      this.version = \"\".concat(this.major, \".\").concat(this.minor, \".\").concat(this.patch);\r\n\r\n      if (this.prerelease.length) {\r\n        this.version += \"-\".concat(this.prerelease.join('.'));\r\n      }\r\n\r\n      return this.version;\r\n    }\r\n\r\n    toString() {\r\n      return this.version;\r\n    }\r\n\r\n    compare(other) {\r\n      debug_1('SemVer.compare', this.version, this.options, other);\r\n\r\n      if (!(other instanceof SemVer)) {\r\n        if (typeof other === 'string' && other === this.version) {\r\n          return 0;\r\n        }\r\n\r\n        other = new SemVer(other, this.options);\r\n      }\r\n\r\n      if (other.version === this.version) {\r\n        return 0;\r\n      }\r\n\r\n      return this.compareMain(other) || this.comparePre(other);\r\n    }\r\n\r\n    compareMain(other) {\r\n      if (!(other instanceof SemVer)) {\r\n        other = new SemVer(other, this.options);\r\n      }\r\n\r\n      return compareIdentifiers$1(this.major, other.major) || compareIdentifiers$1(this.minor, other.minor) || compareIdentifiers$1(this.patch, other.patch);\r\n    }\r\n\r\n    comparePre(other) {\r\n      if (!(other instanceof SemVer)) {\r\n        other = new SemVer(other, this.options);\r\n      } // NOT having a prerelease is > having one\r\n\r\n\r\n      if (this.prerelease.length && !other.prerelease.length) {\r\n        return -1;\r\n      } else if (!this.prerelease.length && other.prerelease.length) {\r\n        return 1;\r\n      } else if (!this.prerelease.length && !other.prerelease.length) {\r\n        return 0;\r\n      }\r\n\r\n      let i = 0;\r\n\r\n      do {\r\n        const a = this.prerelease[i];\r\n        const b = other.prerelease[i];\r\n        debug_1('prerelease compare', i, a, b);\r\n\r\n        if (a === undefined && b === undefined) {\r\n          return 0;\r\n        } else if (b === undefined) {\r\n          return 1;\r\n        } else if (a === undefined) {\r\n          return -1;\r\n        } else if (a === b) {\r\n          continue;\r\n        } else {\r\n          return compareIdentifiers$1(a, b);\r\n        }\r\n      } while (++i);\r\n    }\r\n\r\n    compareBuild(other) {\r\n      if (!(other instanceof SemVer)) {\r\n        other = new SemVer(other, this.options);\r\n      }\r\n\r\n      let i = 0;\r\n\r\n      do {\r\n        const a = this.build[i];\r\n        const b = other.build[i];\r\n        debug_1('prerelease compare', i, a, b);\r\n\r\n        if (a === undefined && b === undefined) {\r\n          return 0;\r\n        } else if (b === undefined) {\r\n          return 1;\r\n        } else if (a === undefined) {\r\n          return -1;\r\n        } else if (a === b) {\r\n          continue;\r\n        } else {\r\n          return compareIdentifiers$1(a, b);\r\n        }\r\n      } while (++i);\r\n    } // preminor will bump the version up to the next minor release, and immediately\r\n    // down to pre-release. premajor and prepatch work the same way.\r\n\r\n\r\n    inc(release, identifier) {\r\n      switch (release) {\r\n        case 'premajor':\r\n          this.prerelease.length = 0;\r\n          this.patch = 0;\r\n          this.minor = 0;\r\n          this.major++;\r\n          this.inc('pre', identifier);\r\n          break;\r\n\r\n        case 'preminor':\r\n          this.prerelease.length = 0;\r\n          this.patch = 0;\r\n          this.minor++;\r\n          this.inc('pre', identifier);\r\n          break;\r\n\r\n        case 'prepatch':\r\n          // If this is already a prerelease, it will bump to the next version\r\n          // drop any prereleases that might already exist, since they are not\r\n          // relevant at this point.\r\n          this.prerelease.length = 0;\r\n          this.inc('patch', identifier);\r\n          this.inc('pre', identifier);\r\n          break;\r\n        // If the input is a non-prerelease version, this acts the same as\r\n        // prepatch.\r\n\r\n        case 'prerelease':\r\n          if (this.prerelease.length === 0) {\r\n            this.inc('patch', identifier);\r\n          }\r\n\r\n          this.inc('pre', identifier);\r\n          break;\r\n\r\n        case 'major':\r\n          // If this is a pre-major version, bump up to the same major version.\r\n          // Otherwise increment major.\r\n          // 1.0.0-5 bumps to 1.0.0\r\n          // 1.1.0 bumps to 2.0.0\r\n          if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {\r\n            this.major++;\r\n          }\r\n\r\n          this.minor = 0;\r\n          this.patch = 0;\r\n          this.prerelease = [];\r\n          break;\r\n\r\n        case 'minor':\r\n          // If this is a pre-minor version, bump up to the same minor version.\r\n          // Otherwise increment minor.\r\n          // 1.2.0-5 bumps to 1.2.0\r\n          // 1.2.1 bumps to 1.3.0\r\n          if (this.patch !== 0 || this.prerelease.length === 0) {\r\n            this.minor++;\r\n          }\r\n\r\n          this.patch = 0;\r\n          this.prerelease = [];\r\n          break;\r\n\r\n        case 'patch':\r\n          // If this is not a pre-release version, it will increment the patch.\r\n          // If it is a pre-release it will bump up to the same patch version.\r\n          // 1.2.0-5 patches to 1.2.0\r\n          // 1.2.0 patches to 1.2.1\r\n          if (this.prerelease.length === 0) {\r\n            this.patch++;\r\n          }\r\n\r\n          this.prerelease = [];\r\n          break;\r\n        // This probably shouldn't be used publicly.\r\n        // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.\r\n\r\n        case 'pre':\r\n          if (this.prerelease.length === 0) {\r\n            this.prerelease = [0];\r\n          } else {\r\n            let i = this.prerelease.length;\r\n\r\n            while (--i >= 0) {\r\n              if (typeof this.prerelease[i] === 'number') {\r\n                this.prerelease[i]++;\r\n                i = -2;\r\n              }\r\n            }\r\n\r\n            if (i === -1) {\r\n              // didn't increment anything\r\n              this.prerelease.push(0);\r\n            }\r\n          }\r\n\r\n          if (identifier) {\r\n            // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\r\n            // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\r\n            if (this.prerelease[0] === identifier) {\r\n              if (isNaN(this.prerelease[1])) {\r\n                this.prerelease = [identifier, 0];\r\n              }\r\n            } else {\r\n              this.prerelease = [identifier, 0];\r\n            }\r\n          }\r\n\r\n          break;\r\n\r\n        default:\r\n          throw new Error(\"invalid increment argument: \".concat(release));\r\n      }\r\n\r\n      this.format();\r\n      this.raw = this.version;\r\n      return this;\r\n    }\r\n\r\n  }\r\n\r\n  var semver = SemVer;\r\n\r\n  const compare = (a, b, loose) => new semver(a, loose).compare(new semver(b, loose));\r\n\r\n  var compare_1 = compare;\r\n\r\n  const lt = (a, b, loose) => compare_1(a, b, loose) < 0;\r\n\r\n  var lt_1 = lt;\r\n\r\n  const gte = (a, b, loose) => compare_1(a, b, loose) >= 0;\r\n\r\n  var gte_1 = gte;\r\n\r\n  var arrayify = (object, keyName) => Object.entries(object).map(([key, value]) => Object.assign({\r\n    [keyName]: key\r\n  }, value));\r\n\r\n  var dedent_1 = createCommonjsModule(function (module) {\r\n\r\n    function dedent(strings) {\r\n      var raw = void 0;\r\n\r\n      if (typeof strings === \"string\") {\r\n        // dedent can be used as a plain function\r\n        raw = [strings];\r\n      } else {\r\n        raw = strings.raw;\r\n      } // first, perform interpolation\r\n\r\n\r\n      var result = \"\";\r\n\r\n      for (var i = 0; i < raw.length; i++) {\r\n        result += raw[i]. // join lines when there is a suppressed newline\r\n        replace(/\\\\\\n[ \\t]*/g, \"\"). // handle escaped backticks\r\n        replace(/\\\\`/g, \"`\");\r\n\r\n        if (i < (arguments.length <= 1 ? 0 : arguments.length - 1)) {\r\n          result += arguments.length <= i + 1 ? undefined : arguments[i + 1];\r\n        }\r\n      } // now strip indentation\r\n\r\n\r\n      var lines = result.split(\"\\n\");\r\n      var mindent = null;\r\n      lines.forEach(function (l) {\r\n        var m = l.match(/^(\\s+)\\S+/);\r\n\r\n        if (m) {\r\n          var indent = m[1].length;\r\n\r\n          if (!mindent) {\r\n            // this is the first indented line\r\n            mindent = indent;\r\n          } else {\r\n            mindent = Math.min(mindent, indent);\r\n          }\r\n        }\r\n      });\r\n\r\n      if (mindent !== null) {\r\n        result = lines.map(function (l) {\r\n          return l[0] === \" \" ? l.slice(mindent) : l;\r\n        }).join(\"\\n\");\r\n      } // dedent eats leading and trailing whitespace too\r\n\r\n\r\n      result = result.trim(); // handle escaped newlines at the end to ensure they don't get stripped too\r\n\r\n      return result.replace(/\\\\n/g, \"\\n\");\r\n    }\r\n\r\n    {\r\n      module.exports = dedent;\r\n    }\r\n  });\r\n\r\n  function _templateObject6() {\r\n    const data = _taggedTemplateLiteral([\"\\n      Require either '@prettier' or '@format' to be present in the file's first docblock comment\\n      in order for it to be formatted.\\n    \"]);\r\n\r\n    _templateObject6 = function _templateObject6() {\r\n      return data;\r\n    };\r\n\r\n    return data;\r\n  }\r\n\r\n  function _templateObject5() {\r\n    const data = _taggedTemplateLiteral([\"\\n      Format code starting at a given character offset.\\n      The range will extend backwards to the start of the first line containing the selected statement.\\n      This option cannot be used with --cursor-offset.\\n    \"]);\r\n\r\n    _templateObject5 = function _templateObject5() {\r\n      return data;\r\n    };\r\n\r\n    return data;\r\n  }\r\n\r\n  function _templateObject4() {\r\n    const data = _taggedTemplateLiteral([\"\\n      Format code ending at a given character offset (exclusive).\\n      The range will extend forwards to the end of the selected statement.\\n      This option cannot be used with --cursor-offset.\\n    \"]);\r\n\r\n    _templateObject4 = function _templateObject4() {\r\n      return data;\r\n    };\r\n\r\n    return data;\r\n  }\r\n\r\n  function _templateObject3() {\r\n    const data = _taggedTemplateLiteral([\"\\n      Custom directory that contains prettier plugins in node_modules subdirectory.\\n      Overrides default behavior when plugins are searched relatively to the location of Prettier.\\n      Multiple values are accepted.\\n    \"]);\r\n\r\n    _templateObject3 = function _templateObject3() {\r\n      return data;\r\n    };\r\n\r\n    return data;\r\n  }\r\n\r\n  function _templateObject2() {\r\n    const data = _taggedTemplateLiteral([\"\\n          Maintain existing\\n          (mixed values within one file are normalised by looking at what's used after the first line)\\n        \"]);\r\n\r\n    _templateObject2 = function _templateObject2() {\r\n      return data;\r\n    };\r\n\r\n    return data;\r\n  }\r\n\r\n  function _templateObject() {\r\n    const data = _taggedTemplateLiteral([\"\\n      Print (to stderr) where a cursor at the given position would move to after formatting.\\n      This option cannot be used with --range-start and --range-end.\\n    \"]);\r\n\r\n    _templateObject = function _templateObject() {\r\n      return data;\r\n    };\r\n\r\n    return data;\r\n  }\r\n\r\n  const CATEGORY_CONFIG = \"Config\";\r\n  const CATEGORY_EDITOR = \"Editor\";\r\n  const CATEGORY_FORMAT = \"Format\";\r\n  const CATEGORY_OTHER = \"Other\";\r\n  const CATEGORY_OUTPUT = \"Output\";\r\n  const CATEGORY_GLOBAL = \"Global\";\r\n  const CATEGORY_SPECIAL = \"Special\";\r\n  /**\r\n   * @typedef {Object} OptionInfo\r\n   * @property {string} [since] - available since version\r\n   * @property {string} category\r\n   * @property {'int' | 'boolean' | 'choice' | 'path'} type\r\n   * @property {boolean} [array] - indicate it's an array of the specified type\r\n   * @property {OptionValueInfo} [default]\r\n   * @property {OptionRangeInfo} [range] - for type int\r\n   * @property {string} description\r\n   * @property {string} [deprecated] - deprecated since version\r\n   * @property {OptionRedirectInfo} [redirect] - redirect deprecated option\r\n   * @property {(value: any) => boolean} [exception]\r\n   * @property {OptionChoiceInfo[]} [choices] - for type choice\r\n   * @property {string} [cliName]\r\n   * @property {string} [cliCategory]\r\n   * @property {string} [cliDescription]\r\n   *\r\n   * @typedef {number | boolean | string} OptionValue\r\n   * @typedef {OptionValue | [{ value: OptionValue[] }] | Array<{ since: string, value: OptionValue}>} OptionValueInfo\r\n   *\r\n   * @typedef {Object} OptionRedirectInfo\r\n   * @property {string} option\r\n   * @property {OptionValue} value\r\n   *\r\n   * @typedef {Object} OptionRangeInfo\r\n   * @property {number} start - recommended range start\r\n   * @property {number} end - recommended range end\r\n   * @property {number} step - recommended range step\r\n   *\r\n   * @typedef {Object} OptionChoiceInfo\r\n   * @property {boolean | string} value - boolean for the option that is originally boolean type\r\n   * @property {string} description\r\n   * @property {string} [since] - undefined if available since the first version of the option\r\n   * @property {string} [deprecated] - deprecated since version\r\n   * @property {OptionValueInfo} [redirect] - redirect deprecated value\r\n   */\r\n\r\n  /** @type {{ [name: string]: OptionInfo }} */\r\n\r\n  const options = {\r\n    cursorOffset: {\r\n      since: \"1.4.0\",\r\n      category: CATEGORY_SPECIAL,\r\n      type: \"int\",\r\n      default: -1,\r\n      range: {\r\n        start: -1,\r\n        end: Infinity,\r\n        step: 1\r\n      },\r\n      description: dedent_1(_templateObject()),\r\n      cliCategory: CATEGORY_EDITOR\r\n    },\r\n    endOfLine: {\r\n      since: \"1.15.0\",\r\n      category: CATEGORY_GLOBAL,\r\n      type: \"choice\",\r\n      default: [{\r\n        since: \"1.15.0\",\r\n        value: \"auto\"\r\n      }, {\r\n        since: \"2.0.0\",\r\n        value: \"lf\"\r\n      }],\r\n      description: \"Which end of line characters to apply.\",\r\n      choices: [{\r\n        value: \"lf\",\r\n        description: \"Line Feed only (\\\\n), common on Linux and macOS as well as inside git repos\"\r\n      }, {\r\n        value: \"crlf\",\r\n        description: \"Carriage Return + Line Feed characters (\\\\r\\\\n), common on Windows\"\r\n      }, {\r\n        value: \"cr\",\r\n        description: \"Carriage Return character only (\\\\r), used very rarely\"\r\n      }, {\r\n        value: \"auto\",\r\n        description: dedent_1(_templateObject2())\r\n      }]\r\n    },\r\n    filepath: {\r\n      since: \"1.4.0\",\r\n      category: CATEGORY_SPECIAL,\r\n      type: \"path\",\r\n      description: \"Specify the input filepath. This will be used to do parser inference.\",\r\n      cliName: \"stdin-filepath\",\r\n      cliCategory: CATEGORY_OTHER,\r\n      cliDescription: \"Path to the file to pretend that stdin comes from.\"\r\n    },\r\n    insertPragma: {\r\n      since: \"1.8.0\",\r\n      category: CATEGORY_SPECIAL,\r\n      type: \"boolean\",\r\n      default: false,\r\n      description: \"Insert @format pragma into file's first docblock comment.\",\r\n      cliCategory: CATEGORY_OTHER\r\n    },\r\n    parser: {\r\n      since: \"0.0.10\",\r\n      category: CATEGORY_GLOBAL,\r\n      type: \"choice\",\r\n      default: [{\r\n        since: \"0.0.10\",\r\n        value: \"babylon\"\r\n      }, {\r\n        since: \"1.13.0\",\r\n        value: undefined\r\n      }],\r\n      description: \"Which parser to use.\",\r\n      exception: value => typeof value === \"string\" || typeof value === \"function\",\r\n      choices: [{\r\n        value: \"flow\",\r\n        description: \"Flow\"\r\n      }, {\r\n        value: \"babel\",\r\n        since: \"1.16.0\",\r\n        description: \"JavaScript\"\r\n      }, {\r\n        value: \"babel-flow\",\r\n        since: \"1.16.0\",\r\n        description: \"Flow\"\r\n      }, {\r\n        value: \"babel-ts\",\r\n        since: \"2.0.0\",\r\n        description: \"TypeScript\"\r\n      }, {\r\n        value: \"typescript\",\r\n        since: \"1.4.0\",\r\n        description: \"TypeScript\"\r\n      }, {\r\n        value: \"css\",\r\n        since: \"1.7.1\",\r\n        description: \"CSS\"\r\n      }, {\r\n        value: \"less\",\r\n        since: \"1.7.1\",\r\n        description: \"Less\"\r\n      }, {\r\n        value: \"scss\",\r\n        since: \"1.7.1\",\r\n        description: \"SCSS\"\r\n      }, {\r\n        value: \"json\",\r\n        since: \"1.5.0\",\r\n        description: \"JSON\"\r\n      }, {\r\n        value: \"json5\",\r\n        since: \"1.13.0\",\r\n        description: \"JSON5\"\r\n      }, {\r\n        value: \"json-stringify\",\r\n        since: \"1.13.0\",\r\n        description: \"JSON.stringify\"\r\n      }, {\r\n        value: \"graphql\",\r\n        since: \"1.5.0\",\r\n        description: \"GraphQL\"\r\n      }, {\r\n        value: \"markdown\",\r\n        since: \"1.8.0\",\r\n        description: \"Markdown\"\r\n      }, {\r\n        value: \"mdx\",\r\n        since: \"1.15.0\",\r\n        description: \"MDX\"\r\n      }, {\r\n        value: \"vue\",\r\n        since: \"1.10.0\",\r\n        description: \"Vue\"\r\n      }, {\r\n        value: \"yaml\",\r\n        since: \"1.14.0\",\r\n        description: \"YAML\"\r\n      }, {\r\n        value: \"glimmer\",\r\n        since: null,\r\n        description: \"Handlebars\"\r\n      }, {\r\n        value: \"html\",\r\n        since: \"1.15.0\",\r\n        description: \"HTML\"\r\n      }, {\r\n        value: \"angular\",\r\n        since: \"1.15.0\",\r\n        description: \"Angular\"\r\n      }, {\r\n        value: \"lwc\",\r\n        since: \"1.17.0\",\r\n        description: \"Lightning Web Components\"\r\n      }]\r\n    },\r\n    plugins: {\r\n      since: \"1.10.0\",\r\n      type: \"path\",\r\n      array: true,\r\n      default: [{\r\n        value: []\r\n      }],\r\n      category: CATEGORY_GLOBAL,\r\n      description: \"Add a plugin. Multiple plugins can be passed as separate `--plugin`s.\",\r\n      exception: value => typeof value === \"string\" || typeof value === \"object\",\r\n      cliName: \"plugin\",\r\n      cliCategory: CATEGORY_CONFIG\r\n    },\r\n    pluginSearchDirs: {\r\n      since: \"1.13.0\",\r\n      type: \"path\",\r\n      array: true,\r\n      default: [{\r\n        value: []\r\n      }],\r\n      category: CATEGORY_GLOBAL,\r\n      description: dedent_1(_templateObject3()),\r\n      exception: value => typeof value === \"string\" || typeof value === \"object\",\r\n      cliName: \"plugin-search-dir\",\r\n      cliCategory: CATEGORY_CONFIG\r\n    },\r\n    printWidth: {\r\n      since: \"0.0.0\",\r\n      category: CATEGORY_GLOBAL,\r\n      type: \"int\",\r\n      default: 80,\r\n      description: \"The line length where Prettier will try wrap.\",\r\n      range: {\r\n        start: 0,\r\n        end: Infinity,\r\n        step: 1\r\n      }\r\n    },\r\n    rangeEnd: {\r\n      since: \"1.4.0\",\r\n      category: CATEGORY_SPECIAL,\r\n      type: \"int\",\r\n      default: Infinity,\r\n      range: {\r\n        start: 0,\r\n        end: Infinity,\r\n        step: 1\r\n      },\r\n      description: dedent_1(_templateObject4()),\r\n      cliCategory: CATEGORY_EDITOR\r\n    },\r\n    rangeStart: {\r\n      since: \"1.4.0\",\r\n      category: CATEGORY_SPECIAL,\r\n      type: \"int\",\r\n      default: 0,\r\n      range: {\r\n        start: 0,\r\n        end: Infinity,\r\n        step: 1\r\n      },\r\n      description: dedent_1(_templateObject5()),\r\n      cliCategory: CATEGORY_EDITOR\r\n    },\r\n    requirePragma: {\r\n      since: \"1.7.0\",\r\n      category: CATEGORY_SPECIAL,\r\n      type: \"boolean\",\r\n      default: false,\r\n      description: dedent_1(_templateObject6()),\r\n      cliCategory: CATEGORY_OTHER\r\n    },\r\n    tabWidth: {\r\n      type: \"int\",\r\n      category: CATEGORY_GLOBAL,\r\n      default: 2,\r\n      description: \"Number of spaces per indentation level.\",\r\n      range: {\r\n        start: 0,\r\n        end: Infinity,\r\n        step: 1\r\n      }\r\n    },\r\n    useTabs: {\r\n      since: \"1.0.0\",\r\n      category: CATEGORY_GLOBAL,\r\n      type: \"boolean\",\r\n      default: false,\r\n      description: \"Indent with tabs instead of spaces.\"\r\n    }\r\n  };\r\n  var coreOptions = {\r\n    CATEGORY_CONFIG,\r\n    CATEGORY_EDITOR,\r\n    CATEGORY_FORMAT,\r\n    CATEGORY_OTHER,\r\n    CATEGORY_OUTPUT,\r\n    CATEGORY_GLOBAL,\r\n    CATEGORY_SPECIAL,\r\n    options\r\n  };\r\n\r\n  var require$$0 = getCjsExportFromNamespace(_package$1);\r\n\r\n  const semver$1 = {\r\n    compare: compare_1,\r\n    lt: lt_1,\r\n    gte: gte_1\r\n  };\r\n  const currentVersion = require$$0.version;\r\n  const coreOptions$1 = coreOptions.options;\r\n  /**\r\n   * Strings in `plugins` and `pluginSearchDirs` are handled by a wrapped version\r\n   * of this function created by `withPlugins`. Don't pass them here directly.\r\n   * @param {object} param0\r\n   * @param {(string | object)[]=} param0.plugins Strings are resolved by `withPlugins`.\r\n   * @param {string[]=} param0.pluginSearchDirs Added by `withPlugins`.\r\n   * @param {boolean=} param0.showUnreleased\r\n   * @param {boolean=} param0.showDeprecated\r\n   * @param {boolean=} param0.showInternal\r\n   */\r\n\r\n  function getSupportInfo({\r\n    plugins = [],\r\n    showUnreleased = false,\r\n    showDeprecated = false,\r\n    showInternal = false\r\n  } = {}) {\r\n    // pre-release version is smaller than the normal version in semver,\r\n    // we need to treat it as the normal one so as to test new features.\r\n    const version = currentVersion.split(\"-\", 1)[0];\r\n    const options = arrayify(Object.assign({}, ...plugins.map(({\r\n      options\r\n    }) => options), coreOptions$1), \"name\").filter(option => filterSince(option) && filterDeprecated(option)).sort((a, b) => a.name === b.name ? 0 : a.name < b.name ? -1 : 1).map(mapInternal).map(option => {\r\n      option = Object.assign({}, option);\r\n\r\n      if (Array.isArray(option.default)) {\r\n        option.default = option.default.length === 1 ? option.default[0].value : option.default.filter(filterSince).sort((info1, info2) => semver$1.compare(info2.since, info1.since))[0].value;\r\n      }\r\n\r\n      if (Array.isArray(option.choices)) {\r\n        option.choices = option.choices.filter(option => filterSince(option) && filterDeprecated(option));\r\n      }\r\n\r\n      const filteredPlugins = plugins.filter(plugin => plugin.defaultOptions && plugin.defaultOptions[option.name] !== undefined);\r\n      const pluginDefaults = filteredPlugins.reduce((reduced, plugin) => {\r\n        reduced[plugin.name] = plugin.defaultOptions[option.name];\r\n        return reduced;\r\n      }, {});\r\n      return Object.assign({}, option, {\r\n        pluginDefaults\r\n      });\r\n    });\r\n    const languages = plugins.reduce((all, plugin) => all.concat(plugin.languages || []), []).filter(filterSince);\r\n    return {\r\n      languages,\r\n      options\r\n    };\r\n\r\n    function filterSince(object) {\r\n      return showUnreleased || !(\"since\" in object) || object.since && semver$1.gte(version, object.since);\r\n    }\r\n\r\n    function filterDeprecated(object) {\r\n      return showDeprecated || !(\"deprecated\" in object) || object.deprecated && semver$1.lt(version, object.deprecated);\r\n    }\r\n\r\n    function mapInternal(object) {\r\n      if (showInternal) {\r\n        return object;\r\n      }\r\n\r\n      const newObject = _objectWithoutPropertiesLoose(object, [\"cliName\", \"cliCategory\", \"cliDescription\"]);\r\n\r\n      return newObject;\r\n    }\r\n  }\r\n\r\n  var support = {\r\n    getSupportInfo\r\n  };\r\n\r\n  /*! *****************************************************************************\r\n  Copyright (c) Microsoft Corporation. All rights reserved.\r\n  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n  this file except in compliance with the License. You may obtain a copy of the\r\n  License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n  MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n  See the Apache Version 2.0 License for specific language governing permissions\r\n  and limitations under the License.\r\n  ***************************************************************************** */\r\n\r\n  /* global Reflect, Promise */\r\n  var _extendStatics = function extendStatics(d, b) {\r\n    _extendStatics = Object.setPrototypeOf || {\r\n      __proto__: []\r\n    } instanceof Array && function (d, b) {\r\n      d.__proto__ = b;\r\n    } || function (d, b) {\r\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    };\r\n\r\n    return _extendStatics(d, b);\r\n  };\r\n\r\n  function __extends(d, b) {\r\n    _extendStatics(d, b);\r\n\r\n    function __() {\r\n      this.constructor = d;\r\n    }\r\n\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n  }\r\n\r\n  var _assign = function __assign() {\r\n    _assign = Object.assign || function __assign(t) {\r\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n      }\r\n\r\n      return t;\r\n    };\r\n\r\n    return _assign.apply(this, arguments);\r\n  };\r\n  function __rest(s, e) {\r\n    var t = {};\r\n\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\r\n\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\r\n    }\r\n    return t;\r\n  }\r\n  function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length,\r\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\r\n        d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n  }\r\n  function __param(paramIndex, decorator) {\r\n    return function (target, key) {\r\n      decorator(target, key, paramIndex);\r\n    };\r\n  }\r\n  function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n  }\r\n  function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n      function fulfilled(value) {\r\n        try {\r\n          step(generator.next(value));\r\n        } catch (e) {\r\n          reject(e);\r\n        }\r\n      }\r\n\r\n      function rejected(value) {\r\n        try {\r\n          step(generator[\"throw\"](value));\r\n        } catch (e) {\r\n          reject(e);\r\n        }\r\n      }\r\n\r\n      function step(result) {\r\n        result.done ? resolve(result.value) : new P(function (resolve) {\r\n          resolve(result.value);\r\n        }).then(fulfilled, rejected);\r\n      }\r\n\r\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n  }\r\n  function __generator(thisArg, body) {\r\n    var _ = {\r\n      label: 0,\r\n      sent: function sent() {\r\n        if (t[0] & 1) throw t[1];\r\n        return t[1];\r\n      },\r\n      trys: [],\r\n      ops: []\r\n    },\r\n        f,\r\n        y,\r\n        t,\r\n        g;\r\n    return g = {\r\n      next: verb(0),\r\n      \"throw\": verb(1),\r\n      \"return\": verb(2)\r\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\r\n      return this;\r\n    }), g;\r\n\r\n    function verb(n) {\r\n      return function (v) {\r\n        return step([n, v]);\r\n      };\r\n    }\r\n\r\n    function step(op) {\r\n      if (f) throw new TypeError(\"Generator is already executing.\");\r\n\r\n      while (_) try {\r\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n        if (y = 0, t) op = [op[0] & 2, t.value];\r\n\r\n        switch (op[0]) {\r\n          case 0:\r\n          case 1:\r\n            t = op;\r\n            break;\r\n\r\n          case 4:\r\n            _.label++;\r\n            return {\r\n              value: op[1],\r\n              done: false\r\n            };\r\n\r\n          case 5:\r\n            _.label++;\r\n            y = op[1];\r\n            op = [0];\r\n            continue;\r\n\r\n          case 7:\r\n            op = _.ops.pop();\r\n\r\n            _.trys.pop();\r\n\r\n            continue;\r\n\r\n          default:\r\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\r\n              _ = 0;\r\n              continue;\r\n            }\r\n\r\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\r\n              _.label = op[1];\r\n              break;\r\n            }\r\n\r\n            if (op[0] === 6 && _.label < t[1]) {\r\n              _.label = t[1];\r\n              t = op;\r\n              break;\r\n            }\r\n\r\n            if (t && _.label < t[2]) {\r\n              _.label = t[2];\r\n\r\n              _.ops.push(op);\r\n\r\n              break;\r\n            }\r\n\r\n            if (t[2]) _.ops.pop();\r\n\r\n            _.trys.pop();\r\n\r\n            continue;\r\n        }\r\n\r\n        op = body.call(thisArg, _);\r\n      } catch (e) {\r\n        op = [6, e];\r\n        y = 0;\r\n      } finally {\r\n        f = t = 0;\r\n      }\r\n\r\n      if (op[0] & 5) throw op[1];\r\n      return {\r\n        value: op[0] ? op[1] : void 0,\r\n        done: true\r\n      };\r\n    }\r\n  }\r\n  function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n  }\r\n  function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator],\r\n        i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n      next: function next() {\r\n        if (o && i >= o.length) o = void 0;\r\n        return {\r\n          value: o && o[i++],\r\n          done: !o\r\n        };\r\n      }\r\n    };\r\n  }\r\n  function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o),\r\n        r,\r\n        ar = [],\r\n        e;\r\n\r\n    try {\r\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    } catch (error) {\r\n      e = {\r\n        error: error\r\n      };\r\n    } finally {\r\n      try {\r\n        if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n      } finally {\r\n        if (e) throw e.error;\r\n      }\r\n    }\r\n\r\n    return ar;\r\n  }\r\n  function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\r\n\r\n    return ar;\r\n  }\r\n  function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\r\n\r\n    return r;\r\n  }\r\n  function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n  }\r\n  function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []),\r\n        i,\r\n        q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\r\n      return this;\r\n    }, i;\r\n\r\n    function verb(n) {\r\n      if (g[n]) i[n] = function (v) {\r\n        return new Promise(function (a, b) {\r\n          q.push([n, v, a, b]) > 1 || resume(n, v);\r\n        });\r\n      };\r\n    }\r\n\r\n    function resume(n, v) {\r\n      try {\r\n        step(g[n](v));\r\n      } catch (e) {\r\n        settle(q[0][3], e);\r\n      }\r\n    }\r\n\r\n    function step(r) {\r\n      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\r\n    }\r\n\r\n    function fulfill(value) {\r\n      resume(\"next\", value);\r\n    }\r\n\r\n    function reject(value) {\r\n      resume(\"throw\", value);\r\n    }\r\n\r\n    function settle(f, v) {\r\n      if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\r\n    }\r\n  }\r\n  function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) {\r\n      throw e;\r\n    }), verb(\"return\"), i[Symbol.iterator] = function () {\r\n      return this;\r\n    }, i;\r\n\r\n    function verb(n, f) {\r\n      i[n] = o[n] ? function (v) {\r\n        return (p = !p) ? {\r\n          value: __await(o[n](v)),\r\n          done: n === \"return\"\r\n        } : f ? f(v) : v;\r\n      } : f;\r\n    }\r\n  }\r\n  function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator],\r\n        i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\r\n      return this;\r\n    }, i);\r\n\r\n    function verb(n) {\r\n      i[n] = o[n] && function (v) {\r\n        return new Promise(function (resolve, reject) {\r\n          v = o[n](v), settle(resolve, reject, v.done, v.value);\r\n        });\r\n      };\r\n    }\r\n\r\n    function settle(resolve, reject, d, v) {\r\n      Promise.resolve(v).then(function (v) {\r\n        resolve({\r\n          value: v,\r\n          done: d\r\n        });\r\n      }, reject);\r\n    }\r\n  }\r\n  function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) {\r\n      Object.defineProperty(cooked, \"raw\", {\r\n        value: raw\r\n      });\r\n    } else {\r\n      cooked.raw = raw;\r\n    }\r\n\r\n    return cooked;\r\n  }\r\n  function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n  }\r\n  function __importDefault(mod) {\r\n    return mod && mod.__esModule ? mod : {\r\n      default: mod\r\n    };\r\n  }\r\n\r\n  var tslib_es6 = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    __extends: __extends,\r\n    get __assign () { return _assign; },\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault\r\n  });\r\n\r\n  var api = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n    exports.apiDescriptor = {\r\n      key: _key => /^[$_a-zA-Z][$_a-zA-Z0-9]*$/.test(_key) ? _key : JSON.stringify(_key),\r\n\r\n      value(value) {\r\n        if (value === null || typeof value !== 'object') {\r\n          return JSON.stringify(value);\r\n        }\r\n\r\n        if (Array.isArray(value)) {\r\n          return \"[\".concat(value.map(subValue => exports.apiDescriptor.value(subValue)).join(', '), \"]\");\r\n        }\r\n\r\n        const keys = Object.keys(value);\r\n        return keys.length === 0 ? '{}' : \"{ \".concat(keys.map(key => \"\".concat(exports.apiDescriptor.key(key), \": \").concat(exports.apiDescriptor.value(value[key]))).join(', '), \" }\");\r\n      },\r\n\r\n      pair: ({\r\n        key,\r\n        value\r\n      }) => exports.apiDescriptor.value({\r\n        [key]: value\r\n      })\r\n    };\r\n  });\r\n  unwrapExports(api);\r\n  var api_1 = api.apiDescriptor;\r\n\r\n  var tslib_1 = getCjsExportFromNamespace(tslib_es6);\r\n\r\n  var descriptors = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n\r\n    tslib_1.__exportStar(api, exports);\r\n  });\r\n  unwrapExports(descriptors);\r\n\r\n  var matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\r\n\r\n  var escapeStringRegexp = function escapeStringRegexp(str) {\r\n    if (typeof str !== 'string') {\r\n      throw new TypeError('Expected a string');\r\n    }\r\n\r\n    return str.replace(matchOperatorsRe, '\\\\$&');\r\n  };\r\n\r\n  var colorName = {\r\n    \"aliceblue\": [240, 248, 255],\r\n    \"antiquewhite\": [250, 235, 215],\r\n    \"aqua\": [0, 255, 255],\r\n    \"aquamarine\": [127, 255, 212],\r\n    \"azure\": [240, 255, 255],\r\n    \"beige\": [245, 245, 220],\r\n    \"bisque\": [255, 228, 196],\r\n    \"black\": [0, 0, 0],\r\n    \"blanchedalmond\": [255, 235, 205],\r\n    \"blue\": [0, 0, 255],\r\n    \"blueviolet\": [138, 43, 226],\r\n    \"brown\": [165, 42, 42],\r\n    \"burlywood\": [222, 184, 135],\r\n    \"cadetblue\": [95, 158, 160],\r\n    \"chartreuse\": [127, 255, 0],\r\n    \"chocolate\": [210, 105, 30],\r\n    \"coral\": [255, 127, 80],\r\n    \"cornflowerblue\": [100, 149, 237],\r\n    \"cornsilk\": [255, 248, 220],\r\n    \"crimson\": [220, 20, 60],\r\n    \"cyan\": [0, 255, 255],\r\n    \"darkblue\": [0, 0, 139],\r\n    \"darkcyan\": [0, 139, 139],\r\n    \"darkgoldenrod\": [184, 134, 11],\r\n    \"darkgray\": [169, 169, 169],\r\n    \"darkgreen\": [0, 100, 0],\r\n    \"darkgrey\": [169, 169, 169],\r\n    \"darkkhaki\": [189, 183, 107],\r\n    \"darkmagenta\": [139, 0, 139],\r\n    \"darkolivegreen\": [85, 107, 47],\r\n    \"darkorange\": [255, 140, 0],\r\n    \"darkorchid\": [153, 50, 204],\r\n    \"darkred\": [139, 0, 0],\r\n    \"darksalmon\": [233, 150, 122],\r\n    \"darkseagreen\": [143, 188, 143],\r\n    \"darkslateblue\": [72, 61, 139],\r\n    \"darkslategray\": [47, 79, 79],\r\n    \"darkslategrey\": [47, 79, 79],\r\n    \"darkturquoise\": [0, 206, 209],\r\n    \"darkviolet\": [148, 0, 211],\r\n    \"deeppink\": [255, 20, 147],\r\n    \"deepskyblue\": [0, 191, 255],\r\n    \"dimgray\": [105, 105, 105],\r\n    \"dimgrey\": [105, 105, 105],\r\n    \"dodgerblue\": [30, 144, 255],\r\n    \"firebrick\": [178, 34, 34],\r\n    \"floralwhite\": [255, 250, 240],\r\n    \"forestgreen\": [34, 139, 34],\r\n    \"fuchsia\": [255, 0, 255],\r\n    \"gainsboro\": [220, 220, 220],\r\n    \"ghostwhite\": [248, 248, 255],\r\n    \"gold\": [255, 215, 0],\r\n    \"goldenrod\": [218, 165, 32],\r\n    \"gray\": [128, 128, 128],\r\n    \"green\": [0, 128, 0],\r\n    \"greenyellow\": [173, 255, 47],\r\n    \"grey\": [128, 128, 128],\r\n    \"honeydew\": [240, 255, 240],\r\n    \"hotpink\": [255, 105, 180],\r\n    \"indianred\": [205, 92, 92],\r\n    \"indigo\": [75, 0, 130],\r\n    \"ivory\": [255, 255, 240],\r\n    \"khaki\": [240, 230, 140],\r\n    \"lavender\": [230, 230, 250],\r\n    \"lavenderblush\": [255, 240, 245],\r\n    \"lawngreen\": [124, 252, 0],\r\n    \"lemonchiffon\": [255, 250, 205],\r\n    \"lightblue\": [173, 216, 230],\r\n    \"lightcoral\": [240, 128, 128],\r\n    \"lightcyan\": [224, 255, 255],\r\n    \"lightgoldenrodyellow\": [250, 250, 210],\r\n    \"lightgray\": [211, 211, 211],\r\n    \"lightgreen\": [144, 238, 144],\r\n    \"lightgrey\": [211, 211, 211],\r\n    \"lightpink\": [255, 182, 193],\r\n    \"lightsalmon\": [255, 160, 122],\r\n    \"lightseagreen\": [32, 178, 170],\r\n    \"lightskyblue\": [135, 206, 250],\r\n    \"lightslategray\": [119, 136, 153],\r\n    \"lightslategrey\": [119, 136, 153],\r\n    \"lightsteelblue\": [176, 196, 222],\r\n    \"lightyellow\": [255, 255, 224],\r\n    \"lime\": [0, 255, 0],\r\n    \"limegreen\": [50, 205, 50],\r\n    \"linen\": [250, 240, 230],\r\n    \"magenta\": [255, 0, 255],\r\n    \"maroon\": [128, 0, 0],\r\n    \"mediumaquamarine\": [102, 205, 170],\r\n    \"mediumblue\": [0, 0, 205],\r\n    \"mediumorchid\": [186, 85, 211],\r\n    \"mediumpurple\": [147, 112, 219],\r\n    \"mediumseagreen\": [60, 179, 113],\r\n    \"mediumslateblue\": [123, 104, 238],\r\n    \"mediumspringgreen\": [0, 250, 154],\r\n    \"mediumturquoise\": [72, 209, 204],\r\n    \"mediumvioletred\": [199, 21, 133],\r\n    \"midnightblue\": [25, 25, 112],\r\n    \"mintcream\": [245, 255, 250],\r\n    \"mistyrose\": [255, 228, 225],\r\n    \"moccasin\": [255, 228, 181],\r\n    \"navajowhite\": [255, 222, 173],\r\n    \"navy\": [0, 0, 128],\r\n    \"oldlace\": [253, 245, 230],\r\n    \"olive\": [128, 128, 0],\r\n    \"olivedrab\": [107, 142, 35],\r\n    \"orange\": [255, 165, 0],\r\n    \"orangered\": [255, 69, 0],\r\n    \"orchid\": [218, 112, 214],\r\n    \"palegoldenrod\": [238, 232, 170],\r\n    \"palegreen\": [152, 251, 152],\r\n    \"paleturquoise\": [175, 238, 238],\r\n    \"palevioletred\": [219, 112, 147],\r\n    \"papayawhip\": [255, 239, 213],\r\n    \"peachpuff\": [255, 218, 185],\r\n    \"peru\": [205, 133, 63],\r\n    \"pink\": [255, 192, 203],\r\n    \"plum\": [221, 160, 221],\r\n    \"powderblue\": [176, 224, 230],\r\n    \"purple\": [128, 0, 128],\r\n    \"rebeccapurple\": [102, 51, 153],\r\n    \"red\": [255, 0, 0],\r\n    \"rosybrown\": [188, 143, 143],\r\n    \"royalblue\": [65, 105, 225],\r\n    \"saddlebrown\": [139, 69, 19],\r\n    \"salmon\": [250, 128, 114],\r\n    \"sandybrown\": [244, 164, 96],\r\n    \"seagreen\": [46, 139, 87],\r\n    \"seashell\": [255, 245, 238],\r\n    \"sienna\": [160, 82, 45],\r\n    \"silver\": [192, 192, 192],\r\n    \"skyblue\": [135, 206, 235],\r\n    \"slateblue\": [106, 90, 205],\r\n    \"slategray\": [112, 128, 144],\r\n    \"slategrey\": [112, 128, 144],\r\n    \"snow\": [255, 250, 250],\r\n    \"springgreen\": [0, 255, 127],\r\n    \"steelblue\": [70, 130, 180],\r\n    \"tan\": [210, 180, 140],\r\n    \"teal\": [0, 128, 128],\r\n    \"thistle\": [216, 191, 216],\r\n    \"tomato\": [255, 99, 71],\r\n    \"turquoise\": [64, 224, 208],\r\n    \"violet\": [238, 130, 238],\r\n    \"wheat\": [245, 222, 179],\r\n    \"white\": [255, 255, 255],\r\n    \"whitesmoke\": [245, 245, 245],\r\n    \"yellow\": [255, 255, 0],\r\n    \"yellowgreen\": [154, 205, 50]\r\n  };\r\n\r\n  var conversions = createCommonjsModule(function (module) {\r\n    /* MIT license */\r\n    // NOTE: conversions should only return primitive values (i.e. arrays, or\r\n    //       values that give correct `typeof` results).\r\n    //       do not use box values types (i.e. Number(), String(), etc.)\r\n    var reverseKeywords = {};\r\n\r\n    for (var key in colorName) {\r\n      if (colorName.hasOwnProperty(key)) {\r\n        reverseKeywords[colorName[key]] = key;\r\n      }\r\n    }\r\n\r\n    var convert = module.exports = {\r\n      rgb: {\r\n        channels: 3,\r\n        labels: 'rgb'\r\n      },\r\n      hsl: {\r\n        channels: 3,\r\n        labels: 'hsl'\r\n      },\r\n      hsv: {\r\n        channels: 3,\r\n        labels: 'hsv'\r\n      },\r\n      hwb: {\r\n        channels: 3,\r\n        labels: 'hwb'\r\n      },\r\n      cmyk: {\r\n        channels: 4,\r\n        labels: 'cmyk'\r\n      },\r\n      xyz: {\r\n        channels: 3,\r\n        labels: 'xyz'\r\n      },\r\n      lab: {\r\n        channels: 3,\r\n        labels: 'lab'\r\n      },\r\n      lch: {\r\n        channels: 3,\r\n        labels: 'lch'\r\n      },\r\n      hex: {\r\n        channels: 1,\r\n        labels: ['hex']\r\n      },\r\n      keyword: {\r\n        channels: 1,\r\n        labels: ['keyword']\r\n      },\r\n      ansi16: {\r\n        channels: 1,\r\n        labels: ['ansi16']\r\n      },\r\n      ansi256: {\r\n        channels: 1,\r\n        labels: ['ansi256']\r\n      },\r\n      hcg: {\r\n        channels: 3,\r\n        labels: ['h', 'c', 'g']\r\n      },\r\n      apple: {\r\n        channels: 3,\r\n        labels: ['r16', 'g16', 'b16']\r\n      },\r\n      gray: {\r\n        channels: 1,\r\n        labels: ['gray']\r\n      }\r\n    }; // hide .channels and .labels properties\r\n\r\n    for (var model in convert) {\r\n      if (convert.hasOwnProperty(model)) {\r\n        if (!('channels' in convert[model])) {\r\n          throw new Error('missing channels property: ' + model);\r\n        }\r\n\r\n        if (!('labels' in convert[model])) {\r\n          throw new Error('missing channel labels property: ' + model);\r\n        }\r\n\r\n        if (convert[model].labels.length !== convert[model].channels) {\r\n          throw new Error('channel and label counts mismatch: ' + model);\r\n        }\r\n\r\n        var channels = convert[model].channels;\r\n        var labels = convert[model].labels;\r\n        delete convert[model].channels;\r\n        delete convert[model].labels;\r\n        Object.defineProperty(convert[model], 'channels', {\r\n          value: channels\r\n        });\r\n        Object.defineProperty(convert[model], 'labels', {\r\n          value: labels\r\n        });\r\n      }\r\n    }\r\n\r\n    convert.rgb.hsl = function (rgb) {\r\n      var r = rgb[0] / 255;\r\n      var g = rgb[1] / 255;\r\n      var b = rgb[2] / 255;\r\n      var min = Math.min(r, g, b);\r\n      var max = Math.max(r, g, b);\r\n      var delta = max - min;\r\n      var h;\r\n      var s;\r\n      var l;\r\n\r\n      if (max === min) {\r\n        h = 0;\r\n      } else if (r === max) {\r\n        h = (g - b) / delta;\r\n      } else if (g === max) {\r\n        h = 2 + (b - r) / delta;\r\n      } else if (b === max) {\r\n        h = 4 + (r - g) / delta;\r\n      }\r\n\r\n      h = Math.min(h * 60, 360);\r\n\r\n      if (h < 0) {\r\n        h += 360;\r\n      }\r\n\r\n      l = (min + max) / 2;\r\n\r\n      if (max === min) {\r\n        s = 0;\r\n      } else if (l <= 0.5) {\r\n        s = delta / (max + min);\r\n      } else {\r\n        s = delta / (2 - max - min);\r\n      }\r\n\r\n      return [h, s * 100, l * 100];\r\n    };\r\n\r\n    convert.rgb.hsv = function (rgb) {\r\n      var rdif;\r\n      var gdif;\r\n      var bdif;\r\n      var h;\r\n      var s;\r\n      var r = rgb[0] / 255;\r\n      var g = rgb[1] / 255;\r\n      var b = rgb[2] / 255;\r\n      var v = Math.max(r, g, b);\r\n      var diff = v - Math.min(r, g, b);\r\n\r\n      var diffc = function diffc(c) {\r\n        return (v - c) / 6 / diff + 1 / 2;\r\n      };\r\n\r\n      if (diff === 0) {\r\n        h = s = 0;\r\n      } else {\r\n        s = diff / v;\r\n        rdif = diffc(r);\r\n        gdif = diffc(g);\r\n        bdif = diffc(b);\r\n\r\n        if (r === v) {\r\n          h = bdif - gdif;\r\n        } else if (g === v) {\r\n          h = 1 / 3 + rdif - bdif;\r\n        } else if (b === v) {\r\n          h = 2 / 3 + gdif - rdif;\r\n        }\r\n\r\n        if (h < 0) {\r\n          h += 1;\r\n        } else if (h > 1) {\r\n          h -= 1;\r\n        }\r\n      }\r\n\r\n      return [h * 360, s * 100, v * 100];\r\n    };\r\n\r\n    convert.rgb.hwb = function (rgb) {\r\n      var r = rgb[0];\r\n      var g = rgb[1];\r\n      var b = rgb[2];\r\n      var h = convert.rgb.hsl(rgb)[0];\r\n      var w = 1 / 255 * Math.min(r, Math.min(g, b));\r\n      b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\r\n      return [h, w * 100, b * 100];\r\n    };\r\n\r\n    convert.rgb.cmyk = function (rgb) {\r\n      var r = rgb[0] / 255;\r\n      var g = rgb[1] / 255;\r\n      var b = rgb[2] / 255;\r\n      var c;\r\n      var m;\r\n      var y;\r\n      var k;\r\n      k = Math.min(1 - r, 1 - g, 1 - b);\r\n      c = (1 - r - k) / (1 - k) || 0;\r\n      m = (1 - g - k) / (1 - k) || 0;\r\n      y = (1 - b - k) / (1 - k) || 0;\r\n      return [c * 100, m * 100, y * 100, k * 100];\r\n    };\r\n    /**\r\n     * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\r\n     * */\r\n\r\n\r\n    function comparativeDistance(x, y) {\r\n      return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);\r\n    }\r\n\r\n    convert.rgb.keyword = function (rgb) {\r\n      var reversed = reverseKeywords[rgb];\r\n\r\n      if (reversed) {\r\n        return reversed;\r\n      }\r\n\r\n      var currentClosestDistance = Infinity;\r\n      var currentClosestKeyword;\r\n\r\n      for (var keyword in colorName) {\r\n        if (colorName.hasOwnProperty(keyword)) {\r\n          var value = colorName[keyword]; // Compute comparative distance\r\n\r\n          var distance = comparativeDistance(rgb, value); // Check if its less, if so set as closest\r\n\r\n          if (distance < currentClosestDistance) {\r\n            currentClosestDistance = distance;\r\n            currentClosestKeyword = keyword;\r\n          }\r\n        }\r\n      }\r\n\r\n      return currentClosestKeyword;\r\n    };\r\n\r\n    convert.keyword.rgb = function (keyword) {\r\n      return colorName[keyword];\r\n    };\r\n\r\n    convert.rgb.xyz = function (rgb) {\r\n      var r = rgb[0] / 255;\r\n      var g = rgb[1] / 255;\r\n      var b = rgb[2] / 255; // assume sRGB\r\n\r\n      r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\r\n      g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\r\n      b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\r\n      var x = r * 0.4124 + g * 0.3576 + b * 0.1805;\r\n      var y = r * 0.2126 + g * 0.7152 + b * 0.0722;\r\n      var z = r * 0.0193 + g * 0.1192 + b * 0.9505;\r\n      return [x * 100, y * 100, z * 100];\r\n    };\r\n\r\n    convert.rgb.lab = function (rgb) {\r\n      var xyz = convert.rgb.xyz(rgb);\r\n      var x = xyz[0];\r\n      var y = xyz[1];\r\n      var z = xyz[2];\r\n      var l;\r\n      var a;\r\n      var b;\r\n      x /= 95.047;\r\n      y /= 100;\r\n      z /= 108.883;\r\n      x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\r\n      y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\r\n      z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\r\n      l = 116 * y - 16;\r\n      a = 500 * (x - y);\r\n      b = 200 * (y - z);\r\n      return [l, a, b];\r\n    };\r\n\r\n    convert.hsl.rgb = function (hsl) {\r\n      var h = hsl[0] / 360;\r\n      var s = hsl[1] / 100;\r\n      var l = hsl[2] / 100;\r\n      var t1;\r\n      var t2;\r\n      var t3;\r\n      var rgb;\r\n      var val;\r\n\r\n      if (s === 0) {\r\n        val = l * 255;\r\n        return [val, val, val];\r\n      }\r\n\r\n      if (l < 0.5) {\r\n        t2 = l * (1 + s);\r\n      } else {\r\n        t2 = l + s - l * s;\r\n      }\r\n\r\n      t1 = 2 * l - t2;\r\n      rgb = [0, 0, 0];\r\n\r\n      for (var i = 0; i < 3; i++) {\r\n        t3 = h + 1 / 3 * -(i - 1);\r\n\r\n        if (t3 < 0) {\r\n          t3++;\r\n        }\r\n\r\n        if (t3 > 1) {\r\n          t3--;\r\n        }\r\n\r\n        if (6 * t3 < 1) {\r\n          val = t1 + (t2 - t1) * 6 * t3;\r\n        } else if (2 * t3 < 1) {\r\n          val = t2;\r\n        } else if (3 * t3 < 2) {\r\n          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\r\n        } else {\r\n          val = t1;\r\n        }\r\n\r\n        rgb[i] = val * 255;\r\n      }\r\n\r\n      return rgb;\r\n    };\r\n\r\n    convert.hsl.hsv = function (hsl) {\r\n      var h = hsl[0];\r\n      var s = hsl[1] / 100;\r\n      var l = hsl[2] / 100;\r\n      var smin = s;\r\n      var lmin = Math.max(l, 0.01);\r\n      var sv;\r\n      var v;\r\n      l *= 2;\r\n      s *= l <= 1 ? l : 2 - l;\r\n      smin *= lmin <= 1 ? lmin : 2 - lmin;\r\n      v = (l + s) / 2;\r\n      sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);\r\n      return [h, sv * 100, v * 100];\r\n    };\r\n\r\n    convert.hsv.rgb = function (hsv) {\r\n      var h = hsv[0] / 60;\r\n      var s = hsv[1] / 100;\r\n      var v = hsv[2] / 100;\r\n      var hi = Math.floor(h) % 6;\r\n      var f = h - Math.floor(h);\r\n      var p = 255 * v * (1 - s);\r\n      var q = 255 * v * (1 - s * f);\r\n      var t = 255 * v * (1 - s * (1 - f));\r\n      v *= 255;\r\n\r\n      switch (hi) {\r\n        case 0:\r\n          return [v, t, p];\r\n\r\n        case 1:\r\n          return [q, v, p];\r\n\r\n        case 2:\r\n          return [p, v, t];\r\n\r\n        case 3:\r\n          return [p, q, v];\r\n\r\n        case 4:\r\n          return [t, p, v];\r\n\r\n        case 5:\r\n          return [v, p, q];\r\n      }\r\n    };\r\n\r\n    convert.hsv.hsl = function (hsv) {\r\n      var h = hsv[0];\r\n      var s = hsv[1] / 100;\r\n      var v = hsv[2] / 100;\r\n      var vmin = Math.max(v, 0.01);\r\n      var lmin;\r\n      var sl;\r\n      var l;\r\n      l = (2 - s) * v;\r\n      lmin = (2 - s) * vmin;\r\n      sl = s * vmin;\r\n      sl /= lmin <= 1 ? lmin : 2 - lmin;\r\n      sl = sl || 0;\r\n      l /= 2;\r\n      return [h, sl * 100, l * 100];\r\n    }; // http://dev.w3.org/csswg/css-color/#hwb-to-rgb\r\n\r\n\r\n    convert.hwb.rgb = function (hwb) {\r\n      var h = hwb[0] / 360;\r\n      var wh = hwb[1] / 100;\r\n      var bl = hwb[2] / 100;\r\n      var ratio = wh + bl;\r\n      var i;\r\n      var v;\r\n      var f;\r\n      var n; // wh + bl cant be > 1\r\n\r\n      if (ratio > 1) {\r\n        wh /= ratio;\r\n        bl /= ratio;\r\n      }\r\n\r\n      i = Math.floor(6 * h);\r\n      v = 1 - bl;\r\n      f = 6 * h - i;\r\n\r\n      if ((i & 0x01) !== 0) {\r\n        f = 1 - f;\r\n      }\r\n\r\n      n = wh + f * (v - wh); // linear interpolation\r\n\r\n      var r;\r\n      var g;\r\n      var b;\r\n\r\n      switch (i) {\r\n        default:\r\n        case 6:\r\n        case 0:\r\n          r = v;\r\n          g = n;\r\n          b = wh;\r\n          break;\r\n\r\n        case 1:\r\n          r = n;\r\n          g = v;\r\n          b = wh;\r\n          break;\r\n\r\n        case 2:\r\n          r = wh;\r\n          g = v;\r\n          b = n;\r\n          break;\r\n\r\n        case 3:\r\n          r = wh;\r\n          g = n;\r\n          b = v;\r\n          break;\r\n\r\n        case 4:\r\n          r = n;\r\n          g = wh;\r\n          b = v;\r\n          break;\r\n\r\n        case 5:\r\n          r = v;\r\n          g = wh;\r\n          b = n;\r\n          break;\r\n      }\r\n\r\n      return [r * 255, g * 255, b * 255];\r\n    };\r\n\r\n    convert.cmyk.rgb = function (cmyk) {\r\n      var c = cmyk[0] / 100;\r\n      var m = cmyk[1] / 100;\r\n      var y = cmyk[2] / 100;\r\n      var k = cmyk[3] / 100;\r\n      var r;\r\n      var g;\r\n      var b;\r\n      r = 1 - Math.min(1, c * (1 - k) + k);\r\n      g = 1 - Math.min(1, m * (1 - k) + k);\r\n      b = 1 - Math.min(1, y * (1 - k) + k);\r\n      return [r * 255, g * 255, b * 255];\r\n    };\r\n\r\n    convert.xyz.rgb = function (xyz) {\r\n      var x = xyz[0] / 100;\r\n      var y = xyz[1] / 100;\r\n      var z = xyz[2] / 100;\r\n      var r;\r\n      var g;\r\n      var b;\r\n      r = x * 3.2406 + y * -1.5372 + z * -0.4986;\r\n      g = x * -0.9689 + y * 1.8758 + z * 0.0415;\r\n      b = x * 0.0557 + y * -0.2040 + z * 1.0570; // assume sRGB\r\n\r\n      r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92;\r\n      g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92;\r\n      b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92;\r\n      r = Math.min(Math.max(0, r), 1);\r\n      g = Math.min(Math.max(0, g), 1);\r\n      b = Math.min(Math.max(0, b), 1);\r\n      return [r * 255, g * 255, b * 255];\r\n    };\r\n\r\n    convert.xyz.lab = function (xyz) {\r\n      var x = xyz[0];\r\n      var y = xyz[1];\r\n      var z = xyz[2];\r\n      var l;\r\n      var a;\r\n      var b;\r\n      x /= 95.047;\r\n      y /= 100;\r\n      z /= 108.883;\r\n      x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\r\n      y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\r\n      z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\r\n      l = 116 * y - 16;\r\n      a = 500 * (x - y);\r\n      b = 200 * (y - z);\r\n      return [l, a, b];\r\n    };\r\n\r\n    convert.lab.xyz = function (lab) {\r\n      var l = lab[0];\r\n      var a = lab[1];\r\n      var b = lab[2];\r\n      var x;\r\n      var y;\r\n      var z;\r\n      y = (l + 16) / 116;\r\n      x = a / 500 + y;\r\n      z = y - b / 200;\r\n      var y2 = Math.pow(y, 3);\r\n      var x2 = Math.pow(x, 3);\r\n      var z2 = Math.pow(z, 3);\r\n      y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\r\n      x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\r\n      z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\r\n      x *= 95.047;\r\n      y *= 100;\r\n      z *= 108.883;\r\n      return [x, y, z];\r\n    };\r\n\r\n    convert.lab.lch = function (lab) {\r\n      var l = lab[0];\r\n      var a = lab[1];\r\n      var b = lab[2];\r\n      var hr;\r\n      var h;\r\n      var c;\r\n      hr = Math.atan2(b, a);\r\n      h = hr * 360 / 2 / Math.PI;\r\n\r\n      if (h < 0) {\r\n        h += 360;\r\n      }\r\n\r\n      c = Math.sqrt(a * a + b * b);\r\n      return [l, c, h];\r\n    };\r\n\r\n    convert.lch.lab = function (lch) {\r\n      var l = lch[0];\r\n      var c = lch[1];\r\n      var h = lch[2];\r\n      var a;\r\n      var b;\r\n      var hr;\r\n      hr = h / 360 * 2 * Math.PI;\r\n      a = c * Math.cos(hr);\r\n      b = c * Math.sin(hr);\r\n      return [l, a, b];\r\n    };\r\n\r\n    convert.rgb.ansi16 = function (args) {\r\n      var r = args[0];\r\n      var g = args[1];\r\n      var b = args[2];\r\n      var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\r\n\r\n      value = Math.round(value / 50);\r\n\r\n      if (value === 0) {\r\n        return 30;\r\n      }\r\n\r\n      var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));\r\n\r\n      if (value === 2) {\r\n        ansi += 60;\r\n      }\r\n\r\n      return ansi;\r\n    };\r\n\r\n    convert.hsv.ansi16 = function (args) {\r\n      // optimization here; we already know the value and don't need to get\r\n      // it converted for us.\r\n      return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\r\n    };\r\n\r\n    convert.rgb.ansi256 = function (args) {\r\n      var r = args[0];\r\n      var g = args[1];\r\n      var b = args[2]; // we use the extended greyscale palette here, with the exception of\r\n      // black and white. normal palette only has 4 greyscale shades.\r\n\r\n      if (r === g && g === b) {\r\n        if (r < 8) {\r\n          return 16;\r\n        }\r\n\r\n        if (r > 248) {\r\n          return 231;\r\n        }\r\n\r\n        return Math.round((r - 8) / 247 * 24) + 232;\r\n      }\r\n\r\n      var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);\r\n      return ansi;\r\n    };\r\n\r\n    convert.ansi16.rgb = function (args) {\r\n      var color = args % 10; // handle greyscale\r\n\r\n      if (color === 0 || color === 7) {\r\n        if (args > 50) {\r\n          color += 3.5;\r\n        }\r\n\r\n        color = color / 10.5 * 255;\r\n        return [color, color, color];\r\n      }\r\n\r\n      var mult = (~~(args > 50) + 1) * 0.5;\r\n      var r = (color & 1) * mult * 255;\r\n      var g = (color >> 1 & 1) * mult * 255;\r\n      var b = (color >> 2 & 1) * mult * 255;\r\n      return [r, g, b];\r\n    };\r\n\r\n    convert.ansi256.rgb = function (args) {\r\n      // handle greyscale\r\n      if (args >= 232) {\r\n        var c = (args - 232) * 10 + 8;\r\n        return [c, c, c];\r\n      }\r\n\r\n      args -= 16;\r\n      var rem;\r\n      var r = Math.floor(args / 36) / 5 * 255;\r\n      var g = Math.floor((rem = args % 36) / 6) / 5 * 255;\r\n      var b = rem % 6 / 5 * 255;\r\n      return [r, g, b];\r\n    };\r\n\r\n    convert.rgb.hex = function (args) {\r\n      var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);\r\n      var string = integer.toString(16).toUpperCase();\r\n      return '000000'.substring(string.length) + string;\r\n    };\r\n\r\n    convert.hex.rgb = function (args) {\r\n      var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\r\n\r\n      if (!match) {\r\n        return [0, 0, 0];\r\n      }\r\n\r\n      var colorString = match[0];\r\n\r\n      if (match[0].length === 3) {\r\n        colorString = colorString.split('').map(function (char) {\r\n          return char + char;\r\n        }).join('');\r\n      }\r\n\r\n      var integer = parseInt(colorString, 16);\r\n      var r = integer >> 16 & 0xFF;\r\n      var g = integer >> 8 & 0xFF;\r\n      var b = integer & 0xFF;\r\n      return [r, g, b];\r\n    };\r\n\r\n    convert.rgb.hcg = function (rgb) {\r\n      var r = rgb[0] / 255;\r\n      var g = rgb[1] / 255;\r\n      var b = rgb[2] / 255;\r\n      var max = Math.max(Math.max(r, g), b);\r\n      var min = Math.min(Math.min(r, g), b);\r\n      var chroma = max - min;\r\n      var grayscale;\r\n      var hue;\r\n\r\n      if (chroma < 1) {\r\n        grayscale = min / (1 - chroma);\r\n      } else {\r\n        grayscale = 0;\r\n      }\r\n\r\n      if (chroma <= 0) {\r\n        hue = 0;\r\n      } else if (max === r) {\r\n        hue = (g - b) / chroma % 6;\r\n      } else if (max === g) {\r\n        hue = 2 + (b - r) / chroma;\r\n      } else {\r\n        hue = 4 + (r - g) / chroma + 4;\r\n      }\r\n\r\n      hue /= 6;\r\n      hue %= 1;\r\n      return [hue * 360, chroma * 100, grayscale * 100];\r\n    };\r\n\r\n    convert.hsl.hcg = function (hsl) {\r\n      var s = hsl[1] / 100;\r\n      var l = hsl[2] / 100;\r\n      var c = 1;\r\n      var f = 0;\r\n\r\n      if (l < 0.5) {\r\n        c = 2.0 * s * l;\r\n      } else {\r\n        c = 2.0 * s * (1.0 - l);\r\n      }\r\n\r\n      if (c < 1.0) {\r\n        f = (l - 0.5 * c) / (1.0 - c);\r\n      }\r\n\r\n      return [hsl[0], c * 100, f * 100];\r\n    };\r\n\r\n    convert.hsv.hcg = function (hsv) {\r\n      var s = hsv[1] / 100;\r\n      var v = hsv[2] / 100;\r\n      var c = s * v;\r\n      var f = 0;\r\n\r\n      if (c < 1.0) {\r\n        f = (v - c) / (1 - c);\r\n      }\r\n\r\n      return [hsv[0], c * 100, f * 100];\r\n    };\r\n\r\n    convert.hcg.rgb = function (hcg) {\r\n      var h = hcg[0] / 360;\r\n      var c = hcg[1] / 100;\r\n      var g = hcg[2] / 100;\r\n\r\n      if (c === 0.0) {\r\n        return [g * 255, g * 255, g * 255];\r\n      }\r\n\r\n      var pure = [0, 0, 0];\r\n      var hi = h % 1 * 6;\r\n      var v = hi % 1;\r\n      var w = 1 - v;\r\n      var mg = 0;\r\n\r\n      switch (Math.floor(hi)) {\r\n        case 0:\r\n          pure[0] = 1;\r\n          pure[1] = v;\r\n          pure[2] = 0;\r\n          break;\r\n\r\n        case 1:\r\n          pure[0] = w;\r\n          pure[1] = 1;\r\n          pure[2] = 0;\r\n          break;\r\n\r\n        case 2:\r\n          pure[0] = 0;\r\n          pure[1] = 1;\r\n          pure[2] = v;\r\n          break;\r\n\r\n        case 3:\r\n          pure[0] = 0;\r\n          pure[1] = w;\r\n          pure[2] = 1;\r\n          break;\r\n\r\n        case 4:\r\n          pure[0] = v;\r\n          pure[1] = 0;\r\n          pure[2] = 1;\r\n          break;\r\n\r\n        default:\r\n          pure[0] = 1;\r\n          pure[1] = 0;\r\n          pure[2] = w;\r\n      }\r\n\r\n      mg = (1.0 - c) * g;\r\n      return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];\r\n    };\r\n\r\n    convert.hcg.hsv = function (hcg) {\r\n      var c = hcg[1] / 100;\r\n      var g = hcg[2] / 100;\r\n      var v = c + g * (1.0 - c);\r\n      var f = 0;\r\n\r\n      if (v > 0.0) {\r\n        f = c / v;\r\n      }\r\n\r\n      return [hcg[0], f * 100, v * 100];\r\n    };\r\n\r\n    convert.hcg.hsl = function (hcg) {\r\n      var c = hcg[1] / 100;\r\n      var g = hcg[2] / 100;\r\n      var l = g * (1.0 - c) + 0.5 * c;\r\n      var s = 0;\r\n\r\n      if (l > 0.0 && l < 0.5) {\r\n        s = c / (2 * l);\r\n      } else if (l >= 0.5 && l < 1.0) {\r\n        s = c / (2 * (1 - l));\r\n      }\r\n\r\n      return [hcg[0], s * 100, l * 100];\r\n    };\r\n\r\n    convert.hcg.hwb = function (hcg) {\r\n      var c = hcg[1] / 100;\r\n      var g = hcg[2] / 100;\r\n      var v = c + g * (1.0 - c);\r\n      return [hcg[0], (v - c) * 100, (1 - v) * 100];\r\n    };\r\n\r\n    convert.hwb.hcg = function (hwb) {\r\n      var w = hwb[1] / 100;\r\n      var b = hwb[2] / 100;\r\n      var v = 1 - b;\r\n      var c = v - w;\r\n      var g = 0;\r\n\r\n      if (c < 1) {\r\n        g = (v - c) / (1 - c);\r\n      }\r\n\r\n      return [hwb[0], c * 100, g * 100];\r\n    };\r\n\r\n    convert.apple.rgb = function (apple) {\r\n      return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];\r\n    };\r\n\r\n    convert.rgb.apple = function (rgb) {\r\n      return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];\r\n    };\r\n\r\n    convert.gray.rgb = function (args) {\r\n      return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\r\n    };\r\n\r\n    convert.gray.hsl = convert.gray.hsv = function (args) {\r\n      return [0, 0, args[0]];\r\n    };\r\n\r\n    convert.gray.hwb = function (gray) {\r\n      return [0, 100, gray[0]];\r\n    };\r\n\r\n    convert.gray.cmyk = function (gray) {\r\n      return [0, 0, 0, gray[0]];\r\n    };\r\n\r\n    convert.gray.lab = function (gray) {\r\n      return [gray[0], 0, 0];\r\n    };\r\n\r\n    convert.gray.hex = function (gray) {\r\n      var val = Math.round(gray[0] / 100 * 255) & 0xFF;\r\n      var integer = (val << 16) + (val << 8) + val;\r\n      var string = integer.toString(16).toUpperCase();\r\n      return '000000'.substring(string.length) + string;\r\n    };\r\n\r\n    convert.rgb.gray = function (rgb) {\r\n      var val = (rgb[0] + rgb[1] + rgb[2]) / 3;\r\n      return [val / 255 * 100];\r\n    };\r\n  });\r\n  var conversions_1 = conversions.rgb;\r\n  var conversions_2 = conversions.hsl;\r\n  var conversions_3 = conversions.hsv;\r\n  var conversions_4 = conversions.hwb;\r\n  var conversions_5 = conversions.cmyk;\r\n  var conversions_6 = conversions.xyz;\r\n  var conversions_7 = conversions.lab;\r\n  var conversions_8 = conversions.lch;\r\n  var conversions_9 = conversions.hex;\r\n  var conversions_10 = conversions.keyword;\r\n  var conversions_11 = conversions.ansi16;\r\n  var conversions_12 = conversions.ansi256;\r\n  var conversions_13 = conversions.hcg;\r\n  var conversions_14 = conversions.apple;\r\n  var conversions_15 = conversions.gray;\r\n\r\n  /*\r\n  \tthis function routes a model to all other models.\r\n\r\n  \tall functions that are routed have a property `.conversion` attached\r\n  \tto the returned synthetic function. This property is an array\r\n  \tof strings, each with the steps in between the 'from' and 'to'\r\n  \tcolor models (inclusive).\r\n\r\n  \tconversions that are not possible simply are not included.\r\n  */\r\n\r\n  function buildGraph() {\r\n    var graph = {}; // https://jsperf.com/object-keys-vs-for-in-with-closure/3\r\n\r\n    var models = Object.keys(conversions);\r\n\r\n    for (var len = models.length, i = 0; i < len; i++) {\r\n      graph[models[i]] = {\r\n        // http://jsperf.com/1-vs-infinity\r\n        // micro-opt, but this is simple.\r\n        distance: -1,\r\n        parent: null\r\n      };\r\n    }\r\n\r\n    return graph;\r\n  } // https://en.wikipedia.org/wiki/Breadth-first_search\r\n\r\n\r\n  function deriveBFS(fromModel) {\r\n    var graph = buildGraph();\r\n    var queue = [fromModel]; // unshift -> queue -> pop\r\n\r\n    graph[fromModel].distance = 0;\r\n\r\n    while (queue.length) {\r\n      var current = queue.pop();\r\n      var adjacents = Object.keys(conversions[current]);\r\n\r\n      for (var len = adjacents.length, i = 0; i < len; i++) {\r\n        var adjacent = adjacents[i];\r\n        var node = graph[adjacent];\r\n\r\n        if (node.distance === -1) {\r\n          node.distance = graph[current].distance + 1;\r\n          node.parent = current;\r\n          queue.unshift(adjacent);\r\n        }\r\n      }\r\n    }\r\n\r\n    return graph;\r\n  }\r\n\r\n  function link(from, to) {\r\n    return function (args) {\r\n      return to(from(args));\r\n    };\r\n  }\r\n\r\n  function wrapConversion(toModel, graph) {\r\n    var path = [graph[toModel].parent, toModel];\r\n    var fn = conversions[graph[toModel].parent][toModel];\r\n    var cur = graph[toModel].parent;\r\n\r\n    while (graph[cur].parent) {\r\n      path.unshift(graph[cur].parent);\r\n      fn = link(conversions[graph[cur].parent][cur], fn);\r\n      cur = graph[cur].parent;\r\n    }\r\n\r\n    fn.conversion = path;\r\n    return fn;\r\n  }\r\n\r\n  var route = function route(fromModel) {\r\n    var graph = deriveBFS(fromModel);\r\n    var conversion = {};\r\n    var models = Object.keys(graph);\r\n\r\n    for (var len = models.length, i = 0; i < len; i++) {\r\n      var toModel = models[i];\r\n      var node = graph[toModel];\r\n\r\n      if (node.parent === null) {\r\n        // no possible conversion, or this node is the source model.\r\n        continue;\r\n      }\r\n\r\n      conversion[toModel] = wrapConversion(toModel, graph);\r\n    }\r\n\r\n    return conversion;\r\n  };\r\n\r\n  var convert = {};\r\n  var models = Object.keys(conversions);\r\n\r\n  function wrapRaw(fn) {\r\n    var wrappedFn = function wrappedFn(args) {\r\n      if (args === undefined || args === null) {\r\n        return args;\r\n      }\r\n\r\n      if (arguments.length > 1) {\r\n        args = Array.prototype.slice.call(arguments);\r\n      }\r\n\r\n      return fn(args);\r\n    }; // preserve .conversion property if there is one\r\n\r\n\r\n    if ('conversion' in fn) {\r\n      wrappedFn.conversion = fn.conversion;\r\n    }\r\n\r\n    return wrappedFn;\r\n  }\r\n\r\n  function wrapRounded(fn) {\r\n    var wrappedFn = function wrappedFn(args) {\r\n      if (args === undefined || args === null) {\r\n        return args;\r\n      }\r\n\r\n      if (arguments.length > 1) {\r\n        args = Array.prototype.slice.call(arguments);\r\n      }\r\n\r\n      var result = fn(args); // we're assuming the result is an array here.\r\n      // see notice in conversions.js; don't use box types\r\n      // in conversion functions.\r\n\r\n      if (typeof result === 'object') {\r\n        for (var len = result.length, i = 0; i < len; i++) {\r\n          result[i] = Math.round(result[i]);\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }; // preserve .conversion property if there is one\r\n\r\n\r\n    if ('conversion' in fn) {\r\n      wrappedFn.conversion = fn.conversion;\r\n    }\r\n\r\n    return wrappedFn;\r\n  }\r\n\r\n  models.forEach(function (fromModel) {\r\n    convert[fromModel] = {};\r\n    Object.defineProperty(convert[fromModel], 'channels', {\r\n      value: conversions[fromModel].channels\r\n    });\r\n    Object.defineProperty(convert[fromModel], 'labels', {\r\n      value: conversions[fromModel].labels\r\n    });\r\n    var routes = route(fromModel);\r\n    var routeModels = Object.keys(routes);\r\n    routeModels.forEach(function (toModel) {\r\n      var fn = routes[toModel];\r\n      convert[fromModel][toModel] = wrapRounded(fn);\r\n      convert[fromModel][toModel].raw = wrapRaw(fn);\r\n    });\r\n  });\r\n  var colorConvert = convert;\r\n\r\n  var ansiStyles = createCommonjsModule(function (module) {\r\n\r\n    const wrapAnsi16 = (fn, offset) => function () {\r\n      const code = fn.apply(colorConvert, arguments);\r\n      return \"\\x1B[\".concat(code + offset, \"m\");\r\n    };\r\n\r\n    const wrapAnsi256 = (fn, offset) => function () {\r\n      const code = fn.apply(colorConvert, arguments);\r\n      return \"\\x1B[\".concat(38 + offset, \";5;\").concat(code, \"m\");\r\n    };\r\n\r\n    const wrapAnsi16m = (fn, offset) => function () {\r\n      const rgb = fn.apply(colorConvert, arguments);\r\n      return \"\\x1B[\".concat(38 + offset, \";2;\").concat(rgb[0], \";\").concat(rgb[1], \";\").concat(rgb[2], \"m\");\r\n    };\r\n\r\n    function assembleStyles() {\r\n      const codes = new Map();\r\n      const styles = {\r\n        modifier: {\r\n          reset: [0, 0],\r\n          // 21 isn't widely supported and 22 does the same thing\r\n          bold: [1, 22],\r\n          dim: [2, 22],\r\n          italic: [3, 23],\r\n          underline: [4, 24],\r\n          inverse: [7, 27],\r\n          hidden: [8, 28],\r\n          strikethrough: [9, 29]\r\n        },\r\n        color: {\r\n          black: [30, 39],\r\n          red: [31, 39],\r\n          green: [32, 39],\r\n          yellow: [33, 39],\r\n          blue: [34, 39],\r\n          magenta: [35, 39],\r\n          cyan: [36, 39],\r\n          white: [37, 39],\r\n          gray: [90, 39],\r\n          // Bright color\r\n          redBright: [91, 39],\r\n          greenBright: [92, 39],\r\n          yellowBright: [93, 39],\r\n          blueBright: [94, 39],\r\n          magentaBright: [95, 39],\r\n          cyanBright: [96, 39],\r\n          whiteBright: [97, 39]\r\n        },\r\n        bgColor: {\r\n          bgBlack: [40, 49],\r\n          bgRed: [41, 49],\r\n          bgGreen: [42, 49],\r\n          bgYellow: [43, 49],\r\n          bgBlue: [44, 49],\r\n          bgMagenta: [45, 49],\r\n          bgCyan: [46, 49],\r\n          bgWhite: [47, 49],\r\n          // Bright color\r\n          bgBlackBright: [100, 49],\r\n          bgRedBright: [101, 49],\r\n          bgGreenBright: [102, 49],\r\n          bgYellowBright: [103, 49],\r\n          bgBlueBright: [104, 49],\r\n          bgMagentaBright: [105, 49],\r\n          bgCyanBright: [106, 49],\r\n          bgWhiteBright: [107, 49]\r\n        }\r\n      }; // Fix humans\r\n\r\n      styles.color.grey = styles.color.gray;\r\n\r\n      for (const groupName of Object.keys(styles)) {\r\n        const group = styles[groupName];\r\n\r\n        for (const styleName of Object.keys(group)) {\r\n          const style = group[styleName];\r\n          styles[styleName] = {\r\n            open: \"\\x1B[\".concat(style[0], \"m\"),\r\n            close: \"\\x1B[\".concat(style[1], \"m\")\r\n          };\r\n          group[styleName] = styles[styleName];\r\n          codes.set(style[0], style[1]);\r\n        }\r\n\r\n        Object.defineProperty(styles, groupName, {\r\n          value: group,\r\n          enumerable: false\r\n        });\r\n        Object.defineProperty(styles, 'codes', {\r\n          value: codes,\r\n          enumerable: false\r\n        });\r\n      }\r\n\r\n      const ansi2ansi = n => n;\r\n\r\n      const rgb2rgb = (r, g, b) => [r, g, b];\r\n\r\n      styles.color.close = '\\u001B[39m';\r\n      styles.bgColor.close = '\\u001B[49m';\r\n      styles.color.ansi = {\r\n        ansi: wrapAnsi16(ansi2ansi, 0)\r\n      };\r\n      styles.color.ansi256 = {\r\n        ansi256: wrapAnsi256(ansi2ansi, 0)\r\n      };\r\n      styles.color.ansi16m = {\r\n        rgb: wrapAnsi16m(rgb2rgb, 0)\r\n      };\r\n      styles.bgColor.ansi = {\r\n        ansi: wrapAnsi16(ansi2ansi, 10)\r\n      };\r\n      styles.bgColor.ansi256 = {\r\n        ansi256: wrapAnsi256(ansi2ansi, 10)\r\n      };\r\n      styles.bgColor.ansi16m = {\r\n        rgb: wrapAnsi16m(rgb2rgb, 10)\r\n      };\r\n\r\n      for (let key of Object.keys(colorConvert)) {\r\n        if (typeof colorConvert[key] !== 'object') {\r\n          continue;\r\n        }\r\n\r\n        const suite = colorConvert[key];\r\n\r\n        if (key === 'ansi16') {\r\n          key = 'ansi';\r\n        }\r\n\r\n        if ('ansi16' in suite) {\r\n          styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);\r\n          styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);\r\n        }\r\n\r\n        if ('ansi256' in suite) {\r\n          styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);\r\n          styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);\r\n        }\r\n\r\n        if ('rgb' in suite) {\r\n          styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);\r\n          styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);\r\n        }\r\n      }\r\n\r\n      return styles;\r\n    } // Make the export immutable\r\n\r\n\r\n    Object.defineProperty(module, 'exports', {\r\n      enumerable: true,\r\n      get: assembleStyles\r\n    });\r\n  });\r\n\r\n  var require$$0$1 = {\r\n    EOL: \"\\n\"\r\n  };\r\n\r\n  var hasFlag = (flag, argv) => {\r\n    argv = argv || process.argv;\r\n    const prefix = flag.startsWith('-') ? '' : flag.length === 1 ? '-' : '--';\r\n    const pos = argv.indexOf(prefix + flag);\r\n    const terminatorPos = argv.indexOf('--');\r\n    return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);\r\n  };\r\n\r\n  const env$1 = process.env;\r\n  let forceColor;\r\n\r\n  if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false')) {\r\n    forceColor = false;\r\n  } else if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true') || hasFlag('color=always')) {\r\n    forceColor = true;\r\n  }\r\n\r\n  if ('FORCE_COLOR' in env$1) {\r\n    forceColor = env$1.FORCE_COLOR.length === 0 || parseInt(env$1.FORCE_COLOR, 10) !== 0;\r\n  }\r\n\r\n  function translateLevel(level) {\r\n    if (level === 0) {\r\n      return false;\r\n    }\r\n\r\n    return {\r\n      level,\r\n      hasBasic: true,\r\n      has256: level >= 2,\r\n      has16m: level >= 3\r\n    };\r\n  }\r\n\r\n  function supportsColor(stream) {\r\n    if (forceColor === false) {\r\n      return 0;\r\n    }\r\n\r\n    if (hasFlag('color=16m') || hasFlag('color=full') || hasFlag('color=truecolor')) {\r\n      return 3;\r\n    }\r\n\r\n    if (hasFlag('color=256')) {\r\n      return 2;\r\n    }\r\n\r\n    if (stream && !stream.isTTY && forceColor !== true) {\r\n      return 0;\r\n    }\r\n\r\n    const min = forceColor ? 1 : 0;\r\n\r\n    if (process.platform === 'win32') {\r\n      // Node.js 7.5.0 is the first version of Node.js to include a patch to\r\n      // libuv that enables 256 color output on Windows. Anything earlier and it\r\n      // won't work. However, here we target Node.js 8 at minimum as it is an LTS\r\n      // release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows\r\n      // release that supports 256 colors. Windows 10 build 14931 is the first release\r\n      // that supports 16m/TrueColor.\r\n      const osRelease = require$$0$1.release().split('.');\r\n\r\n      if (Number(process.versions.node.split('.')[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {\r\n        return Number(osRelease[2]) >= 14931 ? 3 : 2;\r\n      }\r\n\r\n      return 1;\r\n    }\r\n\r\n    if ('CI' in env$1) {\r\n      if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env$1) || env$1.CI_NAME === 'codeship') {\r\n        return 1;\r\n      }\r\n\r\n      return min;\r\n    }\r\n\r\n    if ('TEAMCITY_VERSION' in env$1) {\r\n      return /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env$1.TEAMCITY_VERSION) ? 1 : 0;\r\n    }\r\n\r\n    if (env$1.COLORTERM === 'truecolor') {\r\n      return 3;\r\n    }\r\n\r\n    if ('TERM_PROGRAM' in env$1) {\r\n      const version = parseInt((env$1.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\r\n\r\n      switch (env$1.TERM_PROGRAM) {\r\n        case 'iTerm.app':\r\n          return version >= 3 ? 3 : 2;\r\n\r\n        case 'Apple_Terminal':\r\n          return 2;\r\n        // No default\r\n      }\r\n    }\r\n\r\n    if (/-256(color)?$/i.test(env$1.TERM)) {\r\n      return 2;\r\n    }\r\n\r\n    if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env$1.TERM)) {\r\n      return 1;\r\n    }\r\n\r\n    if ('COLORTERM' in env$1) {\r\n      return 1;\r\n    }\r\n\r\n    if (env$1.TERM === 'dumb') {\r\n      return min;\r\n    }\r\n\r\n    return min;\r\n  }\r\n\r\n  function getSupportLevel(stream) {\r\n    const level = supportsColor(stream);\r\n    return translateLevel(level);\r\n  }\r\n\r\n  var supportsColor_1 = {\r\n    supportsColor: getSupportLevel,\r\n    stdout: getSupportLevel(process.stdout),\r\n    stderr: getSupportLevel(process.stderr)\r\n  };\r\n\r\n  const TEMPLATE_REGEX = /(?:\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\r\n  const STYLE_REGEX = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\r\n  const STRING_REGEX = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\r\n  const ESCAPE_REGEX = /\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.)|([^\\\\])/gi;\r\n  const ESCAPES = new Map([['n', '\\n'], ['r', '\\r'], ['t', '\\t'], ['b', '\\b'], ['f', '\\f'], ['v', '\\v'], ['0', '\\0'], ['\\\\', '\\\\'], ['e', '\\u001B'], ['a', '\\u0007']]);\r\n\r\n  function unescape(c) {\r\n    if (c[0] === 'u' && c.length === 5 || c[0] === 'x' && c.length === 3) {\r\n      return String.fromCharCode(parseInt(c.slice(1), 16));\r\n    }\r\n\r\n    return ESCAPES.get(c) || c;\r\n  }\r\n\r\n  function parseArguments(name, args) {\r\n    const results = [];\r\n    const chunks = args.trim().split(/\\s*,\\s*/g);\r\n    let matches;\r\n\r\n    for (const chunk of chunks) {\r\n      if (!isNaN(chunk)) {\r\n        results.push(Number(chunk));\r\n      } else if (matches = chunk.match(STRING_REGEX)) {\r\n        results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr) => escape ? unescape(escape) : chr));\r\n      } else {\r\n        throw new Error(\"Invalid Chalk template style argument: \".concat(chunk, \" (in style '\").concat(name, \"')\"));\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  function parseStyle(style) {\r\n    STYLE_REGEX.lastIndex = 0;\r\n    const results = [];\r\n    let matches;\r\n\r\n    while ((matches = STYLE_REGEX.exec(style)) !== null) {\r\n      const name = matches[1];\r\n\r\n      if (matches[2]) {\r\n        const args = parseArguments(name, matches[2]);\r\n        results.push([name].concat(args));\r\n      } else {\r\n        results.push([name]);\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  function buildStyle(chalk, styles) {\r\n    const enabled = {};\r\n\r\n    for (const layer of styles) {\r\n      for (const style of layer.styles) {\r\n        enabled[style[0]] = layer.inverse ? null : style.slice(1);\r\n      }\r\n    }\r\n\r\n    let current = chalk;\r\n\r\n    for (const styleName of Object.keys(enabled)) {\r\n      if (Array.isArray(enabled[styleName])) {\r\n        if (!(styleName in current)) {\r\n          throw new Error(\"Unknown Chalk style: \".concat(styleName));\r\n        }\r\n\r\n        if (enabled[styleName].length > 0) {\r\n          current = current[styleName].apply(current, enabled[styleName]);\r\n        } else {\r\n          current = current[styleName];\r\n        }\r\n      }\r\n    }\r\n\r\n    return current;\r\n  }\r\n\r\n  var templates = (chalk, tmp) => {\r\n    const styles = [];\r\n    const chunks = [];\r\n    let chunk = []; // eslint-disable-next-line max-params\r\n\r\n    tmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {\r\n      if (escapeChar) {\r\n        chunk.push(unescape(escapeChar));\r\n      } else if (style) {\r\n        const str = chunk.join('');\r\n        chunk = [];\r\n        chunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));\r\n        styles.push({\r\n          inverse,\r\n          styles: parseStyle(style)\r\n        });\r\n      } else if (close) {\r\n        if (styles.length === 0) {\r\n          throw new Error('Found extraneous } in Chalk template literal');\r\n        }\r\n\r\n        chunks.push(buildStyle(chalk, styles)(chunk.join('')));\r\n        chunk = [];\r\n        styles.pop();\r\n      } else {\r\n        chunk.push(chr);\r\n      }\r\n    });\r\n    chunks.push(chunk.join(''));\r\n\r\n    if (styles.length > 0) {\r\n      const errMsg = \"Chalk template literal is missing \".concat(styles.length, \" closing bracket\").concat(styles.length === 1 ? '' : 's', \" (`}`)\");\r\n      throw new Error(errMsg);\r\n    }\r\n\r\n    return chunks.join('');\r\n  };\r\n\r\n  var chalk = createCommonjsModule(function (module) {\r\n\r\n    const stdoutColor = supportsColor_1.stdout;\r\n    const isSimpleWindowsTerm = process.platform === 'win32' && !(process.env.TERM || '').toLowerCase().startsWith('xterm'); // `supportsColor.level` → `ansiStyles.color[name]` mapping\r\n\r\n    const levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m']; // `color-convert` models to exclude from the Chalk API due to conflicts and such\r\n\r\n    const skipModels = new Set(['gray']);\r\n    const styles = Object.create(null);\r\n\r\n    function applyOptions(obj, options) {\r\n      options = options || {}; // Detect level if not set manually\r\n\r\n      const scLevel = stdoutColor ? stdoutColor.level : 0;\r\n      obj.level = options.level === undefined ? scLevel : options.level;\r\n      obj.enabled = 'enabled' in options ? options.enabled : obj.level > 0;\r\n    }\r\n\r\n    function Chalk(options) {\r\n      // We check for this.template here since calling `chalk.constructor()`\r\n      // by itself will have a `this` of a previously constructed chalk object\r\n      if (!this || !(this instanceof Chalk) || this.template) {\r\n        const chalk = {};\r\n        applyOptions(chalk, options);\r\n\r\n        chalk.template = function () {\r\n          const args = [].slice.call(arguments);\r\n          return chalkTag.apply(null, [chalk.template].concat(args));\r\n        };\r\n\r\n        Object.setPrototypeOf(chalk, Chalk.prototype);\r\n        Object.setPrototypeOf(chalk.template, chalk);\r\n        chalk.template.constructor = Chalk;\r\n        return chalk.template;\r\n      }\r\n\r\n      applyOptions(this, options);\r\n    } // Use bright blue on Windows as the normal blue color is illegible\r\n\r\n\r\n    if (isSimpleWindowsTerm) {\r\n      ansiStyles.blue.open = '\\u001B[94m';\r\n    }\r\n\r\n    for (const key of Object.keys(ansiStyles)) {\r\n      ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');\r\n      styles[key] = {\r\n        get() {\r\n          const codes = ansiStyles[key];\r\n          return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);\r\n        }\r\n\r\n      };\r\n    }\r\n\r\n    styles.visible = {\r\n      get() {\r\n        return build.call(this, this._styles || [], true, 'visible');\r\n      }\r\n\r\n    };\r\n    ansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), 'g');\r\n\r\n    for (const model of Object.keys(ansiStyles.color.ansi)) {\r\n      if (skipModels.has(model)) {\r\n        continue;\r\n      }\r\n\r\n      styles[model] = {\r\n        get() {\r\n          const level = this.level;\r\n          return function () {\r\n            const open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);\r\n            const codes = {\r\n              open,\r\n              close: ansiStyles.color.close,\r\n              closeRe: ansiStyles.color.closeRe\r\n            };\r\n            return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);\r\n          };\r\n        }\r\n\r\n      };\r\n    }\r\n\r\n    ansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), 'g');\r\n\r\n    for (const model of Object.keys(ansiStyles.bgColor.ansi)) {\r\n      if (skipModels.has(model)) {\r\n        continue;\r\n      }\r\n\r\n      const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\r\n      styles[bgModel] = {\r\n        get() {\r\n          const level = this.level;\r\n          return function () {\r\n            const open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);\r\n            const codes = {\r\n              open,\r\n              close: ansiStyles.bgColor.close,\r\n              closeRe: ansiStyles.bgColor.closeRe\r\n            };\r\n            return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);\r\n          };\r\n        }\r\n\r\n      };\r\n    }\r\n\r\n    const proto = Object.defineProperties(() => {}, styles);\r\n\r\n    function build(_styles, _empty, key) {\r\n      const builder = function builder() {\r\n        return applyStyle.apply(builder, arguments);\r\n      };\r\n\r\n      builder._styles = _styles;\r\n      builder._empty = _empty;\r\n      const self = this;\r\n      Object.defineProperty(builder, 'level', {\r\n        enumerable: true,\r\n\r\n        get() {\r\n          return self.level;\r\n        },\r\n\r\n        set(level) {\r\n          self.level = level;\r\n        }\r\n\r\n      });\r\n      Object.defineProperty(builder, 'enabled', {\r\n        enumerable: true,\r\n\r\n        get() {\r\n          return self.enabled;\r\n        },\r\n\r\n        set(enabled) {\r\n          self.enabled = enabled;\r\n        }\r\n\r\n      }); // See below for fix regarding invisible grey/dim combination on Windows\r\n\r\n      builder.hasGrey = this.hasGrey || key === 'gray' || key === 'grey'; // `__proto__` is used because we must return a function, but there is\r\n      // no way to create a function with a different prototype\r\n\r\n      builder.__proto__ = proto; // eslint-disable-line no-proto\r\n\r\n      return builder;\r\n    }\r\n\r\n    function applyStyle() {\r\n      // Support varags, but simply cast to string in case there's only one arg\r\n      const args = arguments;\r\n      const argsLen = args.length;\r\n      let str = String(arguments[0]);\r\n\r\n      if (argsLen === 0) {\r\n        return '';\r\n      }\r\n\r\n      if (argsLen > 1) {\r\n        // Don't slice `arguments`, it prevents V8 optimizations\r\n        for (let a = 1; a < argsLen; a++) {\r\n          str += ' ' + args[a];\r\n        }\r\n      }\r\n\r\n      if (!this.enabled || this.level <= 0 || !str) {\r\n        return this._empty ? '' : str;\r\n      } // Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,\r\n      // see https://github.com/chalk/chalk/issues/58\r\n      // If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.\r\n\r\n\r\n      const originalDim = ansiStyles.dim.open;\r\n\r\n      if (isSimpleWindowsTerm && this.hasGrey) {\r\n        ansiStyles.dim.open = '';\r\n      }\r\n\r\n      for (const code of this._styles.slice().reverse()) {\r\n        // Replace any instances already present with a re-opening code\r\n        // otherwise only the part of the string until said closing code\r\n        // will be colored, and the rest will simply be 'plain'.\r\n        str = code.open + str.replace(code.closeRe, code.open) + code.close; // Close the styling before a linebreak and reopen\r\n        // after next line to fix a bleed issue on macOS\r\n        // https://github.com/chalk/chalk/pull/92\r\n\r\n        str = str.replace(/\\r?\\n/g, \"\".concat(code.close, \"$&\").concat(code.open));\r\n      } // Reset the original `dim` if we changed it to work around the Windows dimmed gray issue\r\n\r\n\r\n      ansiStyles.dim.open = originalDim;\r\n      return str;\r\n    }\r\n\r\n    function chalkTag(chalk, strings) {\r\n      if (!Array.isArray(strings)) {\r\n        // If chalk() was called by itself or with a string,\r\n        // return the string itself as a string.\r\n        return [].slice.call(arguments, 1).join(' ');\r\n      }\r\n\r\n      const args = [].slice.call(arguments, 2);\r\n      const parts = [strings.raw[0]];\r\n\r\n      for (let i = 1; i < strings.length; i++) {\r\n        parts.push(String(args[i - 1]).replace(/[{}\\\\]/g, '\\\\$&'));\r\n        parts.push(String(strings.raw[i]));\r\n      }\r\n\r\n      return templates(chalk, parts.join(''));\r\n    }\r\n\r\n    Object.defineProperties(Chalk.prototype, styles);\r\n    module.exports = Chalk(); // eslint-disable-line new-cap\r\n\r\n    module.exports.supportsColor = stdoutColor;\r\n    module.exports.default = module.exports; // For TypeScript\r\n  });\r\n  var chalk_1 = chalk.supportsColor;\r\n\r\n  var common = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n\r\n    exports.commonDeprecatedHandler = (keyOrPair, redirectTo, {\r\n      descriptor\r\n    }) => {\r\n      const messages = [\"\".concat(chalk.default.yellow(typeof keyOrPair === 'string' ? descriptor.key(keyOrPair) : descriptor.pair(keyOrPair)), \" is deprecated\")];\r\n\r\n      if (redirectTo) {\r\n        messages.push(\"we now treat it as \".concat(chalk.default.blue(typeof redirectTo === 'string' ? descriptor.key(redirectTo) : descriptor.pair(redirectTo))));\r\n      }\r\n\r\n      return messages.join('; ') + '.';\r\n    };\r\n  });\r\n  unwrapExports(common);\r\n  var common_1 = common.commonDeprecatedHandler;\r\n\r\n  var deprecated = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n\r\n    tslib_1.__exportStar(common, exports);\r\n  });\r\n  unwrapExports(deprecated);\r\n\r\n  var common$1 = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n\r\n    exports.commonInvalidHandler = (key, value, utils) => [\"Invalid \".concat(chalk.default.red(utils.descriptor.key(key)), \" value.\"), \"Expected \".concat(chalk.default.blue(utils.schemas[key].expected(utils)), \",\"), \"but received \".concat(chalk.default.red(utils.descriptor.value(value)), \".\")].join(' ');\r\n  });\r\n  unwrapExports(common$1);\r\n  var common_1$1 = common$1.commonInvalidHandler;\r\n\r\n  var invalid = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n\r\n    tslib_1.__exportStar(common$1, exports);\r\n  });\r\n  unwrapExports(invalid);\r\n\r\n  /* eslint-disable no-nested-ternary */\r\n\r\n  var arr = [];\r\n  var charCodeCache = [];\r\n\r\n  var leven = function leven(a, b) {\r\n    if (a === b) {\r\n      return 0;\r\n    }\r\n\r\n    var swap = a; // Swapping the strings if `a` is longer than `b` so we know which one is the\r\n    // shortest & which one is the longest\r\n\r\n    if (a.length > b.length) {\r\n      a = b;\r\n      b = swap;\r\n    }\r\n\r\n    var aLen = a.length;\r\n    var bLen = b.length;\r\n\r\n    if (aLen === 0) {\r\n      return bLen;\r\n    }\r\n\r\n    if (bLen === 0) {\r\n      return aLen;\r\n    } // Performing suffix trimming:\r\n    // We can linearly drop suffix common to both strings since they\r\n    // don't increase distance at all\r\n    // Note: `~-` is the bitwise way to perform a `- 1` operation\r\n\r\n\r\n    while (aLen > 0 && a.charCodeAt(~-aLen) === b.charCodeAt(~-bLen)) {\r\n      aLen--;\r\n      bLen--;\r\n    }\r\n\r\n    if (aLen === 0) {\r\n      return bLen;\r\n    } // Performing prefix trimming\r\n    // We can linearly drop prefix common to both strings since they\r\n    // don't increase distance at all\r\n\r\n\r\n    var start = 0;\r\n\r\n    while (start < aLen && a.charCodeAt(start) === b.charCodeAt(start)) {\r\n      start++;\r\n    }\r\n\r\n    aLen -= start;\r\n    bLen -= start;\r\n\r\n    if (aLen === 0) {\r\n      return bLen;\r\n    }\r\n\r\n    var bCharCode;\r\n    var ret;\r\n    var tmp;\r\n    var tmp2;\r\n    var i = 0;\r\n    var j = 0;\r\n\r\n    while (i < aLen) {\r\n      charCodeCache[start + i] = a.charCodeAt(start + i);\r\n      arr[i] = ++i;\r\n    }\r\n\r\n    while (j < bLen) {\r\n      bCharCode = b.charCodeAt(start + j);\r\n      tmp = j++;\r\n      ret = j;\r\n\r\n      for (i = 0; i < aLen; i++) {\r\n        tmp2 = bCharCode === charCodeCache[start + i] ? tmp : tmp + 1;\r\n        tmp = arr[i];\r\n        ret = arr[i] = tmp > ret ? tmp2 > ret ? ret + 1 : tmp2 : tmp2 > tmp ? tmp + 1 : tmp2;\r\n      }\r\n    }\r\n\r\n    return ret;\r\n  };\r\n\r\n  var leven_1 = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n\r\n    exports.levenUnknownHandler = (key, value, {\r\n      descriptor,\r\n      logger,\r\n      schemas\r\n    }) => {\r\n      const messages = [\"Ignored unknown option \".concat(chalk.default.yellow(descriptor.pair({\r\n        key,\r\n        value\r\n      })), \".\")];\r\n      const suggestion = Object.keys(schemas).sort().find(knownKey => leven(key, knownKey) < 3);\r\n\r\n      if (suggestion) {\r\n        messages.push(\"Did you mean \".concat(chalk.default.blue(descriptor.key(suggestion)), \"?\"));\r\n      }\r\n\r\n      logger.warn(messages.join(' '));\r\n    };\r\n  });\r\n  unwrapExports(leven_1);\r\n  var leven_2 = leven_1.levenUnknownHandler;\r\n\r\n  var unknown = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n\r\n    tslib_1.__exportStar(leven_1, exports);\r\n  });\r\n  unwrapExports(unknown);\r\n\r\n  var handlers = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n\r\n    tslib_1.__exportStar(deprecated, exports);\r\n\r\n    tslib_1.__exportStar(invalid, exports);\r\n\r\n    tslib_1.__exportStar(unknown, exports);\r\n  });\r\n  unwrapExports(handlers);\r\n\r\n  var schema = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n    const HANDLER_KEYS = ['default', 'expected', 'validate', 'deprecated', 'forward', 'redirect', 'overlap', 'preprocess', 'postprocess'];\r\n\r\n    function createSchema(SchemaConstructor, parameters) {\r\n      const schema = new SchemaConstructor(parameters);\r\n      const subSchema = Object.create(schema);\r\n\r\n      for (const handlerKey of HANDLER_KEYS) {\r\n        if (handlerKey in parameters) {\r\n          subSchema[handlerKey] = normalizeHandler(parameters[handlerKey], schema, Schema.prototype[handlerKey].length);\r\n        }\r\n      }\r\n\r\n      return subSchema;\r\n    }\r\n\r\n    exports.createSchema = createSchema;\r\n\r\n    class Schema {\r\n      constructor(parameters) {\r\n        this.name = parameters.name;\r\n      }\r\n\r\n      static create(parameters) {\r\n        // @ts-ignore: https://github.com/Microsoft/TypeScript/issues/5863\r\n        return createSchema(this, parameters);\r\n      }\r\n\r\n      default(_utils) {\r\n        return undefined;\r\n      } // istanbul ignore next: this is actually an abstract method but we need a placeholder to get `function.length`\r\n\r\n\r\n      expected(_utils) {\r\n        return 'nothing';\r\n      } // istanbul ignore next: this is actually an abstract method but we need a placeholder to get `function.length`\r\n\r\n\r\n      validate(_value, _utils) {\r\n        return false;\r\n      }\r\n\r\n      deprecated(_value, _utils) {\r\n        return false;\r\n      }\r\n\r\n      forward(_value, _utils) {\r\n        return undefined;\r\n      }\r\n\r\n      redirect(_value, _utils) {\r\n        return undefined;\r\n      }\r\n\r\n      overlap(currentValue, _newValue, _utils) {\r\n        return currentValue;\r\n      }\r\n\r\n      preprocess(value, _utils) {\r\n        return value;\r\n      }\r\n\r\n      postprocess(value, _utils) {\r\n        return value;\r\n      }\r\n\r\n    }\r\n\r\n    exports.Schema = Schema;\r\n\r\n    function normalizeHandler(handler, superSchema, handlerArgumentsLength) {\r\n      return typeof handler === 'function' ? (...args) => handler(...args.slice(0, handlerArgumentsLength - 1), superSchema, ...args.slice(handlerArgumentsLength - 1)) : () => handler;\r\n    }\r\n  });\r\n  unwrapExports(schema);\r\n  var schema_1 = schema.createSchema;\r\n  var schema_2 = schema.Schema;\r\n\r\n  var alias = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n\r\n    class AliasSchema extends schema.Schema {\r\n      constructor(parameters) {\r\n        super(parameters);\r\n        this._sourceName = parameters.sourceName;\r\n      }\r\n\r\n      expected(utils) {\r\n        return utils.schemas[this._sourceName].expected(utils);\r\n      }\r\n\r\n      validate(value, utils) {\r\n        return utils.schemas[this._sourceName].validate(value, utils);\r\n      }\r\n\r\n      redirect(_value, _utils) {\r\n        return this._sourceName;\r\n      }\r\n\r\n    }\r\n\r\n    exports.AliasSchema = AliasSchema;\r\n  });\r\n  unwrapExports(alias);\r\n  var alias_1 = alias.AliasSchema;\r\n\r\n  var any = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n\r\n    class AnySchema extends schema.Schema {\r\n      expected() {\r\n        return 'anything';\r\n      }\r\n\r\n      validate() {\r\n        return true;\r\n      }\r\n\r\n    }\r\n\r\n    exports.AnySchema = AnySchema;\r\n  });\r\n  unwrapExports(any);\r\n  var any_1 = any.AnySchema;\r\n\r\n  var array = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n\r\n    class ArraySchema extends schema.Schema {\r\n      constructor(_a) {\r\n        var {\r\n          valueSchema,\r\n          name = valueSchema.name\r\n        } = _a,\r\n            handlers = tslib_1.__rest(_a, [\"valueSchema\", \"name\"]);\r\n\r\n        super(Object.assign({}, handlers, {\r\n          name\r\n        }));\r\n        this._valueSchema = valueSchema;\r\n      }\r\n\r\n      expected(utils) {\r\n        return \"an array of \".concat(this._valueSchema.expected(utils));\r\n      }\r\n\r\n      validate(value, utils) {\r\n        if (!Array.isArray(value)) {\r\n          return false;\r\n        }\r\n\r\n        const invalidValues = [];\r\n\r\n        for (const subValue of value) {\r\n          const subValidateResult = utils.normalizeValidateResult(this._valueSchema.validate(subValue, utils), subValue);\r\n\r\n          if (subValidateResult !== true) {\r\n            invalidValues.push(subValidateResult.value);\r\n          }\r\n        }\r\n\r\n        return invalidValues.length === 0 ? true : {\r\n          value: invalidValues\r\n        };\r\n      }\r\n\r\n      deprecated(value, utils) {\r\n        const deprecatedResult = [];\r\n\r\n        for (const subValue of value) {\r\n          const subDeprecatedResult = utils.normalizeDeprecatedResult(this._valueSchema.deprecated(subValue, utils), subValue);\r\n\r\n          if (subDeprecatedResult !== false) {\r\n            deprecatedResult.push(...subDeprecatedResult.map(({\r\n              value: deprecatedValue\r\n            }) => ({\r\n              value: [deprecatedValue]\r\n            })));\r\n          }\r\n        }\r\n\r\n        return deprecatedResult;\r\n      }\r\n\r\n      forward(value, utils) {\r\n        const forwardResult = [];\r\n\r\n        for (const subValue of value) {\r\n          const subForwardResult = utils.normalizeForwardResult(this._valueSchema.forward(subValue, utils), subValue);\r\n          forwardResult.push(...subForwardResult.map(wrapTransferResult));\r\n        }\r\n\r\n        return forwardResult;\r\n      }\r\n\r\n      redirect(value, utils) {\r\n        const remain = [];\r\n        const redirect = [];\r\n\r\n        for (const subValue of value) {\r\n          const subRedirectResult = utils.normalizeRedirectResult(this._valueSchema.redirect(subValue, utils), subValue);\r\n\r\n          if ('remain' in subRedirectResult) {\r\n            remain.push(subRedirectResult.remain);\r\n          }\r\n\r\n          redirect.push(...subRedirectResult.redirect.map(wrapTransferResult));\r\n        }\r\n\r\n        return remain.length === 0 ? {\r\n          redirect\r\n        } : {\r\n          redirect,\r\n          remain\r\n        };\r\n      }\r\n\r\n      overlap(currentValue, newValue) {\r\n        return currentValue.concat(newValue);\r\n      }\r\n\r\n    }\r\n\r\n    exports.ArraySchema = ArraySchema;\r\n\r\n    function wrapTransferResult({\r\n      from,\r\n      to\r\n    }) {\r\n      return {\r\n        from: [from],\r\n        to\r\n      };\r\n    }\r\n  });\r\n  unwrapExports(array);\r\n  var array_1 = array.ArraySchema;\r\n\r\n  var boolean_1 = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n\r\n    class BooleanSchema extends schema.Schema {\r\n      expected() {\r\n        return 'true or false';\r\n      }\r\n\r\n      validate(value) {\r\n        return typeof value === 'boolean';\r\n      }\r\n\r\n    }\r\n\r\n    exports.BooleanSchema = BooleanSchema;\r\n  });\r\n  unwrapExports(boolean_1);\r\n  var boolean_2 = boolean_1.BooleanSchema;\r\n\r\n  var utils = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n\r\n    function recordFromArray(array, mainKey) {\r\n      const record = Object.create(null);\r\n\r\n      for (const value of array) {\r\n        const key = value[mainKey]; // istanbul ignore next\r\n\r\n        if (record[key]) {\r\n          throw new Error(\"Duplicate \".concat(mainKey, \" \").concat(JSON.stringify(key)));\r\n        } // @ts-ignore\r\n\r\n\r\n        record[key] = value;\r\n      }\r\n\r\n      return record;\r\n    }\r\n\r\n    exports.recordFromArray = recordFromArray;\r\n\r\n    function mapFromArray(array, mainKey) {\r\n      const map = new Map();\r\n\r\n      for (const value of array) {\r\n        const key = value[mainKey]; // istanbul ignore next\r\n\r\n        if (map.has(key)) {\r\n          throw new Error(\"Duplicate \".concat(mainKey, \" \").concat(JSON.stringify(key)));\r\n        }\r\n\r\n        map.set(key, value);\r\n      }\r\n\r\n      return map;\r\n    }\r\n\r\n    exports.mapFromArray = mapFromArray;\r\n\r\n    function createAutoChecklist() {\r\n      const map = Object.create(null);\r\n      return id => {\r\n        const idString = JSON.stringify(id);\r\n\r\n        if (map[idString]) {\r\n          return true;\r\n        }\r\n\r\n        map[idString] = true;\r\n        return false;\r\n      };\r\n    }\r\n\r\n    exports.createAutoChecklist = createAutoChecklist;\r\n\r\n    function partition(array, predicate) {\r\n      const trueArray = [];\r\n      const falseArray = [];\r\n\r\n      for (const value of array) {\r\n        if (predicate(value)) {\r\n          trueArray.push(value);\r\n        } else {\r\n          falseArray.push(value);\r\n        }\r\n      }\r\n\r\n      return [trueArray, falseArray];\r\n    }\r\n\r\n    exports.partition = partition;\r\n\r\n    function isInt(value) {\r\n      return value === Math.floor(value);\r\n    }\r\n\r\n    exports.isInt = isInt;\r\n\r\n    function comparePrimitive(a, b) {\r\n      if (a === b) {\r\n        return 0;\r\n      }\r\n\r\n      const typeofA = typeof a;\r\n      const typeofB = typeof b;\r\n      const orders = ['undefined', 'object', 'boolean', 'number', 'string'];\r\n\r\n      if (typeofA !== typeofB) {\r\n        return orders.indexOf(typeofA) - orders.indexOf(typeofB);\r\n      }\r\n\r\n      if (typeofA !== 'string') {\r\n        return Number(a) - Number(b);\r\n      }\r\n\r\n      return a.localeCompare(b);\r\n    }\r\n\r\n    exports.comparePrimitive = comparePrimitive;\r\n\r\n    function normalizeDefaultResult(result) {\r\n      return result === undefined ? {} : result;\r\n    }\r\n\r\n    exports.normalizeDefaultResult = normalizeDefaultResult;\r\n\r\n    function normalizeValidateResult(result, value) {\r\n      return result === true ? true : result === false ? {\r\n        value\r\n      } : result;\r\n    }\r\n\r\n    exports.normalizeValidateResult = normalizeValidateResult;\r\n\r\n    function normalizeDeprecatedResult(result, value, doNotNormalizeTrue = false) {\r\n      return result === false ? false : result === true ? doNotNormalizeTrue ? true : [{\r\n        value\r\n      }] : 'value' in result ? [result] : result.length === 0 ? false : result;\r\n    }\r\n\r\n    exports.normalizeDeprecatedResult = normalizeDeprecatedResult;\r\n\r\n    function normalizeTransferResult(result, value) {\r\n      return typeof result === 'string' || 'key' in result ? {\r\n        from: value,\r\n        to: result\r\n      } : 'from' in result ? {\r\n        from: result.from,\r\n        to: result.to\r\n      } : {\r\n        from: value,\r\n        to: result.to\r\n      };\r\n    }\r\n\r\n    exports.normalizeTransferResult = normalizeTransferResult;\r\n\r\n    function normalizeForwardResult(result, value) {\r\n      return result === undefined ? [] : Array.isArray(result) ? result.map(transferResult => normalizeTransferResult(transferResult, value)) : [normalizeTransferResult(result, value)];\r\n    }\r\n\r\n    exports.normalizeForwardResult = normalizeForwardResult;\r\n\r\n    function normalizeRedirectResult(result, value) {\r\n      const redirect = normalizeForwardResult(typeof result === 'object' && 'redirect' in result ? result.redirect : result, value);\r\n      return redirect.length === 0 ? {\r\n        remain: value,\r\n        redirect\r\n      } : typeof result === 'object' && 'remain' in result ? {\r\n        remain: result.remain,\r\n        redirect\r\n      } : {\r\n        redirect\r\n      };\r\n    }\r\n\r\n    exports.normalizeRedirectResult = normalizeRedirectResult;\r\n  });\r\n  unwrapExports(utils);\r\n  var utils_1 = utils.recordFromArray;\r\n  var utils_2 = utils.mapFromArray;\r\n  var utils_3 = utils.createAutoChecklist;\r\n  var utils_4 = utils.partition;\r\n  var utils_5 = utils.isInt;\r\n  var utils_6 = utils.comparePrimitive;\r\n  var utils_7 = utils.normalizeDefaultResult;\r\n  var utils_8 = utils.normalizeValidateResult;\r\n  var utils_9 = utils.normalizeDeprecatedResult;\r\n  var utils_10 = utils.normalizeTransferResult;\r\n  var utils_11 = utils.normalizeForwardResult;\r\n  var utils_12 = utils.normalizeRedirectResult;\r\n\r\n  var choice = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n\r\n    class ChoiceSchema extends schema.Schema {\r\n      constructor(parameters) {\r\n        super(parameters);\r\n        this._choices = utils.mapFromArray(parameters.choices.map(choice => choice && typeof choice === 'object' ? choice : {\r\n          value: choice\r\n        }), 'value');\r\n      }\r\n\r\n      expected({\r\n        descriptor\r\n      }) {\r\n        const choiceValues = Array.from(this._choices.keys()).map(value => this._choices.get(value)).filter(choiceInfo => !choiceInfo.deprecated).map(choiceInfo => choiceInfo.value).sort(utils.comparePrimitive).map(descriptor.value);\r\n        const head = choiceValues.slice(0, -2);\r\n        const tail = choiceValues.slice(-2);\r\n        return head.concat(tail.join(' or ')).join(', ');\r\n      }\r\n\r\n      validate(value) {\r\n        return this._choices.has(value);\r\n      }\r\n\r\n      deprecated(value) {\r\n        const choiceInfo = this._choices.get(value);\r\n\r\n        return choiceInfo && choiceInfo.deprecated ? {\r\n          value\r\n        } : false;\r\n      }\r\n\r\n      forward(value) {\r\n        const choiceInfo = this._choices.get(value);\r\n\r\n        return choiceInfo ? choiceInfo.forward : undefined;\r\n      }\r\n\r\n      redirect(value) {\r\n        const choiceInfo = this._choices.get(value);\r\n\r\n        return choiceInfo ? choiceInfo.redirect : undefined;\r\n      }\r\n\r\n    }\r\n\r\n    exports.ChoiceSchema = ChoiceSchema;\r\n  });\r\n  unwrapExports(choice);\r\n  var choice_1 = choice.ChoiceSchema;\r\n\r\n  var number = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n\r\n    class NumberSchema extends schema.Schema {\r\n      expected() {\r\n        return 'a number';\r\n      }\r\n\r\n      validate(value, _utils) {\r\n        return typeof value === 'number';\r\n      }\r\n\r\n    }\r\n\r\n    exports.NumberSchema = NumberSchema;\r\n  });\r\n  unwrapExports(number);\r\n  var number_1 = number.NumberSchema;\r\n\r\n  var integer = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n\r\n    class IntegerSchema extends number.NumberSchema {\r\n      expected() {\r\n        return 'an integer';\r\n      }\r\n\r\n      validate(value, utils$1) {\r\n        return utils$1.normalizeValidateResult(super.validate(value, utils$1), value) === true && utils.isInt(value);\r\n      }\r\n\r\n    }\r\n\r\n    exports.IntegerSchema = IntegerSchema;\r\n  });\r\n  unwrapExports(integer);\r\n  var integer_1 = integer.IntegerSchema;\r\n\r\n  var string = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n\r\n    class StringSchema extends schema.Schema {\r\n      expected() {\r\n        return 'a string';\r\n      }\r\n\r\n      validate(value) {\r\n        return typeof value === 'string';\r\n      }\r\n\r\n    }\r\n\r\n    exports.StringSchema = StringSchema;\r\n  });\r\n  unwrapExports(string);\r\n  var string_1 = string.StringSchema;\r\n\r\n  var schemas = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n\r\n    tslib_1.__exportStar(alias, exports);\r\n\r\n    tslib_1.__exportStar(any, exports);\r\n\r\n    tslib_1.__exportStar(array, exports);\r\n\r\n    tslib_1.__exportStar(boolean_1, exports);\r\n\r\n    tslib_1.__exportStar(choice, exports);\r\n\r\n    tslib_1.__exportStar(integer, exports);\r\n\r\n    tslib_1.__exportStar(number, exports);\r\n\r\n    tslib_1.__exportStar(string, exports);\r\n  });\r\n  unwrapExports(schemas);\r\n\r\n  var defaults = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n    exports.defaultDescriptor = api.apiDescriptor;\r\n    exports.defaultUnknownHandler = leven_1.levenUnknownHandler;\r\n    exports.defaultInvalidHandler = invalid.commonInvalidHandler;\r\n    exports.defaultDeprecatedHandler = common.commonDeprecatedHandler;\r\n  });\r\n  unwrapExports(defaults);\r\n  var defaults_1 = defaults.defaultDescriptor;\r\n  var defaults_2 = defaults.defaultUnknownHandler;\r\n  var defaults_3 = defaults.defaultInvalidHandler;\r\n  var defaults_4 = defaults.defaultDeprecatedHandler;\r\n\r\n  var normalize = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n\r\n    exports.normalize = (options, schemas, opts) => new Normalizer(schemas, opts).normalize(options);\r\n\r\n    class Normalizer {\r\n      constructor(schemas, opts) {\r\n        // istanbul ignore next\r\n        const {\r\n          logger = console,\r\n          descriptor = defaults.defaultDescriptor,\r\n          unknown = defaults.defaultUnknownHandler,\r\n          invalid = defaults.defaultInvalidHandler,\r\n          deprecated = defaults.defaultDeprecatedHandler\r\n        } = opts || {};\r\n        this._utils = {\r\n          descriptor,\r\n          logger:\r\n          /* istanbul ignore next */\r\n          logger || {\r\n            warn: () => {}\r\n          },\r\n          schemas: utils.recordFromArray(schemas, 'name'),\r\n          normalizeDefaultResult: utils.normalizeDefaultResult,\r\n          normalizeDeprecatedResult: utils.normalizeDeprecatedResult,\r\n          normalizeForwardResult: utils.normalizeForwardResult,\r\n          normalizeRedirectResult: utils.normalizeRedirectResult,\r\n          normalizeValidateResult: utils.normalizeValidateResult\r\n        };\r\n        this._unknownHandler = unknown;\r\n        this._invalidHandler = invalid;\r\n        this._deprecatedHandler = deprecated;\r\n        this.cleanHistory();\r\n      }\r\n\r\n      cleanHistory() {\r\n        this._hasDeprecationWarned = utils.createAutoChecklist();\r\n      }\r\n\r\n      normalize(options) {\r\n        const normalized = {};\r\n        const restOptionsArray = [options];\r\n\r\n        const applyNormalization = () => {\r\n          while (restOptionsArray.length !== 0) {\r\n            const currentOptions = restOptionsArray.shift();\r\n\r\n            const transferredOptionsArray = this._applyNormalization(currentOptions, normalized);\r\n\r\n            restOptionsArray.push(...transferredOptionsArray);\r\n          }\r\n        };\r\n\r\n        applyNormalization();\r\n\r\n        for (const key of Object.keys(this._utils.schemas)) {\r\n          const schema = this._utils.schemas[key];\r\n\r\n          if (!(key in normalized)) {\r\n            const defaultResult = utils.normalizeDefaultResult(schema.default(this._utils));\r\n\r\n            if ('value' in defaultResult) {\r\n              restOptionsArray.push({\r\n                [key]: defaultResult.value\r\n              });\r\n            }\r\n          }\r\n        }\r\n\r\n        applyNormalization();\r\n\r\n        for (const key of Object.keys(this._utils.schemas)) {\r\n          const schema = this._utils.schemas[key];\r\n\r\n          if (key in normalized) {\r\n            normalized[key] = schema.postprocess(normalized[key], this._utils);\r\n          }\r\n        }\r\n\r\n        return normalized;\r\n      }\r\n\r\n      _applyNormalization(options, normalized) {\r\n        const transferredOptionsArray = [];\r\n        const [knownOptionNames, unknownOptionNames] = utils.partition(Object.keys(options), key => key in this._utils.schemas);\r\n\r\n        for (const key of knownOptionNames) {\r\n          const schema = this._utils.schemas[key];\r\n          const value = schema.preprocess(options[key], this._utils);\r\n          const validateResult = utils.normalizeValidateResult(schema.validate(value, this._utils), value);\r\n\r\n          if (validateResult !== true) {\r\n            const {\r\n              value: invalidValue\r\n            } = validateResult;\r\n\r\n            const errorMessageOrError = this._invalidHandler(key, invalidValue, this._utils);\r\n\r\n            throw typeof errorMessageOrError === 'string' ? new Error(errorMessageOrError) :\r\n            /* istanbul ignore next*/\r\n            errorMessageOrError;\r\n          }\r\n\r\n          const appendTransferredOptions = ({\r\n            from,\r\n            to\r\n          }) => {\r\n            transferredOptionsArray.push(typeof to === 'string' ? {\r\n              [to]: from\r\n            } : {\r\n              [to.key]: to.value\r\n            });\r\n          };\r\n\r\n          const warnDeprecated = ({\r\n            value: currentValue,\r\n            redirectTo\r\n          }) => {\r\n            const deprecatedResult = utils.normalizeDeprecatedResult(schema.deprecated(currentValue, this._utils), value,\r\n            /* doNotNormalizeTrue */\r\n            true);\r\n\r\n            if (deprecatedResult === false) {\r\n              return;\r\n            }\r\n\r\n            if (deprecatedResult === true) {\r\n              if (!this._hasDeprecationWarned(key)) {\r\n                this._utils.logger.warn(this._deprecatedHandler(key, redirectTo, this._utils));\r\n              }\r\n            } else {\r\n              for (const {\r\n                value: deprecatedValue\r\n              } of deprecatedResult) {\r\n                const pair = {\r\n                  key,\r\n                  value: deprecatedValue\r\n                };\r\n\r\n                if (!this._hasDeprecationWarned(pair)) {\r\n                  const redirectToPair = typeof redirectTo === 'string' ? {\r\n                    key: redirectTo,\r\n                    value: deprecatedValue\r\n                  } : redirectTo;\r\n\r\n                  this._utils.logger.warn(this._deprecatedHandler(pair, redirectToPair, this._utils));\r\n                }\r\n              }\r\n            }\r\n          };\r\n\r\n          const forwardResult = utils.normalizeForwardResult(schema.forward(value, this._utils), value);\r\n          forwardResult.forEach(appendTransferredOptions);\r\n          const redirectResult = utils.normalizeRedirectResult(schema.redirect(value, this._utils), value);\r\n          redirectResult.redirect.forEach(appendTransferredOptions);\r\n\r\n          if ('remain' in redirectResult) {\r\n            const remainingValue = redirectResult.remain;\r\n            normalized[key] = key in normalized ? schema.overlap(normalized[key], remainingValue, this._utils) : remainingValue;\r\n            warnDeprecated({\r\n              value: remainingValue\r\n            });\r\n          }\r\n\r\n          for (const {\r\n            from,\r\n            to\r\n          } of redirectResult.redirect) {\r\n            warnDeprecated({\r\n              value: from,\r\n              redirectTo: to\r\n            });\r\n          }\r\n        }\r\n\r\n        for (const key of unknownOptionNames) {\r\n          const value = options[key];\r\n\r\n          const unknownResult = this._unknownHandler(key, value, this._utils);\r\n\r\n          if (unknownResult) {\r\n            for (const unknownKey of Object.keys(unknownResult)) {\r\n              const unknownOption = {\r\n                [unknownKey]: unknownResult[unknownKey]\r\n              };\r\n\r\n              if (unknownKey in this._utils.schemas) {\r\n                transferredOptionsArray.push(unknownOption);\r\n              } else {\r\n                Object.assign(normalized, unknownOption);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        return transferredOptionsArray;\r\n      }\r\n\r\n    }\r\n\r\n    exports.Normalizer = Normalizer;\r\n  });\r\n  unwrapExports(normalize);\r\n  var normalize_1 = normalize.normalize;\r\n  var normalize_2 = normalize.Normalizer;\r\n\r\n  var lib = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n\r\n    tslib_1.__exportStar(descriptors, exports);\r\n\r\n    tslib_1.__exportStar(handlers, exports);\r\n\r\n    tslib_1.__exportStar(schemas, exports);\r\n\r\n    tslib_1.__exportStar(normalize, exports);\r\n\r\n    tslib_1.__exportStar(schema, exports);\r\n  });\r\n  unwrapExports(lib);\r\n\r\n  const array$1 = [];\r\n  const charCodeCache$1 = [];\r\n\r\n  const leven$1 = (left, right) => {\r\n    if (left === right) {\r\n      return 0;\r\n    }\r\n\r\n    const swap = left; // Swapping the strings if `a` is longer than `b` so we know which one is the\r\n    // shortest & which one is the longest\r\n\r\n    if (left.length > right.length) {\r\n      left = right;\r\n      right = swap;\r\n    }\r\n\r\n    let leftLength = left.length;\r\n    let rightLength = right.length; // Performing suffix trimming:\r\n    // We can linearly drop suffix common to both strings since they\r\n    // don't increase distance at all\r\n    // Note: `~-` is the bitwise way to perform a `- 1` operation\r\n\r\n    while (leftLength > 0 && left.charCodeAt(~-leftLength) === right.charCodeAt(~-rightLength)) {\r\n      leftLength--;\r\n      rightLength--;\r\n    } // Performing prefix trimming\r\n    // We can linearly drop prefix common to both strings since they\r\n    // don't increase distance at all\r\n\r\n\r\n    let start = 0;\r\n\r\n    while (start < leftLength && left.charCodeAt(start) === right.charCodeAt(start)) {\r\n      start++;\r\n    }\r\n\r\n    leftLength -= start;\r\n    rightLength -= start;\r\n\r\n    if (leftLength === 0) {\r\n      return rightLength;\r\n    }\r\n\r\n    let bCharCode;\r\n    let result;\r\n    let temp;\r\n    let temp2;\r\n    let i = 0;\r\n    let j = 0;\r\n\r\n    while (i < leftLength) {\r\n      charCodeCache$1[i] = left.charCodeAt(start + i);\r\n      array$1[i] = ++i;\r\n    }\r\n\r\n    while (j < rightLength) {\r\n      bCharCode = right.charCodeAt(start + j);\r\n      temp = j++;\r\n      result = j;\r\n\r\n      for (i = 0; i < leftLength; i++) {\r\n        temp2 = bCharCode === charCodeCache$1[i] ? temp : temp + 1;\r\n        temp = array$1[i]; // eslint-disable-next-line no-multi-assign\r\n\r\n        result = array$1[i] = temp > result ? temp2 > result ? result + 1 : temp2 : temp2 > temp ? temp + 1 : temp2;\r\n      }\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  var leven_1$1 = leven$1; // TODO: Remove this for the next major release\r\n\r\n  var default_1 = leven$1;\r\n  leven_1$1.default = default_1;\r\n\r\n  var colorName$1 = {\r\n    \"aliceblue\": [240, 248, 255],\r\n    \"antiquewhite\": [250, 235, 215],\r\n    \"aqua\": [0, 255, 255],\r\n    \"aquamarine\": [127, 255, 212],\r\n    \"azure\": [240, 255, 255],\r\n    \"beige\": [245, 245, 220],\r\n    \"bisque\": [255, 228, 196],\r\n    \"black\": [0, 0, 0],\r\n    \"blanchedalmond\": [255, 235, 205],\r\n    \"blue\": [0, 0, 255],\r\n    \"blueviolet\": [138, 43, 226],\r\n    \"brown\": [165, 42, 42],\r\n    \"burlywood\": [222, 184, 135],\r\n    \"cadetblue\": [95, 158, 160],\r\n    \"chartreuse\": [127, 255, 0],\r\n    \"chocolate\": [210, 105, 30],\r\n    \"coral\": [255, 127, 80],\r\n    \"cornflowerblue\": [100, 149, 237],\r\n    \"cornsilk\": [255, 248, 220],\r\n    \"crimson\": [220, 20, 60],\r\n    \"cyan\": [0, 255, 255],\r\n    \"darkblue\": [0, 0, 139],\r\n    \"darkcyan\": [0, 139, 139],\r\n    \"darkgoldenrod\": [184, 134, 11],\r\n    \"darkgray\": [169, 169, 169],\r\n    \"darkgreen\": [0, 100, 0],\r\n    \"darkgrey\": [169, 169, 169],\r\n    \"darkkhaki\": [189, 183, 107],\r\n    \"darkmagenta\": [139, 0, 139],\r\n    \"darkolivegreen\": [85, 107, 47],\r\n    \"darkorange\": [255, 140, 0],\r\n    \"darkorchid\": [153, 50, 204],\r\n    \"darkred\": [139, 0, 0],\r\n    \"darksalmon\": [233, 150, 122],\r\n    \"darkseagreen\": [143, 188, 143],\r\n    \"darkslateblue\": [72, 61, 139],\r\n    \"darkslategray\": [47, 79, 79],\r\n    \"darkslategrey\": [47, 79, 79],\r\n    \"darkturquoise\": [0, 206, 209],\r\n    \"darkviolet\": [148, 0, 211],\r\n    \"deeppink\": [255, 20, 147],\r\n    \"deepskyblue\": [0, 191, 255],\r\n    \"dimgray\": [105, 105, 105],\r\n    \"dimgrey\": [105, 105, 105],\r\n    \"dodgerblue\": [30, 144, 255],\r\n    \"firebrick\": [178, 34, 34],\r\n    \"floralwhite\": [255, 250, 240],\r\n    \"forestgreen\": [34, 139, 34],\r\n    \"fuchsia\": [255, 0, 255],\r\n    \"gainsboro\": [220, 220, 220],\r\n    \"ghostwhite\": [248, 248, 255],\r\n    \"gold\": [255, 215, 0],\r\n    \"goldenrod\": [218, 165, 32],\r\n    \"gray\": [128, 128, 128],\r\n    \"green\": [0, 128, 0],\r\n    \"greenyellow\": [173, 255, 47],\r\n    \"grey\": [128, 128, 128],\r\n    \"honeydew\": [240, 255, 240],\r\n    \"hotpink\": [255, 105, 180],\r\n    \"indianred\": [205, 92, 92],\r\n    \"indigo\": [75, 0, 130],\r\n    \"ivory\": [255, 255, 240],\r\n    \"khaki\": [240, 230, 140],\r\n    \"lavender\": [230, 230, 250],\r\n    \"lavenderblush\": [255, 240, 245],\r\n    \"lawngreen\": [124, 252, 0],\r\n    \"lemonchiffon\": [255, 250, 205],\r\n    \"lightblue\": [173, 216, 230],\r\n    \"lightcoral\": [240, 128, 128],\r\n    \"lightcyan\": [224, 255, 255],\r\n    \"lightgoldenrodyellow\": [250, 250, 210],\r\n    \"lightgray\": [211, 211, 211],\r\n    \"lightgreen\": [144, 238, 144],\r\n    \"lightgrey\": [211, 211, 211],\r\n    \"lightpink\": [255, 182, 193],\r\n    \"lightsalmon\": [255, 160, 122],\r\n    \"lightseagreen\": [32, 178, 170],\r\n    \"lightskyblue\": [135, 206, 250],\r\n    \"lightslategray\": [119, 136, 153],\r\n    \"lightslategrey\": [119, 136, 153],\r\n    \"lightsteelblue\": [176, 196, 222],\r\n    \"lightyellow\": [255, 255, 224],\r\n    \"lime\": [0, 255, 0],\r\n    \"limegreen\": [50, 205, 50],\r\n    \"linen\": [250, 240, 230],\r\n    \"magenta\": [255, 0, 255],\r\n    \"maroon\": [128, 0, 0],\r\n    \"mediumaquamarine\": [102, 205, 170],\r\n    \"mediumblue\": [0, 0, 205],\r\n    \"mediumorchid\": [186, 85, 211],\r\n    \"mediumpurple\": [147, 112, 219],\r\n    \"mediumseagreen\": [60, 179, 113],\r\n    \"mediumslateblue\": [123, 104, 238],\r\n    \"mediumspringgreen\": [0, 250, 154],\r\n    \"mediumturquoise\": [72, 209, 204],\r\n    \"mediumvioletred\": [199, 21, 133],\r\n    \"midnightblue\": [25, 25, 112],\r\n    \"mintcream\": [245, 255, 250],\r\n    \"mistyrose\": [255, 228, 225],\r\n    \"moccasin\": [255, 228, 181],\r\n    \"navajowhite\": [255, 222, 173],\r\n    \"navy\": [0, 0, 128],\r\n    \"oldlace\": [253, 245, 230],\r\n    \"olive\": [128, 128, 0],\r\n    \"olivedrab\": [107, 142, 35],\r\n    \"orange\": [255, 165, 0],\r\n    \"orangered\": [255, 69, 0],\r\n    \"orchid\": [218, 112, 214],\r\n    \"palegoldenrod\": [238, 232, 170],\r\n    \"palegreen\": [152, 251, 152],\r\n    \"paleturquoise\": [175, 238, 238],\r\n    \"palevioletred\": [219, 112, 147],\r\n    \"papayawhip\": [255, 239, 213],\r\n    \"peachpuff\": [255, 218, 185],\r\n    \"peru\": [205, 133, 63],\r\n    \"pink\": [255, 192, 203],\r\n    \"plum\": [221, 160, 221],\r\n    \"powderblue\": [176, 224, 230],\r\n    \"purple\": [128, 0, 128],\r\n    \"rebeccapurple\": [102, 51, 153],\r\n    \"red\": [255, 0, 0],\r\n    \"rosybrown\": [188, 143, 143],\r\n    \"royalblue\": [65, 105, 225],\r\n    \"saddlebrown\": [139, 69, 19],\r\n    \"salmon\": [250, 128, 114],\r\n    \"sandybrown\": [244, 164, 96],\r\n    \"seagreen\": [46, 139, 87],\r\n    \"seashell\": [255, 245, 238],\r\n    \"sienna\": [160, 82, 45],\r\n    \"silver\": [192, 192, 192],\r\n    \"skyblue\": [135, 206, 235],\r\n    \"slateblue\": [106, 90, 205],\r\n    \"slategray\": [112, 128, 144],\r\n    \"slategrey\": [112, 128, 144],\r\n    \"snow\": [255, 250, 250],\r\n    \"springgreen\": [0, 255, 127],\r\n    \"steelblue\": [70, 130, 180],\r\n    \"tan\": [210, 180, 140],\r\n    \"teal\": [0, 128, 128],\r\n    \"thistle\": [216, 191, 216],\r\n    \"tomato\": [255, 99, 71],\r\n    \"turquoise\": [64, 224, 208],\r\n    \"violet\": [238, 130, 238],\r\n    \"wheat\": [245, 222, 179],\r\n    \"white\": [255, 255, 255],\r\n    \"whitesmoke\": [245, 245, 245],\r\n    \"yellow\": [255, 255, 0],\r\n    \"yellowgreen\": [154, 205, 50]\r\n  };\r\n\r\n  /* MIT license */\r\n\r\n  /* eslint-disable no-mixed-operators */\r\n  // NOTE: conversions should only return primitive values (i.e. arrays, or\r\n  //       values that give correct `typeof` results).\r\n  //       do not use box values types (i.e. Number(), String(), etc.)\r\n\r\n  const reverseKeywords = {};\r\n\r\n  for (const key of Object.keys(colorName$1)) {\r\n    reverseKeywords[colorName$1[key]] = key;\r\n  }\r\n\r\n  const convert$1 = {\r\n    rgb: {\r\n      channels: 3,\r\n      labels: 'rgb'\r\n    },\r\n    hsl: {\r\n      channels: 3,\r\n      labels: 'hsl'\r\n    },\r\n    hsv: {\r\n      channels: 3,\r\n      labels: 'hsv'\r\n    },\r\n    hwb: {\r\n      channels: 3,\r\n      labels: 'hwb'\r\n    },\r\n    cmyk: {\r\n      channels: 4,\r\n      labels: 'cmyk'\r\n    },\r\n    xyz: {\r\n      channels: 3,\r\n      labels: 'xyz'\r\n    },\r\n    lab: {\r\n      channels: 3,\r\n      labels: 'lab'\r\n    },\r\n    lch: {\r\n      channels: 3,\r\n      labels: 'lch'\r\n    },\r\n    hex: {\r\n      channels: 1,\r\n      labels: ['hex']\r\n    },\r\n    keyword: {\r\n      channels: 1,\r\n      labels: ['keyword']\r\n    },\r\n    ansi16: {\r\n      channels: 1,\r\n      labels: ['ansi16']\r\n    },\r\n    ansi256: {\r\n      channels: 1,\r\n      labels: ['ansi256']\r\n    },\r\n    hcg: {\r\n      channels: 3,\r\n      labels: ['h', 'c', 'g']\r\n    },\r\n    apple: {\r\n      channels: 3,\r\n      labels: ['r16', 'g16', 'b16']\r\n    },\r\n    gray: {\r\n      channels: 1,\r\n      labels: ['gray']\r\n    }\r\n  };\r\n  var conversions$1 = convert$1; // Hide .channels and .labels properties\r\n\r\n  for (const model of Object.keys(convert$1)) {\r\n    if (!('channels' in convert$1[model])) {\r\n      throw new Error('missing channels property: ' + model);\r\n    }\r\n\r\n    if (!('labels' in convert$1[model])) {\r\n      throw new Error('missing channel labels property: ' + model);\r\n    }\r\n\r\n    if (convert$1[model].labels.length !== convert$1[model].channels) {\r\n      throw new Error('channel and label counts mismatch: ' + model);\r\n    }\r\n\r\n    const {\r\n      channels,\r\n      labels\r\n    } = convert$1[model];\r\n    delete convert$1[model].channels;\r\n    delete convert$1[model].labels;\r\n    Object.defineProperty(convert$1[model], 'channels', {\r\n      value: channels\r\n    });\r\n    Object.defineProperty(convert$1[model], 'labels', {\r\n      value: labels\r\n    });\r\n  }\r\n\r\n  convert$1.rgb.hsl = function (rgb) {\r\n    const r = rgb[0] / 255;\r\n    const g = rgb[1] / 255;\r\n    const b = rgb[2] / 255;\r\n    const min = Math.min(r, g, b);\r\n    const max = Math.max(r, g, b);\r\n    const delta = max - min;\r\n    let h;\r\n    let s;\r\n\r\n    if (max === min) {\r\n      h = 0;\r\n    } else if (r === max) {\r\n      h = (g - b) / delta;\r\n    } else if (g === max) {\r\n      h = 2 + (b - r) / delta;\r\n    } else if (b === max) {\r\n      h = 4 + (r - g) / delta;\r\n    }\r\n\r\n    h = Math.min(h * 60, 360);\r\n\r\n    if (h < 0) {\r\n      h += 360;\r\n    }\r\n\r\n    const l = (min + max) / 2;\r\n\r\n    if (max === min) {\r\n      s = 0;\r\n    } else if (l <= 0.5) {\r\n      s = delta / (max + min);\r\n    } else {\r\n      s = delta / (2 - max - min);\r\n    }\r\n\r\n    return [h, s * 100, l * 100];\r\n  };\r\n\r\n  convert$1.rgb.hsv = function (rgb) {\r\n    let rdif;\r\n    let gdif;\r\n    let bdif;\r\n    let h;\r\n    let s;\r\n    const r = rgb[0] / 255;\r\n    const g = rgb[1] / 255;\r\n    const b = rgb[2] / 255;\r\n    const v = Math.max(r, g, b);\r\n    const diff = v - Math.min(r, g, b);\r\n\r\n    const diffc = function diffc(c) {\r\n      return (v - c) / 6 / diff + 1 / 2;\r\n    };\r\n\r\n    if (diff === 0) {\r\n      h = 0;\r\n      s = 0;\r\n    } else {\r\n      s = diff / v;\r\n      rdif = diffc(r);\r\n      gdif = diffc(g);\r\n      bdif = diffc(b);\r\n\r\n      if (r === v) {\r\n        h = bdif - gdif;\r\n      } else if (g === v) {\r\n        h = 1 / 3 + rdif - bdif;\r\n      } else if (b === v) {\r\n        h = 2 / 3 + gdif - rdif;\r\n      }\r\n\r\n      if (h < 0) {\r\n        h += 1;\r\n      } else if (h > 1) {\r\n        h -= 1;\r\n      }\r\n    }\r\n\r\n    return [h * 360, s * 100, v * 100];\r\n  };\r\n\r\n  convert$1.rgb.hwb = function (rgb) {\r\n    const r = rgb[0];\r\n    const g = rgb[1];\r\n    let b = rgb[2];\r\n    const h = convert$1.rgb.hsl(rgb)[0];\r\n    const w = 1 / 255 * Math.min(r, Math.min(g, b));\r\n    b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\r\n    return [h, w * 100, b * 100];\r\n  };\r\n\r\n  convert$1.rgb.cmyk = function (rgb) {\r\n    const r = rgb[0] / 255;\r\n    const g = rgb[1] / 255;\r\n    const b = rgb[2] / 255;\r\n    const k = Math.min(1 - r, 1 - g, 1 - b);\r\n    const c = (1 - r - k) / (1 - k) || 0;\r\n    const m = (1 - g - k) / (1 - k) || 0;\r\n    const y = (1 - b - k) / (1 - k) || 0;\r\n    return [c * 100, m * 100, y * 100, k * 100];\r\n  };\r\n\r\n  function comparativeDistance(x, y) {\r\n    /*\r\n    \tSee https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\r\n    */\r\n    return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2;\r\n  }\r\n\r\n  convert$1.rgb.keyword = function (rgb) {\r\n    const reversed = reverseKeywords[rgb];\r\n\r\n    if (reversed) {\r\n      return reversed;\r\n    }\r\n\r\n    let currentClosestDistance = Infinity;\r\n    let currentClosestKeyword;\r\n\r\n    for (const keyword of Object.keys(colorName$1)) {\r\n      const value = colorName$1[keyword]; // Compute comparative distance\r\n\r\n      const distance = comparativeDistance(rgb, value); // Check if its less, if so set as closest\r\n\r\n      if (distance < currentClosestDistance) {\r\n        currentClosestDistance = distance;\r\n        currentClosestKeyword = keyword;\r\n      }\r\n    }\r\n\r\n    return currentClosestKeyword;\r\n  };\r\n\r\n  convert$1.keyword.rgb = function (keyword) {\r\n    return colorName$1[keyword];\r\n  };\r\n\r\n  convert$1.rgb.xyz = function (rgb) {\r\n    let r = rgb[0] / 255;\r\n    let g = rgb[1] / 255;\r\n    let b = rgb[2] / 255; // Assume sRGB\r\n\r\n    r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;\r\n    g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;\r\n    b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;\r\n    const x = r * 0.4124 + g * 0.3576 + b * 0.1805;\r\n    const y = r * 0.2126 + g * 0.7152 + b * 0.0722;\r\n    const z = r * 0.0193 + g * 0.1192 + b * 0.9505;\r\n    return [x * 100, y * 100, z * 100];\r\n  };\r\n\r\n  convert$1.rgb.lab = function (rgb) {\r\n    const xyz = convert$1.rgb.xyz(rgb);\r\n    let x = xyz[0];\r\n    let y = xyz[1];\r\n    let z = xyz[2];\r\n    x /= 95.047;\r\n    y /= 100;\r\n    z /= 108.883;\r\n    x = x > 0.008856 ? x ** (1 / 3) : 7.787 * x + 16 / 116;\r\n    y = y > 0.008856 ? y ** (1 / 3) : 7.787 * y + 16 / 116;\r\n    z = z > 0.008856 ? z ** (1 / 3) : 7.787 * z + 16 / 116;\r\n    const l = 116 * y - 16;\r\n    const a = 500 * (x - y);\r\n    const b = 200 * (y - z);\r\n    return [l, a, b];\r\n  };\r\n\r\n  convert$1.hsl.rgb = function (hsl) {\r\n    const h = hsl[0] / 360;\r\n    const s = hsl[1] / 100;\r\n    const l = hsl[2] / 100;\r\n    let t2;\r\n    let t3;\r\n    let val;\r\n\r\n    if (s === 0) {\r\n      val = l * 255;\r\n      return [val, val, val];\r\n    }\r\n\r\n    if (l < 0.5) {\r\n      t2 = l * (1 + s);\r\n    } else {\r\n      t2 = l + s - l * s;\r\n    }\r\n\r\n    const t1 = 2 * l - t2;\r\n    const rgb = [0, 0, 0];\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n      t3 = h + 1 / 3 * -(i - 1);\r\n\r\n      if (t3 < 0) {\r\n        t3++;\r\n      }\r\n\r\n      if (t3 > 1) {\r\n        t3--;\r\n      }\r\n\r\n      if (6 * t3 < 1) {\r\n        val = t1 + (t2 - t1) * 6 * t3;\r\n      } else if (2 * t3 < 1) {\r\n        val = t2;\r\n      } else if (3 * t3 < 2) {\r\n        val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\r\n      } else {\r\n        val = t1;\r\n      }\r\n\r\n      rgb[i] = val * 255;\r\n    }\r\n\r\n    return rgb;\r\n  };\r\n\r\n  convert$1.hsl.hsv = function (hsl) {\r\n    const h = hsl[0];\r\n    let s = hsl[1] / 100;\r\n    let l = hsl[2] / 100;\r\n    let smin = s;\r\n    const lmin = Math.max(l, 0.01);\r\n    l *= 2;\r\n    s *= l <= 1 ? l : 2 - l;\r\n    smin *= lmin <= 1 ? lmin : 2 - lmin;\r\n    const v = (l + s) / 2;\r\n    const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);\r\n    return [h, sv * 100, v * 100];\r\n  };\r\n\r\n  convert$1.hsv.rgb = function (hsv) {\r\n    const h = hsv[0] / 60;\r\n    const s = hsv[1] / 100;\r\n    let v = hsv[2] / 100;\r\n    const hi = Math.floor(h) % 6;\r\n    const f = h - Math.floor(h);\r\n    const p = 255 * v * (1 - s);\r\n    const q = 255 * v * (1 - s * f);\r\n    const t = 255 * v * (1 - s * (1 - f));\r\n    v *= 255;\r\n\r\n    switch (hi) {\r\n      case 0:\r\n        return [v, t, p];\r\n\r\n      case 1:\r\n        return [q, v, p];\r\n\r\n      case 2:\r\n        return [p, v, t];\r\n\r\n      case 3:\r\n        return [p, q, v];\r\n\r\n      case 4:\r\n        return [t, p, v];\r\n\r\n      case 5:\r\n        return [v, p, q];\r\n    }\r\n  };\r\n\r\n  convert$1.hsv.hsl = function (hsv) {\r\n    const h = hsv[0];\r\n    const s = hsv[1] / 100;\r\n    const v = hsv[2] / 100;\r\n    const vmin = Math.max(v, 0.01);\r\n    let sl;\r\n    let l;\r\n    l = (2 - s) * v;\r\n    const lmin = (2 - s) * vmin;\r\n    sl = s * vmin;\r\n    sl /= lmin <= 1 ? lmin : 2 - lmin;\r\n    sl = sl || 0;\r\n    l /= 2;\r\n    return [h, sl * 100, l * 100];\r\n  }; // http://dev.w3.org/csswg/css-color/#hwb-to-rgb\r\n\r\n\r\n  convert$1.hwb.rgb = function (hwb) {\r\n    const h = hwb[0] / 360;\r\n    let wh = hwb[1] / 100;\r\n    let bl = hwb[2] / 100;\r\n    const ratio = wh + bl;\r\n    let f; // Wh + bl cant be > 1\r\n\r\n    if (ratio > 1) {\r\n      wh /= ratio;\r\n      bl /= ratio;\r\n    }\r\n\r\n    const i = Math.floor(6 * h);\r\n    const v = 1 - bl;\r\n    f = 6 * h - i;\r\n\r\n    if ((i & 0x01) !== 0) {\r\n      f = 1 - f;\r\n    }\r\n\r\n    const n = wh + f * (v - wh); // Linear interpolation\r\n\r\n    let r;\r\n    let g;\r\n    let b;\r\n    /* eslint-disable max-statements-per-line,no-multi-spaces */\r\n\r\n    switch (i) {\r\n      default:\r\n      case 6:\r\n      case 0:\r\n        r = v;\r\n        g = n;\r\n        b = wh;\r\n        break;\r\n\r\n      case 1:\r\n        r = n;\r\n        g = v;\r\n        b = wh;\r\n        break;\r\n\r\n      case 2:\r\n        r = wh;\r\n        g = v;\r\n        b = n;\r\n        break;\r\n\r\n      case 3:\r\n        r = wh;\r\n        g = n;\r\n        b = v;\r\n        break;\r\n\r\n      case 4:\r\n        r = n;\r\n        g = wh;\r\n        b = v;\r\n        break;\r\n\r\n      case 5:\r\n        r = v;\r\n        g = wh;\r\n        b = n;\r\n        break;\r\n    }\r\n    /* eslint-enable max-statements-per-line,no-multi-spaces */\r\n\r\n\r\n    return [r * 255, g * 255, b * 255];\r\n  };\r\n\r\n  convert$1.cmyk.rgb = function (cmyk) {\r\n    const c = cmyk[0] / 100;\r\n    const m = cmyk[1] / 100;\r\n    const y = cmyk[2] / 100;\r\n    const k = cmyk[3] / 100;\r\n    const r = 1 - Math.min(1, c * (1 - k) + k);\r\n    const g = 1 - Math.min(1, m * (1 - k) + k);\r\n    const b = 1 - Math.min(1, y * (1 - k) + k);\r\n    return [r * 255, g * 255, b * 255];\r\n  };\r\n\r\n  convert$1.xyz.rgb = function (xyz) {\r\n    const x = xyz[0] / 100;\r\n    const y = xyz[1] / 100;\r\n    const z = xyz[2] / 100;\r\n    let r;\r\n    let g;\r\n    let b;\r\n    r = x * 3.2406 + y * -1.5372 + z * -0.4986;\r\n    g = x * -0.9689 + y * 1.8758 + z * 0.0415;\r\n    b = x * 0.0557 + y * -0.2040 + z * 1.0570; // Assume sRGB\r\n\r\n    r = r > 0.0031308 ? 1.055 * r ** (1.0 / 2.4) - 0.055 : r * 12.92;\r\n    g = g > 0.0031308 ? 1.055 * g ** (1.0 / 2.4) - 0.055 : g * 12.92;\r\n    b = b > 0.0031308 ? 1.055 * b ** (1.0 / 2.4) - 0.055 : b * 12.92;\r\n    r = Math.min(Math.max(0, r), 1);\r\n    g = Math.min(Math.max(0, g), 1);\r\n    b = Math.min(Math.max(0, b), 1);\r\n    return [r * 255, g * 255, b * 255];\r\n  };\r\n\r\n  convert$1.xyz.lab = function (xyz) {\r\n    let x = xyz[0];\r\n    let y = xyz[1];\r\n    let z = xyz[2];\r\n    x /= 95.047;\r\n    y /= 100;\r\n    z /= 108.883;\r\n    x = x > 0.008856 ? x ** (1 / 3) : 7.787 * x + 16 / 116;\r\n    y = y > 0.008856 ? y ** (1 / 3) : 7.787 * y + 16 / 116;\r\n    z = z > 0.008856 ? z ** (1 / 3) : 7.787 * z + 16 / 116;\r\n    const l = 116 * y - 16;\r\n    const a = 500 * (x - y);\r\n    const b = 200 * (y - z);\r\n    return [l, a, b];\r\n  };\r\n\r\n  convert$1.lab.xyz = function (lab) {\r\n    const l = lab[0];\r\n    const a = lab[1];\r\n    const b = lab[2];\r\n    let x;\r\n    let y;\r\n    let z;\r\n    y = (l + 16) / 116;\r\n    x = a / 500 + y;\r\n    z = y - b / 200;\r\n    const y2 = y ** 3;\r\n    const x2 = x ** 3;\r\n    const z2 = z ** 3;\r\n    y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\r\n    x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\r\n    z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\r\n    x *= 95.047;\r\n    y *= 100;\r\n    z *= 108.883;\r\n    return [x, y, z];\r\n  };\r\n\r\n  convert$1.lab.lch = function (lab) {\r\n    const l = lab[0];\r\n    const a = lab[1];\r\n    const b = lab[2];\r\n    let h;\r\n    const hr = Math.atan2(b, a);\r\n    h = hr * 360 / 2 / Math.PI;\r\n\r\n    if (h < 0) {\r\n      h += 360;\r\n    }\r\n\r\n    const c = Math.sqrt(a * a + b * b);\r\n    return [l, c, h];\r\n  };\r\n\r\n  convert$1.lch.lab = function (lch) {\r\n    const l = lch[0];\r\n    const c = lch[1];\r\n    const h = lch[2];\r\n    const hr = h / 360 * 2 * Math.PI;\r\n    const a = c * Math.cos(hr);\r\n    const b = c * Math.sin(hr);\r\n    return [l, a, b];\r\n  };\r\n\r\n  convert$1.rgb.ansi16 = function (args, saturation = null) {\r\n    const [r, g, b] = args;\r\n    let value = saturation === null ? convert$1.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization\r\n\r\n    value = Math.round(value / 50);\r\n\r\n    if (value === 0) {\r\n      return 30;\r\n    }\r\n\r\n    let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));\r\n\r\n    if (value === 2) {\r\n      ansi += 60;\r\n    }\r\n\r\n    return ansi;\r\n  };\r\n\r\n  convert$1.hsv.ansi16 = function (args) {\r\n    // Optimization here; we already know the value and don't need to get\r\n    // it converted for us.\r\n    return convert$1.rgb.ansi16(convert$1.hsv.rgb(args), args[2]);\r\n  };\r\n\r\n  convert$1.rgb.ansi256 = function (args) {\r\n    const r = args[0];\r\n    const g = args[1];\r\n    const b = args[2]; // We use the extended greyscale palette here, with the exception of\r\n    // black and white. normal palette only has 4 greyscale shades.\r\n\r\n    if (r === g && g === b) {\r\n      if (r < 8) {\r\n        return 16;\r\n      }\r\n\r\n      if (r > 248) {\r\n        return 231;\r\n      }\r\n\r\n      return Math.round((r - 8) / 247 * 24) + 232;\r\n    }\r\n\r\n    const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);\r\n    return ansi;\r\n  };\r\n\r\n  convert$1.ansi16.rgb = function (args) {\r\n    let color = args % 10; // Handle greyscale\r\n\r\n    if (color === 0 || color === 7) {\r\n      if (args > 50) {\r\n        color += 3.5;\r\n      }\r\n\r\n      color = color / 10.5 * 255;\r\n      return [color, color, color];\r\n    }\r\n\r\n    const mult = (~~(args > 50) + 1) * 0.5;\r\n    const r = (color & 1) * mult * 255;\r\n    const g = (color >> 1 & 1) * mult * 255;\r\n    const b = (color >> 2 & 1) * mult * 255;\r\n    return [r, g, b];\r\n  };\r\n\r\n  convert$1.ansi256.rgb = function (args) {\r\n    // Handle greyscale\r\n    if (args >= 232) {\r\n      const c = (args - 232) * 10 + 8;\r\n      return [c, c, c];\r\n    }\r\n\r\n    args -= 16;\r\n    let rem;\r\n    const r = Math.floor(args / 36) / 5 * 255;\r\n    const g = Math.floor((rem = args % 36) / 6) / 5 * 255;\r\n    const b = rem % 6 / 5 * 255;\r\n    return [r, g, b];\r\n  };\r\n\r\n  convert$1.rgb.hex = function (args) {\r\n    const integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);\r\n    const string = integer.toString(16).toUpperCase();\r\n    return '000000'.substring(string.length) + string;\r\n  };\r\n\r\n  convert$1.hex.rgb = function (args) {\r\n    const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\r\n\r\n    if (!match) {\r\n      return [0, 0, 0];\r\n    }\r\n\r\n    let colorString = match[0];\r\n\r\n    if (match[0].length === 3) {\r\n      colorString = colorString.split('').map(char => {\r\n        return char + char;\r\n      }).join('');\r\n    }\r\n\r\n    const integer = parseInt(colorString, 16);\r\n    const r = integer >> 16 & 0xFF;\r\n    const g = integer >> 8 & 0xFF;\r\n    const b = integer & 0xFF;\r\n    return [r, g, b];\r\n  };\r\n\r\n  convert$1.rgb.hcg = function (rgb) {\r\n    const r = rgb[0] / 255;\r\n    const g = rgb[1] / 255;\r\n    const b = rgb[2] / 255;\r\n    const max = Math.max(Math.max(r, g), b);\r\n    const min = Math.min(Math.min(r, g), b);\r\n    const chroma = max - min;\r\n    let grayscale;\r\n    let hue;\r\n\r\n    if (chroma < 1) {\r\n      grayscale = min / (1 - chroma);\r\n    } else {\r\n      grayscale = 0;\r\n    }\r\n\r\n    if (chroma <= 0) {\r\n      hue = 0;\r\n    } else if (max === r) {\r\n      hue = (g - b) / chroma % 6;\r\n    } else if (max === g) {\r\n      hue = 2 + (b - r) / chroma;\r\n    } else {\r\n      hue = 4 + (r - g) / chroma;\r\n    }\r\n\r\n    hue /= 6;\r\n    hue %= 1;\r\n    return [hue * 360, chroma * 100, grayscale * 100];\r\n  };\r\n\r\n  convert$1.hsl.hcg = function (hsl) {\r\n    const s = hsl[1] / 100;\r\n    const l = hsl[2] / 100;\r\n    const c = l < 0.5 ? 2.0 * s * l : 2.0 * s * (1.0 - l);\r\n    let f = 0;\r\n\r\n    if (c < 1.0) {\r\n      f = (l - 0.5 * c) / (1.0 - c);\r\n    }\r\n\r\n    return [hsl[0], c * 100, f * 100];\r\n  };\r\n\r\n  convert$1.hsv.hcg = function (hsv) {\r\n    const s = hsv[1] / 100;\r\n    const v = hsv[2] / 100;\r\n    const c = s * v;\r\n    let f = 0;\r\n\r\n    if (c < 1.0) {\r\n      f = (v - c) / (1 - c);\r\n    }\r\n\r\n    return [hsv[0], c * 100, f * 100];\r\n  };\r\n\r\n  convert$1.hcg.rgb = function (hcg) {\r\n    const h = hcg[0] / 360;\r\n    const c = hcg[1] / 100;\r\n    const g = hcg[2] / 100;\r\n\r\n    if (c === 0.0) {\r\n      return [g * 255, g * 255, g * 255];\r\n    }\r\n\r\n    const pure = [0, 0, 0];\r\n    const hi = h % 1 * 6;\r\n    const v = hi % 1;\r\n    const w = 1 - v;\r\n    let mg = 0;\r\n    /* eslint-disable max-statements-per-line */\r\n\r\n    switch (Math.floor(hi)) {\r\n      case 0:\r\n        pure[0] = 1;\r\n        pure[1] = v;\r\n        pure[2] = 0;\r\n        break;\r\n\r\n      case 1:\r\n        pure[0] = w;\r\n        pure[1] = 1;\r\n        pure[2] = 0;\r\n        break;\r\n\r\n      case 2:\r\n        pure[0] = 0;\r\n        pure[1] = 1;\r\n        pure[2] = v;\r\n        break;\r\n\r\n      case 3:\r\n        pure[0] = 0;\r\n        pure[1] = w;\r\n        pure[2] = 1;\r\n        break;\r\n\r\n      case 4:\r\n        pure[0] = v;\r\n        pure[1] = 0;\r\n        pure[2] = 1;\r\n        break;\r\n\r\n      default:\r\n        pure[0] = 1;\r\n        pure[1] = 0;\r\n        pure[2] = w;\r\n    }\r\n    /* eslint-enable max-statements-per-line */\r\n\r\n\r\n    mg = (1.0 - c) * g;\r\n    return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];\r\n  };\r\n\r\n  convert$1.hcg.hsv = function (hcg) {\r\n    const c = hcg[1] / 100;\r\n    const g = hcg[2] / 100;\r\n    const v = c + g * (1.0 - c);\r\n    let f = 0;\r\n\r\n    if (v > 0.0) {\r\n      f = c / v;\r\n    }\r\n\r\n    return [hcg[0], f * 100, v * 100];\r\n  };\r\n\r\n  convert$1.hcg.hsl = function (hcg) {\r\n    const c = hcg[1] / 100;\r\n    const g = hcg[2] / 100;\r\n    const l = g * (1.0 - c) + 0.5 * c;\r\n    let s = 0;\r\n\r\n    if (l > 0.0 && l < 0.5) {\r\n      s = c / (2 * l);\r\n    } else if (l >= 0.5 && l < 1.0) {\r\n      s = c / (2 * (1 - l));\r\n    }\r\n\r\n    return [hcg[0], s * 100, l * 100];\r\n  };\r\n\r\n  convert$1.hcg.hwb = function (hcg) {\r\n    const c = hcg[1] / 100;\r\n    const g = hcg[2] / 100;\r\n    const v = c + g * (1.0 - c);\r\n    return [hcg[0], (v - c) * 100, (1 - v) * 100];\r\n  };\r\n\r\n  convert$1.hwb.hcg = function (hwb) {\r\n    const w = hwb[1] / 100;\r\n    const b = hwb[2] / 100;\r\n    const v = 1 - b;\r\n    const c = v - w;\r\n    let g = 0;\r\n\r\n    if (c < 1) {\r\n      g = (v - c) / (1 - c);\r\n    }\r\n\r\n    return [hwb[0], c * 100, g * 100];\r\n  };\r\n\r\n  convert$1.apple.rgb = function (apple) {\r\n    return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];\r\n  };\r\n\r\n  convert$1.rgb.apple = function (rgb) {\r\n    return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];\r\n  };\r\n\r\n  convert$1.gray.rgb = function (args) {\r\n    return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\r\n  };\r\n\r\n  convert$1.gray.hsl = function (args) {\r\n    return [0, 0, args[0]];\r\n  };\r\n\r\n  convert$1.gray.hsv = convert$1.gray.hsl;\r\n\r\n  convert$1.gray.hwb = function (gray) {\r\n    return [0, 100, gray[0]];\r\n  };\r\n\r\n  convert$1.gray.cmyk = function (gray) {\r\n    return [0, 0, 0, gray[0]];\r\n  };\r\n\r\n  convert$1.gray.lab = function (gray) {\r\n    return [gray[0], 0, 0];\r\n  };\r\n\r\n  convert$1.gray.hex = function (gray) {\r\n    const val = Math.round(gray[0] / 100 * 255) & 0xFF;\r\n    const integer = (val << 16) + (val << 8) + val;\r\n    const string = integer.toString(16).toUpperCase();\r\n    return '000000'.substring(string.length) + string;\r\n  };\r\n\r\n  convert$1.rgb.gray = function (rgb) {\r\n    const val = (rgb[0] + rgb[1] + rgb[2]) / 3;\r\n    return [val / 255 * 100];\r\n  };\r\n\r\n  /*\r\n  \tThis function routes a model to all other models.\r\n\r\n  \tall functions that are routed have a property `.conversion` attached\r\n  \tto the returned synthetic function. This property is an array\r\n  \tof strings, each with the steps in between the 'from' and 'to'\r\n  \tcolor models (inclusive).\r\n\r\n  \tconversions that are not possible simply are not included.\r\n  */\r\n\r\n  function buildGraph$1() {\r\n    const graph = {}; // https://jsperf.com/object-keys-vs-for-in-with-closure/3\r\n\r\n    const models = Object.keys(conversions$1);\r\n\r\n    for (let len = models.length, i = 0; i < len; i++) {\r\n      graph[models[i]] = {\r\n        // http://jsperf.com/1-vs-infinity\r\n        // micro-opt, but this is simple.\r\n        distance: -1,\r\n        parent: null\r\n      };\r\n    }\r\n\r\n    return graph;\r\n  } // https://en.wikipedia.org/wiki/Breadth-first_search\r\n\r\n\r\n  function deriveBFS$1(fromModel) {\r\n    const graph = buildGraph$1();\r\n    const queue = [fromModel]; // Unshift -> queue -> pop\r\n\r\n    graph[fromModel].distance = 0;\r\n\r\n    while (queue.length) {\r\n      const current = queue.pop();\r\n      const adjacents = Object.keys(conversions$1[current]);\r\n\r\n      for (let len = adjacents.length, i = 0; i < len; i++) {\r\n        const adjacent = adjacents[i];\r\n        const node = graph[adjacent];\r\n\r\n        if (node.distance === -1) {\r\n          node.distance = graph[current].distance + 1;\r\n          node.parent = current;\r\n          queue.unshift(adjacent);\r\n        }\r\n      }\r\n    }\r\n\r\n    return graph;\r\n  }\r\n\r\n  function link$1(from, to) {\r\n    return function (args) {\r\n      return to(from(args));\r\n    };\r\n  }\r\n\r\n  function wrapConversion$1(toModel, graph) {\r\n    const path = [graph[toModel].parent, toModel];\r\n    let fn = conversions$1[graph[toModel].parent][toModel];\r\n    let cur = graph[toModel].parent;\r\n\r\n    while (graph[cur].parent) {\r\n      path.unshift(graph[cur].parent);\r\n      fn = link$1(conversions$1[graph[cur].parent][cur], fn);\r\n      cur = graph[cur].parent;\r\n    }\r\n\r\n    fn.conversion = path;\r\n    return fn;\r\n  }\r\n\r\n  var route$1 = function route(fromModel) {\r\n    const graph = deriveBFS$1(fromModel);\r\n    const conversion = {};\r\n    const models = Object.keys(graph);\r\n\r\n    for (let len = models.length, i = 0; i < len; i++) {\r\n      const toModel = models[i];\r\n      const node = graph[toModel];\r\n\r\n      if (node.parent === null) {\r\n        // No possible conversion, or this node is the source model.\r\n        continue;\r\n      }\r\n\r\n      conversion[toModel] = wrapConversion$1(toModel, graph);\r\n    }\r\n\r\n    return conversion;\r\n  };\r\n\r\n  const convert$2 = {};\r\n  const models$1 = Object.keys(conversions$1);\r\n\r\n  function wrapRaw$1(fn) {\r\n    const wrappedFn = function wrappedFn(...args) {\r\n      const arg0 = args[0];\r\n\r\n      if (arg0 === undefined || arg0 === null) {\r\n        return arg0;\r\n      }\r\n\r\n      if (arg0.length > 1) {\r\n        args = arg0;\r\n      }\r\n\r\n      return fn(args);\r\n    }; // Preserve .conversion property if there is one\r\n\r\n\r\n    if ('conversion' in fn) {\r\n      wrappedFn.conversion = fn.conversion;\r\n    }\r\n\r\n    return wrappedFn;\r\n  }\r\n\r\n  function wrapRounded$1(fn) {\r\n    const wrappedFn = function wrappedFn(...args) {\r\n      const arg0 = args[0];\r\n\r\n      if (arg0 === undefined || arg0 === null) {\r\n        return arg0;\r\n      }\r\n\r\n      if (arg0.length > 1) {\r\n        args = arg0;\r\n      }\r\n\r\n      const result = fn(args); // We're assuming the result is an array here.\r\n      // see notice in conversions.js; don't use box types\r\n      // in conversion functions.\r\n\r\n      if (typeof result === 'object') {\r\n        for (let len = result.length, i = 0; i < len; i++) {\r\n          result[i] = Math.round(result[i]);\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }; // Preserve .conversion property if there is one\r\n\r\n\r\n    if ('conversion' in fn) {\r\n      wrappedFn.conversion = fn.conversion;\r\n    }\r\n\r\n    return wrappedFn;\r\n  }\r\n\r\n  models$1.forEach(fromModel => {\r\n    convert$2[fromModel] = {};\r\n    Object.defineProperty(convert$2[fromModel], 'channels', {\r\n      value: conversions$1[fromModel].channels\r\n    });\r\n    Object.defineProperty(convert$2[fromModel], 'labels', {\r\n      value: conversions$1[fromModel].labels\r\n    });\r\n    const routes = route$1(fromModel);\r\n    const routeModels = Object.keys(routes);\r\n    routeModels.forEach(toModel => {\r\n      const fn = routes[toModel];\r\n      convert$2[fromModel][toModel] = wrapRounded$1(fn);\r\n      convert$2[fromModel][toModel].raw = wrapRaw$1(fn);\r\n    });\r\n  });\r\n  var colorConvert$1 = convert$2;\r\n\r\n  var ansiStyles$1 = createCommonjsModule(function (module) {\r\n\r\n    const wrapAnsi16 = (fn, offset) => (...args) => {\r\n      const code = fn(...args);\r\n      return \"\\x1B[\".concat(code + offset, \"m\");\r\n    };\r\n\r\n    const wrapAnsi256 = (fn, offset) => (...args) => {\r\n      const code = fn(...args);\r\n      return \"\\x1B[\".concat(38 + offset, \";5;\").concat(code, \"m\");\r\n    };\r\n\r\n    const wrapAnsi16m = (fn, offset) => (...args) => {\r\n      const rgb = fn(...args);\r\n      return \"\\x1B[\".concat(38 + offset, \";2;\").concat(rgb[0], \";\").concat(rgb[1], \";\").concat(rgb[2], \"m\");\r\n    };\r\n\r\n    const ansi2ansi = n => n;\r\n\r\n    const rgb2rgb = (r, g, b) => [r, g, b];\r\n\r\n    const setLazyProperty = (object, property, _get) => {\r\n      Object.defineProperty(object, property, {\r\n        get: () => {\r\n          const value = _get();\r\n\r\n          Object.defineProperty(object, property, {\r\n            value,\r\n            enumerable: true,\r\n            configurable: true\r\n          });\r\n          return value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n      });\r\n    };\r\n    /** @type {typeof import('color-convert')} */\r\n\r\n\r\n    let colorConvert;\r\n\r\n    const makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {\r\n      if (colorConvert === undefined) {\r\n        colorConvert = colorConvert$1;\r\n      }\r\n\r\n      const offset = isBackground ? 10 : 0;\r\n      const styles = {};\r\n\r\n      for (const [sourceSpace, suite] of Object.entries(colorConvert)) {\r\n        const name = sourceSpace === 'ansi16' ? 'ansi' : sourceSpace;\r\n\r\n        if (sourceSpace === targetSpace) {\r\n          styles[name] = wrap(identity, offset);\r\n        } else if (typeof suite === 'object') {\r\n          styles[name] = wrap(suite[targetSpace], offset);\r\n        }\r\n      }\r\n\r\n      return styles;\r\n    };\r\n\r\n    function assembleStyles() {\r\n      const codes = new Map();\r\n      const styles = {\r\n        modifier: {\r\n          reset: [0, 0],\r\n          // 21 isn't widely supported and 22 does the same thing\r\n          bold: [1, 22],\r\n          dim: [2, 22],\r\n          italic: [3, 23],\r\n          underline: [4, 24],\r\n          inverse: [7, 27],\r\n          hidden: [8, 28],\r\n          strikethrough: [9, 29]\r\n        },\r\n        color: {\r\n          black: [30, 39],\r\n          red: [31, 39],\r\n          green: [32, 39],\r\n          yellow: [33, 39],\r\n          blue: [34, 39],\r\n          magenta: [35, 39],\r\n          cyan: [36, 39],\r\n          white: [37, 39],\r\n          // Bright color\r\n          blackBright: [90, 39],\r\n          redBright: [91, 39],\r\n          greenBright: [92, 39],\r\n          yellowBright: [93, 39],\r\n          blueBright: [94, 39],\r\n          magentaBright: [95, 39],\r\n          cyanBright: [96, 39],\r\n          whiteBright: [97, 39]\r\n        },\r\n        bgColor: {\r\n          bgBlack: [40, 49],\r\n          bgRed: [41, 49],\r\n          bgGreen: [42, 49],\r\n          bgYellow: [43, 49],\r\n          bgBlue: [44, 49],\r\n          bgMagenta: [45, 49],\r\n          bgCyan: [46, 49],\r\n          bgWhite: [47, 49],\r\n          // Bright color\r\n          bgBlackBright: [100, 49],\r\n          bgRedBright: [101, 49],\r\n          bgGreenBright: [102, 49],\r\n          bgYellowBright: [103, 49],\r\n          bgBlueBright: [104, 49],\r\n          bgMagentaBright: [105, 49],\r\n          bgCyanBright: [106, 49],\r\n          bgWhiteBright: [107, 49]\r\n        }\r\n      }; // Alias bright black as gray (and grey)\r\n\r\n      styles.color.gray = styles.color.blackBright;\r\n      styles.bgColor.bgGray = styles.bgColor.bgBlackBright;\r\n      styles.color.grey = styles.color.blackBright;\r\n      styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;\r\n\r\n      for (const [groupName, group] of Object.entries(styles)) {\r\n        for (const [styleName, style] of Object.entries(group)) {\r\n          styles[styleName] = {\r\n            open: \"\\x1B[\".concat(style[0], \"m\"),\r\n            close: \"\\x1B[\".concat(style[1], \"m\")\r\n          };\r\n          group[styleName] = styles[styleName];\r\n          codes.set(style[0], style[1]);\r\n        }\r\n\r\n        Object.defineProperty(styles, groupName, {\r\n          value: group,\r\n          enumerable: false\r\n        });\r\n      }\r\n\r\n      Object.defineProperty(styles, 'codes', {\r\n        value: codes,\r\n        enumerable: false\r\n      });\r\n      styles.color.close = '\\u001B[39m';\r\n      styles.bgColor.close = '\\u001B[49m';\r\n      setLazyProperty(styles.color, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, false));\r\n      setLazyProperty(styles.color, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, false));\r\n      setLazyProperty(styles.color, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, false));\r\n      setLazyProperty(styles.bgColor, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, true));\r\n      setLazyProperty(styles.bgColor, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, true));\r\n      setLazyProperty(styles.bgColor, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, true));\r\n      return styles;\r\n    } // Make the export immutable\r\n\r\n\r\n    Object.defineProperty(module, 'exports', {\r\n      enumerable: true,\r\n      get: assembleStyles\r\n    });\r\n  });\r\n\r\n  var tty = {\r\n    isatty() {\r\n      return false;\r\n    }\r\n\r\n  };\r\n\r\n  var hasFlag$1 = (flag, argv = process.argv) => {\r\n    const prefix = flag.startsWith('-') ? '' : flag.length === 1 ? '-' : '--';\r\n    const position = argv.indexOf(prefix + flag);\r\n    const terminatorPosition = argv.indexOf('--');\r\n    return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);\r\n  };\r\n\r\n  const {\r\n    env: env$2\r\n  } = process;\r\n  let forceColor$1;\r\n\r\n  if (hasFlag$1('no-color') || hasFlag$1('no-colors') || hasFlag$1('color=false') || hasFlag$1('color=never')) {\r\n    forceColor$1 = 0;\r\n  } else if (hasFlag$1('color') || hasFlag$1('colors') || hasFlag$1('color=true') || hasFlag$1('color=always')) {\r\n    forceColor$1 = 1;\r\n  }\r\n\r\n  if ('FORCE_COLOR' in env$2) {\r\n    if (env$2.FORCE_COLOR === 'true') {\r\n      forceColor$1 = 1;\r\n    } else if (env$2.FORCE_COLOR === 'false') {\r\n      forceColor$1 = 0;\r\n    } else {\r\n      forceColor$1 = env$2.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env$2.FORCE_COLOR, 10), 3);\r\n    }\r\n  }\r\n\r\n  function translateLevel$1(level) {\r\n    if (level === 0) {\r\n      return false;\r\n    }\r\n\r\n    return {\r\n      level,\r\n      hasBasic: true,\r\n      has256: level >= 2,\r\n      has16m: level >= 3\r\n    };\r\n  }\r\n\r\n  function supportsColor$1(haveStream, streamIsTTY) {\r\n    if (forceColor$1 === 0) {\r\n      return 0;\r\n    }\r\n\r\n    if (hasFlag$1('color=16m') || hasFlag$1('color=full') || hasFlag$1('color=truecolor')) {\r\n      return 3;\r\n    }\r\n\r\n    if (hasFlag$1('color=256')) {\r\n      return 2;\r\n    }\r\n\r\n    if (haveStream && !streamIsTTY && forceColor$1 === undefined) {\r\n      return 0;\r\n    }\r\n\r\n    const min = forceColor$1 || 0;\r\n\r\n    if (env$2.TERM === 'dumb') {\r\n      return min;\r\n    }\r\n\r\n    if (process.platform === 'win32') {\r\n      // Windows 10 build 10586 is the first Windows release that supports 256 colors.\r\n      // Windows 10 build 14931 is the first release that supports 16m/TrueColor.\r\n      const osRelease = require$$0$1.release().split('.');\r\n\r\n      if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {\r\n        return Number(osRelease[2]) >= 14931 ? 3 : 2;\r\n      }\r\n\r\n      return 1;\r\n    }\r\n\r\n    if ('CI' in env$2) {\r\n      if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env$2) || env$2.CI_NAME === 'codeship') {\r\n        return 1;\r\n      }\r\n\r\n      return min;\r\n    }\r\n\r\n    if ('TEAMCITY_VERSION' in env$2) {\r\n      return /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env$2.TEAMCITY_VERSION) ? 1 : 0;\r\n    }\r\n\r\n    if ('GITHUB_ACTIONS' in env$2) {\r\n      return 1;\r\n    }\r\n\r\n    if (env$2.COLORTERM === 'truecolor') {\r\n      return 3;\r\n    }\r\n\r\n    if ('TERM_PROGRAM' in env$2) {\r\n      const version = parseInt((env$2.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\r\n\r\n      switch (env$2.TERM_PROGRAM) {\r\n        case 'iTerm.app':\r\n          return version >= 3 ? 3 : 2;\r\n\r\n        case 'Apple_Terminal':\r\n          return 2;\r\n        // No default\r\n      }\r\n    }\r\n\r\n    if (/-256(color)?$/i.test(env$2.TERM)) {\r\n      return 2;\r\n    }\r\n\r\n    if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env$2.TERM)) {\r\n      return 1;\r\n    }\r\n\r\n    if ('COLORTERM' in env$2) {\r\n      return 1;\r\n    }\r\n\r\n    return min;\r\n  }\r\n\r\n  function getSupportLevel$1(stream) {\r\n    const level = supportsColor$1(stream, stream && stream.isTTY);\r\n    return translateLevel$1(level);\r\n  }\r\n\r\n  var supportsColor_1$1 = {\r\n    supportsColor: getSupportLevel$1,\r\n    stdout: translateLevel$1(supportsColor$1(true, tty.isatty(1))),\r\n    stderr: translateLevel$1(supportsColor$1(true, tty.isatty(2)))\r\n  };\r\n\r\n  const stringReplaceAll = (string, substring, replacer) => {\r\n    let index = string.indexOf(substring);\r\n\r\n    if (index === -1) {\r\n      return string;\r\n    }\r\n\r\n    const substringLength = substring.length;\r\n    let endIndex = 0;\r\n    let returnValue = '';\r\n\r\n    do {\r\n      returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;\r\n      endIndex = index + substringLength;\r\n      index = string.indexOf(substring, endIndex);\r\n    } while (index !== -1);\r\n\r\n    returnValue += string.substr(endIndex);\r\n    return returnValue;\r\n  };\r\n\r\n  const stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index) => {\r\n    let endIndex = 0;\r\n    let returnValue = '';\r\n\r\n    do {\r\n      const gotCR = string[index - 1] === '\\r';\r\n      returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? '\\r\\n' : '\\n') + postfix;\r\n      endIndex = index + 1;\r\n      index = string.indexOf('\\n', endIndex);\r\n    } while (index !== -1);\r\n\r\n    returnValue += string.substr(endIndex);\r\n    return returnValue;\r\n  };\r\n\r\n  var util = {\r\n    stringReplaceAll,\r\n    stringEncaseCRLFWithFirstIndex\r\n  };\r\n\r\n  const TEMPLATE_REGEX$1 = /(?:\\\\(u(?:[a-f\\d]{4}|\\{[a-f\\d]{1,6}\\})|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\r\n  const STYLE_REGEX$1 = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\r\n  const STRING_REGEX$1 = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\r\n  const ESCAPE_REGEX$1 = /\\\\(u(?:[a-f\\d]{4}|{[a-f\\d]{1,6}})|x[a-f\\d]{2}|.)|([^\\\\])/gi;\r\n  const ESCAPES$1 = new Map([['n', '\\n'], ['r', '\\r'], ['t', '\\t'], ['b', '\\b'], ['f', '\\f'], ['v', '\\v'], ['0', '\\0'], ['\\\\', '\\\\'], ['e', '\\u001B'], ['a', '\\u0007']]);\r\n\r\n  function unescape$1(c) {\r\n    const u = c[0] === 'u';\r\n    const bracket = c[1] === '{';\r\n\r\n    if (u && !bracket && c.length === 5 || c[0] === 'x' && c.length === 3) {\r\n      return String.fromCharCode(parseInt(c.slice(1), 16));\r\n    }\r\n\r\n    if (u && bracket) {\r\n      return String.fromCodePoint(parseInt(c.slice(2, -1), 16));\r\n    }\r\n\r\n    return ESCAPES$1.get(c) || c;\r\n  }\r\n\r\n  function parseArguments$1(name, arguments_) {\r\n    const results = [];\r\n    const chunks = arguments_.trim().split(/\\s*,\\s*/g);\r\n    let matches;\r\n\r\n    for (const chunk of chunks) {\r\n      const number = Number(chunk);\r\n\r\n      if (!Number.isNaN(number)) {\r\n        results.push(number);\r\n      } else if (matches = chunk.match(STRING_REGEX$1)) {\r\n        results.push(matches[2].replace(ESCAPE_REGEX$1, (m, escape, character) => escape ? unescape$1(escape) : character));\r\n      } else {\r\n        throw new Error(\"Invalid Chalk template style argument: \".concat(chunk, \" (in style '\").concat(name, \"')\"));\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  function parseStyle$1(style) {\r\n    STYLE_REGEX$1.lastIndex = 0;\r\n    const results = [];\r\n    let matches;\r\n\r\n    while ((matches = STYLE_REGEX$1.exec(style)) !== null) {\r\n      const name = matches[1];\r\n\r\n      if (matches[2]) {\r\n        const args = parseArguments$1(name, matches[2]);\r\n        results.push([name].concat(args));\r\n      } else {\r\n        results.push([name]);\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  function buildStyle$1(chalk, styles) {\r\n    const enabled = {};\r\n\r\n    for (const layer of styles) {\r\n      for (const style of layer.styles) {\r\n        enabled[style[0]] = layer.inverse ? null : style.slice(1);\r\n      }\r\n    }\r\n\r\n    let current = chalk;\r\n\r\n    for (const [styleName, styles] of Object.entries(enabled)) {\r\n      if (!Array.isArray(styles)) {\r\n        continue;\r\n      }\r\n\r\n      if (!(styleName in current)) {\r\n        throw new Error(\"Unknown Chalk style: \".concat(styleName));\r\n      }\r\n\r\n      current = styles.length > 0 ? current[styleName](...styles) : current[styleName];\r\n    }\r\n\r\n    return current;\r\n  }\r\n\r\n  var templates$1 = (chalk, temporary) => {\r\n    const styles = [];\r\n    const chunks = [];\r\n    let chunk = []; // eslint-disable-next-line max-params\r\n\r\n    temporary.replace(TEMPLATE_REGEX$1, (m, escapeCharacter, inverse, style, close, character) => {\r\n      if (escapeCharacter) {\r\n        chunk.push(unescape$1(escapeCharacter));\r\n      } else if (style) {\r\n        const string = chunk.join('');\r\n        chunk = [];\r\n        chunks.push(styles.length === 0 ? string : buildStyle$1(chalk, styles)(string));\r\n        styles.push({\r\n          inverse,\r\n          styles: parseStyle$1(style)\r\n        });\r\n      } else if (close) {\r\n        if (styles.length === 0) {\r\n          throw new Error('Found extraneous } in Chalk template literal');\r\n        }\r\n\r\n        chunks.push(buildStyle$1(chalk, styles)(chunk.join('')));\r\n        chunk = [];\r\n        styles.pop();\r\n      } else {\r\n        chunk.push(character);\r\n      }\r\n    });\r\n    chunks.push(chunk.join(''));\r\n\r\n    if (styles.length > 0) {\r\n      const errMessage = \"Chalk template literal is missing \".concat(styles.length, \" closing bracket\").concat(styles.length === 1 ? '' : 's', \" (`}`)\");\r\n      throw new Error(errMessage);\r\n    }\r\n\r\n    return chunks.join('');\r\n  };\r\n\r\n  const {\r\n    stdout: stdoutColor,\r\n    stderr: stderrColor\r\n  } = supportsColor_1$1;\r\n  const {\r\n    stringReplaceAll: stringReplaceAll$1,\r\n    stringEncaseCRLFWithFirstIndex: stringEncaseCRLFWithFirstIndex$1\r\n  } = util; // `supportsColor.level` → `ansiStyles.color[name]` mapping\r\n\r\n  const levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m'];\r\n  const styles = Object.create(null);\r\n\r\n  const applyOptions = (object, options = {}) => {\r\n    if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {\r\n      throw new Error('The `level` option should be an integer from 0 to 3');\r\n    } // Detect level if not set manually\r\n\r\n\r\n    const colorLevel = stdoutColor ? stdoutColor.level : 0;\r\n    object.level = options.level === undefined ? colorLevel : options.level;\r\n  };\r\n\r\n  class ChalkClass {\r\n    constructor(options) {\r\n      // eslint-disable-next-line no-constructor-return\r\n      return chalkFactory(options);\r\n    }\r\n\r\n  }\r\n\r\n  const chalkFactory = options => {\r\n    const chalk = {};\r\n    applyOptions(chalk, options);\r\n\r\n    chalk.template = (...arguments_) => chalkTag(chalk.template, ...arguments_);\r\n\r\n    Object.setPrototypeOf(chalk, Chalk.prototype);\r\n    Object.setPrototypeOf(chalk.template, chalk);\r\n\r\n    chalk.template.constructor = () => {\r\n      throw new Error('`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.');\r\n    };\r\n\r\n    chalk.template.Instance = ChalkClass;\r\n    return chalk.template;\r\n  };\r\n\r\n  function Chalk(options) {\r\n    return chalkFactory(options);\r\n  }\r\n\r\n  for (const [styleName, style] of Object.entries(ansiStyles$1)) {\r\n    styles[styleName] = {\r\n      get() {\r\n        const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);\r\n        Object.defineProperty(this, styleName, {\r\n          value: builder\r\n        });\r\n        return builder;\r\n      }\r\n\r\n    };\r\n  }\r\n\r\n  styles.visible = {\r\n    get() {\r\n      const builder = createBuilder(this, this._styler, true);\r\n      Object.defineProperty(this, 'visible', {\r\n        value: builder\r\n      });\r\n      return builder;\r\n    }\r\n\r\n  };\r\n  const usedModels = ['rgb', 'hex', 'keyword', 'hsl', 'hsv', 'hwb', 'ansi', 'ansi256'];\r\n\r\n  for (const model of usedModels) {\r\n    styles[model] = {\r\n      get() {\r\n        const {\r\n          level\r\n        } = this;\r\n        return function (...arguments_) {\r\n          const styler = createStyler(ansiStyles$1.color[levelMapping[level]][model](...arguments_), ansiStyles$1.color.close, this._styler);\r\n          return createBuilder(this, styler, this._isEmpty);\r\n        };\r\n      }\r\n\r\n    };\r\n  }\r\n\r\n  for (const model of usedModels) {\r\n    const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\r\n    styles[bgModel] = {\r\n      get() {\r\n        const {\r\n          level\r\n        } = this;\r\n        return function (...arguments_) {\r\n          const styler = createStyler(ansiStyles$1.bgColor[levelMapping[level]][model](...arguments_), ansiStyles$1.bgColor.close, this._styler);\r\n          return createBuilder(this, styler, this._isEmpty);\r\n        };\r\n      }\r\n\r\n    };\r\n  }\r\n\r\n  const proto = Object.defineProperties(() => {}, Object.assign({}, styles, {\r\n    level: {\r\n      enumerable: true,\r\n\r\n      get() {\r\n        return this._generator.level;\r\n      },\r\n\r\n      set(level) {\r\n        this._generator.level = level;\r\n      }\r\n\r\n    }\r\n  }));\r\n\r\n  const createStyler = (open, close, parent) => {\r\n    let openAll;\r\n    let closeAll;\r\n\r\n    if (parent === undefined) {\r\n      openAll = open;\r\n      closeAll = close;\r\n    } else {\r\n      openAll = parent.openAll + open;\r\n      closeAll = close + parent.closeAll;\r\n    }\r\n\r\n    return {\r\n      open,\r\n      close,\r\n      openAll,\r\n      closeAll,\r\n      parent\r\n    };\r\n  };\r\n\r\n  const createBuilder = (self, _styler, _isEmpty) => {\r\n    const builder = (...arguments_) => {\r\n      // Single argument is hot path, implicit coercion is faster than anything\r\n      // eslint-disable-next-line no-implicit-coercion\r\n      return applyStyle(builder, arguments_.length === 1 ? '' + arguments_[0] : arguments_.join(' '));\r\n    }; // We alter the prototype because we must return a function, but there is\r\n    // no way to create a function with a different prototype\r\n\r\n\r\n    Object.setPrototypeOf(builder, proto);\r\n    builder._generator = self;\r\n    builder._styler = _styler;\r\n    builder._isEmpty = _isEmpty;\r\n    return builder;\r\n  };\r\n\r\n  const applyStyle = (self, string) => {\r\n    if (self.level <= 0 || !string) {\r\n      return self._isEmpty ? '' : string;\r\n    }\r\n\r\n    let styler = self._styler;\r\n\r\n    if (styler === undefined) {\r\n      return string;\r\n    }\r\n\r\n    const {\r\n      openAll,\r\n      closeAll\r\n    } = styler;\r\n\r\n    if (string.indexOf('\\u001B') !== -1) {\r\n      while (styler !== undefined) {\r\n        // Replace any instances already present with a re-opening code\r\n        // otherwise only the part of the string until said closing code\r\n        // will be colored, and the rest will simply be 'plain'.\r\n        string = stringReplaceAll$1(string, styler.close, styler.open);\r\n        styler = styler.parent;\r\n      }\r\n    } // We can move both next actions out of loop, because remaining actions in loop won't have\r\n    // any/visible effect on parts we add here. Close the styling before a linebreak and reopen\r\n    // after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92\r\n\r\n\r\n    const lfIndex = string.indexOf('\\n');\r\n\r\n    if (lfIndex !== -1) {\r\n      string = stringEncaseCRLFWithFirstIndex$1(string, closeAll, openAll, lfIndex);\r\n    }\r\n\r\n    return openAll + string + closeAll;\r\n  };\r\n\r\n  let template;\r\n\r\n  const chalkTag = (chalk, ...strings) => {\r\n    const [firstString] = strings;\r\n\r\n    if (!Array.isArray(firstString)) {\r\n      // If chalk() was called by itself or with a string,\r\n      // return the string itself as a string.\r\n      return strings.join(' ');\r\n    }\r\n\r\n    const arguments_ = strings.slice(1);\r\n    const parts = [firstString.raw[0]];\r\n\r\n    for (let i = 1; i < firstString.length; i++) {\r\n      parts.push(String(arguments_[i - 1]).replace(/[{}\\\\]/g, '\\\\$&'), String(firstString.raw[i]));\r\n    }\r\n\r\n    if (template === undefined) {\r\n      template = templates$1;\r\n    }\r\n\r\n    return template(chalk, parts.join(''));\r\n  };\r\n\r\n  Object.defineProperties(Chalk.prototype, styles);\r\n  const chalk$1 = Chalk(); // eslint-disable-line new-cap\r\n\r\n  chalk$1.supportsColor = stdoutColor;\r\n  chalk$1.stderr = Chalk({\r\n    level: stderrColor ? stderrColor.level : 0\r\n  }); // eslint-disable-line new-cap\r\n\r\n  chalk$1.stderr.supportsColor = stderrColor;\r\n  var source = chalk$1;\r\n\r\n  const cliDescriptor = {\r\n    key: _key => _key.length === 1 ? \"-\".concat(_key) : \"--\".concat(_key),\r\n    value: _value => lib.apiDescriptor.value(_value),\r\n    pair: ({\r\n      key,\r\n      value\r\n    }) => value === false ? \"--no-\".concat(key) : value === true ? cliDescriptor.key(key) : value === \"\" ? \"\".concat(cliDescriptor.key(key), \" without an argument\") : \"\".concat(cliDescriptor.key(key), \"=\").concat(value)\r\n  };\r\n\r\n  class FlagSchema extends lib.ChoiceSchema {\r\n    constructor({\r\n      name,\r\n      flags\r\n    }) {\r\n      super({\r\n        name,\r\n        choices: flags\r\n      });\r\n      this._flags = flags.slice().sort();\r\n    }\r\n\r\n    preprocess(value, utils) {\r\n      if (typeof value === \"string\" && value.length !== 0 && !this._flags.includes(value)) {\r\n        const suggestion = this._flags.find(flag => leven_1$1(flag, value) < 3);\r\n\r\n        if (suggestion) {\r\n          utils.logger.warn([\"Unknown flag \".concat(source.yellow(utils.descriptor.value(value)), \",\"), \"did you mean \".concat(source.blue(utils.descriptor.value(suggestion)), \"?\")].join(\" \"));\r\n          return suggestion;\r\n        }\r\n      }\r\n\r\n      return value;\r\n    }\r\n\r\n    expected() {\r\n      return \"a flag\";\r\n    }\r\n\r\n  }\r\n\r\n  let hasDeprecationWarned;\r\n\r\n  function normalizeOptions(options, optionInfos, {\r\n    logger,\r\n    isCLI = false,\r\n    passThrough = false\r\n  } = {}) {\r\n    const unknown = !passThrough ? lib.levenUnknownHandler : Array.isArray(passThrough) ? (key, value) => !passThrough.includes(key) ? undefined : {\r\n      [key]: value\r\n    } : (key, value) => ({\r\n      [key]: value\r\n    });\r\n    const descriptor = isCLI ? cliDescriptor : lib.apiDescriptor;\r\n    const schemas = optionInfosToSchemas(optionInfos, {\r\n      isCLI\r\n    });\r\n    const normalizer = new lib.Normalizer(schemas, {\r\n      logger,\r\n      unknown,\r\n      descriptor\r\n    });\r\n    const shouldSuppressDuplicateDeprecationWarnings = logger !== false;\r\n\r\n    if (shouldSuppressDuplicateDeprecationWarnings && hasDeprecationWarned) {\r\n      normalizer._hasDeprecationWarned = hasDeprecationWarned;\r\n    }\r\n\r\n    const normalized = normalizer.normalize(options);\r\n\r\n    if (shouldSuppressDuplicateDeprecationWarnings) {\r\n      hasDeprecationWarned = normalizer._hasDeprecationWarned;\r\n    }\r\n\r\n    return normalized;\r\n  }\r\n\r\n  function optionInfosToSchemas(optionInfos, {\r\n    isCLI\r\n  }) {\r\n    const schemas = [];\r\n\r\n    if (isCLI) {\r\n      schemas.push(lib.AnySchema.create({\r\n        name: \"_\"\r\n      }));\r\n    }\r\n\r\n    for (const optionInfo of optionInfos) {\r\n      schemas.push(optionInfoToSchema(optionInfo, {\r\n        isCLI,\r\n        optionInfos\r\n      }));\r\n\r\n      if (optionInfo.alias && isCLI) {\r\n        schemas.push(lib.AliasSchema.create({\r\n          name: optionInfo.alias,\r\n          sourceName: optionInfo.name\r\n        }));\r\n      }\r\n    }\r\n\r\n    return schemas;\r\n  }\r\n\r\n  function optionInfoToSchema(optionInfo, {\r\n    isCLI,\r\n    optionInfos\r\n  }) {\r\n    let SchemaConstructor;\r\n    const parameters = {\r\n      name: optionInfo.name\r\n    };\r\n    const handlers = {};\r\n\r\n    switch (optionInfo.type) {\r\n      case \"int\":\r\n        SchemaConstructor = lib.IntegerSchema;\r\n\r\n        if (isCLI) {\r\n          parameters.preprocess = value => Number(value);\r\n        }\r\n\r\n        break;\r\n\r\n      case \"string\":\r\n        SchemaConstructor = lib.StringSchema;\r\n        break;\r\n\r\n      case \"choice\":\r\n        SchemaConstructor = lib.ChoiceSchema;\r\n        parameters.choices = optionInfo.choices.map(choiceInfo => typeof choiceInfo === \"object\" && choiceInfo.redirect ? Object.assign({}, choiceInfo, {\r\n          redirect: {\r\n            to: {\r\n              key: optionInfo.name,\r\n              value: choiceInfo.redirect\r\n            }\r\n          }\r\n        }) : choiceInfo);\r\n        break;\r\n\r\n      case \"boolean\":\r\n        SchemaConstructor = lib.BooleanSchema;\r\n        break;\r\n\r\n      case \"flag\":\r\n        SchemaConstructor = FlagSchema;\r\n        parameters.flags = optionInfos.map(optionInfo => [].concat(optionInfo.alias || [], optionInfo.description ? optionInfo.name : [], optionInfo.oppositeDescription ? \"no-\".concat(optionInfo.name) : [])).reduce((a, b) => a.concat(b), []);\r\n        break;\r\n\r\n      case \"path\":\r\n        SchemaConstructor = lib.StringSchema;\r\n        break;\r\n\r\n      default:\r\n        throw new Error(\"Unexpected type \".concat(optionInfo.type));\r\n    }\r\n\r\n    if (optionInfo.exception) {\r\n      parameters.validate = (value, schema, utils) => {\r\n        return optionInfo.exception(value) || schema.validate(value, utils);\r\n      };\r\n    } else {\r\n      parameters.validate = (value, schema, utils) => {\r\n        return value === undefined || schema.validate(value, utils);\r\n      };\r\n    }\r\n\r\n    if (optionInfo.redirect) {\r\n      handlers.redirect = value => !value ? undefined : {\r\n        to: {\r\n          key: optionInfo.redirect.option,\r\n          value: optionInfo.redirect.value\r\n        }\r\n      };\r\n    }\r\n\r\n    if (optionInfo.deprecated) {\r\n      handlers.deprecated = true;\r\n    } // allow CLI overriding, e.g., prettier package.json --tab-width 1 --tab-width 2\r\n\r\n\r\n    if (isCLI && !optionInfo.array) {\r\n      const originalPreprocess = parameters.preprocess || (x => x);\r\n\r\n      parameters.preprocess = (value, schema, utils) => schema.preprocess(originalPreprocess(Array.isArray(value) ? value[value.length - 1] : value), utils);\r\n    }\r\n\r\n    return optionInfo.array ? lib.ArraySchema.create(Object.assign({}, isCLI ? {\r\n      preprocess: v => [].concat(v)\r\n    } : {}, {}, handlers, {\r\n      valueSchema: SchemaConstructor.create(parameters)\r\n    })) : SchemaConstructor.create(Object.assign({}, parameters, {}, handlers));\r\n  }\r\n\r\n  function normalizeApiOptions(options, optionInfos, opts) {\r\n    return normalizeOptions(options, optionInfos, opts);\r\n  }\r\n\r\n  function normalizeCliOptions(options, optionInfos, opts) {\r\n    return normalizeOptions(options, optionInfos, Object.assign({\r\n      isCLI: true\r\n    }, opts));\r\n  }\r\n\r\n  var optionsNormalizer = {\r\n    normalizeApiOptions,\r\n    normalizeCliOptions\r\n  };\r\n\r\n  var getLast = arr => arr[arr.length - 1];\r\n\r\n  function locStart(node, opts) {\r\n    opts = opts || {}; // Handle nodes with decorators. They should start at the first decorator\r\n\r\n    if (!opts.ignoreDecorators && node.declaration && node.declaration.decorators && node.declaration.decorators.length > 0) {\r\n      return locStart(node.declaration.decorators[0]);\r\n    }\r\n\r\n    if (!opts.ignoreDecorators && node.decorators && node.decorators.length > 0) {\r\n      return locStart(node.decorators[0]);\r\n    }\r\n\r\n    if (node.__location) {\r\n      return node.__location.startOffset;\r\n    }\r\n\r\n    if (node.range) {\r\n      return node.range[0];\r\n    }\r\n\r\n    if (typeof node.start === \"number\") {\r\n      return node.start;\r\n    }\r\n\r\n    if (node.loc) {\r\n      return node.loc.start;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  function locEnd(node) {\r\n    const endNode = node.nodes && getLast(node.nodes);\r\n\r\n    if (endNode && node.source && !node.source.end) {\r\n      node = endNode;\r\n    }\r\n\r\n    if (node.__location) {\r\n      return node.__location.endOffset;\r\n    }\r\n\r\n    const loc = node.range ? node.range[1] : typeof node.end === \"number\" ? node.end : null;\r\n\r\n    if (node.typeAnnotation) {\r\n      return Math.max(loc, locEnd(node.typeAnnotation));\r\n    }\r\n\r\n    if (node.loc && !loc) {\r\n      return node.loc.end;\r\n    }\r\n\r\n    return loc;\r\n  }\r\n\r\n  function composeLoc(startNode, endNodeOrLength = startNode) {\r\n    const length = typeof endNodeOrLength === \"number\" ? endNodeOrLength : -1;\r\n    const start = locStart(startNode);\r\n    const end = length !== -1 ? start + length : locEnd(endNodeOrLength);\r\n    const startLoc = startNode.loc.start;\r\n    return {\r\n      start,\r\n      end,\r\n      range: [start, end],\r\n      loc: {\r\n        start: startLoc,\r\n        end: length !== -1 ? {\r\n          line: startLoc.line,\r\n          column: startLoc.column + length\r\n        } : endNodeOrLength.loc.end\r\n      }\r\n    };\r\n  }\r\n\r\n  var loc = {\r\n    locStart,\r\n    locEnd,\r\n    composeLoc\r\n  };\r\n\r\n  var jsTokens = createCommonjsModule(function (module, exports) {\r\n    // Copyright 2014, 2015, 2016, 2017, 2018 Simon Lydell\r\n    // License: MIT. (See LICENSE.)\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    }); // This regex comes from regex.coffee, and is inserted here by generate-index.js\r\n    // (run `npm run build`).\r\n\r\n    exports.default = /((['\"])(?:(?!\\2|\\\\).|\\\\(?:\\r\\n|[\\s\\S]))*(\\2)?|`(?:[^`\\\\$]|\\\\[\\s\\S]|\\$(?!\\{)|\\$\\{(?:[^{}]|\\{[^}]*\\}?)*\\}?)*(`)?)|(\\/\\/.*)|(\\/\\*(?:[^*]|\\*(?!\\/))*(\\*\\/)?)|(\\/(?!\\*)(?:\\[(?:(?![\\]\\\\]).|\\\\.)*\\]|(?![\\/\\]\\\\]).|\\\\.)+\\/(?:(?!\\s*(?:\\b|[\\u0080-\\uFFFF$\\\\'\"~({]|[+\\-!](?!=)|\\.?\\d))|[gmiyus]{1,6}\\b(?![\\u0080-\\uFFFF$\\\\]|\\s*(?:[+\\-*%&|^<>!=?({]|\\/(?![\\/*])))))|(0[xX][\\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?)|((?!\\d)(?:(?!\\s)[$\\w\\u0080-\\uFFFF]|\\\\u[\\da-fA-F]{4}|\\\\u\\{[\\da-fA-F]+\\})+)|(--|\\+\\+|&&|\\|\\||=>|\\.{3}|(?:[+\\-\\/%&|^]|\\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\\](){}])|(\\s+)|(^$|[\\s\\S])/g;\r\n\r\n    exports.matchToToken = function (match) {\r\n      var token = {\r\n        type: \"invalid\",\r\n        value: match[0],\r\n        closed: undefined\r\n      };\r\n      if (match[1]) token.type = \"string\", token.closed = !!(match[3] || match[4]);else if (match[5]) token.type = \"comment\";else if (match[6]) token.type = \"comment\", token.closed = !!match[7];else if (match[8]) token.type = \"regex\";else if (match[9]) token.type = \"number\";else if (match[10]) token.type = \"name\";else if (match[11]) token.type = \"punctuator\";else if (match[12]) token.type = \"whitespace\";\r\n      return token;\r\n    };\r\n  });\r\n  unwrapExports(jsTokens);\r\n  var jsTokens_1 = jsTokens.matchToToken;\r\n\r\n  var ast = createCommonjsModule(function (module) {\r\n    /*\r\n      Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>\r\n\r\n      Redistribution and use in source and binary forms, with or without\r\n      modification, are permitted provided that the following conditions are met:\r\n\r\n        * Redistributions of source code must retain the above copyright\r\n          notice, this list of conditions and the following disclaimer.\r\n        * Redistributions in binary form must reproduce the above copyright\r\n          notice, this list of conditions and the following disclaimer in the\r\n          documentation and/or other materials provided with the distribution.\r\n\r\n      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n      ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\r\n      DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n      (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n      LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n      ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\r\n      THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n    */\r\n    (function () {\r\n\r\n      function isExpression(node) {\r\n        if (node == null) {\r\n          return false;\r\n        }\r\n\r\n        switch (node.type) {\r\n          case 'ArrayExpression':\r\n          case 'AssignmentExpression':\r\n          case 'BinaryExpression':\r\n          case 'CallExpression':\r\n          case 'ConditionalExpression':\r\n          case 'FunctionExpression':\r\n          case 'Identifier':\r\n          case 'Literal':\r\n          case 'LogicalExpression':\r\n          case 'MemberExpression':\r\n          case 'NewExpression':\r\n          case 'ObjectExpression':\r\n          case 'SequenceExpression':\r\n          case 'ThisExpression':\r\n          case 'UnaryExpression':\r\n          case 'UpdateExpression':\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n      }\r\n\r\n      function isIterationStatement(node) {\r\n        if (node == null) {\r\n          return false;\r\n        }\r\n\r\n        switch (node.type) {\r\n          case 'DoWhileStatement':\r\n          case 'ForInStatement':\r\n          case 'ForStatement':\r\n          case 'WhileStatement':\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n      }\r\n\r\n      function isStatement(node) {\r\n        if (node == null) {\r\n          return false;\r\n        }\r\n\r\n        switch (node.type) {\r\n          case 'BlockStatement':\r\n          case 'BreakStatement':\r\n          case 'ContinueStatement':\r\n          case 'DebuggerStatement':\r\n          case 'DoWhileStatement':\r\n          case 'EmptyStatement':\r\n          case 'ExpressionStatement':\r\n          case 'ForInStatement':\r\n          case 'ForStatement':\r\n          case 'IfStatement':\r\n          case 'LabeledStatement':\r\n          case 'ReturnStatement':\r\n          case 'SwitchStatement':\r\n          case 'ThrowStatement':\r\n          case 'TryStatement':\r\n          case 'VariableDeclaration':\r\n          case 'WhileStatement':\r\n          case 'WithStatement':\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n      }\r\n\r\n      function isSourceElement(node) {\r\n        return isStatement(node) || node != null && node.type === 'FunctionDeclaration';\r\n      }\r\n\r\n      function trailingStatement(node) {\r\n        switch (node.type) {\r\n          case 'IfStatement':\r\n            if (node.alternate != null) {\r\n              return node.alternate;\r\n            }\r\n\r\n            return node.consequent;\r\n\r\n          case 'LabeledStatement':\r\n          case 'ForStatement':\r\n          case 'ForInStatement':\r\n          case 'WhileStatement':\r\n          case 'WithStatement':\r\n            return node.body;\r\n        }\r\n\r\n        return null;\r\n      }\r\n\r\n      function isProblematicIfStatement(node) {\r\n        var current;\r\n\r\n        if (node.type !== 'IfStatement') {\r\n          return false;\r\n        }\r\n\r\n        if (node.alternate == null) {\r\n          return false;\r\n        }\r\n\r\n        current = node.consequent;\r\n\r\n        do {\r\n          if (current.type === 'IfStatement') {\r\n            if (current.alternate == null) {\r\n              return true;\r\n            }\r\n          }\r\n\r\n          current = trailingStatement(current);\r\n        } while (current);\r\n\r\n        return false;\r\n      }\r\n\r\n      module.exports = {\r\n        isExpression: isExpression,\r\n        isStatement: isStatement,\r\n        isIterationStatement: isIterationStatement,\r\n        isSourceElement: isSourceElement,\r\n        isProblematicIfStatement: isProblematicIfStatement,\r\n        trailingStatement: trailingStatement\r\n      };\r\n    })();\r\n    /* vim: set sw=4 ts=4 et tw=80 : */\r\n\r\n  });\r\n  var ast_1 = ast.isExpression;\r\n  var ast_2 = ast.isStatement;\r\n  var ast_3 = ast.isIterationStatement;\r\n  var ast_4 = ast.isSourceElement;\r\n  var ast_5 = ast.isProblematicIfStatement;\r\n  var ast_6 = ast.trailingStatement;\r\n\r\n  var code = createCommonjsModule(function (module) {\r\n    /*\r\n      Copyright (C) 2013-2014 Yusuke Suzuki <utatane.tea@gmail.com>\r\n      Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>\r\n\r\n      Redistribution and use in source and binary forms, with or without\r\n      modification, are permitted provided that the following conditions are met:\r\n\r\n        * Redistributions of source code must retain the above copyright\r\n          notice, this list of conditions and the following disclaimer.\r\n        * Redistributions in binary form must reproduce the above copyright\r\n          notice, this list of conditions and the following disclaimer in the\r\n          documentation and/or other materials provided with the distribution.\r\n\r\n      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n      ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\r\n      DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n      (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n      LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n      ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\r\n      THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n    */\r\n    (function () {\r\n\r\n      var ES6Regex, ES5Regex, NON_ASCII_WHITESPACES, IDENTIFIER_START, IDENTIFIER_PART, ch; // See `tools/generate-identifier-regex.js`.\r\n\r\n      ES5Regex = {\r\n        // ECMAScript 5.1/Unicode v9.0.0 NonAsciiIdentifierStart:\r\n        NonAsciiIdentifierStart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\r\n        // ECMAScript 5.1/Unicode v9.0.0 NonAsciiIdentifierPart:\r\n        NonAsciiIdentifierPart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/\r\n      };\r\n      ES6Regex = {\r\n        // ECMAScript 6/Unicode v9.0.0 NonAsciiIdentifierStart:\r\n        NonAsciiIdentifierStart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\r\n        // ECMAScript 6/Unicode v9.0.0 NonAsciiIdentifierPart:\r\n        NonAsciiIdentifierPart: /[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F\\uDFE0]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4A\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/\r\n      };\r\n\r\n      function isDecimalDigit(ch) {\r\n        return 0x30 <= ch && ch <= 0x39; // 0..9\r\n      }\r\n\r\n      function isHexDigit(ch) {\r\n        return 0x30 <= ch && ch <= 0x39 || // 0..9\r\n        0x61 <= ch && ch <= 0x66 || // a..f\r\n        0x41 <= ch && ch <= 0x46; // A..F\r\n      }\r\n\r\n      function isOctalDigit(ch) {\r\n        return ch >= 0x30 && ch <= 0x37; // 0..7\r\n      } // 7.2 White Space\r\n\r\n\r\n      NON_ASCII_WHITESPACES = [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF];\r\n\r\n      function isWhiteSpace(ch) {\r\n        return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 || ch >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(ch) >= 0;\r\n      } // 7.3 Line Terminators\r\n\r\n\r\n      function isLineTerminator(ch) {\r\n        return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;\r\n      } // 7.6 Identifier Names and Identifiers\r\n\r\n\r\n      function fromCodePoint(cp) {\r\n        if (cp <= 0xFFFF) {\r\n          return String.fromCharCode(cp);\r\n        }\r\n\r\n        var cu1 = String.fromCharCode(Math.floor((cp - 0x10000) / 0x400) + 0xD800);\r\n        var cu2 = String.fromCharCode((cp - 0x10000) % 0x400 + 0xDC00);\r\n        return cu1 + cu2;\r\n      }\r\n\r\n      IDENTIFIER_START = new Array(0x80);\r\n\r\n      for (ch = 0; ch < 0x80; ++ch) {\r\n        IDENTIFIER_START[ch] = ch >= 0x61 && ch <= 0x7A || // a..z\r\n        ch >= 0x41 && ch <= 0x5A || // A..Z\r\n        ch === 0x24 || ch === 0x5F; // $ (dollar) and _ (underscore)\r\n      }\r\n\r\n      IDENTIFIER_PART = new Array(0x80);\r\n\r\n      for (ch = 0; ch < 0x80; ++ch) {\r\n        IDENTIFIER_PART[ch] = ch >= 0x61 && ch <= 0x7A || // a..z\r\n        ch >= 0x41 && ch <= 0x5A || // A..Z\r\n        ch >= 0x30 && ch <= 0x39 || // 0..9\r\n        ch === 0x24 || ch === 0x5F; // $ (dollar) and _ (underscore)\r\n      }\r\n\r\n      function isIdentifierStartES5(ch) {\r\n        return ch < 0x80 ? IDENTIFIER_START[ch] : ES5Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));\r\n      }\r\n\r\n      function isIdentifierPartES5(ch) {\r\n        return ch < 0x80 ? IDENTIFIER_PART[ch] : ES5Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));\r\n      }\r\n\r\n      function isIdentifierStartES6(ch) {\r\n        return ch < 0x80 ? IDENTIFIER_START[ch] : ES6Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));\r\n      }\r\n\r\n      function isIdentifierPartES6(ch) {\r\n        return ch < 0x80 ? IDENTIFIER_PART[ch] : ES6Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));\r\n      }\r\n\r\n      module.exports = {\r\n        isDecimalDigit: isDecimalDigit,\r\n        isHexDigit: isHexDigit,\r\n        isOctalDigit: isOctalDigit,\r\n        isWhiteSpace: isWhiteSpace,\r\n        isLineTerminator: isLineTerminator,\r\n        isIdentifierStartES5: isIdentifierStartES5,\r\n        isIdentifierPartES5: isIdentifierPartES5,\r\n        isIdentifierStartES6: isIdentifierStartES6,\r\n        isIdentifierPartES6: isIdentifierPartES6\r\n      };\r\n    })();\r\n    /* vim: set sw=4 ts=4 et tw=80 : */\r\n\r\n  });\r\n  var code_1 = code.isDecimalDigit;\r\n  var code_2 = code.isHexDigit;\r\n  var code_3 = code.isOctalDigit;\r\n  var code_4 = code.isWhiteSpace;\r\n  var code_5 = code.isLineTerminator;\r\n  var code_6 = code.isIdentifierStartES5;\r\n  var code_7 = code.isIdentifierPartES5;\r\n  var code_8 = code.isIdentifierStartES6;\r\n  var code_9 = code.isIdentifierPartES6;\r\n\r\n  var keyword = createCommonjsModule(function (module) {\r\n    /*\r\n      Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>\r\n\r\n      Redistribution and use in source and binary forms, with or without\r\n      modification, are permitted provided that the following conditions are met:\r\n\r\n        * Redistributions of source code must retain the above copyright\r\n          notice, this list of conditions and the following disclaimer.\r\n        * Redistributions in binary form must reproduce the above copyright\r\n          notice, this list of conditions and the following disclaimer in the\r\n          documentation and/or other materials provided with the distribution.\r\n\r\n      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n      ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\r\n      DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n      (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n      LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n      ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\r\n      THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n    */\r\n    (function () {\r\n\r\n      var code$1 = code;\r\n\r\n      function isStrictModeReservedWordES6(id) {\r\n        switch (id) {\r\n          case 'implements':\r\n          case 'interface':\r\n          case 'package':\r\n          case 'private':\r\n          case 'protected':\r\n          case 'public':\r\n          case 'static':\r\n          case 'let':\r\n            return true;\r\n\r\n          default:\r\n            return false;\r\n        }\r\n      }\r\n\r\n      function isKeywordES5(id, strict) {\r\n        // yield should not be treated as keyword under non-strict mode.\r\n        if (!strict && id === 'yield') {\r\n          return false;\r\n        }\r\n\r\n        return isKeywordES6(id, strict);\r\n      }\r\n\r\n      function isKeywordES6(id, strict) {\r\n        if (strict && isStrictModeReservedWordES6(id)) {\r\n          return true;\r\n        }\r\n\r\n        switch (id.length) {\r\n          case 2:\r\n            return id === 'if' || id === 'in' || id === 'do';\r\n\r\n          case 3:\r\n            return id === 'var' || id === 'for' || id === 'new' || id === 'try';\r\n\r\n          case 4:\r\n            return id === 'this' || id === 'else' || id === 'case' || id === 'void' || id === 'with' || id === 'enum';\r\n\r\n          case 5:\r\n            return id === 'while' || id === 'break' || id === 'catch' || id === 'throw' || id === 'const' || id === 'yield' || id === 'class' || id === 'super';\r\n\r\n          case 6:\r\n            return id === 'return' || id === 'typeof' || id === 'delete' || id === 'switch' || id === 'export' || id === 'import';\r\n\r\n          case 7:\r\n            return id === 'default' || id === 'finally' || id === 'extends';\r\n\r\n          case 8:\r\n            return id === 'function' || id === 'continue' || id === 'debugger';\r\n\r\n          case 10:\r\n            return id === 'instanceof';\r\n\r\n          default:\r\n            return false;\r\n        }\r\n      }\r\n\r\n      function isReservedWordES5(id, strict) {\r\n        return id === 'null' || id === 'true' || id === 'false' || isKeywordES5(id, strict);\r\n      }\r\n\r\n      function isReservedWordES6(id, strict) {\r\n        return id === 'null' || id === 'true' || id === 'false' || isKeywordES6(id, strict);\r\n      }\r\n\r\n      function isRestrictedWord(id) {\r\n        return id === 'eval' || id === 'arguments';\r\n      }\r\n\r\n      function isIdentifierNameES5(id) {\r\n        var i, iz, ch;\r\n\r\n        if (id.length === 0) {\r\n          return false;\r\n        }\r\n\r\n        ch = id.charCodeAt(0);\r\n\r\n        if (!code$1.isIdentifierStartES5(ch)) {\r\n          return false;\r\n        }\r\n\r\n        for (i = 1, iz = id.length; i < iz; ++i) {\r\n          ch = id.charCodeAt(i);\r\n\r\n          if (!code$1.isIdentifierPartES5(ch)) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        return true;\r\n      }\r\n\r\n      function decodeUtf16(lead, trail) {\r\n        return (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\r\n      }\r\n\r\n      function isIdentifierNameES6(id) {\r\n        var i, iz, ch, lowCh, check;\r\n\r\n        if (id.length === 0) {\r\n          return false;\r\n        }\r\n\r\n        check = code$1.isIdentifierStartES6;\r\n\r\n        for (i = 0, iz = id.length; i < iz; ++i) {\r\n          ch = id.charCodeAt(i);\r\n\r\n          if (0xD800 <= ch && ch <= 0xDBFF) {\r\n            ++i;\r\n\r\n            if (i >= iz) {\r\n              return false;\r\n            }\r\n\r\n            lowCh = id.charCodeAt(i);\r\n\r\n            if (!(0xDC00 <= lowCh && lowCh <= 0xDFFF)) {\r\n              return false;\r\n            }\r\n\r\n            ch = decodeUtf16(ch, lowCh);\r\n          }\r\n\r\n          if (!check(ch)) {\r\n            return false;\r\n          }\r\n\r\n          check = code$1.isIdentifierPartES6;\r\n        }\r\n\r\n        return true;\r\n      }\r\n\r\n      function isIdentifierES5(id, strict) {\r\n        return isIdentifierNameES5(id) && !isReservedWordES5(id, strict);\r\n      }\r\n\r\n      function isIdentifierES6(id, strict) {\r\n        return isIdentifierNameES6(id) && !isReservedWordES6(id, strict);\r\n      }\r\n\r\n      module.exports = {\r\n        isKeywordES5: isKeywordES5,\r\n        isKeywordES6: isKeywordES6,\r\n        isReservedWordES5: isReservedWordES5,\r\n        isReservedWordES6: isReservedWordES6,\r\n        isRestrictedWord: isRestrictedWord,\r\n        isIdentifierNameES5: isIdentifierNameES5,\r\n        isIdentifierNameES6: isIdentifierNameES6,\r\n        isIdentifierES5: isIdentifierES5,\r\n        isIdentifierES6: isIdentifierES6\r\n      };\r\n    })();\r\n    /* vim: set sw=4 ts=4 et tw=80 : */\r\n\r\n  });\r\n  var keyword_1 = keyword.isKeywordES5;\r\n  var keyword_2 = keyword.isKeywordES6;\r\n  var keyword_3 = keyword.isReservedWordES5;\r\n  var keyword_4 = keyword.isReservedWordES6;\r\n  var keyword_5 = keyword.isRestrictedWord;\r\n  var keyword_6 = keyword.isIdentifierNameES5;\r\n  var keyword_7 = keyword.isIdentifierNameES6;\r\n  var keyword_8 = keyword.isIdentifierES5;\r\n  var keyword_9 = keyword.isIdentifierES6;\r\n\r\n  var utils$1 = createCommonjsModule(function (module, exports) {\r\n    /*\r\n      Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>\r\n\r\n      Redistribution and use in source and binary forms, with or without\r\n      modification, are permitted provided that the following conditions are met:\r\n\r\n        * Redistributions of source code must retain the above copyright\r\n          notice, this list of conditions and the following disclaimer.\r\n        * Redistributions in binary form must reproduce the above copyright\r\n          notice, this list of conditions and the following disclaimer in the\r\n          documentation and/or other materials provided with the distribution.\r\n\r\n      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n      ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\r\n      DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n      (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n      LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n      ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\r\n      THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n    */\r\n    (function () {\r\n\r\n      exports.ast = ast;\r\n      exports.code = code;\r\n      exports.keyword = keyword;\r\n    })();\r\n    /* vim: set sw=4 ts=4 et tw=80 : */\r\n\r\n  });\r\n  var utils_1$1 = utils$1.ast;\r\n  var utils_2$1 = utils$1.code;\r\n  var utils_3$1 = utils$1.keyword;\r\n\r\n  var matchOperatorsRe$1 = /[|\\\\{}()[\\]^$+*?.]/g;\r\n\r\n  var escapeStringRegexp$1 = function escapeStringRegexp(str) {\r\n    if (typeof str !== 'string') {\r\n      throw new TypeError('Expected a string');\r\n    }\r\n\r\n    return str.replace(matchOperatorsRe$1, '\\\\$&');\r\n  };\r\n\r\n  var colorName$2 = {\r\n    \"aliceblue\": [240, 248, 255],\r\n    \"antiquewhite\": [250, 235, 215],\r\n    \"aqua\": [0, 255, 255],\r\n    \"aquamarine\": [127, 255, 212],\r\n    \"azure\": [240, 255, 255],\r\n    \"beige\": [245, 245, 220],\r\n    \"bisque\": [255, 228, 196],\r\n    \"black\": [0, 0, 0],\r\n    \"blanchedalmond\": [255, 235, 205],\r\n    \"blue\": [0, 0, 255],\r\n    \"blueviolet\": [138, 43, 226],\r\n    \"brown\": [165, 42, 42],\r\n    \"burlywood\": [222, 184, 135],\r\n    \"cadetblue\": [95, 158, 160],\r\n    \"chartreuse\": [127, 255, 0],\r\n    \"chocolate\": [210, 105, 30],\r\n    \"coral\": [255, 127, 80],\r\n    \"cornflowerblue\": [100, 149, 237],\r\n    \"cornsilk\": [255, 248, 220],\r\n    \"crimson\": [220, 20, 60],\r\n    \"cyan\": [0, 255, 255],\r\n    \"darkblue\": [0, 0, 139],\r\n    \"darkcyan\": [0, 139, 139],\r\n    \"darkgoldenrod\": [184, 134, 11],\r\n    \"darkgray\": [169, 169, 169],\r\n    \"darkgreen\": [0, 100, 0],\r\n    \"darkgrey\": [169, 169, 169],\r\n    \"darkkhaki\": [189, 183, 107],\r\n    \"darkmagenta\": [139, 0, 139],\r\n    \"darkolivegreen\": [85, 107, 47],\r\n    \"darkorange\": [255, 140, 0],\r\n    \"darkorchid\": [153, 50, 204],\r\n    \"darkred\": [139, 0, 0],\r\n    \"darksalmon\": [233, 150, 122],\r\n    \"darkseagreen\": [143, 188, 143],\r\n    \"darkslateblue\": [72, 61, 139],\r\n    \"darkslategray\": [47, 79, 79],\r\n    \"darkslategrey\": [47, 79, 79],\r\n    \"darkturquoise\": [0, 206, 209],\r\n    \"darkviolet\": [148, 0, 211],\r\n    \"deeppink\": [255, 20, 147],\r\n    \"deepskyblue\": [0, 191, 255],\r\n    \"dimgray\": [105, 105, 105],\r\n    \"dimgrey\": [105, 105, 105],\r\n    \"dodgerblue\": [30, 144, 255],\r\n    \"firebrick\": [178, 34, 34],\r\n    \"floralwhite\": [255, 250, 240],\r\n    \"forestgreen\": [34, 139, 34],\r\n    \"fuchsia\": [255, 0, 255],\r\n    \"gainsboro\": [220, 220, 220],\r\n    \"ghostwhite\": [248, 248, 255],\r\n    \"gold\": [255, 215, 0],\r\n    \"goldenrod\": [218, 165, 32],\r\n    \"gray\": [128, 128, 128],\r\n    \"green\": [0, 128, 0],\r\n    \"greenyellow\": [173, 255, 47],\r\n    \"grey\": [128, 128, 128],\r\n    \"honeydew\": [240, 255, 240],\r\n    \"hotpink\": [255, 105, 180],\r\n    \"indianred\": [205, 92, 92],\r\n    \"indigo\": [75, 0, 130],\r\n    \"ivory\": [255, 255, 240],\r\n    \"khaki\": [240, 230, 140],\r\n    \"lavender\": [230, 230, 250],\r\n    \"lavenderblush\": [255, 240, 245],\r\n    \"lawngreen\": [124, 252, 0],\r\n    \"lemonchiffon\": [255, 250, 205],\r\n    \"lightblue\": [173, 216, 230],\r\n    \"lightcoral\": [240, 128, 128],\r\n    \"lightcyan\": [224, 255, 255],\r\n    \"lightgoldenrodyellow\": [250, 250, 210],\r\n    \"lightgray\": [211, 211, 211],\r\n    \"lightgreen\": [144, 238, 144],\r\n    \"lightgrey\": [211, 211, 211],\r\n    \"lightpink\": [255, 182, 193],\r\n    \"lightsalmon\": [255, 160, 122],\r\n    \"lightseagreen\": [32, 178, 170],\r\n    \"lightskyblue\": [135, 206, 250],\r\n    \"lightslategray\": [119, 136, 153],\r\n    \"lightslategrey\": [119, 136, 153],\r\n    \"lightsteelblue\": [176, 196, 222],\r\n    \"lightyellow\": [255, 255, 224],\r\n    \"lime\": [0, 255, 0],\r\n    \"limegreen\": [50, 205, 50],\r\n    \"linen\": [250, 240, 230],\r\n    \"magenta\": [255, 0, 255],\r\n    \"maroon\": [128, 0, 0],\r\n    \"mediumaquamarine\": [102, 205, 170],\r\n    \"mediumblue\": [0, 0, 205],\r\n    \"mediumorchid\": [186, 85, 211],\r\n    \"mediumpurple\": [147, 112, 219],\r\n    \"mediumseagreen\": [60, 179, 113],\r\n    \"mediumslateblue\": [123, 104, 238],\r\n    \"mediumspringgreen\": [0, 250, 154],\r\n    \"mediumturquoise\": [72, 209, 204],\r\n    \"mediumvioletred\": [199, 21, 133],\r\n    \"midnightblue\": [25, 25, 112],\r\n    \"mintcream\": [245, 255, 250],\r\n    \"mistyrose\": [255, 228, 225],\r\n    \"moccasin\": [255, 228, 181],\r\n    \"navajowhite\": [255, 222, 173],\r\n    \"navy\": [0, 0, 128],\r\n    \"oldlace\": [253, 245, 230],\r\n    \"olive\": [128, 128, 0],\r\n    \"olivedrab\": [107, 142, 35],\r\n    \"orange\": [255, 165, 0],\r\n    \"orangered\": [255, 69, 0],\r\n    \"orchid\": [218, 112, 214],\r\n    \"palegoldenrod\": [238, 232, 170],\r\n    \"palegreen\": [152, 251, 152],\r\n    \"paleturquoise\": [175, 238, 238],\r\n    \"palevioletred\": [219, 112, 147],\r\n    \"papayawhip\": [255, 239, 213],\r\n    \"peachpuff\": [255, 218, 185],\r\n    \"peru\": [205, 133, 63],\r\n    \"pink\": [255, 192, 203],\r\n    \"plum\": [221, 160, 221],\r\n    \"powderblue\": [176, 224, 230],\r\n    \"purple\": [128, 0, 128],\r\n    \"rebeccapurple\": [102, 51, 153],\r\n    \"red\": [255, 0, 0],\r\n    \"rosybrown\": [188, 143, 143],\r\n    \"royalblue\": [65, 105, 225],\r\n    \"saddlebrown\": [139, 69, 19],\r\n    \"salmon\": [250, 128, 114],\r\n    \"sandybrown\": [244, 164, 96],\r\n    \"seagreen\": [46, 139, 87],\r\n    \"seashell\": [255, 245, 238],\r\n    \"sienna\": [160, 82, 45],\r\n    \"silver\": [192, 192, 192],\r\n    \"skyblue\": [135, 206, 235],\r\n    \"slateblue\": [106, 90, 205],\r\n    \"slategray\": [112, 128, 144],\r\n    \"slategrey\": [112, 128, 144],\r\n    \"snow\": [255, 250, 250],\r\n    \"springgreen\": [0, 255, 127],\r\n    \"steelblue\": [70, 130, 180],\r\n    \"tan\": [210, 180, 140],\r\n    \"teal\": [0, 128, 128],\r\n    \"thistle\": [216, 191, 216],\r\n    \"tomato\": [255, 99, 71],\r\n    \"turquoise\": [64, 224, 208],\r\n    \"violet\": [238, 130, 238],\r\n    \"wheat\": [245, 222, 179],\r\n    \"white\": [255, 255, 255],\r\n    \"whitesmoke\": [245, 245, 245],\r\n    \"yellow\": [255, 255, 0],\r\n    \"yellowgreen\": [154, 205, 50]\r\n  };\r\n\r\n  var conversions$2 = createCommonjsModule(function (module) {\r\n    /* MIT license */\r\n    // NOTE: conversions should only return primitive values (i.e. arrays, or\r\n    //       values that give correct `typeof` results).\r\n    //       do not use box values types (i.e. Number(), String(), etc.)\r\n    var reverseKeywords = {};\r\n\r\n    for (var key in colorName$2) {\r\n      if (colorName$2.hasOwnProperty(key)) {\r\n        reverseKeywords[colorName$2[key]] = key;\r\n      }\r\n    }\r\n\r\n    var convert = module.exports = {\r\n      rgb: {\r\n        channels: 3,\r\n        labels: 'rgb'\r\n      },\r\n      hsl: {\r\n        channels: 3,\r\n        labels: 'hsl'\r\n      },\r\n      hsv: {\r\n        channels: 3,\r\n        labels: 'hsv'\r\n      },\r\n      hwb: {\r\n        channels: 3,\r\n        labels: 'hwb'\r\n      },\r\n      cmyk: {\r\n        channels: 4,\r\n        labels: 'cmyk'\r\n      },\r\n      xyz: {\r\n        channels: 3,\r\n        labels: 'xyz'\r\n      },\r\n      lab: {\r\n        channels: 3,\r\n        labels: 'lab'\r\n      },\r\n      lch: {\r\n        channels: 3,\r\n        labels: 'lch'\r\n      },\r\n      hex: {\r\n        channels: 1,\r\n        labels: ['hex']\r\n      },\r\n      keyword: {\r\n        channels: 1,\r\n        labels: ['keyword']\r\n      },\r\n      ansi16: {\r\n        channels: 1,\r\n        labels: ['ansi16']\r\n      },\r\n      ansi256: {\r\n        channels: 1,\r\n        labels: ['ansi256']\r\n      },\r\n      hcg: {\r\n        channels: 3,\r\n        labels: ['h', 'c', 'g']\r\n      },\r\n      apple: {\r\n        channels: 3,\r\n        labels: ['r16', 'g16', 'b16']\r\n      },\r\n      gray: {\r\n        channels: 1,\r\n        labels: ['gray']\r\n      }\r\n    }; // hide .channels and .labels properties\r\n\r\n    for (var model in convert) {\r\n      if (convert.hasOwnProperty(model)) {\r\n        if (!('channels' in convert[model])) {\r\n          throw new Error('missing channels property: ' + model);\r\n        }\r\n\r\n        if (!('labels' in convert[model])) {\r\n          throw new Error('missing channel labels property: ' + model);\r\n        }\r\n\r\n        if (convert[model].labels.length !== convert[model].channels) {\r\n          throw new Error('channel and label counts mismatch: ' + model);\r\n        }\r\n\r\n        var channels = convert[model].channels;\r\n        var labels = convert[model].labels;\r\n        delete convert[model].channels;\r\n        delete convert[model].labels;\r\n        Object.defineProperty(convert[model], 'channels', {\r\n          value: channels\r\n        });\r\n        Object.defineProperty(convert[model], 'labels', {\r\n          value: labels\r\n        });\r\n      }\r\n    }\r\n\r\n    convert.rgb.hsl = function (rgb) {\r\n      var r = rgb[0] / 255;\r\n      var g = rgb[1] / 255;\r\n      var b = rgb[2] / 255;\r\n      var min = Math.min(r, g, b);\r\n      var max = Math.max(r, g, b);\r\n      var delta = max - min;\r\n      var h;\r\n      var s;\r\n      var l;\r\n\r\n      if (max === min) {\r\n        h = 0;\r\n      } else if (r === max) {\r\n        h = (g - b) / delta;\r\n      } else if (g === max) {\r\n        h = 2 + (b - r) / delta;\r\n      } else if (b === max) {\r\n        h = 4 + (r - g) / delta;\r\n      }\r\n\r\n      h = Math.min(h * 60, 360);\r\n\r\n      if (h < 0) {\r\n        h += 360;\r\n      }\r\n\r\n      l = (min + max) / 2;\r\n\r\n      if (max === min) {\r\n        s = 0;\r\n      } else if (l <= 0.5) {\r\n        s = delta / (max + min);\r\n      } else {\r\n        s = delta / (2 - max - min);\r\n      }\r\n\r\n      return [h, s * 100, l * 100];\r\n    };\r\n\r\n    convert.rgb.hsv = function (rgb) {\r\n      var rdif;\r\n      var gdif;\r\n      var bdif;\r\n      var h;\r\n      var s;\r\n      var r = rgb[0] / 255;\r\n      var g = rgb[1] / 255;\r\n      var b = rgb[2] / 255;\r\n      var v = Math.max(r, g, b);\r\n      var diff = v - Math.min(r, g, b);\r\n\r\n      var diffc = function diffc(c) {\r\n        return (v - c) / 6 / diff + 1 / 2;\r\n      };\r\n\r\n      if (diff === 0) {\r\n        h = s = 0;\r\n      } else {\r\n        s = diff / v;\r\n        rdif = diffc(r);\r\n        gdif = diffc(g);\r\n        bdif = diffc(b);\r\n\r\n        if (r === v) {\r\n          h = bdif - gdif;\r\n        } else if (g === v) {\r\n          h = 1 / 3 + rdif - bdif;\r\n        } else if (b === v) {\r\n          h = 2 / 3 + gdif - rdif;\r\n        }\r\n\r\n        if (h < 0) {\r\n          h += 1;\r\n        } else if (h > 1) {\r\n          h -= 1;\r\n        }\r\n      }\r\n\r\n      return [h * 360, s * 100, v * 100];\r\n    };\r\n\r\n    convert.rgb.hwb = function (rgb) {\r\n      var r = rgb[0];\r\n      var g = rgb[1];\r\n      var b = rgb[2];\r\n      var h = convert.rgb.hsl(rgb)[0];\r\n      var w = 1 / 255 * Math.min(r, Math.min(g, b));\r\n      b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\r\n      return [h, w * 100, b * 100];\r\n    };\r\n\r\n    convert.rgb.cmyk = function (rgb) {\r\n      var r = rgb[0] / 255;\r\n      var g = rgb[1] / 255;\r\n      var b = rgb[2] / 255;\r\n      var c;\r\n      var m;\r\n      var y;\r\n      var k;\r\n      k = Math.min(1 - r, 1 - g, 1 - b);\r\n      c = (1 - r - k) / (1 - k) || 0;\r\n      m = (1 - g - k) / (1 - k) || 0;\r\n      y = (1 - b - k) / (1 - k) || 0;\r\n      return [c * 100, m * 100, y * 100, k * 100];\r\n    };\r\n    /**\r\n     * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\r\n     * */\r\n\r\n\r\n    function comparativeDistance(x, y) {\r\n      return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);\r\n    }\r\n\r\n    convert.rgb.keyword = function (rgb) {\r\n      var reversed = reverseKeywords[rgb];\r\n\r\n      if (reversed) {\r\n        return reversed;\r\n      }\r\n\r\n      var currentClosestDistance = Infinity;\r\n      var currentClosestKeyword;\r\n\r\n      for (var keyword in colorName$2) {\r\n        if (colorName$2.hasOwnProperty(keyword)) {\r\n          var value = colorName$2[keyword]; // Compute comparative distance\r\n\r\n          var distance = comparativeDistance(rgb, value); // Check if its less, if so set as closest\r\n\r\n          if (distance < currentClosestDistance) {\r\n            currentClosestDistance = distance;\r\n            currentClosestKeyword = keyword;\r\n          }\r\n        }\r\n      }\r\n\r\n      return currentClosestKeyword;\r\n    };\r\n\r\n    convert.keyword.rgb = function (keyword) {\r\n      return colorName$2[keyword];\r\n    };\r\n\r\n    convert.rgb.xyz = function (rgb) {\r\n      var r = rgb[0] / 255;\r\n      var g = rgb[1] / 255;\r\n      var b = rgb[2] / 255; // assume sRGB\r\n\r\n      r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\r\n      g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\r\n      b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\r\n      var x = r * 0.4124 + g * 0.3576 + b * 0.1805;\r\n      var y = r * 0.2126 + g * 0.7152 + b * 0.0722;\r\n      var z = r * 0.0193 + g * 0.1192 + b * 0.9505;\r\n      return [x * 100, y * 100, z * 100];\r\n    };\r\n\r\n    convert.rgb.lab = function (rgb) {\r\n      var xyz = convert.rgb.xyz(rgb);\r\n      var x = xyz[0];\r\n      var y = xyz[1];\r\n      var z = xyz[2];\r\n      var l;\r\n      var a;\r\n      var b;\r\n      x /= 95.047;\r\n      y /= 100;\r\n      z /= 108.883;\r\n      x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\r\n      y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\r\n      z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\r\n      l = 116 * y - 16;\r\n      a = 500 * (x - y);\r\n      b = 200 * (y - z);\r\n      return [l, a, b];\r\n    };\r\n\r\n    convert.hsl.rgb = function (hsl) {\r\n      var h = hsl[0] / 360;\r\n      var s = hsl[1] / 100;\r\n      var l = hsl[2] / 100;\r\n      var t1;\r\n      var t2;\r\n      var t3;\r\n      var rgb;\r\n      var val;\r\n\r\n      if (s === 0) {\r\n        val = l * 255;\r\n        return [val, val, val];\r\n      }\r\n\r\n      if (l < 0.5) {\r\n        t2 = l * (1 + s);\r\n      } else {\r\n        t2 = l + s - l * s;\r\n      }\r\n\r\n      t1 = 2 * l - t2;\r\n      rgb = [0, 0, 0];\r\n\r\n      for (var i = 0; i < 3; i++) {\r\n        t3 = h + 1 / 3 * -(i - 1);\r\n\r\n        if (t3 < 0) {\r\n          t3++;\r\n        }\r\n\r\n        if (t3 > 1) {\r\n          t3--;\r\n        }\r\n\r\n        if (6 * t3 < 1) {\r\n          val = t1 + (t2 - t1) * 6 * t3;\r\n        } else if (2 * t3 < 1) {\r\n          val = t2;\r\n        } else if (3 * t3 < 2) {\r\n          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\r\n        } else {\r\n          val = t1;\r\n        }\r\n\r\n        rgb[i] = val * 255;\r\n      }\r\n\r\n      return rgb;\r\n    };\r\n\r\n    convert.hsl.hsv = function (hsl) {\r\n      var h = hsl[0];\r\n      var s = hsl[1] / 100;\r\n      var l = hsl[2] / 100;\r\n      var smin = s;\r\n      var lmin = Math.max(l, 0.01);\r\n      var sv;\r\n      var v;\r\n      l *= 2;\r\n      s *= l <= 1 ? l : 2 - l;\r\n      smin *= lmin <= 1 ? lmin : 2 - lmin;\r\n      v = (l + s) / 2;\r\n      sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);\r\n      return [h, sv * 100, v * 100];\r\n    };\r\n\r\n    convert.hsv.rgb = function (hsv) {\r\n      var h = hsv[0] / 60;\r\n      var s = hsv[1] / 100;\r\n      var v = hsv[2] / 100;\r\n      var hi = Math.floor(h) % 6;\r\n      var f = h - Math.floor(h);\r\n      var p = 255 * v * (1 - s);\r\n      var q = 255 * v * (1 - s * f);\r\n      var t = 255 * v * (1 - s * (1 - f));\r\n      v *= 255;\r\n\r\n      switch (hi) {\r\n        case 0:\r\n          return [v, t, p];\r\n\r\n        case 1:\r\n          return [q, v, p];\r\n\r\n        case 2:\r\n          return [p, v, t];\r\n\r\n        case 3:\r\n          return [p, q, v];\r\n\r\n        case 4:\r\n          return [t, p, v];\r\n\r\n        case 5:\r\n          return [v, p, q];\r\n      }\r\n    };\r\n\r\n    convert.hsv.hsl = function (hsv) {\r\n      var h = hsv[0];\r\n      var s = hsv[1] / 100;\r\n      var v = hsv[2] / 100;\r\n      var vmin = Math.max(v, 0.01);\r\n      var lmin;\r\n      var sl;\r\n      var l;\r\n      l = (2 - s) * v;\r\n      lmin = (2 - s) * vmin;\r\n      sl = s * vmin;\r\n      sl /= lmin <= 1 ? lmin : 2 - lmin;\r\n      sl = sl || 0;\r\n      l /= 2;\r\n      return [h, sl * 100, l * 100];\r\n    }; // http://dev.w3.org/csswg/css-color/#hwb-to-rgb\r\n\r\n\r\n    convert.hwb.rgb = function (hwb) {\r\n      var h = hwb[0] / 360;\r\n      var wh = hwb[1] / 100;\r\n      var bl = hwb[2] / 100;\r\n      var ratio = wh + bl;\r\n      var i;\r\n      var v;\r\n      var f;\r\n      var n; // wh + bl cant be > 1\r\n\r\n      if (ratio > 1) {\r\n        wh /= ratio;\r\n        bl /= ratio;\r\n      }\r\n\r\n      i = Math.floor(6 * h);\r\n      v = 1 - bl;\r\n      f = 6 * h - i;\r\n\r\n      if ((i & 0x01) !== 0) {\r\n        f = 1 - f;\r\n      }\r\n\r\n      n = wh + f * (v - wh); // linear interpolation\r\n\r\n      var r;\r\n      var g;\r\n      var b;\r\n\r\n      switch (i) {\r\n        default:\r\n        case 6:\r\n        case 0:\r\n          r = v;\r\n          g = n;\r\n          b = wh;\r\n          break;\r\n\r\n        case 1:\r\n          r = n;\r\n          g = v;\r\n          b = wh;\r\n          break;\r\n\r\n        case 2:\r\n          r = wh;\r\n          g = v;\r\n          b = n;\r\n          break;\r\n\r\n        case 3:\r\n          r = wh;\r\n          g = n;\r\n          b = v;\r\n          break;\r\n\r\n        case 4:\r\n          r = n;\r\n          g = wh;\r\n          b = v;\r\n          break;\r\n\r\n        case 5:\r\n          r = v;\r\n          g = wh;\r\n          b = n;\r\n          break;\r\n      }\r\n\r\n      return [r * 255, g * 255, b * 255];\r\n    };\r\n\r\n    convert.cmyk.rgb = function (cmyk) {\r\n      var c = cmyk[0] / 100;\r\n      var m = cmyk[1] / 100;\r\n      var y = cmyk[2] / 100;\r\n      var k = cmyk[3] / 100;\r\n      var r;\r\n      var g;\r\n      var b;\r\n      r = 1 - Math.min(1, c * (1 - k) + k);\r\n      g = 1 - Math.min(1, m * (1 - k) + k);\r\n      b = 1 - Math.min(1, y * (1 - k) + k);\r\n      return [r * 255, g * 255, b * 255];\r\n    };\r\n\r\n    convert.xyz.rgb = function (xyz) {\r\n      var x = xyz[0] / 100;\r\n      var y = xyz[1] / 100;\r\n      var z = xyz[2] / 100;\r\n      var r;\r\n      var g;\r\n      var b;\r\n      r = x * 3.2406 + y * -1.5372 + z * -0.4986;\r\n      g = x * -0.9689 + y * 1.8758 + z * 0.0415;\r\n      b = x * 0.0557 + y * -0.2040 + z * 1.0570; // assume sRGB\r\n\r\n      r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92;\r\n      g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92;\r\n      b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92;\r\n      r = Math.min(Math.max(0, r), 1);\r\n      g = Math.min(Math.max(0, g), 1);\r\n      b = Math.min(Math.max(0, b), 1);\r\n      return [r * 255, g * 255, b * 255];\r\n    };\r\n\r\n    convert.xyz.lab = function (xyz) {\r\n      var x = xyz[0];\r\n      var y = xyz[1];\r\n      var z = xyz[2];\r\n      var l;\r\n      var a;\r\n      var b;\r\n      x /= 95.047;\r\n      y /= 100;\r\n      z /= 108.883;\r\n      x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\r\n      y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\r\n      z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\r\n      l = 116 * y - 16;\r\n      a = 500 * (x - y);\r\n      b = 200 * (y - z);\r\n      return [l, a, b];\r\n    };\r\n\r\n    convert.lab.xyz = function (lab) {\r\n      var l = lab[0];\r\n      var a = lab[1];\r\n      var b = lab[2];\r\n      var x;\r\n      var y;\r\n      var z;\r\n      y = (l + 16) / 116;\r\n      x = a / 500 + y;\r\n      z = y - b / 200;\r\n      var y2 = Math.pow(y, 3);\r\n      var x2 = Math.pow(x, 3);\r\n      var z2 = Math.pow(z, 3);\r\n      y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\r\n      x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\r\n      z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\r\n      x *= 95.047;\r\n      y *= 100;\r\n      z *= 108.883;\r\n      return [x, y, z];\r\n    };\r\n\r\n    convert.lab.lch = function (lab) {\r\n      var l = lab[0];\r\n      var a = lab[1];\r\n      var b = lab[2];\r\n      var hr;\r\n      var h;\r\n      var c;\r\n      hr = Math.atan2(b, a);\r\n      h = hr * 360 / 2 / Math.PI;\r\n\r\n      if (h < 0) {\r\n        h += 360;\r\n      }\r\n\r\n      c = Math.sqrt(a * a + b * b);\r\n      return [l, c, h];\r\n    };\r\n\r\n    convert.lch.lab = function (lch) {\r\n      var l = lch[0];\r\n      var c = lch[1];\r\n      var h = lch[2];\r\n      var a;\r\n      var b;\r\n      var hr;\r\n      hr = h / 360 * 2 * Math.PI;\r\n      a = c * Math.cos(hr);\r\n      b = c * Math.sin(hr);\r\n      return [l, a, b];\r\n    };\r\n\r\n    convert.rgb.ansi16 = function (args) {\r\n      var r = args[0];\r\n      var g = args[1];\r\n      var b = args[2];\r\n      var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\r\n\r\n      value = Math.round(value / 50);\r\n\r\n      if (value === 0) {\r\n        return 30;\r\n      }\r\n\r\n      var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));\r\n\r\n      if (value === 2) {\r\n        ansi += 60;\r\n      }\r\n\r\n      return ansi;\r\n    };\r\n\r\n    convert.hsv.ansi16 = function (args) {\r\n      // optimization here; we already know the value and don't need to get\r\n      // it converted for us.\r\n      return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\r\n    };\r\n\r\n    convert.rgb.ansi256 = function (args) {\r\n      var r = args[0];\r\n      var g = args[1];\r\n      var b = args[2]; // we use the extended greyscale palette here, with the exception of\r\n      // black and white. normal palette only has 4 greyscale shades.\r\n\r\n      if (r === g && g === b) {\r\n        if (r < 8) {\r\n          return 16;\r\n        }\r\n\r\n        if (r > 248) {\r\n          return 231;\r\n        }\r\n\r\n        return Math.round((r - 8) / 247 * 24) + 232;\r\n      }\r\n\r\n      var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);\r\n      return ansi;\r\n    };\r\n\r\n    convert.ansi16.rgb = function (args) {\r\n      var color = args % 10; // handle greyscale\r\n\r\n      if (color === 0 || color === 7) {\r\n        if (args > 50) {\r\n          color += 3.5;\r\n        }\r\n\r\n        color = color / 10.5 * 255;\r\n        return [color, color, color];\r\n      }\r\n\r\n      var mult = (~~(args > 50) + 1) * 0.5;\r\n      var r = (color & 1) * mult * 255;\r\n      var g = (color >> 1 & 1) * mult * 255;\r\n      var b = (color >> 2 & 1) * mult * 255;\r\n      return [r, g, b];\r\n    };\r\n\r\n    convert.ansi256.rgb = function (args) {\r\n      // handle greyscale\r\n      if (args >= 232) {\r\n        var c = (args - 232) * 10 + 8;\r\n        return [c, c, c];\r\n      }\r\n\r\n      args -= 16;\r\n      var rem;\r\n      var r = Math.floor(args / 36) / 5 * 255;\r\n      var g = Math.floor((rem = args % 36) / 6) / 5 * 255;\r\n      var b = rem % 6 / 5 * 255;\r\n      return [r, g, b];\r\n    };\r\n\r\n    convert.rgb.hex = function (args) {\r\n      var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);\r\n      var string = integer.toString(16).toUpperCase();\r\n      return '000000'.substring(string.length) + string;\r\n    };\r\n\r\n    convert.hex.rgb = function (args) {\r\n      var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\r\n\r\n      if (!match) {\r\n        return [0, 0, 0];\r\n      }\r\n\r\n      var colorString = match[0];\r\n\r\n      if (match[0].length === 3) {\r\n        colorString = colorString.split('').map(function (char) {\r\n          return char + char;\r\n        }).join('');\r\n      }\r\n\r\n      var integer = parseInt(colorString, 16);\r\n      var r = integer >> 16 & 0xFF;\r\n      var g = integer >> 8 & 0xFF;\r\n      var b = integer & 0xFF;\r\n      return [r, g, b];\r\n    };\r\n\r\n    convert.rgb.hcg = function (rgb) {\r\n      var r = rgb[0] / 255;\r\n      var g = rgb[1] / 255;\r\n      var b = rgb[2] / 255;\r\n      var max = Math.max(Math.max(r, g), b);\r\n      var min = Math.min(Math.min(r, g), b);\r\n      var chroma = max - min;\r\n      var grayscale;\r\n      var hue;\r\n\r\n      if (chroma < 1) {\r\n        grayscale = min / (1 - chroma);\r\n      } else {\r\n        grayscale = 0;\r\n      }\r\n\r\n      if (chroma <= 0) {\r\n        hue = 0;\r\n      } else if (max === r) {\r\n        hue = (g - b) / chroma % 6;\r\n      } else if (max === g) {\r\n        hue = 2 + (b - r) / chroma;\r\n      } else {\r\n        hue = 4 + (r - g) / chroma + 4;\r\n      }\r\n\r\n      hue /= 6;\r\n      hue %= 1;\r\n      return [hue * 360, chroma * 100, grayscale * 100];\r\n    };\r\n\r\n    convert.hsl.hcg = function (hsl) {\r\n      var s = hsl[1] / 100;\r\n      var l = hsl[2] / 100;\r\n      var c = 1;\r\n      var f = 0;\r\n\r\n      if (l < 0.5) {\r\n        c = 2.0 * s * l;\r\n      } else {\r\n        c = 2.0 * s * (1.0 - l);\r\n      }\r\n\r\n      if (c < 1.0) {\r\n        f = (l - 0.5 * c) / (1.0 - c);\r\n      }\r\n\r\n      return [hsl[0], c * 100, f * 100];\r\n    };\r\n\r\n    convert.hsv.hcg = function (hsv) {\r\n      var s = hsv[1] / 100;\r\n      var v = hsv[2] / 100;\r\n      var c = s * v;\r\n      var f = 0;\r\n\r\n      if (c < 1.0) {\r\n        f = (v - c) / (1 - c);\r\n      }\r\n\r\n      return [hsv[0], c * 100, f * 100];\r\n    };\r\n\r\n    convert.hcg.rgb = function (hcg) {\r\n      var h = hcg[0] / 360;\r\n      var c = hcg[1] / 100;\r\n      var g = hcg[2] / 100;\r\n\r\n      if (c === 0.0) {\r\n        return [g * 255, g * 255, g * 255];\r\n      }\r\n\r\n      var pure = [0, 0, 0];\r\n      var hi = h % 1 * 6;\r\n      var v = hi % 1;\r\n      var w = 1 - v;\r\n      var mg = 0;\r\n\r\n      switch (Math.floor(hi)) {\r\n        case 0:\r\n          pure[0] = 1;\r\n          pure[1] = v;\r\n          pure[2] = 0;\r\n          break;\r\n\r\n        case 1:\r\n          pure[0] = w;\r\n          pure[1] = 1;\r\n          pure[2] = 0;\r\n          break;\r\n\r\n        case 2:\r\n          pure[0] = 0;\r\n          pure[1] = 1;\r\n          pure[2] = v;\r\n          break;\r\n\r\n        case 3:\r\n          pure[0] = 0;\r\n          pure[1] = w;\r\n          pure[2] = 1;\r\n          break;\r\n\r\n        case 4:\r\n          pure[0] = v;\r\n          pure[1] = 0;\r\n          pure[2] = 1;\r\n          break;\r\n\r\n        default:\r\n          pure[0] = 1;\r\n          pure[1] = 0;\r\n          pure[2] = w;\r\n      }\r\n\r\n      mg = (1.0 - c) * g;\r\n      return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];\r\n    };\r\n\r\n    convert.hcg.hsv = function (hcg) {\r\n      var c = hcg[1] / 100;\r\n      var g = hcg[2] / 100;\r\n      var v = c + g * (1.0 - c);\r\n      var f = 0;\r\n\r\n      if (v > 0.0) {\r\n        f = c / v;\r\n      }\r\n\r\n      return [hcg[0], f * 100, v * 100];\r\n    };\r\n\r\n    convert.hcg.hsl = function (hcg) {\r\n      var c = hcg[1] / 100;\r\n      var g = hcg[2] / 100;\r\n      var l = g * (1.0 - c) + 0.5 * c;\r\n      var s = 0;\r\n\r\n      if (l > 0.0 && l < 0.5) {\r\n        s = c / (2 * l);\r\n      } else if (l >= 0.5 && l < 1.0) {\r\n        s = c / (2 * (1 - l));\r\n      }\r\n\r\n      return [hcg[0], s * 100, l * 100];\r\n    };\r\n\r\n    convert.hcg.hwb = function (hcg) {\r\n      var c = hcg[1] / 100;\r\n      var g = hcg[2] / 100;\r\n      var v = c + g * (1.0 - c);\r\n      return [hcg[0], (v - c) * 100, (1 - v) * 100];\r\n    };\r\n\r\n    convert.hwb.hcg = function (hwb) {\r\n      var w = hwb[1] / 100;\r\n      var b = hwb[2] / 100;\r\n      var v = 1 - b;\r\n      var c = v - w;\r\n      var g = 0;\r\n\r\n      if (c < 1) {\r\n        g = (v - c) / (1 - c);\r\n      }\r\n\r\n      return [hwb[0], c * 100, g * 100];\r\n    };\r\n\r\n    convert.apple.rgb = function (apple) {\r\n      return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];\r\n    };\r\n\r\n    convert.rgb.apple = function (rgb) {\r\n      return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];\r\n    };\r\n\r\n    convert.gray.rgb = function (args) {\r\n      return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\r\n    };\r\n\r\n    convert.gray.hsl = convert.gray.hsv = function (args) {\r\n      return [0, 0, args[0]];\r\n    };\r\n\r\n    convert.gray.hwb = function (gray) {\r\n      return [0, 100, gray[0]];\r\n    };\r\n\r\n    convert.gray.cmyk = function (gray) {\r\n      return [0, 0, 0, gray[0]];\r\n    };\r\n\r\n    convert.gray.lab = function (gray) {\r\n      return [gray[0], 0, 0];\r\n    };\r\n\r\n    convert.gray.hex = function (gray) {\r\n      var val = Math.round(gray[0] / 100 * 255) & 0xFF;\r\n      var integer = (val << 16) + (val << 8) + val;\r\n      var string = integer.toString(16).toUpperCase();\r\n      return '000000'.substring(string.length) + string;\r\n    };\r\n\r\n    convert.rgb.gray = function (rgb) {\r\n      var val = (rgb[0] + rgb[1] + rgb[2]) / 3;\r\n      return [val / 255 * 100];\r\n    };\r\n  });\r\n  var conversions_1$1 = conversions$2.rgb;\r\n  var conversions_2$1 = conversions$2.hsl;\r\n  var conversions_3$1 = conversions$2.hsv;\r\n  var conversions_4$1 = conversions$2.hwb;\r\n  var conversions_5$1 = conversions$2.cmyk;\r\n  var conversions_6$1 = conversions$2.xyz;\r\n  var conversions_7$1 = conversions$2.lab;\r\n  var conversions_8$1 = conversions$2.lch;\r\n  var conversions_9$1 = conversions$2.hex;\r\n  var conversions_10$1 = conversions$2.keyword;\r\n  var conversions_11$1 = conversions$2.ansi16;\r\n  var conversions_12$1 = conversions$2.ansi256;\r\n  var conversions_13$1 = conversions$2.hcg;\r\n  var conversions_14$1 = conversions$2.apple;\r\n  var conversions_15$1 = conversions$2.gray;\r\n\r\n  /*\r\n  \tthis function routes a model to all other models.\r\n\r\n  \tall functions that are routed have a property `.conversion` attached\r\n  \tto the returned synthetic function. This property is an array\r\n  \tof strings, each with the steps in between the 'from' and 'to'\r\n  \tcolor models (inclusive).\r\n\r\n  \tconversions that are not possible simply are not included.\r\n  */\r\n\r\n  function buildGraph$2() {\r\n    var graph = {}; // https://jsperf.com/object-keys-vs-for-in-with-closure/3\r\n\r\n    var models = Object.keys(conversions$2);\r\n\r\n    for (var len = models.length, i = 0; i < len; i++) {\r\n      graph[models[i]] = {\r\n        // http://jsperf.com/1-vs-infinity\r\n        // micro-opt, but this is simple.\r\n        distance: -1,\r\n        parent: null\r\n      };\r\n    }\r\n\r\n    return graph;\r\n  } // https://en.wikipedia.org/wiki/Breadth-first_search\r\n\r\n\r\n  function deriveBFS$2(fromModel) {\r\n    var graph = buildGraph$2();\r\n    var queue = [fromModel]; // unshift -> queue -> pop\r\n\r\n    graph[fromModel].distance = 0;\r\n\r\n    while (queue.length) {\r\n      var current = queue.pop();\r\n      var adjacents = Object.keys(conversions$2[current]);\r\n\r\n      for (var len = adjacents.length, i = 0; i < len; i++) {\r\n        var adjacent = adjacents[i];\r\n        var node = graph[adjacent];\r\n\r\n        if (node.distance === -1) {\r\n          node.distance = graph[current].distance + 1;\r\n          node.parent = current;\r\n          queue.unshift(adjacent);\r\n        }\r\n      }\r\n    }\r\n\r\n    return graph;\r\n  }\r\n\r\n  function link$2(from, to) {\r\n    return function (args) {\r\n      return to(from(args));\r\n    };\r\n  }\r\n\r\n  function wrapConversion$2(toModel, graph) {\r\n    var path = [graph[toModel].parent, toModel];\r\n    var fn = conversions$2[graph[toModel].parent][toModel];\r\n    var cur = graph[toModel].parent;\r\n\r\n    while (graph[cur].parent) {\r\n      path.unshift(graph[cur].parent);\r\n      fn = link$2(conversions$2[graph[cur].parent][cur], fn);\r\n      cur = graph[cur].parent;\r\n    }\r\n\r\n    fn.conversion = path;\r\n    return fn;\r\n  }\r\n\r\n  var route$2 = function route(fromModel) {\r\n    var graph = deriveBFS$2(fromModel);\r\n    var conversion = {};\r\n    var models = Object.keys(graph);\r\n\r\n    for (var len = models.length, i = 0; i < len; i++) {\r\n      var toModel = models[i];\r\n      var node = graph[toModel];\r\n\r\n      if (node.parent === null) {\r\n        // no possible conversion, or this node is the source model.\r\n        continue;\r\n      }\r\n\r\n      conversion[toModel] = wrapConversion$2(toModel, graph);\r\n    }\r\n\r\n    return conversion;\r\n  };\r\n\r\n  var convert$3 = {};\r\n  var models$2 = Object.keys(conversions$2);\r\n\r\n  function wrapRaw$2(fn) {\r\n    var wrappedFn = function wrappedFn(args) {\r\n      if (args === undefined || args === null) {\r\n        return args;\r\n      }\r\n\r\n      if (arguments.length > 1) {\r\n        args = Array.prototype.slice.call(arguments);\r\n      }\r\n\r\n      return fn(args);\r\n    }; // preserve .conversion property if there is one\r\n\r\n\r\n    if ('conversion' in fn) {\r\n      wrappedFn.conversion = fn.conversion;\r\n    }\r\n\r\n    return wrappedFn;\r\n  }\r\n\r\n  function wrapRounded$2(fn) {\r\n    var wrappedFn = function wrappedFn(args) {\r\n      if (args === undefined || args === null) {\r\n        return args;\r\n      }\r\n\r\n      if (arguments.length > 1) {\r\n        args = Array.prototype.slice.call(arguments);\r\n      }\r\n\r\n      var result = fn(args); // we're assuming the result is an array here.\r\n      // see notice in conversions.js; don't use box types\r\n      // in conversion functions.\r\n\r\n      if (typeof result === 'object') {\r\n        for (var len = result.length, i = 0; i < len; i++) {\r\n          result[i] = Math.round(result[i]);\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }; // preserve .conversion property if there is one\r\n\r\n\r\n    if ('conversion' in fn) {\r\n      wrappedFn.conversion = fn.conversion;\r\n    }\r\n\r\n    return wrappedFn;\r\n  }\r\n\r\n  models$2.forEach(function (fromModel) {\r\n    convert$3[fromModel] = {};\r\n    Object.defineProperty(convert$3[fromModel], 'channels', {\r\n      value: conversions$2[fromModel].channels\r\n    });\r\n    Object.defineProperty(convert$3[fromModel], 'labels', {\r\n      value: conversions$2[fromModel].labels\r\n    });\r\n    var routes = route$2(fromModel);\r\n    var routeModels = Object.keys(routes);\r\n    routeModels.forEach(function (toModel) {\r\n      var fn = routes[toModel];\r\n      convert$3[fromModel][toModel] = wrapRounded$2(fn);\r\n      convert$3[fromModel][toModel].raw = wrapRaw$2(fn);\r\n    });\r\n  });\r\n  var colorConvert$2 = convert$3;\r\n\r\n  var ansiStyles$2 = createCommonjsModule(function (module) {\r\n\r\n    const wrapAnsi16 = (fn, offset) => function () {\r\n      const code = fn.apply(colorConvert$2, arguments);\r\n      return \"\\x1B[\".concat(code + offset, \"m\");\r\n    };\r\n\r\n    const wrapAnsi256 = (fn, offset) => function () {\r\n      const code = fn.apply(colorConvert$2, arguments);\r\n      return \"\\x1B[\".concat(38 + offset, \";5;\").concat(code, \"m\");\r\n    };\r\n\r\n    const wrapAnsi16m = (fn, offset) => function () {\r\n      const rgb = fn.apply(colorConvert$2, arguments);\r\n      return \"\\x1B[\".concat(38 + offset, \";2;\").concat(rgb[0], \";\").concat(rgb[1], \";\").concat(rgb[2], \"m\");\r\n    };\r\n\r\n    function assembleStyles() {\r\n      const codes = new Map();\r\n      const styles = {\r\n        modifier: {\r\n          reset: [0, 0],\r\n          // 21 isn't widely supported and 22 does the same thing\r\n          bold: [1, 22],\r\n          dim: [2, 22],\r\n          italic: [3, 23],\r\n          underline: [4, 24],\r\n          inverse: [7, 27],\r\n          hidden: [8, 28],\r\n          strikethrough: [9, 29]\r\n        },\r\n        color: {\r\n          black: [30, 39],\r\n          red: [31, 39],\r\n          green: [32, 39],\r\n          yellow: [33, 39],\r\n          blue: [34, 39],\r\n          magenta: [35, 39],\r\n          cyan: [36, 39],\r\n          white: [37, 39],\r\n          gray: [90, 39],\r\n          // Bright color\r\n          redBright: [91, 39],\r\n          greenBright: [92, 39],\r\n          yellowBright: [93, 39],\r\n          blueBright: [94, 39],\r\n          magentaBright: [95, 39],\r\n          cyanBright: [96, 39],\r\n          whiteBright: [97, 39]\r\n        },\r\n        bgColor: {\r\n          bgBlack: [40, 49],\r\n          bgRed: [41, 49],\r\n          bgGreen: [42, 49],\r\n          bgYellow: [43, 49],\r\n          bgBlue: [44, 49],\r\n          bgMagenta: [45, 49],\r\n          bgCyan: [46, 49],\r\n          bgWhite: [47, 49],\r\n          // Bright color\r\n          bgBlackBright: [100, 49],\r\n          bgRedBright: [101, 49],\r\n          bgGreenBright: [102, 49],\r\n          bgYellowBright: [103, 49],\r\n          bgBlueBright: [104, 49],\r\n          bgMagentaBright: [105, 49],\r\n          bgCyanBright: [106, 49],\r\n          bgWhiteBright: [107, 49]\r\n        }\r\n      }; // Fix humans\r\n\r\n      styles.color.grey = styles.color.gray;\r\n\r\n      for (const groupName of Object.keys(styles)) {\r\n        const group = styles[groupName];\r\n\r\n        for (const styleName of Object.keys(group)) {\r\n          const style = group[styleName];\r\n          styles[styleName] = {\r\n            open: \"\\x1B[\".concat(style[0], \"m\"),\r\n            close: \"\\x1B[\".concat(style[1], \"m\")\r\n          };\r\n          group[styleName] = styles[styleName];\r\n          codes.set(style[0], style[1]);\r\n        }\r\n\r\n        Object.defineProperty(styles, groupName, {\r\n          value: group,\r\n          enumerable: false\r\n        });\r\n        Object.defineProperty(styles, 'codes', {\r\n          value: codes,\r\n          enumerable: false\r\n        });\r\n      }\r\n\r\n      const ansi2ansi = n => n;\r\n\r\n      const rgb2rgb = (r, g, b) => [r, g, b];\r\n\r\n      styles.color.close = '\\u001B[39m';\r\n      styles.bgColor.close = '\\u001B[49m';\r\n      styles.color.ansi = {\r\n        ansi: wrapAnsi16(ansi2ansi, 0)\r\n      };\r\n      styles.color.ansi256 = {\r\n        ansi256: wrapAnsi256(ansi2ansi, 0)\r\n      };\r\n      styles.color.ansi16m = {\r\n        rgb: wrapAnsi16m(rgb2rgb, 0)\r\n      };\r\n      styles.bgColor.ansi = {\r\n        ansi: wrapAnsi16(ansi2ansi, 10)\r\n      };\r\n      styles.bgColor.ansi256 = {\r\n        ansi256: wrapAnsi256(ansi2ansi, 10)\r\n      };\r\n      styles.bgColor.ansi16m = {\r\n        rgb: wrapAnsi16m(rgb2rgb, 10)\r\n      };\r\n\r\n      for (let key of Object.keys(colorConvert$2)) {\r\n        if (typeof colorConvert$2[key] !== 'object') {\r\n          continue;\r\n        }\r\n\r\n        const suite = colorConvert$2[key];\r\n\r\n        if (key === 'ansi16') {\r\n          key = 'ansi';\r\n        }\r\n\r\n        if ('ansi16' in suite) {\r\n          styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);\r\n          styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);\r\n        }\r\n\r\n        if ('ansi256' in suite) {\r\n          styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);\r\n          styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);\r\n        }\r\n\r\n        if ('rgb' in suite) {\r\n          styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);\r\n          styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);\r\n        }\r\n      }\r\n\r\n      return styles;\r\n    } // Make the export immutable\r\n\r\n\r\n    Object.defineProperty(module, 'exports', {\r\n      enumerable: true,\r\n      get: assembleStyles\r\n    });\r\n  });\r\n\r\n  const env$3 = process.env;\r\n  let forceColor$2;\r\n\r\n  if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false')) {\r\n    forceColor$2 = false;\r\n  } else if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true') || hasFlag('color=always')) {\r\n    forceColor$2 = true;\r\n  }\r\n\r\n  if ('FORCE_COLOR' in env$3) {\r\n    forceColor$2 = env$3.FORCE_COLOR.length === 0 || parseInt(env$3.FORCE_COLOR, 10) !== 0;\r\n  }\r\n\r\n  function translateLevel$2(level) {\r\n    if (level === 0) {\r\n      return false;\r\n    }\r\n\r\n    return {\r\n      level,\r\n      hasBasic: true,\r\n      has256: level >= 2,\r\n      has16m: level >= 3\r\n    };\r\n  }\r\n\r\n  function supportsColor$2(stream) {\r\n    if (forceColor$2 === false) {\r\n      return 0;\r\n    }\r\n\r\n    if (hasFlag('color=16m') || hasFlag('color=full') || hasFlag('color=truecolor')) {\r\n      return 3;\r\n    }\r\n\r\n    if (hasFlag('color=256')) {\r\n      return 2;\r\n    }\r\n\r\n    if (stream && !stream.isTTY && forceColor$2 !== true) {\r\n      return 0;\r\n    }\r\n\r\n    const min = forceColor$2 ? 1 : 0;\r\n\r\n    if (process.platform === 'win32') {\r\n      // Node.js 7.5.0 is the first version of Node.js to include a patch to\r\n      // libuv that enables 256 color output on Windows. Anything earlier and it\r\n      // won't work. However, here we target Node.js 8 at minimum as it is an LTS\r\n      // release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows\r\n      // release that supports 256 colors. Windows 10 build 14931 is the first release\r\n      // that supports 16m/TrueColor.\r\n      const osRelease = require$$0$1.release().split('.');\r\n\r\n      if (Number(process.versions.node.split('.')[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {\r\n        return Number(osRelease[2]) >= 14931 ? 3 : 2;\r\n      }\r\n\r\n      return 1;\r\n    }\r\n\r\n    if ('CI' in env$3) {\r\n      if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env$3) || env$3.CI_NAME === 'codeship') {\r\n        return 1;\r\n      }\r\n\r\n      return min;\r\n    }\r\n\r\n    if ('TEAMCITY_VERSION' in env$3) {\r\n      return /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env$3.TEAMCITY_VERSION) ? 1 : 0;\r\n    }\r\n\r\n    if (env$3.COLORTERM === 'truecolor') {\r\n      return 3;\r\n    }\r\n\r\n    if ('TERM_PROGRAM' in env$3) {\r\n      const version = parseInt((env$3.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\r\n\r\n      switch (env$3.TERM_PROGRAM) {\r\n        case 'iTerm.app':\r\n          return version >= 3 ? 3 : 2;\r\n\r\n        case 'Apple_Terminal':\r\n          return 2;\r\n        // No default\r\n      }\r\n    }\r\n\r\n    if (/-256(color)?$/i.test(env$3.TERM)) {\r\n      return 2;\r\n    }\r\n\r\n    if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env$3.TERM)) {\r\n      return 1;\r\n    }\r\n\r\n    if ('COLORTERM' in env$3) {\r\n      return 1;\r\n    }\r\n\r\n    if (env$3.TERM === 'dumb') {\r\n      return min;\r\n    }\r\n\r\n    return min;\r\n  }\r\n\r\n  function getSupportLevel$2(stream) {\r\n    const level = supportsColor$2(stream);\r\n    return translateLevel$2(level);\r\n  }\r\n\r\n  var supportsColor_1$2 = {\r\n    supportsColor: getSupportLevel$2,\r\n    stdout: getSupportLevel$2(process.stdout),\r\n    stderr: getSupportLevel$2(process.stderr)\r\n  };\r\n\r\n  const TEMPLATE_REGEX$2 = /(?:\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\r\n  const STYLE_REGEX$2 = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\r\n  const STRING_REGEX$2 = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\r\n  const ESCAPE_REGEX$2 = /\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.)|([^\\\\])/gi;\r\n  const ESCAPES$2 = new Map([['n', '\\n'], ['r', '\\r'], ['t', '\\t'], ['b', '\\b'], ['f', '\\f'], ['v', '\\v'], ['0', '\\0'], ['\\\\', '\\\\'], ['e', '\\u001B'], ['a', '\\u0007']]);\r\n\r\n  function unescape$2(c) {\r\n    if (c[0] === 'u' && c.length === 5 || c[0] === 'x' && c.length === 3) {\r\n      return String.fromCharCode(parseInt(c.slice(1), 16));\r\n    }\r\n\r\n    return ESCAPES$2.get(c) || c;\r\n  }\r\n\r\n  function parseArguments$2(name, args) {\r\n    const results = [];\r\n    const chunks = args.trim().split(/\\s*,\\s*/g);\r\n    let matches;\r\n\r\n    for (const chunk of chunks) {\r\n      if (!isNaN(chunk)) {\r\n        results.push(Number(chunk));\r\n      } else if (matches = chunk.match(STRING_REGEX$2)) {\r\n        results.push(matches[2].replace(ESCAPE_REGEX$2, (m, escape, chr) => escape ? unescape$2(escape) : chr));\r\n      } else {\r\n        throw new Error(\"Invalid Chalk template style argument: \".concat(chunk, \" (in style '\").concat(name, \"')\"));\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  function parseStyle$2(style) {\r\n    STYLE_REGEX$2.lastIndex = 0;\r\n    const results = [];\r\n    let matches;\r\n\r\n    while ((matches = STYLE_REGEX$2.exec(style)) !== null) {\r\n      const name = matches[1];\r\n\r\n      if (matches[2]) {\r\n        const args = parseArguments$2(name, matches[2]);\r\n        results.push([name].concat(args));\r\n      } else {\r\n        results.push([name]);\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  function buildStyle$2(chalk, styles) {\r\n    const enabled = {};\r\n\r\n    for (const layer of styles) {\r\n      for (const style of layer.styles) {\r\n        enabled[style[0]] = layer.inverse ? null : style.slice(1);\r\n      }\r\n    }\r\n\r\n    let current = chalk;\r\n\r\n    for (const styleName of Object.keys(enabled)) {\r\n      if (Array.isArray(enabled[styleName])) {\r\n        if (!(styleName in current)) {\r\n          throw new Error(\"Unknown Chalk style: \".concat(styleName));\r\n        }\r\n\r\n        if (enabled[styleName].length > 0) {\r\n          current = current[styleName].apply(current, enabled[styleName]);\r\n        } else {\r\n          current = current[styleName];\r\n        }\r\n      }\r\n    }\r\n\r\n    return current;\r\n  }\r\n\r\n  var templates$2 = (chalk, tmp) => {\r\n    const styles = [];\r\n    const chunks = [];\r\n    let chunk = []; // eslint-disable-next-line max-params\r\n\r\n    tmp.replace(TEMPLATE_REGEX$2, (m, escapeChar, inverse, style, close, chr) => {\r\n      if (escapeChar) {\r\n        chunk.push(unescape$2(escapeChar));\r\n      } else if (style) {\r\n        const str = chunk.join('');\r\n        chunk = [];\r\n        chunks.push(styles.length === 0 ? str : buildStyle$2(chalk, styles)(str));\r\n        styles.push({\r\n          inverse,\r\n          styles: parseStyle$2(style)\r\n        });\r\n      } else if (close) {\r\n        if (styles.length === 0) {\r\n          throw new Error('Found extraneous } in Chalk template literal');\r\n        }\r\n\r\n        chunks.push(buildStyle$2(chalk, styles)(chunk.join('')));\r\n        chunk = [];\r\n        styles.pop();\r\n      } else {\r\n        chunk.push(chr);\r\n      }\r\n    });\r\n    chunks.push(chunk.join(''));\r\n\r\n    if (styles.length > 0) {\r\n      const errMsg = \"Chalk template literal is missing \".concat(styles.length, \" closing bracket\").concat(styles.length === 1 ? '' : 's', \" (`}`)\");\r\n      throw new Error(errMsg);\r\n    }\r\n\r\n    return chunks.join('');\r\n  };\r\n\r\n  var chalk$2 = createCommonjsModule(function (module) {\r\n\r\n    const stdoutColor = supportsColor_1$2.stdout;\r\n    const isSimpleWindowsTerm = process.platform === 'win32' && !(process.env.TERM || '').toLowerCase().startsWith('xterm'); // `supportsColor.level` → `ansiStyles.color[name]` mapping\r\n\r\n    const levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m']; // `color-convert` models to exclude from the Chalk API due to conflicts and such\r\n\r\n    const skipModels = new Set(['gray']);\r\n    const styles = Object.create(null);\r\n\r\n    function applyOptions(obj, options) {\r\n      options = options || {}; // Detect level if not set manually\r\n\r\n      const scLevel = stdoutColor ? stdoutColor.level : 0;\r\n      obj.level = options.level === undefined ? scLevel : options.level;\r\n      obj.enabled = 'enabled' in options ? options.enabled : obj.level > 0;\r\n    }\r\n\r\n    function Chalk(options) {\r\n      // We check for this.template here since calling `chalk.constructor()`\r\n      // by itself will have a `this` of a previously constructed chalk object\r\n      if (!this || !(this instanceof Chalk) || this.template) {\r\n        const chalk = {};\r\n        applyOptions(chalk, options);\r\n\r\n        chalk.template = function () {\r\n          const args = [].slice.call(arguments);\r\n          return chalkTag.apply(null, [chalk.template].concat(args));\r\n        };\r\n\r\n        Object.setPrototypeOf(chalk, Chalk.prototype);\r\n        Object.setPrototypeOf(chalk.template, chalk);\r\n        chalk.template.constructor = Chalk;\r\n        return chalk.template;\r\n      }\r\n\r\n      applyOptions(this, options);\r\n    } // Use bright blue on Windows as the normal blue color is illegible\r\n\r\n\r\n    if (isSimpleWindowsTerm) {\r\n      ansiStyles$2.blue.open = '\\u001B[94m';\r\n    }\r\n\r\n    for (const key of Object.keys(ansiStyles$2)) {\r\n      ansiStyles$2[key].closeRe = new RegExp(escapeStringRegexp$1(ansiStyles$2[key].close), 'g');\r\n      styles[key] = {\r\n        get() {\r\n          const codes = ansiStyles$2[key];\r\n          return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);\r\n        }\r\n\r\n      };\r\n    }\r\n\r\n    styles.visible = {\r\n      get() {\r\n        return build.call(this, this._styles || [], true, 'visible');\r\n      }\r\n\r\n    };\r\n    ansiStyles$2.color.closeRe = new RegExp(escapeStringRegexp$1(ansiStyles$2.color.close), 'g');\r\n\r\n    for (const model of Object.keys(ansiStyles$2.color.ansi)) {\r\n      if (skipModels.has(model)) {\r\n        continue;\r\n      }\r\n\r\n      styles[model] = {\r\n        get() {\r\n          const level = this.level;\r\n          return function () {\r\n            const open = ansiStyles$2.color[levelMapping[level]][model].apply(null, arguments);\r\n            const codes = {\r\n              open,\r\n              close: ansiStyles$2.color.close,\r\n              closeRe: ansiStyles$2.color.closeRe\r\n            };\r\n            return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);\r\n          };\r\n        }\r\n\r\n      };\r\n    }\r\n\r\n    ansiStyles$2.bgColor.closeRe = new RegExp(escapeStringRegexp$1(ansiStyles$2.bgColor.close), 'g');\r\n\r\n    for (const model of Object.keys(ansiStyles$2.bgColor.ansi)) {\r\n      if (skipModels.has(model)) {\r\n        continue;\r\n      }\r\n\r\n      const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\r\n      styles[bgModel] = {\r\n        get() {\r\n          const level = this.level;\r\n          return function () {\r\n            const open = ansiStyles$2.bgColor[levelMapping[level]][model].apply(null, arguments);\r\n            const codes = {\r\n              open,\r\n              close: ansiStyles$2.bgColor.close,\r\n              closeRe: ansiStyles$2.bgColor.closeRe\r\n            };\r\n            return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);\r\n          };\r\n        }\r\n\r\n      };\r\n    }\r\n\r\n    const proto = Object.defineProperties(() => {}, styles);\r\n\r\n    function build(_styles, _empty, key) {\r\n      const builder = function builder() {\r\n        return applyStyle.apply(builder, arguments);\r\n      };\r\n\r\n      builder._styles = _styles;\r\n      builder._empty = _empty;\r\n      const self = this;\r\n      Object.defineProperty(builder, 'level', {\r\n        enumerable: true,\r\n\r\n        get() {\r\n          return self.level;\r\n        },\r\n\r\n        set(level) {\r\n          self.level = level;\r\n        }\r\n\r\n      });\r\n      Object.defineProperty(builder, 'enabled', {\r\n        enumerable: true,\r\n\r\n        get() {\r\n          return self.enabled;\r\n        },\r\n\r\n        set(enabled) {\r\n          self.enabled = enabled;\r\n        }\r\n\r\n      }); // See below for fix regarding invisible grey/dim combination on Windows\r\n\r\n      builder.hasGrey = this.hasGrey || key === 'gray' || key === 'grey'; // `__proto__` is used because we must return a function, but there is\r\n      // no way to create a function with a different prototype\r\n\r\n      builder.__proto__ = proto; // eslint-disable-line no-proto\r\n\r\n      return builder;\r\n    }\r\n\r\n    function applyStyle() {\r\n      // Support varags, but simply cast to string in case there's only one arg\r\n      const args = arguments;\r\n      const argsLen = args.length;\r\n      let str = String(arguments[0]);\r\n\r\n      if (argsLen === 0) {\r\n        return '';\r\n      }\r\n\r\n      if (argsLen > 1) {\r\n        // Don't slice `arguments`, it prevents V8 optimizations\r\n        for (let a = 1; a < argsLen; a++) {\r\n          str += ' ' + args[a];\r\n        }\r\n      }\r\n\r\n      if (!this.enabled || this.level <= 0 || !str) {\r\n        return this._empty ? '' : str;\r\n      } // Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,\r\n      // see https://github.com/chalk/chalk/issues/58\r\n      // If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.\r\n\r\n\r\n      const originalDim = ansiStyles$2.dim.open;\r\n\r\n      if (isSimpleWindowsTerm && this.hasGrey) {\r\n        ansiStyles$2.dim.open = '';\r\n      }\r\n\r\n      for (const code of this._styles.slice().reverse()) {\r\n        // Replace any instances already present with a re-opening code\r\n        // otherwise only the part of the string until said closing code\r\n        // will be colored, and the rest will simply be 'plain'.\r\n        str = code.open + str.replace(code.closeRe, code.open) + code.close; // Close the styling before a linebreak and reopen\r\n        // after next line to fix a bleed issue on macOS\r\n        // https://github.com/chalk/chalk/pull/92\r\n\r\n        str = str.replace(/\\r?\\n/g, \"\".concat(code.close, \"$&\").concat(code.open));\r\n      } // Reset the original `dim` if we changed it to work around the Windows dimmed gray issue\r\n\r\n\r\n      ansiStyles$2.dim.open = originalDim;\r\n      return str;\r\n    }\r\n\r\n    function chalkTag(chalk, strings) {\r\n      if (!Array.isArray(strings)) {\r\n        // If chalk() was called by itself or with a string,\r\n        // return the string itself as a string.\r\n        return [].slice.call(arguments, 1).join(' ');\r\n      }\r\n\r\n      const args = [].slice.call(arguments, 2);\r\n      const parts = [strings.raw[0]];\r\n\r\n      for (let i = 1; i < strings.length; i++) {\r\n        parts.push(String(args[i - 1]).replace(/[{}\\\\]/g, '\\\\$&'));\r\n        parts.push(String(strings.raw[i]));\r\n      }\r\n\r\n      return templates$2(chalk, parts.join(''));\r\n    }\r\n\r\n    Object.defineProperties(Chalk.prototype, styles);\r\n    module.exports = Chalk(); // eslint-disable-line new-cap\r\n\r\n    module.exports.supportsColor = stdoutColor;\r\n    module.exports.default = module.exports; // For TypeScript\r\n  });\r\n  var chalk_1$1 = chalk$2.supportsColor;\r\n\r\n  var lib$1 = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n    exports.shouldHighlight = shouldHighlight;\r\n    exports.getChalk = getChalk;\r\n    exports.default = highlight;\r\n\r\n    var _jsTokens = _interopRequireWildcard(jsTokens);\r\n\r\n    var _esutils = _interopRequireDefault(utils$1);\r\n\r\n    var _chalk = _interopRequireDefault(chalk$2);\r\n\r\n    function _interopRequireDefault(obj) {\r\n      return obj && obj.__esModule ? obj : {\r\n        default: obj\r\n      };\r\n    }\r\n\r\n    function _getRequireWildcardCache() {\r\n      if (typeof WeakMap !== \"function\") return null;\r\n      var cache = new WeakMap();\r\n\r\n      _getRequireWildcardCache = function _getRequireWildcardCache() {\r\n        return cache;\r\n      };\r\n\r\n      return cache;\r\n    }\r\n\r\n    function _interopRequireWildcard(obj) {\r\n      if (obj && obj.__esModule) {\r\n        return obj;\r\n      }\r\n\r\n      if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\r\n        return {\r\n          default: obj\r\n        };\r\n      }\r\n\r\n      var cache = _getRequireWildcardCache();\r\n\r\n      if (cache && cache.has(obj)) {\r\n        return cache.get(obj);\r\n      }\r\n\r\n      var newObj = {};\r\n      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\r\n\r\n      for (var key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\r\n\r\n          if (desc && (desc.get || desc.set)) {\r\n            Object.defineProperty(newObj, key, desc);\r\n          } else {\r\n            newObj[key] = obj[key];\r\n          }\r\n        }\r\n      }\r\n\r\n      newObj.default = obj;\r\n\r\n      if (cache) {\r\n        cache.set(obj, newObj);\r\n      }\r\n\r\n      return newObj;\r\n    }\r\n\r\n    function getDefs(chalk) {\r\n      return {\r\n        keyword: chalk.cyan,\r\n        capitalized: chalk.yellow,\r\n        jsx_tag: chalk.yellow,\r\n        punctuator: chalk.yellow,\r\n        number: chalk.magenta,\r\n        string: chalk.green,\r\n        regex: chalk.magenta,\r\n        comment: chalk.grey,\r\n        invalid: chalk.white.bgRed.bold\r\n      };\r\n    }\r\n\r\n    const NEWLINE = /\\r\\n|[\\n\\r\\u2028\\u2029]/;\r\n    const JSX_TAG = /^[a-z][\\w-]*$/i;\r\n    const BRACKET = /^[()[\\]{}]$/;\r\n\r\n    function getTokenType(match) {\r\n      const [offset, text] = match.slice(-2);\r\n      const token = (0, _jsTokens.matchToToken)(match);\r\n\r\n      if (token.type === \"name\") {\r\n        if (_esutils.default.keyword.isReservedWordES6(token.value)) {\r\n          return \"keyword\";\r\n        }\r\n\r\n        if (JSX_TAG.test(token.value) && (text[offset - 1] === \"<\" || text.substr(offset - 2, 2) == \"</\")) {\r\n          return \"jsx_tag\";\r\n        }\r\n\r\n        if (token.value[0] !== token.value[0].toLowerCase()) {\r\n          return \"capitalized\";\r\n        }\r\n      }\r\n\r\n      if (token.type === \"punctuator\" && BRACKET.test(token.value)) {\r\n        return \"bracket\";\r\n      }\r\n\r\n      if (token.type === \"invalid\" && (token.value === \"@\" || token.value === \"#\")) {\r\n        return \"punctuator\";\r\n      }\r\n\r\n      return token.type;\r\n    }\r\n\r\n    function highlightTokens(defs, text) {\r\n      return text.replace(_jsTokens.default, function (...args) {\r\n        const type = getTokenType(args);\r\n        const colorize = defs[type];\r\n\r\n        if (colorize) {\r\n          return args[0].split(NEWLINE).map(str => colorize(str)).join(\"\\n\");\r\n        } else {\r\n          return args[0];\r\n        }\r\n      });\r\n    }\r\n\r\n    function shouldHighlight(options) {\r\n      return _chalk.default.supportsColor || options.forceColor;\r\n    }\r\n\r\n    function getChalk(options) {\r\n      let chalk = _chalk.default;\r\n\r\n      if (options.forceColor) {\r\n        chalk = new _chalk.default.constructor({\r\n          enabled: true,\r\n          level: 1\r\n        });\r\n      }\r\n\r\n      return chalk;\r\n    }\r\n\r\n    function highlight(code, options = {}) {\r\n      if (shouldHighlight(options)) {\r\n        const chalk = getChalk(options);\r\n        const defs = getDefs(chalk);\r\n        return highlightTokens(defs, code);\r\n      } else {\r\n        return code;\r\n      }\r\n    }\r\n  });\r\n  unwrapExports(lib$1);\r\n  var lib_1 = lib$1.shouldHighlight;\r\n  var lib_2 = lib$1.getChalk;\r\n\r\n  var lib$2 = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, \"__esModule\", {\r\n      value: true\r\n    });\r\n    exports.codeFrameColumns = codeFrameColumns;\r\n    exports.default = _default;\r\n\r\n    var _highlight = _interopRequireWildcard(lib$1);\r\n\r\n    function _getRequireWildcardCache() {\r\n      if (typeof WeakMap !== \"function\") return null;\r\n      var cache = new WeakMap();\r\n\r\n      _getRequireWildcardCache = function _getRequireWildcardCache() {\r\n        return cache;\r\n      };\r\n\r\n      return cache;\r\n    }\r\n\r\n    function _interopRequireWildcard(obj) {\r\n      if (obj && obj.__esModule) {\r\n        return obj;\r\n      }\r\n\r\n      if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\r\n        return {\r\n          default: obj\r\n        };\r\n      }\r\n\r\n      var cache = _getRequireWildcardCache();\r\n\r\n      if (cache && cache.has(obj)) {\r\n        return cache.get(obj);\r\n      }\r\n\r\n      var newObj = {};\r\n      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\r\n\r\n      for (var key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\r\n\r\n          if (desc && (desc.get || desc.set)) {\r\n            Object.defineProperty(newObj, key, desc);\r\n          } else {\r\n            newObj[key] = obj[key];\r\n          }\r\n        }\r\n      }\r\n\r\n      newObj.default = obj;\r\n\r\n      if (cache) {\r\n        cache.set(obj, newObj);\r\n      }\r\n\r\n      return newObj;\r\n    }\r\n\r\n    let deprecationWarningShown = false;\r\n\r\n    function getDefs(chalk) {\r\n      return {\r\n        gutter: chalk.grey,\r\n        marker: chalk.red.bold,\r\n        message: chalk.red.bold\r\n      };\r\n    }\r\n\r\n    const NEWLINE = /\\r\\n|[\\n\\r\\u2028\\u2029]/;\r\n\r\n    function getMarkerLines(loc, source, opts) {\r\n      const startLoc = Object.assign({\r\n        column: 0,\r\n        line: -1\r\n      }, loc.start);\r\n      const endLoc = Object.assign({}, startLoc, {}, loc.end);\r\n      const {\r\n        linesAbove = 2,\r\n        linesBelow = 3\r\n      } = opts || {};\r\n      const startLine = startLoc.line;\r\n      const startColumn = startLoc.column;\r\n      const endLine = endLoc.line;\r\n      const endColumn = endLoc.column;\r\n      let start = Math.max(startLine - (linesAbove + 1), 0);\r\n      let end = Math.min(source.length, endLine + linesBelow);\r\n\r\n      if (startLine === -1) {\r\n        start = 0;\r\n      }\r\n\r\n      if (endLine === -1) {\r\n        end = source.length;\r\n      }\r\n\r\n      const lineDiff = endLine - startLine;\r\n      const markerLines = {};\r\n\r\n      if (lineDiff) {\r\n        for (let i = 0; i <= lineDiff; i++) {\r\n          const lineNumber = i + startLine;\r\n\r\n          if (!startColumn) {\r\n            markerLines[lineNumber] = true;\r\n          } else if (i === 0) {\r\n            const sourceLength = source[lineNumber - 1].length;\r\n            markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];\r\n          } else if (i === lineDiff) {\r\n            markerLines[lineNumber] = [0, endColumn];\r\n          } else {\r\n            const sourceLength = source[lineNumber - i].length;\r\n            markerLines[lineNumber] = [0, sourceLength];\r\n          }\r\n        }\r\n      } else {\r\n        if (startColumn === endColumn) {\r\n          if (startColumn) {\r\n            markerLines[startLine] = [startColumn, 0];\r\n          } else {\r\n            markerLines[startLine] = true;\r\n          }\r\n        } else {\r\n          markerLines[startLine] = [startColumn, endColumn - startColumn];\r\n        }\r\n      }\r\n\r\n      return {\r\n        start,\r\n        end,\r\n        markerLines\r\n      };\r\n    }\r\n\r\n    function codeFrameColumns(rawLines, loc, opts = {}) {\r\n      const highlighted = (opts.highlightCode || opts.forceColor) && (0, _highlight.shouldHighlight)(opts);\r\n      const chalk = (0, _highlight.getChalk)(opts);\r\n      const defs = getDefs(chalk);\r\n\r\n      const maybeHighlight = (chalkFn, string) => {\r\n        return highlighted ? chalkFn(string) : string;\r\n      };\r\n\r\n      const lines = rawLines.split(NEWLINE);\r\n      const {\r\n        start,\r\n        end,\r\n        markerLines\r\n      } = getMarkerLines(loc, lines, opts);\r\n      const hasColumns = loc.start && typeof loc.start.column === \"number\";\r\n      const numberMaxWidth = String(end).length;\r\n      const highlightedLines = highlighted ? (0, _highlight.default)(rawLines, opts) : rawLines;\r\n      let frame = highlightedLines.split(NEWLINE).slice(start, end).map((line, index) => {\r\n        const number = start + 1 + index;\r\n        const paddedNumber = \" \".concat(number).slice(-numberMaxWidth);\r\n        const gutter = \" \".concat(paddedNumber, \" | \");\r\n        const hasMarker = markerLines[number];\r\n        const lastMarkerLine = !markerLines[number + 1];\r\n\r\n        if (hasMarker) {\r\n          let markerLine = \"\";\r\n\r\n          if (Array.isArray(hasMarker)) {\r\n            const markerSpacing = line.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\\t]/g, \" \");\r\n            const numberOfMarkers = hasMarker[1] || 1;\r\n            markerLine = [\"\\n \", maybeHighlight(defs.gutter, gutter.replace(/\\d/g, \" \")), markerSpacing, maybeHighlight(defs.marker, \"^\").repeat(numberOfMarkers)].join(\"\");\r\n\r\n            if (lastMarkerLine && opts.message) {\r\n              markerLine += \" \" + maybeHighlight(defs.message, opts.message);\r\n            }\r\n          }\r\n\r\n          return [maybeHighlight(defs.marker, \">\"), maybeHighlight(defs.gutter, gutter), line, markerLine].join(\"\");\r\n        } else {\r\n          return \" \".concat(maybeHighlight(defs.gutter, gutter)).concat(line);\r\n        }\r\n      }).join(\"\\n\");\r\n\r\n      if (opts.message && !hasColumns) {\r\n        frame = \"\".concat(\" \".repeat(numberMaxWidth + 1)).concat(opts.message, \"\\n\").concat(frame);\r\n      }\r\n\r\n      if (highlighted) {\r\n        return chalk.reset(frame);\r\n      } else {\r\n        return frame;\r\n      }\r\n    }\r\n\r\n    function _default(rawLines, lineNumber, colNumber, opts = {}) {\r\n      if (!deprecationWarningShown) {\r\n        deprecationWarningShown = true;\r\n        const message = \"Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.\";\r\n\r\n        if (process.emitWarning) {\r\n          process.emitWarning(message, \"DeprecationWarning\");\r\n        } else {\r\n          const deprecationError = new Error(message);\r\n          deprecationError.name = \"DeprecationWarning\";\r\n          console.warn(new Error(message));\r\n        }\r\n      }\r\n\r\n      colNumber = Math.max(colNumber, 0);\r\n      const location = {\r\n        start: {\r\n          column: colNumber,\r\n          line: lineNumber\r\n        }\r\n      };\r\n      return codeFrameColumns(rawLines, location, opts);\r\n    }\r\n  });\r\n  unwrapExports(lib$2);\r\n  var lib_1$1 = lib$2.codeFrameColumns;\r\n\r\n  const {\r\n    ConfigError: ConfigError$1\r\n  } = errors;\r\n  const {\r\n    locStart: locStart$1,\r\n    locEnd: locEnd$1\r\n  } = loc; // Use defineProperties()/getOwnPropertyDescriptor() to prevent\r\n  // triggering the parsers getters.\r\n\r\n  const ownNames = Object.getOwnPropertyNames;\r\n  const ownDescriptor = Object.getOwnPropertyDescriptor;\r\n\r\n  function getParsers(options) {\r\n    const parsers = {};\r\n\r\n    for (const plugin of options.plugins) {\r\n      if (!plugin.parsers) {\r\n        continue;\r\n      }\r\n\r\n      for (const name of ownNames(plugin.parsers)) {\r\n        Object.defineProperty(parsers, name, ownDescriptor(plugin.parsers, name));\r\n      }\r\n    }\r\n\r\n    return parsers;\r\n  }\r\n\r\n  function resolveParser(opts, parsers) {\r\n    parsers = parsers || getParsers(opts);\r\n\r\n    if (typeof opts.parser === \"function\") {\r\n      // Custom parser API always works with JavaScript.\r\n      return {\r\n        parse: opts.parser,\r\n        astFormat: \"estree\",\r\n        locStart: locStart$1,\r\n        locEnd: locEnd$1\r\n      };\r\n    }\r\n\r\n    if (typeof opts.parser === \"string\") {\r\n      if (Object.prototype.hasOwnProperty.call(parsers, opts.parser)) {\r\n        return parsers[opts.parser];\r\n      }\r\n      /* istanbul ignore next */\r\n\r\n\r\n      {\r\n        throw new ConfigError$1(\"Couldn't resolve parser \\\"\".concat(opts.parser, \"\\\". Parsers must be explicitly added to the standalone bundle.\"));\r\n      }\r\n    }\r\n  }\r\n\r\n  function parse(text, opts) {\r\n    const parsers = getParsers(opts); // Create a new object {parserName: parseFn}. Uses defineProperty() to only call\r\n    // the parsers getters when actually calling the parser `parse` function.\r\n\r\n    const parsersForCustomParserApi = Object.keys(parsers).reduce((object, parserName) => Object.defineProperty(object, parserName, {\r\n      enumerable: true,\r\n\r\n      get() {\r\n        return parsers[parserName].parse;\r\n      }\r\n\r\n    }), {});\r\n    const parser = resolveParser(opts, parsers);\r\n\r\n    try {\r\n      if (parser.preprocess) {\r\n        text = parser.preprocess(text, opts);\r\n      }\r\n\r\n      return {\r\n        text,\r\n        ast: parser.parse(text, parsersForCustomParserApi, opts)\r\n      };\r\n    } catch (error) {\r\n      const {\r\n        loc\r\n      } = error;\r\n\r\n      if (loc) {\r\n        const codeFrame = lib$2;\r\n        error.codeFrame = codeFrame.codeFrameColumns(text, loc, {\r\n          highlightCode: true\r\n        });\r\n        error.message += \"\\n\" + error.codeFrame;\r\n        throw error;\r\n      }\r\n      /* istanbul ignore next */\r\n\r\n\r\n      throw error.stack;\r\n    }\r\n  }\r\n\r\n  var parser = {\r\n    parse,\r\n    resolveParser\r\n  };\r\n\r\n  const {\r\n    UndefinedParserError: UndefinedParserError$1\r\n  } = errors;\r\n  const {\r\n    getSupportInfo: getSupportInfo$1\r\n  } = support;\r\n  const {\r\n    resolveParser: resolveParser$1\r\n  } = parser;\r\n  const hiddenDefaults = {\r\n    astFormat: \"estree\",\r\n    printer: {},\r\n    originalText: undefined,\r\n    locStart: null,\r\n    locEnd: null\r\n  }; // Copy options and fill in default values.\r\n\r\n  function normalize$1(options, opts) {\r\n    opts = opts || {};\r\n    const rawOptions = Object.assign({}, options);\r\n    const supportOptions = getSupportInfo$1({\r\n      plugins: options.plugins,\r\n      showUnreleased: true,\r\n      showDeprecated: true\r\n    }).options;\r\n    const defaults = Object.assign({}, hiddenDefaults, {}, fromPairs_1(supportOptions.filter(optionInfo => optionInfo.default !== undefined).map(option => [option.name, option.default])));\r\n\r\n    if (!rawOptions.parser) {\r\n      if (!rawOptions.filepath) {\r\n        const logger = opts.logger || console;\r\n        logger.warn(\"No parser and no filepath given, using 'babel' the parser now \" + \"but this will throw an error in the future. \" + \"Please specify a parser or a filepath so one can be inferred.\");\r\n        rawOptions.parser = \"babel\";\r\n      } else {\r\n        rawOptions.parser = inferParser(rawOptions.filepath, rawOptions.plugins);\r\n\r\n        if (!rawOptions.parser) {\r\n          throw new UndefinedParserError$1(\"No parser could be inferred for file: \".concat(rawOptions.filepath));\r\n        }\r\n      }\r\n    }\r\n\r\n    const parser = resolveParser$1(optionsNormalizer.normalizeApiOptions(rawOptions, [supportOptions.find(x => x.name === \"parser\")], {\r\n      passThrough: true,\r\n      logger: false\r\n    }));\r\n    rawOptions.astFormat = parser.astFormat;\r\n    rawOptions.locEnd = parser.locEnd;\r\n    rawOptions.locStart = parser.locStart;\r\n    const plugin = getPlugin(rawOptions);\r\n    rawOptions.printer = plugin.printers[rawOptions.astFormat];\r\n    const pluginDefaults = supportOptions.filter(optionInfo => optionInfo.pluginDefaults && optionInfo.pluginDefaults[plugin.name] !== undefined).reduce((reduced, optionInfo) => Object.assign(reduced, {\r\n      [optionInfo.name]: optionInfo.pluginDefaults[plugin.name]\r\n    }), {});\r\n    const mixedDefaults = Object.assign({}, defaults, {}, pluginDefaults);\r\n    Object.keys(mixedDefaults).forEach(k => {\r\n      if (rawOptions[k] == null) {\r\n        rawOptions[k] = mixedDefaults[k];\r\n      }\r\n    });\r\n\r\n    if (rawOptions.parser === \"json\") {\r\n      rawOptions.trailingComma = \"none\";\r\n    }\r\n\r\n    return optionsNormalizer.normalizeApiOptions(rawOptions, supportOptions, Object.assign({\r\n      passThrough: Object.keys(hiddenDefaults)\r\n    }, opts));\r\n  }\r\n\r\n  function getPlugin(options) {\r\n    const {\r\n      astFormat\r\n    } = options;\r\n\r\n    if (!astFormat) {\r\n      throw new Error(\"getPlugin() requires astFormat to be set\");\r\n    }\r\n\r\n    const printerPlugin = options.plugins.find(plugin => plugin.printers && plugin.printers[astFormat]);\r\n\r\n    if (!printerPlugin) {\r\n      throw new Error(\"Couldn't find plugin for AST format \\\"\".concat(astFormat, \"\\\"\"));\r\n    }\r\n\r\n    return printerPlugin;\r\n  }\r\n\r\n  function getInterpreter(filepath) {\r\n    if (typeof filepath !== \"string\") {\r\n      return \"\";\r\n    }\r\n\r\n    let fd;\r\n\r\n    try {\r\n      fd = fs.openSync(filepath, \"r\");\r\n    } catch (err) {\r\n      // istanbul ignore next\r\n      return \"\";\r\n    }\r\n\r\n    try {\r\n      const liner = new readlines(fd);\r\n      const firstLine = liner.next().toString(\"utf8\"); // #!/bin/env node, #!/usr/bin/env node\r\n\r\n      const m1 = firstLine.match(/^#!\\/(?:usr\\/)?bin\\/env\\s+(\\S+)/);\r\n\r\n      if (m1) {\r\n        return m1[1];\r\n      } // #!/bin/node, #!/usr/bin/node, #!/usr/local/bin/node\r\n\r\n\r\n      const m2 = firstLine.match(/^#!\\/(?:usr\\/(?:local\\/)?)?bin\\/(\\S+)/);\r\n\r\n      if (m2) {\r\n        return m2[1];\r\n      }\r\n\r\n      return \"\";\r\n    } catch (err) {\r\n      // There are some weird cases where paths are missing, causing Jest\r\n      // failures. It's unclear what these correspond to in the real world.\r\n      return \"\";\r\n    } finally {\r\n      try {\r\n        // There are some weird cases where paths are missing, causing Jest\r\n        // failures. It's unclear what these correspond to in the real world.\r\n        fs.closeSync(fd);\r\n      } catch (err) {// nop\r\n      }\r\n    }\r\n  }\r\n\r\n  function inferParser(filepath, plugins) {\r\n    const filename = path.basename(filepath).toLowerCase();\r\n    const languages = getSupportInfo$1({\r\n      plugins\r\n    }).languages.filter(language => language.since !== null); // If the file has no extension, we can try to infer the language from the\r\n    // interpreter in the shebang line, if any; but since this requires FS access,\r\n    // do it last.\r\n\r\n    let language = languages.find(language => language.extensions && language.extensions.some(extension => filename.endsWith(extension)) || language.filenames && language.filenames.find(name => name.toLowerCase() === filename));\r\n\r\n    if (!language && !filename.includes(\".\")) {\r\n      const interpreter = getInterpreter(filepath);\r\n      language = languages.find(language => language.interpreters && language.interpreters.includes(interpreter));\r\n    }\r\n\r\n    return language && language.parsers[0];\r\n  }\r\n\r\n  var options$1 = {\r\n    normalize: normalize$1,\r\n    hiddenDefaults,\r\n    inferParser\r\n  };\r\n\r\n  function massageAST(ast, options, parent) {\r\n    if (Array.isArray(ast)) {\r\n      return ast.map(e => massageAST(e, options, parent)).filter(Boolean);\r\n    }\r\n\r\n    if (!ast || typeof ast !== \"object\") {\r\n      return ast;\r\n    }\r\n\r\n    const newObj = {};\r\n\r\n    for (const key of Object.keys(ast)) {\r\n      if (typeof ast[key] !== \"function\") {\r\n        newObj[key] = massageAST(ast[key], options, ast);\r\n      }\r\n    }\r\n\r\n    if (options.printer.massageAstNode) {\r\n      const result = options.printer.massageAstNode(ast, newObj, parent);\r\n\r\n      if (result === null) {\r\n        return undefined;\r\n      }\r\n\r\n      if (result) {\r\n        return result;\r\n      }\r\n    }\r\n\r\n    return newObj;\r\n  }\r\n\r\n  var massageAst = massageAST;\r\n\r\n  function assert() {}\r\n\r\n  assert.ok = function () {};\r\n\r\n  assert.strictEqual = function () {};\r\n\r\n  /**\r\n   * @param {Doc[]} parts\r\n   * @returns Doc\r\n   */\r\n\r\n\r\n  function concat(parts) {\r\n    // access the internals of a document directly.\r\n    // if(parts.length === 1) {\r\n    //   // If it's a single document, no need to concat it.\r\n    //   return parts[0];\r\n    // }\r\n\r\n\r\n    return {\r\n      type: \"concat\",\r\n      parts\r\n    };\r\n  }\r\n  /**\r\n   * @param {Doc} contents\r\n   * @returns Doc\r\n   */\r\n\r\n\r\n  function indent(contents) {\r\n\r\n    return {\r\n      type: \"indent\",\r\n      contents\r\n    };\r\n  }\r\n  /**\r\n   * @param {number} n\r\n   * @param {Doc} contents\r\n   * @returns Doc\r\n   */\r\n\r\n\r\n  function align(n, contents) {\r\n\r\n    return {\r\n      type: \"align\",\r\n      contents,\r\n      n\r\n    };\r\n  }\r\n  /**\r\n   * @param {Doc} contents\r\n   * @param {object} [opts] - TBD ???\r\n   * @returns Doc\r\n   */\r\n\r\n\r\n  function group(contents, opts) {\r\n    opts = opts || {};\r\n\r\n    return {\r\n      type: \"group\",\r\n      id: opts.id,\r\n      contents,\r\n      break: !!opts.shouldBreak,\r\n      expandedStates: opts.expandedStates\r\n    };\r\n  }\r\n  /**\r\n   * @param {Doc} contents\r\n   * @returns Doc\r\n   */\r\n\r\n\r\n  function dedentToRoot(contents) {\r\n    return align(-Infinity, contents);\r\n  }\r\n  /**\r\n   * @param {Doc} contents\r\n   * @returns Doc\r\n   */\r\n\r\n\r\n  function markAsRoot(contents) {\r\n    // @ts-ignore - TBD ???:\r\n    return align({\r\n      type: \"root\"\r\n    }, contents);\r\n  }\r\n  /**\r\n   * @param {Doc} contents\r\n   * @returns Doc\r\n   */\r\n\r\n\r\n  function dedent(contents) {\r\n    return align(-1, contents);\r\n  }\r\n  /**\r\n   * @param {Doc[]} states\r\n   * @param {object} [opts] - TBD ???\r\n   * @returns Doc\r\n   */\r\n\r\n\r\n  function conditionalGroup(states, opts) {\r\n    return group(states[0], Object.assign({}, opts, {\r\n      expandedStates: states\r\n    }));\r\n  }\r\n  /**\r\n   * @param {Doc[]} parts\r\n   * @returns Doc\r\n   */\r\n\r\n\r\n  function fill(parts) {\r\n\r\n    return {\r\n      type: \"fill\",\r\n      parts\r\n    };\r\n  }\r\n  /**\r\n   * @param {Doc} [breakContents]\r\n   * @param {Doc} [flatContents]\r\n   * @param {object} [opts] - TBD ???\r\n   * @returns Doc\r\n   */\r\n\r\n\r\n  function ifBreak(breakContents, flatContents, opts) {\r\n    opts = opts || {};\r\n\r\n    return {\r\n      type: \"if-break\",\r\n      breakContents,\r\n      flatContents,\r\n      groupId: opts.groupId\r\n    };\r\n  }\r\n  /**\r\n   * @param {Doc} contents\r\n   * @returns Doc\r\n   */\r\n\r\n\r\n  function lineSuffix(contents) {\r\n\r\n    return {\r\n      type: \"line-suffix\",\r\n      contents\r\n    };\r\n  }\r\n\r\n  const lineSuffixBoundary = {\r\n    type: \"line-suffix-boundary\"\r\n  };\r\n  const breakParent = {\r\n    type: \"break-parent\"\r\n  };\r\n  const trim = {\r\n    type: \"trim\"\r\n  };\r\n  const line = {\r\n    type: \"line\"\r\n  };\r\n  const softline = {\r\n    type: \"line\",\r\n    soft: true\r\n  };\r\n  const hardline = concat([{\r\n    type: \"line\",\r\n    hard: true\r\n  }, breakParent]);\r\n  const literalline = concat([{\r\n    type: \"line\",\r\n    hard: true,\r\n    literal: true\r\n  }, breakParent]);\r\n  const cursor = {\r\n    type: \"cursor\",\r\n    placeholder: Symbol(\"cursor\")\r\n  };\r\n  /**\r\n   * @param {Doc} sep\r\n   * @param {Doc[]} arr\r\n   * @returns Doc\r\n   */\r\n\r\n  function join(sep, arr) {\r\n    const res = [];\r\n\r\n    for (let i = 0; i < arr.length; i++) {\r\n      if (i !== 0) {\r\n        res.push(sep);\r\n      }\r\n\r\n      res.push(arr[i]);\r\n    }\r\n\r\n    return concat(res);\r\n  }\r\n  /**\r\n   * @param {Doc} doc\r\n   * @param {number} size\r\n   * @param {number} tabWidth\r\n   */\r\n\r\n\r\n  function addAlignmentToDoc(doc, size, tabWidth) {\r\n    let aligned = doc;\r\n\r\n    if (size > 0) {\r\n      // Use indent to add tabs for all the levels of tabs we need\r\n      for (let i = 0; i < Math.floor(size / tabWidth); ++i) {\r\n        aligned = indent(aligned);\r\n      } // Use align for all the spaces that are needed\r\n\r\n\r\n      aligned = align(size % tabWidth, aligned); // size is absolute from 0 and not relative to the current\r\n      // indentation, so we use -Infinity to reset the indentation to 0\r\n\r\n      aligned = align(-Infinity, aligned);\r\n    }\r\n\r\n    return aligned;\r\n  }\r\n\r\n  var docBuilders = {\r\n    concat,\r\n    join,\r\n    line,\r\n    softline,\r\n    hardline,\r\n    literalline,\r\n    group,\r\n    conditionalGroup,\r\n    fill,\r\n    lineSuffix,\r\n    lineSuffixBoundary,\r\n    cursor,\r\n    breakParent,\r\n    ifBreak,\r\n    trim,\r\n    indent,\r\n    align,\r\n    addAlignmentToDoc,\r\n    markAsRoot,\r\n    dedentToRoot,\r\n    dedent\r\n  };\r\n\r\n  var ansiRegex = ({\r\n    onlyFirst = false\r\n  } = {}) => {\r\n    const pattern = ['[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:[a-zA-Z\\\\d]*(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)', '(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))'].join('|');\r\n    return new RegExp(pattern, onlyFirst ? undefined : 'g');\r\n  };\r\n\r\n  var stripAnsi = string => typeof string === 'string' ? string.replace(ansiRegex(), '') : string;\r\n\r\n  /* eslint-disable yoda */\r\n\r\n  const isFullwidthCodePoint = codePoint => {\r\n    if (Number.isNaN(codePoint)) {\r\n      return false;\r\n    } // Code points are derived from:\r\n    // http://www.unix.org/Public/UNIDATA/EastAsianWidth.txt\r\n\r\n\r\n    if (codePoint >= 0x1100 && (codePoint <= 0x115F || // Hangul Jamo\r\n    codePoint === 0x2329 || // LEFT-POINTING ANGLE BRACKET\r\n    codePoint === 0x232A || // RIGHT-POINTING ANGLE BRACKET\r\n    // CJK Radicals Supplement .. Enclosed CJK Letters and Months\r\n    0x2E80 <= codePoint && codePoint <= 0x3247 && codePoint !== 0x303F || // Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A\r\n    0x3250 <= codePoint && codePoint <= 0x4DBF || // CJK Unified Ideographs .. Yi Radicals\r\n    0x4E00 <= codePoint && codePoint <= 0xA4C6 || // Hangul Jamo Extended-A\r\n    0xA960 <= codePoint && codePoint <= 0xA97C || // Hangul Syllables\r\n    0xAC00 <= codePoint && codePoint <= 0xD7A3 || // CJK Compatibility Ideographs\r\n    0xF900 <= codePoint && codePoint <= 0xFAFF || // Vertical Forms\r\n    0xFE10 <= codePoint && codePoint <= 0xFE19 || // CJK Compatibility Forms .. Small Form Variants\r\n    0xFE30 <= codePoint && codePoint <= 0xFE6B || // Halfwidth and Fullwidth Forms\r\n    0xFF01 <= codePoint && codePoint <= 0xFF60 || 0xFFE0 <= codePoint && codePoint <= 0xFFE6 || // Kana Supplement\r\n    0x1B000 <= codePoint && codePoint <= 0x1B001 || // Enclosed Ideographic Supplement\r\n    0x1F200 <= codePoint && codePoint <= 0x1F251 || // CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane\r\n    0x20000 <= codePoint && codePoint <= 0x3FFFD)) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  var isFullwidthCodePoint_1 = isFullwidthCodePoint;\r\n  var default_1$1 = isFullwidthCodePoint;\r\n  isFullwidthCodePoint_1.default = default_1$1;\r\n\r\n  var emojiRegex = function emojiRegex() {\r\n    // https://mths.be/emoji\r\n    return /\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62(?:\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67|\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73)\\uDB40\\uDC7F|\\uD83D\\uDC68(?:\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C\\uDFFB|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFE])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83D\\uDC68|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D[\\uDC66\\uDC67])|[\\u2695\\u2696\\u2708]\\uFE0F|\\uD83D[\\uDC66\\uDC67]|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|(?:\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708])\\uFE0F|\\uD83C\\uDFFB\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C[\\uDFFB-\\uDFFF])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFB\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)\\uD83C\\uDFFB|\\uD83E\\uDDD1(?:\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1)|(?:\\uD83E\\uDDD1\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D(?:\\uD83D[\\uDC68\\uDC69]))(?:\\uD83C[\\uDFFB-\\uDFFE])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83D\\uDC69(?:\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFB\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFC-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]))|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|(?:\\uD83E\\uDDD1\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8|\\uD83D\\uDC69(?:\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708])|(?:(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)\\uFE0F|\\uD83D\\uDC6F|\\uD83E[\\uDD3C\\uDDDE\\uDDDF])\\u200D[\\u2640\\u2642]|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|\\u200D[\\u2640\\u2642])|\\uD83C\\uDFF4\\u200D\\u2620)\\uFE0F|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C\\uDFF3\\uFE0F\\u200D\\uD83C\\uDF08|\\uD83D\\uDC15\\u200D\\uD83E\\uDDBA|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83C\\uDDF6\\uD83C\\uDDE6|[#\\*0-9]\\uFE0F\\u20E3|\\uD83C\\uDDE7(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDF9(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF])|\\uD83C\\uDDEA(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA])|\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF7(?:\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC])|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF2(?:\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF])|\\uD83C\\uDDE6(?:\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF])|\\uD83C\\uDDF0(?:\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDED(?:\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA])|\\uD83C\\uDDE9(?:\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF])|\\uD83C\\uDDFE(?:\\uD83C[\\uDDEA\\uDDF9])|\\uD83C\\uDDEC(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE])|\\uD83C\\uDDF8(?:\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF])|\\uD83C\\uDDEB(?:\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7])|\\uD83C\\uDDF5(?:\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE])|\\uD83C\\uDDFB(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA])|\\uD83C\\uDDF3(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF])|\\uD83C\\uDDE8(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF])|\\uD83C\\uDDF1(?:\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE])|\\uD83C\\uDDFF(?:\\uD83C[\\uDDE6\\uDDF2\\uDDFC])|\\uD83C\\uDDFC(?:\\uD83C[\\uDDEB\\uDDF8])|\\uD83C\\uDDFA(?:\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF])|\\uD83C\\uDDEE(?:\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9])|\\uD83C\\uDDEF(?:\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC70\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDCAA\\uDD74\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD36\\uDDB5\\uDDB6\\uDDBB\\uDDD2-\\uDDD5])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5\\uDEEB\\uDEEC\\uDEF4-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDED5\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])\\uFE0F|(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDC8F\\uDC91\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3C-\\uDD3E\\uDDB5\\uDDB6\\uDDB8\\uDDB9\\uDDBB\\uDDCD-\\uDDCF\\uDDD1-\\uDDDD])/g;\r\n  };\r\n\r\n  const stringWidth = string => {\r\n    string = string.replace(emojiRegex(), '  ');\r\n\r\n    if (typeof string !== 'string' || string.length === 0) {\r\n      return 0;\r\n    }\r\n\r\n    string = stripAnsi(string);\r\n    let width = 0;\r\n\r\n    for (let i = 0; i < string.length; i++) {\r\n      const code = string.codePointAt(i); // Ignore control characters\r\n\r\n      if (code <= 0x1F || code >= 0x7F && code <= 0x9F) {\r\n        continue;\r\n      } // Ignore combining characters\r\n\r\n\r\n      if (code >= 0x300 && code <= 0x36F) {\r\n        continue;\r\n      } // Surrogates\r\n\r\n\r\n      if (code > 0xFFFF) {\r\n        i++;\r\n      }\r\n\r\n      width += isFullwidthCodePoint_1(code) ? 2 : 1;\r\n    }\r\n\r\n    return width;\r\n  };\r\n\r\n  var stringWidth_1 = stringWidth; // TODO: remove this in the next major version\r\n\r\n  var default_1$2 = stringWidth;\r\n  stringWidth_1.default = default_1$2;\r\n\r\n  const matchOperatorsRegex = /[|\\\\{}()[\\]^$+*?.-]/g;\r\n\r\n  var escapeStringRegexp$2 = string => {\r\n    if (typeof string !== 'string') {\r\n      throw new TypeError('Expected a string');\r\n    }\r\n\r\n    return string.replace(matchOperatorsRegex, '\\\\$&');\r\n  };\r\n\r\n  const notAsciiRegex = /[^\\x20-\\x7F]/;\r\n\r\n  function getPenultimate(arr) {\r\n    if (arr.length > 1) {\r\n      return arr[arr.length - 2];\r\n    }\r\n\r\n    return null;\r\n  }\r\n  /**\r\n   * @typedef {{backwards?: boolean}} SkipOptions\r\n   */\r\n\r\n  /**\r\n   * @param {string | RegExp} chars\r\n   * @returns {(text: string, index: number | false, opts?: SkipOptions) => number | false}\r\n   */\r\n\r\n\r\n  function skip(chars) {\r\n    return (text, index, opts) => {\r\n      const backwards = opts && opts.backwards; // Allow `skip` functions to be threaded together without having\r\n      // to check for failures (did someone say monads?).\r\n\r\n      if (index === false) {\r\n        return false;\r\n      }\r\n\r\n      const {\r\n        length\r\n      } = text;\r\n      let cursor = index;\r\n\r\n      while (cursor >= 0 && cursor < length) {\r\n        const c = text.charAt(cursor);\r\n\r\n        if (chars instanceof RegExp) {\r\n          if (!chars.test(c)) {\r\n            return cursor;\r\n          }\r\n        } else if (!chars.includes(c)) {\r\n          return cursor;\r\n        }\r\n\r\n        backwards ? cursor-- : cursor++;\r\n      }\r\n\r\n      if (cursor === -1 || cursor === length) {\r\n        // If we reached the beginning or end of the file, return the\r\n        // out-of-bounds cursor. It's up to the caller to handle this\r\n        // correctly. We don't want to indicate `false` though if it\r\n        // actually skipped valid characters.\r\n        return cursor;\r\n      }\r\n\r\n      return false;\r\n    };\r\n  }\r\n  /**\r\n   * @type {(text: string, index: number | false, opts?: SkipOptions) => number | false}\r\n   */\r\n\r\n\r\n  const skipWhitespace = skip(/\\s/);\r\n  /**\r\n   * @type {(text: string, index: number | false, opts?: SkipOptions) => number | false}\r\n   */\r\n\r\n  const skipSpaces = skip(\" \\t\");\r\n  /**\r\n   * @type {(text: string, index: number | false, opts?: SkipOptions) => number | false}\r\n   */\r\n\r\n  const skipToLineEnd = skip(\",; \\t\");\r\n  /**\r\n   * @type {(text: string, index: number | false, opts?: SkipOptions) => number | false}\r\n   */\r\n\r\n  const skipEverythingButNewLine = skip(/[^\\r\\n]/);\r\n  /**\r\n   * @param {string} text\r\n   * @param {number | false} index\r\n   * @returns {number | false}\r\n   */\r\n\r\n  function skipInlineComment(text, index) {\r\n    if (index === false) {\r\n      return false;\r\n    }\r\n\r\n    if (text.charAt(index) === \"/\" && text.charAt(index + 1) === \"*\") {\r\n      for (let i = index + 2; i < text.length; ++i) {\r\n        if (text.charAt(i) === \"*\" && text.charAt(i + 1) === \"/\") {\r\n          return i + 2;\r\n        }\r\n      }\r\n    }\r\n\r\n    return index;\r\n  }\r\n  /**\r\n   * @param {string} text\r\n   * @param {number | false} index\r\n   * @returns {number | false}\r\n   */\r\n\r\n\r\n  function skipTrailingComment(text, index) {\r\n    if (index === false) {\r\n      return false;\r\n    }\r\n\r\n    if (text.charAt(index) === \"/\" && text.charAt(index + 1) === \"/\") {\r\n      return skipEverythingButNewLine(text, index);\r\n    }\r\n\r\n    return index;\r\n  } // This one doesn't use the above helper function because it wants to\r\n  // test \\r\\n in order and `skip` doesn't support ordering and we only\r\n  // want to skip one newline. It's simple to implement.\r\n\r\n  /**\r\n   * @param {string} text\r\n   * @param {number | false} index\r\n   * @param {SkipOptions=} opts\r\n   * @returns {number | false}\r\n   */\r\n\r\n\r\n  function skipNewline(text, index, opts) {\r\n    const backwards = opts && opts.backwards;\r\n\r\n    if (index === false) {\r\n      return false;\r\n    }\r\n\r\n    const atIndex = text.charAt(index);\r\n\r\n    if (backwards) {\r\n      if (text.charAt(index - 1) === \"\\r\" && atIndex === \"\\n\") {\r\n        return index - 2;\r\n      }\r\n\r\n      if (atIndex === \"\\n\" || atIndex === \"\\r\" || atIndex === \"\\u2028\" || atIndex === \"\\u2029\") {\r\n        return index - 1;\r\n      }\r\n    } else {\r\n      if (atIndex === \"\\r\" && text.charAt(index + 1) === \"\\n\") {\r\n        return index + 2;\r\n      }\r\n\r\n      if (atIndex === \"\\n\" || atIndex === \"\\r\" || atIndex === \"\\u2028\" || atIndex === \"\\u2029\") {\r\n        return index + 1;\r\n      }\r\n    }\r\n\r\n    return index;\r\n  }\r\n  /**\r\n   * @param {string} text\r\n   * @param {number} index\r\n   * @param {SkipOptions=} opts\r\n   * @returns {boolean}\r\n   */\r\n\r\n\r\n  function hasNewline(text, index, opts) {\r\n    opts = opts || {};\r\n    const idx = skipSpaces(text, opts.backwards ? index - 1 : index, opts);\r\n    const idx2 = skipNewline(text, idx, opts);\r\n    return idx !== idx2;\r\n  }\r\n  /**\r\n   * @param {string} text\r\n   * @param {number} start\r\n   * @param {number} end\r\n   * @returns {boolean}\r\n   */\r\n\r\n\r\n  function hasNewlineInRange(text, start, end) {\r\n    for (let i = start; i < end; ++i) {\r\n      if (text.charAt(i) === \"\\n\") {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  } // Note: this function doesn't ignore leading comments unlike isNextLineEmpty\r\n\r\n  /**\r\n   * @template N\r\n   * @param {string} text\r\n   * @param {N} node\r\n   * @param {(node: N) => number} locStart\r\n   */\r\n\r\n\r\n  function isPreviousLineEmpty(text, node, locStart) {\r\n    /** @type {number | false} */\r\n    let idx = locStart(node) - 1;\r\n    idx = skipSpaces(text, idx, {\r\n      backwards: true\r\n    });\r\n    idx = skipNewline(text, idx, {\r\n      backwards: true\r\n    });\r\n    idx = skipSpaces(text, idx, {\r\n      backwards: true\r\n    });\r\n    const idx2 = skipNewline(text, idx, {\r\n      backwards: true\r\n    });\r\n    return idx !== idx2;\r\n  }\r\n  /**\r\n   * @param {string} text\r\n   * @param {number} index\r\n   * @returns {boolean}\r\n   */\r\n\r\n\r\n  function isNextLineEmptyAfterIndex(text, index) {\r\n    /** @type {number | false} */\r\n    let oldIdx = null;\r\n    /** @type {number | false} */\r\n\r\n    let idx = index;\r\n\r\n    while (idx !== oldIdx) {\r\n      // We need to skip all the potential trailing inline comments\r\n      oldIdx = idx;\r\n      idx = skipToLineEnd(text, idx);\r\n      idx = skipInlineComment(text, idx);\r\n      idx = skipSpaces(text, idx);\r\n    }\r\n\r\n    idx = skipTrailingComment(text, idx);\r\n    idx = skipNewline(text, idx);\r\n    return idx !== false && hasNewline(text, idx);\r\n  }\r\n  /**\r\n   * @template N\r\n   * @param {string} text\r\n   * @param {N} node\r\n   * @param {(node: N) => number} locEnd\r\n   * @returns {boolean}\r\n   */\r\n\r\n\r\n  function isNextLineEmpty(text, node, locEnd) {\r\n    return isNextLineEmptyAfterIndex(text, locEnd(node));\r\n  }\r\n  /**\r\n   * @param {string} text\r\n   * @param {number} idx\r\n   * @returns {number | false}\r\n   */\r\n\r\n\r\n  function getNextNonSpaceNonCommentCharacterIndexWithStartIndex(text, idx) {\r\n    /** @type {number | false} */\r\n    let oldIdx = null;\r\n    /** @type {number | false} */\r\n\r\n    let nextIdx = idx;\r\n\r\n    while (nextIdx !== oldIdx) {\r\n      oldIdx = nextIdx;\r\n      nextIdx = skipSpaces(text, nextIdx);\r\n      nextIdx = skipInlineComment(text, nextIdx);\r\n      nextIdx = skipTrailingComment(text, nextIdx);\r\n      nextIdx = skipNewline(text, nextIdx);\r\n    }\r\n\r\n    return nextIdx;\r\n  }\r\n  /**\r\n   * @template N\r\n   * @param {string} text\r\n   * @param {N} node\r\n   * @param {(node: N) => number} locEnd\r\n   * @returns {number | false}\r\n   */\r\n\r\n\r\n  function getNextNonSpaceNonCommentCharacterIndex(text, node, locEnd) {\r\n    return getNextNonSpaceNonCommentCharacterIndexWithStartIndex(text, locEnd(node));\r\n  }\r\n  /**\r\n   * @template N\r\n   * @param {string} text\r\n   * @param {N} node\r\n   * @param {(node: N) => number} locEnd\r\n   * @returns {string}\r\n   */\r\n\r\n\r\n  function getNextNonSpaceNonCommentCharacter(text, node, locEnd) {\r\n    return text.charAt( // @ts-ignore => TBD: can return false, should we define a fallback?\r\n    getNextNonSpaceNonCommentCharacterIndex(text, node, locEnd));\r\n  }\r\n  /**\r\n   * @param {string} text\r\n   * @param {number} index\r\n   * @param {SkipOptions=} opts\r\n   * @returns {boolean}\r\n   */\r\n\r\n\r\n  function hasSpaces(text, index, opts) {\r\n    opts = opts || {};\r\n    const idx = skipSpaces(text, opts.backwards ? index - 1 : index, opts);\r\n    return idx !== index;\r\n  }\r\n  /**\r\n   * @param {{range?: [number, number], start?: number}} node\r\n   * @param {number} index\r\n   */\r\n\r\n\r\n  function setLocStart(node, index) {\r\n    if (node.range) {\r\n      node.range[0] = index;\r\n    } else {\r\n      node.start = index;\r\n    }\r\n  }\r\n  /**\r\n   * @param {{range?: [number, number], end?: number}} node\r\n   * @param {number} index\r\n   */\r\n\r\n\r\n  function setLocEnd(node, index) {\r\n    if (node.range) {\r\n      node.range[1] = index;\r\n    } else {\r\n      node.end = index;\r\n    }\r\n  }\r\n\r\n  const PRECEDENCE = {};\r\n  [[\"|>\"], [\"??\"], [\"||\"], [\"&&\"], [\"|\"], [\"^\"], [\"&\"], [\"==\", \"===\", \"!=\", \"!==\"], [\"<\", \">\", \"<=\", \">=\", \"in\", \"instanceof\"], [\">>\", \"<<\", \">>>\"], [\"+\", \"-\"], [\"*\", \"/\", \"%\"], [\"**\"]].forEach((tier, i) => {\r\n    tier.forEach(op => {\r\n      PRECEDENCE[op] = i;\r\n    });\r\n  });\r\n\r\n  function getPrecedence(op) {\r\n    return PRECEDENCE[op];\r\n  }\r\n\r\n  const equalityOperators = {\r\n    \"==\": true,\r\n    \"!=\": true,\r\n    \"===\": true,\r\n    \"!==\": true\r\n  };\r\n  const multiplicativeOperators = {\r\n    \"*\": true,\r\n    \"/\": true,\r\n    \"%\": true\r\n  };\r\n  const bitshiftOperators = {\r\n    \">>\": true,\r\n    \">>>\": true,\r\n    \"<<\": true\r\n  };\r\n\r\n  function shouldFlatten(parentOp, nodeOp) {\r\n    if (getPrecedence(nodeOp) !== getPrecedence(parentOp)) {\r\n      return false;\r\n    } // ** is right-associative\r\n    // x ** y ** z --> x ** (y ** z)\r\n\r\n\r\n    if (parentOp === \"**\") {\r\n      return false;\r\n    } // x == y == z --> (x == y) == z\r\n\r\n\r\n    if (equalityOperators[parentOp] && equalityOperators[nodeOp]) {\r\n      return false;\r\n    } // x * y % z --> (x * y) % z\r\n\r\n\r\n    if (nodeOp === \"%\" && multiplicativeOperators[parentOp] || parentOp === \"%\" && multiplicativeOperators[nodeOp]) {\r\n      return false;\r\n    } // x * y / z --> (x * y) / z\r\n    // x / y * z --> (x / y) * z\r\n\r\n\r\n    if (nodeOp !== parentOp && multiplicativeOperators[nodeOp] && multiplicativeOperators[parentOp]) {\r\n      return false;\r\n    } // x << y << z --> (x << y) << z\r\n\r\n\r\n    if (bitshiftOperators[parentOp] && bitshiftOperators[nodeOp]) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function isBitwiseOperator(operator) {\r\n    return !!bitshiftOperators[operator] || operator === \"|\" || operator === \"^\" || operator === \"&\";\r\n  } // Tests if an expression starts with `{`, or (if forbidFunctionClassAndDoExpr\r\n  // holds) `function`, `class`, or `do {}`. Will be overzealous if there's\r\n  // already necessary grouping parentheses.\r\n\r\n\r\n  function startsWithNoLookaheadToken(node, forbidFunctionClassAndDoExpr) {\r\n    node = getLeftMost(node);\r\n\r\n    switch (node.type) {\r\n      case \"FunctionExpression\":\r\n      case \"ClassExpression\":\r\n      case \"DoExpression\":\r\n        return forbidFunctionClassAndDoExpr;\r\n\r\n      case \"ObjectExpression\":\r\n        return true;\r\n\r\n      case \"MemberExpression\":\r\n      case \"OptionalMemberExpression\":\r\n        return startsWithNoLookaheadToken(node.object, forbidFunctionClassAndDoExpr);\r\n\r\n      case \"TaggedTemplateExpression\":\r\n        if (node.tag.type === \"FunctionExpression\") {\r\n          // IIFEs are always already parenthesized\r\n          return false;\r\n        }\r\n\r\n        return startsWithNoLookaheadToken(node.tag, forbidFunctionClassAndDoExpr);\r\n\r\n      case \"CallExpression\":\r\n      case \"OptionalCallExpression\":\r\n        if (node.callee.type === \"FunctionExpression\") {\r\n          // IIFEs are always already parenthesized\r\n          return false;\r\n        }\r\n\r\n        return startsWithNoLookaheadToken(node.callee, forbidFunctionClassAndDoExpr);\r\n\r\n      case \"ConditionalExpression\":\r\n        return startsWithNoLookaheadToken(node.test, forbidFunctionClassAndDoExpr);\r\n\r\n      case \"UpdateExpression\":\r\n        return !node.prefix && startsWithNoLookaheadToken(node.argument, forbidFunctionClassAndDoExpr);\r\n\r\n      case \"BindExpression\":\r\n        return node.object && startsWithNoLookaheadToken(node.object, forbidFunctionClassAndDoExpr);\r\n\r\n      case \"SequenceExpression\":\r\n        return startsWithNoLookaheadToken(node.expressions[0], forbidFunctionClassAndDoExpr);\r\n\r\n      case \"TSAsExpression\":\r\n        return startsWithNoLookaheadToken(node.expression, forbidFunctionClassAndDoExpr);\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  function getLeftMost(node) {\r\n    if (node.left) {\r\n      return getLeftMost(node.left);\r\n    }\r\n\r\n    return node;\r\n  }\r\n  /**\r\n   * @param {string} value\r\n   * @param {number} tabWidth\r\n   * @param {number=} startIndex\r\n   * @returns {number}\r\n   */\r\n\r\n\r\n  function getAlignmentSize(value, tabWidth, startIndex) {\r\n    startIndex = startIndex || 0;\r\n    let size = 0;\r\n\r\n    for (let i = startIndex; i < value.length; ++i) {\r\n      if (value[i] === \"\\t\") {\r\n        // Tabs behave in a way that they are aligned to the nearest\r\n        // multiple of tabWidth:\r\n        // 0 -> 4, 1 -> 4, 2 -> 4, 3 -> 4\r\n        // 4 -> 8, 5 -> 8, 6 -> 8, 7 -> 8 ...\r\n        size = size + tabWidth - size % tabWidth;\r\n      } else {\r\n        size++;\r\n      }\r\n    }\r\n\r\n    return size;\r\n  }\r\n  /**\r\n   * @param {string} value\r\n   * @param {number} tabWidth\r\n   * @returns {number}\r\n   */\r\n\r\n\r\n  function getIndentSize(value, tabWidth) {\r\n    const lastNewlineIndex = value.lastIndexOf(\"\\n\");\r\n\r\n    if (lastNewlineIndex === -1) {\r\n      return 0;\r\n    }\r\n\r\n    return getAlignmentSize( // All the leading whitespaces\r\n    value.slice(lastNewlineIndex + 1).match(/^[ \\t]*/)[0], tabWidth);\r\n  }\r\n  /**\r\n   * @typedef {'\"' | \"'\"} Quote\r\n   */\r\n\r\n  /**\r\n   *\r\n   * @param {string} raw\r\n   * @param {Quote} preferredQuote\r\n   * @returns {Quote}\r\n   */\r\n\r\n\r\n  function getPreferredQuote(raw, preferredQuote) {\r\n    // `rawContent` is the string exactly like it appeared in the input source\r\n    // code, without its enclosing quotes.\r\n    const rawContent = raw.slice(1, -1);\r\n    /** @type {{ quote: '\"', regex: RegExp }} */\r\n\r\n    const double = {\r\n      quote: '\"',\r\n      regex: /\"/g\r\n    };\r\n    /** @type {{ quote: \"'\", regex: RegExp }} */\r\n\r\n    const single = {\r\n      quote: \"'\",\r\n      regex: /'/g\r\n    };\r\n    const preferred = preferredQuote === \"'\" ? single : double;\r\n    const alternate = preferred === single ? double : single;\r\n    let result = preferred.quote; // If `rawContent` contains at least one of the quote preferred for enclosing\r\n    // the string, we might want to enclose with the alternate quote instead, to\r\n    // minimize the number of escaped quotes.\r\n\r\n    if (rawContent.includes(preferred.quote) || rawContent.includes(alternate.quote)) {\r\n      const numPreferredQuotes = (rawContent.match(preferred.regex) || []).length;\r\n      const numAlternateQuotes = (rawContent.match(alternate.regex) || []).length;\r\n      result = numPreferredQuotes > numAlternateQuotes ? alternate.quote : preferred.quote;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  function printString(raw, options, isDirectiveLiteral) {\r\n    // `rawContent` is the string exactly like it appeared in the input source\r\n    // code, without its enclosing quotes.\r\n    const rawContent = raw.slice(1, -1); // Check for the alternate quote, to determine if we're allowed to swap\r\n    // the quotes on a DirectiveLiteral.\r\n\r\n    const canChangeDirectiveQuotes = !rawContent.includes('\"') && !rawContent.includes(\"'\");\r\n    /** @type {Quote} */\r\n\r\n    const enclosingQuote = options.parser === \"json\" ? '\"' : options.__isInHtmlAttribute ? \"'\" : getPreferredQuote(raw, options.singleQuote ? \"'\" : '\"'); // Directives are exact code unit sequences, which means that you can't\r\n    // change the escape sequences they use.\r\n    // See https://github.com/prettier/prettier/issues/1555\r\n    // and https://tc39.github.io/ecma262/#directive-prologue\r\n\r\n    if (isDirectiveLiteral) {\r\n      if (canChangeDirectiveQuotes) {\r\n        return enclosingQuote + rawContent + enclosingQuote;\r\n      }\r\n\r\n      return raw;\r\n    } // It might sound unnecessary to use `makeString` even if the string already\r\n    // is enclosed with `enclosingQuote`, but it isn't. The string could contain\r\n    // unnecessary escapes (such as in `\"\\'\"`). Always using `makeString` makes\r\n    // sure that we consistently output the minimum amount of escaped quotes.\r\n\r\n\r\n    return makeString(rawContent, enclosingQuote, !(options.parser === \"css\" || options.parser === \"less\" || options.parser === \"scss\" || options.embeddedInHtml));\r\n  }\r\n  /**\r\n   * @param {string} rawContent\r\n   * @param {Quote} enclosingQuote\r\n   * @param {boolean=} unescapeUnnecessaryEscapes\r\n   * @returns {string}\r\n   */\r\n\r\n\r\n  function makeString(rawContent, enclosingQuote, unescapeUnnecessaryEscapes) {\r\n    const otherQuote = enclosingQuote === '\"' ? \"'\" : '\"'; // Matches _any_ escape and unescaped quotes (both single and double).\r\n\r\n    const regex = /\\\\([\\s\\S])|(['\"])/g; // Escape and unescape single and double quotes as needed to be able to\r\n    // enclose `rawContent` with `enclosingQuote`.\r\n\r\n    const newContent = rawContent.replace(regex, (match, escaped, quote) => {\r\n      // If we matched an escape, and the escaped character is a quote of the\r\n      // other type than we intend to enclose the string with, there's no need for\r\n      // it to be escaped, so return it _without_ the backslash.\r\n      if (escaped === otherQuote) {\r\n        return escaped;\r\n      } // If we matched an unescaped quote and it is of the _same_ type as we\r\n      // intend to enclose the string with, it must be escaped, so return it with\r\n      // a backslash.\r\n\r\n\r\n      if (quote === enclosingQuote) {\r\n        return \"\\\\\" + quote;\r\n      }\r\n\r\n      if (quote) {\r\n        return quote;\r\n      } // Unescape any unnecessarily escaped character.\r\n      // Adapted from https://github.com/eslint/eslint/blob/de0b4ad7bd820ade41b1f606008bea68683dc11a/lib/rules/no-useless-escape.js#L27\r\n\r\n\r\n      return unescapeUnnecessaryEscapes && /^[^\\\\nrvtbfux\\r\\n\\u2028\\u2029\"'0-7]$/.test(escaped) ? escaped : \"\\\\\" + escaped;\r\n    });\r\n    return enclosingQuote + newContent + enclosingQuote;\r\n  }\r\n\r\n  function printNumber(rawNumber) {\r\n    return rawNumber.toLowerCase() // Remove unnecessary plus and zeroes from scientific notation.\r\n    .replace(/^([+-]?[\\d.]+e)(?:\\+|(-))?0*(\\d)/, \"$1$2$3\") // Remove unnecessary scientific notation (1e0).\r\n    .replace(/^([+-]?[\\d.]+)e[+-]?0+$/, \"$1\") // Make sure numbers always start with a digit.\r\n    .replace(/^([+-])?\\./, \"$10.\") // Remove extraneous trailing decimal zeroes.\r\n    .replace(/(\\.\\d+?)0+(?=e|$)/, \"$1\") // Remove trailing dot.\r\n    .replace(/\\.(?=e|$)/, \"\");\r\n  }\r\n  /**\r\n   * @param {string} str\r\n   * @param {string} target\r\n   * @returns {number}\r\n   */\r\n\r\n\r\n  function getMaxContinuousCount(str, target) {\r\n    const results = str.match(new RegExp(\"(\".concat(escapeStringRegexp$2(target), \")+\"), \"g\"));\r\n\r\n    if (results === null) {\r\n      return 0;\r\n    }\r\n\r\n    return results.reduce((maxCount, result) => Math.max(maxCount, result.length / target.length), 0);\r\n  }\r\n\r\n  function getMinNotPresentContinuousCount(str, target) {\r\n    const matches = str.match(new RegExp(\"(\".concat(escapeStringRegexp$2(target), \")+\"), \"g\"));\r\n\r\n    if (matches === null) {\r\n      return 0;\r\n    }\r\n\r\n    const countPresent = new Map();\r\n    let max = 0;\r\n\r\n    for (const match of matches) {\r\n      const count = match.length / target.length;\r\n      countPresent.set(count, true);\r\n\r\n      if (count > max) {\r\n        max = count;\r\n      }\r\n    }\r\n\r\n    for (let i = 1; i < max; i++) {\r\n      if (!countPresent.get(i)) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    return max + 1;\r\n  }\r\n  /**\r\n   * @param {string} text\r\n   * @returns {number}\r\n   */\r\n\r\n\r\n  function getStringWidth(text) {\r\n    if (!text) {\r\n      return 0;\r\n    } // shortcut to avoid needless string `RegExp`s, replacements, and allocations within `string-width`\r\n\r\n\r\n    if (!notAsciiRegex.test(text)) {\r\n      return text.length;\r\n    }\r\n\r\n    return stringWidth_1(text);\r\n  }\r\n\r\n  function hasIgnoreComment(path) {\r\n    const node = path.getValue();\r\n    return hasNodeIgnoreComment(node);\r\n  }\r\n\r\n  function hasNodeIgnoreComment(node) {\r\n    return node && (node.comments && node.comments.length > 0 && node.comments.some(comment => isNodeIgnoreComment(comment) && !comment.unignore) || node.prettierIgnore);\r\n  }\r\n\r\n  function isNodeIgnoreComment(comment) {\r\n    return comment.value.trim() === \"prettier-ignore\";\r\n  }\r\n\r\n  function addCommentHelper(node, comment) {\r\n    const comments = node.comments || (node.comments = []);\r\n    comments.push(comment);\r\n    comment.printed = false; // For some reason, TypeScript parses `// x` inside of JSXText as a comment\r\n    // We already \"print\" it via the raw text, we don't need to re-print it as a\r\n    // comment\r\n\r\n    if (node.type === \"JSXText\") {\r\n      comment.printed = true;\r\n    }\r\n  }\r\n\r\n  function addLeadingComment(node, comment) {\r\n    comment.leading = true;\r\n    comment.trailing = false;\r\n    addCommentHelper(node, comment);\r\n  }\r\n\r\n  function addDanglingComment(node, comment) {\r\n    comment.leading = false;\r\n    comment.trailing = false;\r\n    addCommentHelper(node, comment);\r\n  }\r\n\r\n  function addTrailingComment(node, comment) {\r\n    comment.leading = false;\r\n    comment.trailing = true;\r\n    addCommentHelper(node, comment);\r\n  }\r\n\r\n  function isWithinParentArrayProperty(path, propertyName) {\r\n    const node = path.getValue();\r\n    const parent = path.getParentNode();\r\n\r\n    if (parent == null) {\r\n      return false;\r\n    }\r\n\r\n    if (!Array.isArray(parent[propertyName])) {\r\n      return false;\r\n    }\r\n\r\n    const key = path.getName();\r\n    return parent[propertyName][key] === node;\r\n  }\r\n\r\n  function replaceEndOfLineWith(text, replacement) {\r\n    const parts = [];\r\n\r\n    for (const part of text.split(\"\\n\")) {\r\n      if (parts.length !== 0) {\r\n        parts.push(replacement);\r\n      }\r\n\r\n      parts.push(part);\r\n    }\r\n\r\n    return parts;\r\n  }\r\n\r\n  var util$1 = {\r\n    replaceEndOfLineWith,\r\n    getStringWidth,\r\n    getMaxContinuousCount,\r\n    getMinNotPresentContinuousCount,\r\n    getPrecedence,\r\n    shouldFlatten,\r\n    isBitwiseOperator,\r\n    getPenultimate,\r\n    getLast,\r\n    getNextNonSpaceNonCommentCharacterIndexWithStartIndex,\r\n    getNextNonSpaceNonCommentCharacterIndex,\r\n    getNextNonSpaceNonCommentCharacter,\r\n    skip,\r\n    skipWhitespace,\r\n    skipSpaces,\r\n    skipToLineEnd,\r\n    skipEverythingButNewLine,\r\n    skipInlineComment,\r\n    skipTrailingComment,\r\n    skipNewline,\r\n    isNextLineEmptyAfterIndex,\r\n    isNextLineEmpty,\r\n    isPreviousLineEmpty,\r\n    hasNewline,\r\n    hasNewlineInRange,\r\n    hasSpaces,\r\n    setLocStart,\r\n    setLocEnd,\r\n    startsWithNoLookaheadToken,\r\n    getAlignmentSize,\r\n    getIndentSize,\r\n    getPreferredQuote,\r\n    printString,\r\n    printNumber,\r\n    hasIgnoreComment,\r\n    hasNodeIgnoreComment,\r\n    isNodeIgnoreComment,\r\n    makeString,\r\n    addLeadingComment,\r\n    addDanglingComment,\r\n    addTrailingComment,\r\n    isWithinParentArrayProperty\r\n  };\r\n\r\n  function guessEndOfLine(text) {\r\n    const index = text.indexOf(\"\\r\");\r\n\r\n    if (index >= 0) {\r\n      return text.charAt(index + 1) === \"\\n\" ? \"crlf\" : \"cr\";\r\n    }\r\n\r\n    return \"lf\";\r\n  }\r\n\r\n  function convertEndOfLineToChars(value) {\r\n    switch (value) {\r\n      case \"cr\":\r\n        return \"\\r\";\r\n\r\n      case \"crlf\":\r\n        return \"\\r\\n\";\r\n\r\n      default:\r\n        return \"\\n\";\r\n    }\r\n  }\r\n\r\n  var endOfLine = {\r\n    guessEndOfLine,\r\n    convertEndOfLineToChars\r\n  };\r\n\r\n  const {\r\n    getStringWidth: getStringWidth$1\r\n  } = util$1;\r\n  const {\r\n    convertEndOfLineToChars: convertEndOfLineToChars$1\r\n  } = endOfLine;\r\n  const {\r\n    concat: concat$1,\r\n    fill: fill$1,\r\n    cursor: cursor$1\r\n  } = docBuilders;\r\n  /** @type {Record<symbol, typeof MODE_BREAK | typeof MODE_FLAT>} */\r\n\r\n  let groupModeMap;\r\n  const MODE_BREAK = 1;\r\n  const MODE_FLAT = 2;\r\n\r\n  function rootIndent() {\r\n    return {\r\n      value: \"\",\r\n      length: 0,\r\n      queue: []\r\n    };\r\n  }\r\n\r\n  function makeIndent(ind, options) {\r\n    return generateInd(ind, {\r\n      type: \"indent\"\r\n    }, options);\r\n  }\r\n\r\n  function makeAlign(ind, n, options) {\r\n    return n === -Infinity ? ind.root || rootIndent() : n < 0 ? generateInd(ind, {\r\n      type: \"dedent\"\r\n    }, options) : !n ? ind : n.type === \"root\" ? Object.assign({}, ind, {\r\n      root: ind\r\n    }) : typeof n === \"string\" ? generateInd(ind, {\r\n      type: \"stringAlign\",\r\n      n\r\n    }, options) : generateInd(ind, {\r\n      type: \"numberAlign\",\r\n      n\r\n    }, options);\r\n  }\r\n\r\n  function generateInd(ind, newPart, options) {\r\n    const queue = newPart.type === \"dedent\" ? ind.queue.slice(0, -1) : ind.queue.concat(newPart);\r\n    let value = \"\";\r\n    let length = 0;\r\n    let lastTabs = 0;\r\n    let lastSpaces = 0;\r\n\r\n    for (const part of queue) {\r\n      switch (part.type) {\r\n        case \"indent\":\r\n          flush();\r\n\r\n          if (options.useTabs) {\r\n            addTabs(1);\r\n          } else {\r\n            addSpaces(options.tabWidth);\r\n          }\r\n\r\n          break;\r\n\r\n        case \"stringAlign\":\r\n          flush();\r\n          value += part.n;\r\n          length += part.n.length;\r\n          break;\r\n\r\n        case \"numberAlign\":\r\n          lastTabs += 1;\r\n          lastSpaces += part.n;\r\n          break;\r\n\r\n        /* istanbul ignore next */\r\n\r\n        default:\r\n          throw new Error(\"Unexpected type '\".concat(part.type, \"'\"));\r\n      }\r\n    }\r\n\r\n    flushSpaces();\r\n    return Object.assign({}, ind, {\r\n      value,\r\n      length,\r\n      queue\r\n    });\r\n\r\n    function addTabs(count) {\r\n      value += \"\\t\".repeat(count);\r\n      length += options.tabWidth * count;\r\n    }\r\n\r\n    function addSpaces(count) {\r\n      value += \" \".repeat(count);\r\n      length += count;\r\n    }\r\n\r\n    function flush() {\r\n      if (options.useTabs) {\r\n        flushTabs();\r\n      } else {\r\n        flushSpaces();\r\n      }\r\n    }\r\n\r\n    function flushTabs() {\r\n      if (lastTabs > 0) {\r\n        addTabs(lastTabs);\r\n      }\r\n\r\n      resetLast();\r\n    }\r\n\r\n    function flushSpaces() {\r\n      if (lastSpaces > 0) {\r\n        addSpaces(lastSpaces);\r\n      }\r\n\r\n      resetLast();\r\n    }\r\n\r\n    function resetLast() {\r\n      lastTabs = 0;\r\n      lastSpaces = 0;\r\n    }\r\n  }\r\n\r\n  function trim$1(out) {\r\n    if (out.length === 0) {\r\n      return 0;\r\n    }\r\n\r\n    let trimCount = 0; // Trim whitespace at the end of line\r\n\r\n    while (out.length > 0 && typeof out[out.length - 1] === \"string\" && out[out.length - 1].match(/^[ \\t]*$/)) {\r\n      trimCount += out.pop().length;\r\n    }\r\n\r\n    if (out.length && typeof out[out.length - 1] === \"string\") {\r\n      const trimmed = out[out.length - 1].replace(/[ \\t]*$/, \"\");\r\n      trimCount += out[out.length - 1].length - trimmed.length;\r\n      out[out.length - 1] = trimmed;\r\n    }\r\n\r\n    return trimCount;\r\n  }\r\n\r\n  function fits(next, restCommands, width, options, mustBeFlat) {\r\n    let restIdx = restCommands.length;\r\n    const cmds = [next]; // `out` is only used for width counting because `trim` requires to look\r\n    // backwards for space characters.\r\n\r\n    const out = [];\r\n\r\n    while (width >= 0) {\r\n      if (cmds.length === 0) {\r\n        if (restIdx === 0) {\r\n          return true;\r\n        }\r\n\r\n        cmds.push(restCommands[restIdx - 1]);\r\n        restIdx--;\r\n        continue;\r\n      }\r\n\r\n      const [ind, mode, doc] = cmds.pop();\r\n\r\n      if (typeof doc === \"string\") {\r\n        out.push(doc);\r\n        width -= getStringWidth$1(doc);\r\n      } else {\r\n        switch (doc.type) {\r\n          case \"concat\":\r\n            for (let i = doc.parts.length - 1; i >= 0; i--) {\r\n              cmds.push([ind, mode, doc.parts[i]]);\r\n            }\r\n\r\n            break;\r\n\r\n          case \"indent\":\r\n            cmds.push([makeIndent(ind, options), mode, doc.contents]);\r\n            break;\r\n\r\n          case \"align\":\r\n            cmds.push([makeAlign(ind, doc.n, options), mode, doc.contents]);\r\n            break;\r\n\r\n          case \"trim\":\r\n            width += trim$1(out);\r\n            break;\r\n\r\n          case \"group\":\r\n            if (mustBeFlat && doc.break) {\r\n              return false;\r\n            }\r\n\r\n            cmds.push([ind, doc.break ? MODE_BREAK : mode, doc.contents]);\r\n\r\n            if (doc.id) {\r\n              groupModeMap[doc.id] = cmds[cmds.length - 1][1];\r\n            }\r\n\r\n            break;\r\n\r\n          case \"fill\":\r\n            for (let i = doc.parts.length - 1; i >= 0; i--) {\r\n              cmds.push([ind, mode, doc.parts[i]]);\r\n            }\r\n\r\n            break;\r\n\r\n          case \"if-break\":\r\n            {\r\n              const groupMode = doc.groupId ? groupModeMap[doc.groupId] : mode;\r\n\r\n              if (groupMode === MODE_BREAK) {\r\n                if (doc.breakContents) {\r\n                  cmds.push([ind, mode, doc.breakContents]);\r\n                }\r\n              }\r\n\r\n              if (groupMode === MODE_FLAT) {\r\n                if (doc.flatContents) {\r\n                  cmds.push([ind, mode, doc.flatContents]);\r\n                }\r\n              }\r\n\r\n              break;\r\n            }\r\n\r\n          case \"line\":\r\n            switch (mode) {\r\n              // fallthrough\r\n              case MODE_FLAT:\r\n                if (!doc.hard) {\r\n                  if (!doc.soft) {\r\n                    out.push(\" \");\r\n                    width -= 1;\r\n                  }\r\n\r\n                  break;\r\n                }\r\n\r\n                return true;\r\n\r\n              case MODE_BREAK:\r\n                return true;\r\n            }\r\n\r\n            break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function printDocToString(doc, options) {\r\n    groupModeMap = {};\r\n    const width = options.printWidth;\r\n    const newLine = convertEndOfLineToChars$1(options.endOfLine);\r\n    let pos = 0; // cmds is basically a stack. We've turned a recursive call into a\r\n    // while loop which is much faster. The while loop below adds new\r\n    // cmds to the array instead of recursively calling `print`.\r\n\r\n    const cmds = [[rootIndent(), MODE_BREAK, doc]];\r\n    const out = [];\r\n    let shouldRemeasure = false;\r\n    let lineSuffix = [];\r\n\r\n    while (cmds.length !== 0) {\r\n      const [ind, mode, doc] = cmds.pop();\r\n\r\n      if (typeof doc === \"string\") {\r\n        const formatted = newLine !== \"\\n\" && doc.includes(\"\\n\") ? doc.replace(/\\n/g, newLine) : doc;\r\n        out.push(formatted);\r\n        pos += getStringWidth$1(formatted);\r\n      } else {\r\n        switch (doc.type) {\r\n          case \"cursor\":\r\n            out.push(cursor$1.placeholder);\r\n            break;\r\n\r\n          case \"concat\":\r\n            for (let i = doc.parts.length - 1; i >= 0; i--) {\r\n              cmds.push([ind, mode, doc.parts[i]]);\r\n            }\r\n\r\n            break;\r\n\r\n          case \"indent\":\r\n            cmds.push([makeIndent(ind, options), mode, doc.contents]);\r\n            break;\r\n\r\n          case \"align\":\r\n            cmds.push([makeAlign(ind, doc.n, options), mode, doc.contents]);\r\n            break;\r\n\r\n          case \"trim\":\r\n            pos -= trim$1(out);\r\n            break;\r\n\r\n          case \"group\":\r\n            switch (mode) {\r\n              case MODE_FLAT:\r\n                if (!shouldRemeasure) {\r\n                  cmds.push([ind, doc.break ? MODE_BREAK : MODE_FLAT, doc.contents]);\r\n                  break;\r\n                }\r\n\r\n              // fallthrough\r\n\r\n              case MODE_BREAK:\r\n                {\r\n                  shouldRemeasure = false;\r\n                  const next = [ind, MODE_FLAT, doc.contents];\r\n                  const rem = width - pos;\r\n\r\n                  if (!doc.break && fits(next, cmds, rem, options)) {\r\n                    cmds.push(next);\r\n                  } else {\r\n                    // Expanded states are a rare case where a document\r\n                    // can manually provide multiple representations of\r\n                    // itself. It provides an array of documents\r\n                    // going from the least expanded (most flattened)\r\n                    // representation first to the most expanded. If a\r\n                    // group has these, we need to manually go through\r\n                    // these states and find the first one that fits.\r\n                    if (doc.expandedStates) {\r\n                      const mostExpanded = doc.expandedStates[doc.expandedStates.length - 1];\r\n\r\n                      if (doc.break) {\r\n                        cmds.push([ind, MODE_BREAK, mostExpanded]);\r\n                        break;\r\n                      } else {\r\n                        for (let i = 1; i < doc.expandedStates.length + 1; i++) {\r\n                          if (i >= doc.expandedStates.length) {\r\n                            cmds.push([ind, MODE_BREAK, mostExpanded]);\r\n                            break;\r\n                          } else {\r\n                            const state = doc.expandedStates[i];\r\n                            const cmd = [ind, MODE_FLAT, state];\r\n\r\n                            if (fits(cmd, cmds, rem, options)) {\r\n                              cmds.push(cmd);\r\n                              break;\r\n                            }\r\n                          }\r\n                        }\r\n                      }\r\n                    } else {\r\n                      cmds.push([ind, MODE_BREAK, doc.contents]);\r\n                    }\r\n                  }\r\n\r\n                  break;\r\n                }\r\n            }\r\n\r\n            if (doc.id) {\r\n              groupModeMap[doc.id] = cmds[cmds.length - 1][1];\r\n            }\r\n\r\n            break;\r\n          // Fills each line with as much code as possible before moving to a new\r\n          // line with the same indentation.\r\n          //\r\n          // Expects doc.parts to be an array of alternating content and\r\n          // whitespace. The whitespace contains the linebreaks.\r\n          //\r\n          // For example:\r\n          //   [\"I\", line, \"love\", line, \"monkeys\"]\r\n          // or\r\n          //   [{ type: group, ... }, softline, { type: group, ... }]\r\n          //\r\n          // It uses this parts structure to handle three main layout cases:\r\n          // * The first two content items fit on the same line without\r\n          //   breaking\r\n          //   -> output the first content item and the whitespace \"flat\".\r\n          // * Only the first content item fits on the line without breaking\r\n          //   -> output the first content item \"flat\" and the whitespace with\r\n          //   \"break\".\r\n          // * Neither content item fits on the line without breaking\r\n          //   -> output the first content item and the whitespace with \"break\".\r\n\r\n          case \"fill\":\r\n            {\r\n              const rem = width - pos;\r\n              const {\r\n                parts\r\n              } = doc;\r\n\r\n              if (parts.length === 0) {\r\n                break;\r\n              }\r\n\r\n              const [content, whitespace] = parts;\r\n              const contentFlatCmd = [ind, MODE_FLAT, content];\r\n              const contentBreakCmd = [ind, MODE_BREAK, content];\r\n              const contentFits = fits(contentFlatCmd, [], rem, options, true);\r\n\r\n              if (parts.length === 1) {\r\n                if (contentFits) {\r\n                  cmds.push(contentFlatCmd);\r\n                } else {\r\n                  cmds.push(contentBreakCmd);\r\n                }\r\n\r\n                break;\r\n              }\r\n\r\n              const whitespaceFlatCmd = [ind, MODE_FLAT, whitespace];\r\n              const whitespaceBreakCmd = [ind, MODE_BREAK, whitespace];\r\n\r\n              if (parts.length === 2) {\r\n                if (contentFits) {\r\n                  cmds.push(whitespaceFlatCmd);\r\n                  cmds.push(contentFlatCmd);\r\n                } else {\r\n                  cmds.push(whitespaceBreakCmd);\r\n                  cmds.push(contentBreakCmd);\r\n                }\r\n\r\n                break;\r\n              } // At this point we've handled the first pair (context, separator)\r\n              // and will create a new fill doc for the rest of the content.\r\n              // Ideally we wouldn't mutate the array here but copying all the\r\n              // elements to a new array would make this algorithm quadratic,\r\n              // which is unusable for large arrays (e.g. large texts in JSX).\r\n\r\n\r\n              parts.splice(0, 2);\r\n              const remainingCmd = [ind, mode, fill$1(parts)];\r\n              const secondContent = parts[0];\r\n              const firstAndSecondContentFlatCmd = [ind, MODE_FLAT, concat$1([content, whitespace, secondContent])];\r\n              const firstAndSecondContentFits = fits(firstAndSecondContentFlatCmd, [], rem, options, true);\r\n\r\n              if (firstAndSecondContentFits) {\r\n                cmds.push(remainingCmd);\r\n                cmds.push(whitespaceFlatCmd);\r\n                cmds.push(contentFlatCmd);\r\n              } else if (contentFits) {\r\n                cmds.push(remainingCmd);\r\n                cmds.push(whitespaceBreakCmd);\r\n                cmds.push(contentFlatCmd);\r\n              } else {\r\n                cmds.push(remainingCmd);\r\n                cmds.push(whitespaceBreakCmd);\r\n                cmds.push(contentBreakCmd);\r\n              }\r\n\r\n              break;\r\n            }\r\n\r\n          case \"if-break\":\r\n            {\r\n              const groupMode = doc.groupId ? groupModeMap[doc.groupId] : mode;\r\n\r\n              if (groupMode === MODE_BREAK) {\r\n                if (doc.breakContents) {\r\n                  cmds.push([ind, mode, doc.breakContents]);\r\n                }\r\n              }\r\n\r\n              if (groupMode === MODE_FLAT) {\r\n                if (doc.flatContents) {\r\n                  cmds.push([ind, mode, doc.flatContents]);\r\n                }\r\n              }\r\n\r\n              break;\r\n            }\r\n\r\n          case \"line-suffix\":\r\n            lineSuffix.push([ind, mode, doc.contents]);\r\n            break;\r\n\r\n          case \"line-suffix-boundary\":\r\n            if (lineSuffix.length > 0) {\r\n              cmds.push([ind, mode, {\r\n                type: \"line\",\r\n                hard: true\r\n              }]);\r\n            }\r\n\r\n            break;\r\n\r\n          case \"line\":\r\n            switch (mode) {\r\n              case MODE_FLAT:\r\n                if (!doc.hard) {\r\n                  if (!doc.soft) {\r\n                    out.push(\" \");\r\n                    pos += 1;\r\n                  }\r\n\r\n                  break;\r\n                } else {\r\n                  // This line was forced into the output even if we\r\n                  // were in flattened mode, so we need to tell the next\r\n                  // group that no matter what, it needs to remeasure\r\n                  // because the previous measurement didn't accurately\r\n                  // capture the entire expression (this is necessary\r\n                  // for nested groups)\r\n                  shouldRemeasure = true;\r\n                }\r\n\r\n              // fallthrough\r\n\r\n              case MODE_BREAK:\r\n                if (lineSuffix.length) {\r\n                  cmds.push([ind, mode, doc]);\r\n                  cmds.push(...lineSuffix.reverse());\r\n                  lineSuffix = [];\r\n                  break;\r\n                }\r\n\r\n                if (doc.literal) {\r\n                  if (ind.root) {\r\n                    out.push(newLine, ind.root.value);\r\n                    pos = ind.root.length;\r\n                  } else {\r\n                    out.push(newLine);\r\n                    pos = 0;\r\n                  }\r\n                } else {\r\n                  pos -= trim$1(out);\r\n                  out.push(newLine + ind.value);\r\n                  pos = ind.length;\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            break;\r\n        }\r\n      }\r\n    }\r\n\r\n    const cursorPlaceholderIndex = out.indexOf(cursor$1.placeholder);\r\n\r\n    if (cursorPlaceholderIndex !== -1) {\r\n      const otherCursorPlaceholderIndex = out.indexOf(cursor$1.placeholder, cursorPlaceholderIndex + 1);\r\n      const beforeCursor = out.slice(0, cursorPlaceholderIndex).join(\"\");\r\n      const aroundCursor = out.slice(cursorPlaceholderIndex + 1, otherCursorPlaceholderIndex).join(\"\");\r\n      const afterCursor = out.slice(otherCursorPlaceholderIndex + 1).join(\"\");\r\n      return {\r\n        formatted: beforeCursor + aroundCursor + afterCursor,\r\n        cursorNodeStart: beforeCursor.length,\r\n        cursorNodeText: aroundCursor\r\n      };\r\n    }\r\n\r\n    return {\r\n      formatted: out.join(\"\")\r\n    };\r\n  }\r\n\r\n  var docPrinter = {\r\n    printDocToString\r\n  };\r\n\r\n  const traverseDocOnExitStackMarker = {};\r\n\r\n  function traverseDoc(doc, onEnter, onExit, shouldTraverseConditionalGroups) {\r\n    const docsStack = [doc];\r\n\r\n    while (docsStack.length !== 0) {\r\n      const doc = docsStack.pop();\r\n\r\n      if (doc === traverseDocOnExitStackMarker) {\r\n        onExit(docsStack.pop());\r\n        continue;\r\n      }\r\n\r\n      let shouldRecurse = true;\r\n\r\n      if (onEnter) {\r\n        if (onEnter(doc) === false) {\r\n          shouldRecurse = false;\r\n        }\r\n      }\r\n\r\n      if (onExit) {\r\n        docsStack.push(doc);\r\n        docsStack.push(traverseDocOnExitStackMarker);\r\n      }\r\n\r\n      if (shouldRecurse) {\r\n        // When there are multiple parts to process,\r\n        // the parts need to be pushed onto the stack in reverse order,\r\n        // so that they are processed in the original order\r\n        // when the stack is popped.\r\n        if (doc.type === \"concat\" || doc.type === \"fill\") {\r\n          for (let ic = doc.parts.length, i = ic - 1; i >= 0; --i) {\r\n            docsStack.push(doc.parts[i]);\r\n          }\r\n        } else if (doc.type === \"if-break\") {\r\n          if (doc.flatContents) {\r\n            docsStack.push(doc.flatContents);\r\n          }\r\n\r\n          if (doc.breakContents) {\r\n            docsStack.push(doc.breakContents);\r\n          }\r\n        } else if (doc.type === \"group\" && doc.expandedStates) {\r\n          if (shouldTraverseConditionalGroups) {\r\n            for (let ic = doc.expandedStates.length, i = ic - 1; i >= 0; --i) {\r\n              docsStack.push(doc.expandedStates[i]);\r\n            }\r\n          } else {\r\n            docsStack.push(doc.contents);\r\n          }\r\n        } else if (doc.contents) {\r\n          docsStack.push(doc.contents);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function mapDoc(doc, cb) {\r\n    if (doc.type === \"concat\" || doc.type === \"fill\") {\r\n      const parts = doc.parts.map(part => mapDoc(part, cb));\r\n      return cb(Object.assign({}, doc, {\r\n        parts\r\n      }));\r\n    } else if (doc.type === \"if-break\") {\r\n      const breakContents = doc.breakContents && mapDoc(doc.breakContents, cb);\r\n      const flatContents = doc.flatContents && mapDoc(doc.flatContents, cb);\r\n      return cb(Object.assign({}, doc, {\r\n        breakContents,\r\n        flatContents\r\n      }));\r\n    } else if (doc.contents) {\r\n      const contents = mapDoc(doc.contents, cb);\r\n      return cb(Object.assign({}, doc, {\r\n        contents\r\n      }));\r\n    }\r\n\r\n    return cb(doc);\r\n  }\r\n\r\n  function findInDoc(doc, fn, defaultValue) {\r\n    let result = defaultValue;\r\n    let hasStopped = false;\r\n\r\n    function findInDocOnEnterFn(doc) {\r\n      const maybeResult = fn(doc);\r\n\r\n      if (maybeResult !== undefined) {\r\n        hasStopped = true;\r\n        result = maybeResult;\r\n      }\r\n\r\n      if (hasStopped) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    traverseDoc(doc, findInDocOnEnterFn);\r\n    return result;\r\n  }\r\n\r\n  function isEmpty(n) {\r\n    return typeof n === \"string\" && n.length === 0;\r\n  }\r\n\r\n  function isLineNextFn(doc) {\r\n    if (typeof doc === \"string\") {\r\n      return false;\r\n    }\r\n\r\n    if (doc.type === \"line\") {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  function isLineNext(doc) {\r\n    return findInDoc(doc, isLineNextFn, false);\r\n  }\r\n\r\n  function willBreakFn(doc) {\r\n    if (doc.type === \"group\" && doc.break) {\r\n      return true;\r\n    }\r\n\r\n    if (doc.type === \"line\" && doc.hard) {\r\n      return true;\r\n    }\r\n\r\n    if (doc.type === \"break-parent\") {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  function willBreak(doc) {\r\n    return findInDoc(doc, willBreakFn, false);\r\n  }\r\n\r\n  function breakParentGroup(groupStack) {\r\n    if (groupStack.length > 0) {\r\n      const parentGroup = groupStack[groupStack.length - 1]; // Breaks are not propagated through conditional groups because\r\n      // the user is expected to manually handle what breaks.\r\n\r\n      if (!parentGroup.expandedStates) {\r\n        parentGroup.break = true;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  function propagateBreaks(doc) {\r\n    const alreadyVisitedSet = new Set();\r\n    const groupStack = [];\r\n\r\n    function propagateBreaksOnEnterFn(doc) {\r\n      if (doc.type === \"break-parent\") {\r\n        breakParentGroup(groupStack);\r\n      }\r\n\r\n      if (doc.type === \"group\") {\r\n        groupStack.push(doc);\r\n\r\n        if (alreadyVisitedSet.has(doc)) {\r\n          return false;\r\n        }\r\n\r\n        alreadyVisitedSet.add(doc);\r\n      }\r\n    }\r\n\r\n    function propagateBreaksOnExitFn(doc) {\r\n      if (doc.type === \"group\") {\r\n        const group = groupStack.pop();\r\n\r\n        if (group.break) {\r\n          breakParentGroup(groupStack);\r\n        }\r\n      }\r\n    }\r\n\r\n    traverseDoc(doc, propagateBreaksOnEnterFn, propagateBreaksOnExitFn,\r\n    /* shouldTraverseConditionalGroups */\r\n    true);\r\n  }\r\n\r\n  function removeLinesFn(doc) {\r\n    // Force this doc into flat mode by statically converting all\r\n    // lines into spaces (or soft lines into nothing). Hard lines\r\n    // should still output because there's too great of a chance\r\n    // of breaking existing assumptions otherwise.\r\n    if (doc.type === \"line\" && !doc.hard) {\r\n      return doc.soft ? \"\" : \" \";\r\n    } else if (doc.type === \"if-break\") {\r\n      return doc.flatContents || \"\";\r\n    }\r\n\r\n    return doc;\r\n  }\r\n\r\n  function removeLines(doc) {\r\n    return mapDoc(doc, removeLinesFn);\r\n  }\r\n\r\n  function stripTrailingHardline(doc) {\r\n    // HACK remove ending hardline, original PR: #1984\r\n    if (doc.type === \"concat\" && doc.parts.length !== 0) {\r\n      const lastPart = doc.parts[doc.parts.length - 1];\r\n\r\n      if (lastPart.type === \"concat\") {\r\n        if (lastPart.parts.length === 2 && lastPart.parts[0].hard && lastPart.parts[1].type === \"break-parent\") {\r\n          return {\r\n            type: \"concat\",\r\n            parts: doc.parts.slice(0, -1)\r\n          };\r\n        }\r\n\r\n        return {\r\n          type: \"concat\",\r\n          parts: doc.parts.slice(0, -1).concat(stripTrailingHardline(lastPart))\r\n        };\r\n      }\r\n    }\r\n\r\n    return doc;\r\n  }\r\n\r\n  var docUtils = {\r\n    isEmpty,\r\n    willBreak,\r\n    isLineNext,\r\n    traverseDoc,\r\n    findInDoc,\r\n    mapDoc,\r\n    propagateBreaks,\r\n    removeLines,\r\n    stripTrailingHardline\r\n  };\r\n\r\n  function flattenDoc(doc) {\r\n    if (doc.type === \"concat\") {\r\n      const res = [];\r\n\r\n      for (let i = 0; i < doc.parts.length; ++i) {\r\n        const doc2 = doc.parts[i];\r\n\r\n        if (typeof doc2 !== \"string\" && doc2.type === \"concat\") {\r\n          res.push(...flattenDoc(doc2).parts);\r\n        } else {\r\n          const flattened = flattenDoc(doc2);\r\n\r\n          if (flattened !== \"\") {\r\n            res.push(flattened);\r\n          }\r\n        }\r\n      }\r\n\r\n      return Object.assign({}, doc, {\r\n        parts: res\r\n      });\r\n    } else if (doc.type === \"if-break\") {\r\n      return Object.assign({}, doc, {\r\n        breakContents: doc.breakContents != null ? flattenDoc(doc.breakContents) : null,\r\n        flatContents: doc.flatContents != null ? flattenDoc(doc.flatContents) : null\r\n      });\r\n    } else if (doc.type === \"group\") {\r\n      return Object.assign({}, doc, {\r\n        contents: flattenDoc(doc.contents),\r\n        expandedStates: doc.expandedStates ? doc.expandedStates.map(flattenDoc) : doc.expandedStates\r\n      });\r\n    } else if (doc.contents) {\r\n      return Object.assign({}, doc, {\r\n        contents: flattenDoc(doc.contents)\r\n      });\r\n    }\r\n\r\n    return doc;\r\n  }\r\n\r\n  function printDoc(doc) {\r\n    if (typeof doc === \"string\") {\r\n      return JSON.stringify(doc);\r\n    }\r\n\r\n    if (doc.type === \"line\") {\r\n      if (doc.literal) {\r\n        return \"literalline\";\r\n      }\r\n\r\n      if (doc.hard) {\r\n        return \"hardline\";\r\n      }\r\n\r\n      if (doc.soft) {\r\n        return \"softline\";\r\n      }\r\n\r\n      return \"line\";\r\n    }\r\n\r\n    if (doc.type === \"break-parent\") {\r\n      return \"breakParent\";\r\n    }\r\n\r\n    if (doc.type === \"trim\") {\r\n      return \"trim\";\r\n    }\r\n\r\n    if (doc.type === \"concat\") {\r\n      return \"[\" + doc.parts.map(printDoc).join(\", \") + \"]\";\r\n    }\r\n\r\n    if (doc.type === \"indent\") {\r\n      return \"indent(\" + printDoc(doc.contents) + \")\";\r\n    }\r\n\r\n    if (doc.type === \"align\") {\r\n      return doc.n === -Infinity ? \"dedentToRoot(\" + printDoc(doc.contents) + \")\" : doc.n < 0 ? \"dedent(\" + printDoc(doc.contents) + \")\" : doc.n.type === \"root\" ? \"markAsRoot(\" + printDoc(doc.contents) + \")\" : \"align(\" + JSON.stringify(doc.n) + \", \" + printDoc(doc.contents) + \")\";\r\n    }\r\n\r\n    if (doc.type === \"if-break\") {\r\n      return \"ifBreak(\" + printDoc(doc.breakContents) + (doc.flatContents ? \", \" + printDoc(doc.flatContents) : \"\") + \")\";\r\n    }\r\n\r\n    if (doc.type === \"group\") {\r\n      if (doc.expandedStates) {\r\n        return \"conditionalGroup(\" + \"[\" + doc.expandedStates.map(printDoc).join(\",\") + \"])\";\r\n      }\r\n\r\n      return (doc.break ? \"wrappedGroup\" : \"group\") + \"(\" + printDoc(doc.contents) + \")\";\r\n    }\r\n\r\n    if (doc.type === \"fill\") {\r\n      return \"fill\" + \"(\" + doc.parts.map(printDoc).join(\", \") + \")\";\r\n    }\r\n\r\n    if (doc.type === \"line-suffix\") {\r\n      return \"lineSuffix(\" + printDoc(doc.contents) + \")\";\r\n    }\r\n\r\n    if (doc.type === \"line-suffix-boundary\") {\r\n      return \"lineSuffixBoundary\";\r\n    }\r\n\r\n    throw new Error(\"Unknown doc type \" + doc.type);\r\n  }\r\n\r\n  var docDebug = {\r\n    printDocToDebug(doc) {\r\n      return printDoc(flattenDoc(doc));\r\n    }\r\n\r\n  };\r\n\r\n  var document = {\r\n    builders: docBuilders,\r\n    printer: docPrinter,\r\n    utils: docUtils,\r\n    debug: docDebug\r\n  };\r\n\r\n  const {\r\n    getMaxContinuousCount: getMaxContinuousCount$1,\r\n    getStringWidth: getStringWidth$2,\r\n    getAlignmentSize: getAlignmentSize$1,\r\n    getIndentSize: getIndentSize$1,\r\n    skip: skip$1,\r\n    skipWhitespace: skipWhitespace$1,\r\n    skipSpaces: skipSpaces$1,\r\n    skipNewline: skipNewline$1,\r\n    skipToLineEnd: skipToLineEnd$1,\r\n    skipEverythingButNewLine: skipEverythingButNewLine$1,\r\n    skipInlineComment: skipInlineComment$1,\r\n    skipTrailingComment: skipTrailingComment$1,\r\n    hasNewline: hasNewline$1,\r\n    hasNewlineInRange: hasNewlineInRange$1,\r\n    hasSpaces: hasSpaces$1,\r\n    isNextLineEmpty: isNextLineEmpty$1,\r\n    isNextLineEmptyAfterIndex: isNextLineEmptyAfterIndex$1,\r\n    isPreviousLineEmpty: isPreviousLineEmpty$1,\r\n    getNextNonSpaceNonCommentCharacterIndex: getNextNonSpaceNonCommentCharacterIndex$1,\r\n    makeString: makeString$1,\r\n    addLeadingComment: addLeadingComment$1,\r\n    addDanglingComment: addDanglingComment$1,\r\n    addTrailingComment: addTrailingComment$1\r\n  } = util$1;\r\n  var utilShared = {\r\n    getMaxContinuousCount: getMaxContinuousCount$1,\r\n    getStringWidth: getStringWidth$2,\r\n    getAlignmentSize: getAlignmentSize$1,\r\n    getIndentSize: getIndentSize$1,\r\n    skip: skip$1,\r\n    skipWhitespace: skipWhitespace$1,\r\n    skipSpaces: skipSpaces$1,\r\n    skipNewline: skipNewline$1,\r\n    skipToLineEnd: skipToLineEnd$1,\r\n    skipEverythingButNewLine: skipEverythingButNewLine$1,\r\n    skipInlineComment: skipInlineComment$1,\r\n    skipTrailingComment: skipTrailingComment$1,\r\n    hasNewline: hasNewline$1,\r\n    hasNewlineInRange: hasNewlineInRange$1,\r\n    hasSpaces: hasSpaces$1,\r\n    isNextLineEmpty: isNextLineEmpty$1,\r\n    isNextLineEmptyAfterIndex: isNextLineEmptyAfterIndex$1,\r\n    isPreviousLineEmpty: isPreviousLineEmpty$1,\r\n    getNextNonSpaceNonCommentCharacterIndex: getNextNonSpaceNonCommentCharacterIndex$1,\r\n    makeString: makeString$1,\r\n    addLeadingComment: addLeadingComment$1,\r\n    addDanglingComment: addDanglingComment$1,\r\n    addTrailingComment: addTrailingComment$1\r\n  };\r\n\r\n  const {\r\n    concat: concat$2,\r\n    line: line$1,\r\n    hardline: hardline$1,\r\n    breakParent: breakParent$1,\r\n    indent: indent$1,\r\n    lineSuffix: lineSuffix$1,\r\n    join: join$1,\r\n    cursor: cursor$2\r\n  } = document.builders;\r\n  const {\r\n    hasNewline: hasNewline$2,\r\n    skipNewline: skipNewline$2,\r\n    isPreviousLineEmpty: isPreviousLineEmpty$2\r\n  } = util$1;\r\n  const {\r\n    addLeadingComment: addLeadingComment$2,\r\n    addDanglingComment: addDanglingComment$2,\r\n    addTrailingComment: addTrailingComment$2\r\n  } = utilShared;\r\n  const childNodesCacheKey = Symbol(\"child-nodes\");\r\n\r\n  function getSortedChildNodes(node, options, resultArray) {\r\n    if (!node) {\r\n      return;\r\n    }\r\n\r\n    const {\r\n      printer,\r\n      locStart,\r\n      locEnd\r\n    } = options;\r\n\r\n    if (resultArray) {\r\n      if (printer.canAttachComment && printer.canAttachComment(node)) {\r\n        // This reverse insertion sort almost always takes constant\r\n        // time because we almost always (maybe always?) append the\r\n        // nodes in order anyway.\r\n        let i;\r\n\r\n        for (i = resultArray.length - 1; i >= 0; --i) {\r\n          if (locStart(resultArray[i]) <= locStart(node) && locEnd(resultArray[i]) <= locEnd(node)) {\r\n            break;\r\n          }\r\n        }\r\n\r\n        resultArray.splice(i + 1, 0, node);\r\n        return;\r\n      }\r\n    } else if (node[childNodesCacheKey]) {\r\n      return node[childNodesCacheKey];\r\n    }\r\n\r\n    const childNodes = printer.getCommentChildNodes && printer.getCommentChildNodes(node, options) || typeof node === \"object\" && Object.keys(node).filter(n => n !== \"enclosingNode\" && n !== \"precedingNode\" && n !== \"followingNode\").map(n => node[n]);\r\n\r\n    if (!childNodes) {\r\n      return;\r\n    }\r\n\r\n    if (!resultArray) {\r\n      Object.defineProperty(node, childNodesCacheKey, {\r\n        value: resultArray = [],\r\n        enumerable: false\r\n      });\r\n    }\r\n\r\n    childNodes.forEach(childNode => {\r\n      getSortedChildNodes(childNode, options, resultArray);\r\n    });\r\n    return resultArray;\r\n  } // As efficiently as possible, decorate the comment object with\r\n  // .precedingNode, .enclosingNode, and/or .followingNode properties, at\r\n  // least one of which is guaranteed to be defined.\r\n\r\n\r\n  function decorateComment(node, comment, options) {\r\n    const {\r\n      locStart,\r\n      locEnd\r\n    } = options;\r\n    const childNodes = getSortedChildNodes(node, options);\r\n    let precedingNode;\r\n    let followingNode; // Time to dust off the old binary search robes and wizard hat.\r\n\r\n    let left = 0;\r\n    let right = childNodes.length;\r\n\r\n    while (left < right) {\r\n      const middle = left + right >> 1;\r\n      const child = childNodes[middle];\r\n\r\n      if (locStart(child) - locStart(comment) <= 0 && locEnd(comment) - locEnd(child) <= 0) {\r\n        // The comment is completely contained by this child node.\r\n        comment.enclosingNode = child;\r\n        decorateComment(child, comment, options);\r\n        return; // Abandon the binary search at this level.\r\n      }\r\n\r\n      if (locEnd(child) - locStart(comment) <= 0) {\r\n        // This child node falls completely before the comment.\r\n        // Because we will never consider this node or any nodes\r\n        // before it again, this node must be the closest preceding\r\n        // node we have encountered so far.\r\n        precedingNode = child;\r\n        left = middle + 1;\r\n        continue;\r\n      }\r\n\r\n      if (locEnd(comment) - locStart(child) <= 0) {\r\n        // This child node falls completely after the comment.\r\n        // Because we will never consider this node or any nodes after\r\n        // it again, this node must be the closest following node we\r\n        // have encountered so far.\r\n        followingNode = child;\r\n        right = middle;\r\n        continue;\r\n      }\r\n      /* istanbul ignore next */\r\n\r\n\r\n      throw new Error(\"Comment location overlaps with node location\");\r\n    } // We don't want comments inside of different expressions inside of the same\r\n    // template literal to move to another expression.\r\n\r\n\r\n    if (comment.enclosingNode && comment.enclosingNode.type === \"TemplateLiteral\") {\r\n      const {\r\n        quasis\r\n      } = comment.enclosingNode;\r\n      const commentIndex = findExpressionIndexForComment(quasis, comment, options);\r\n\r\n      if (precedingNode && findExpressionIndexForComment(quasis, precedingNode, options) !== commentIndex) {\r\n        precedingNode = null;\r\n      }\r\n\r\n      if (followingNode && findExpressionIndexForComment(quasis, followingNode, options) !== commentIndex) {\r\n        followingNode = null;\r\n      }\r\n    }\r\n\r\n    if (precedingNode) {\r\n      comment.precedingNode = precedingNode;\r\n    }\r\n\r\n    if (followingNode) {\r\n      comment.followingNode = followingNode;\r\n    }\r\n  }\r\n\r\n  function attach(comments, ast, text, options) {\r\n    if (!Array.isArray(comments)) {\r\n      return;\r\n    }\r\n\r\n    const tiesToBreak = [];\r\n    const {\r\n      locStart,\r\n      locEnd\r\n    } = options;\r\n    comments.forEach((comment, i) => {\r\n      if (options.parser === \"json\" || options.parser === \"json5\" || options.parser === \"__js_expression\" || options.parser === \"__vue_expression\") {\r\n        if (locStart(comment) - locStart(ast) <= 0) {\r\n          addLeadingComment$2(ast, comment);\r\n          return;\r\n        }\r\n\r\n        if (locEnd(comment) - locEnd(ast) >= 0) {\r\n          addTrailingComment$2(ast, comment);\r\n          return;\r\n        }\r\n      }\r\n\r\n      decorateComment(ast, comment, options);\r\n      const {\r\n        precedingNode,\r\n        enclosingNode,\r\n        followingNode\r\n      } = comment;\r\n      const pluginHandleOwnLineComment = options.printer.handleComments && options.printer.handleComments.ownLine ? options.printer.handleComments.ownLine : () => false;\r\n      const pluginHandleEndOfLineComment = options.printer.handleComments && options.printer.handleComments.endOfLine ? options.printer.handleComments.endOfLine : () => false;\r\n      const pluginHandleRemainingComment = options.printer.handleComments && options.printer.handleComments.remaining ? options.printer.handleComments.remaining : () => false;\r\n      const isLastComment = comments.length - 1 === i;\r\n\r\n      if (hasNewline$2(text, locStart(comment), {\r\n        backwards: true\r\n      })) {\r\n        // If a comment exists on its own line, prefer a leading comment.\r\n        // We also need to check if it's the first line of the file.\r\n        if (pluginHandleOwnLineComment(comment, text, options, ast, isLastComment)) ; else if (followingNode) {\r\n          // Always a leading comment.\r\n          addLeadingComment$2(followingNode, comment);\r\n        } else if (precedingNode) {\r\n          addTrailingComment$2(precedingNode, comment);\r\n        } else if (enclosingNode) {\r\n          addDanglingComment$2(enclosingNode, comment);\r\n        } else {\r\n          // There are no nodes, let's attach it to the root of the ast\r\n\r\n          /* istanbul ignore next */\r\n          addDanglingComment$2(ast, comment);\r\n        }\r\n      } else if (hasNewline$2(text, locEnd(comment))) {\r\n        if (pluginHandleEndOfLineComment(comment, text, options, ast, isLastComment)) ; else if (precedingNode) {\r\n          // There is content before this comment on the same line, but\r\n          // none after it, so prefer a trailing comment of the previous node.\r\n          addTrailingComment$2(precedingNode, comment);\r\n        } else if (followingNode) {\r\n          addLeadingComment$2(followingNode, comment);\r\n        } else if (enclosingNode) {\r\n          addDanglingComment$2(enclosingNode, comment);\r\n        } else {\r\n          // There are no nodes, let's attach it to the root of the ast\r\n\r\n          /* istanbul ignore next */\r\n          addDanglingComment$2(ast, comment);\r\n        }\r\n      } else {\r\n        if (pluginHandleRemainingComment(comment, text, options, ast, isLastComment)) ; else if (precedingNode && followingNode) {\r\n          // Otherwise, text exists both before and after the comment on\r\n          // the same line. If there is both a preceding and following\r\n          // node, use a tie-breaking algorithm to determine if it should\r\n          // be attached to the next or previous node. In the last case,\r\n          // simply attach the right node;\r\n          const tieCount = tiesToBreak.length;\r\n\r\n          if (tieCount > 0) {\r\n            const lastTie = tiesToBreak[tieCount - 1];\r\n\r\n            if (lastTie.followingNode !== comment.followingNode) {\r\n              breakTies(tiesToBreak, text, options);\r\n            }\r\n          }\r\n\r\n          tiesToBreak.push(comment);\r\n        } else if (precedingNode) {\r\n          addTrailingComment$2(precedingNode, comment);\r\n        } else if (followingNode) {\r\n          addLeadingComment$2(followingNode, comment);\r\n        } else if (enclosingNode) {\r\n          addDanglingComment$2(enclosingNode, comment);\r\n        } else {\r\n          // There are no nodes, let's attach it to the root of the ast\r\n\r\n          /* istanbul ignore next */\r\n          addDanglingComment$2(ast, comment);\r\n        }\r\n      }\r\n    });\r\n    breakTies(tiesToBreak, text, options);\r\n    comments.forEach(comment => {\r\n      // These node references were useful for breaking ties, but we\r\n      // don't need them anymore, and they create cycles in the AST that\r\n      // may lead to infinite recursion if we don't delete them here.\r\n      delete comment.precedingNode;\r\n      delete comment.enclosingNode;\r\n      delete comment.followingNode;\r\n    });\r\n  }\r\n\r\n  function breakTies(tiesToBreak, text, options) {\r\n    const tieCount = tiesToBreak.length;\r\n\r\n    if (tieCount === 0) {\r\n      return;\r\n    }\r\n\r\n    const {\r\n      precedingNode,\r\n      followingNode,\r\n      enclosingNode\r\n    } = tiesToBreak[0];\r\n    const gapRegExp = options.printer.getGapRegex && options.printer.getGapRegex(enclosingNode) || /^[\\s(]*$/;\r\n    let gapEndPos = options.locStart(followingNode); // Iterate backwards through tiesToBreak, examining the gaps\r\n    // between the tied comments. In order to qualify as leading, a\r\n    // comment must be separated from followingNode by an unbroken series of\r\n    // gaps (or other comments). Gaps should only contain whitespace or open\r\n    // parentheses.\r\n\r\n    let indexOfFirstLeadingComment;\r\n\r\n    for (indexOfFirstLeadingComment = tieCount; indexOfFirstLeadingComment > 0; --indexOfFirstLeadingComment) {\r\n      const comment = tiesToBreak[indexOfFirstLeadingComment - 1];\r\n      assert.strictEqual(comment.precedingNode, precedingNode);\r\n      assert.strictEqual(comment.followingNode, followingNode);\r\n      const gap = text.slice(options.locEnd(comment), gapEndPos);\r\n\r\n      if (gapRegExp.test(gap)) {\r\n        gapEndPos = options.locStart(comment);\r\n      } else {\r\n        // The gap string contained something other than whitespace or open\r\n        // parentheses.\r\n        break;\r\n      }\r\n    }\r\n\r\n    tiesToBreak.forEach((comment, i) => {\r\n      if (i < indexOfFirstLeadingComment) {\r\n        addTrailingComment$2(precedingNode, comment);\r\n      } else {\r\n        addLeadingComment$2(followingNode, comment);\r\n      }\r\n    });\r\n    tiesToBreak.length = 0;\r\n  }\r\n\r\n  function printComment(commentPath, options) {\r\n    const comment = commentPath.getValue();\r\n    comment.printed = true;\r\n    return options.printer.printComment(commentPath, options);\r\n  }\r\n\r\n  function findExpressionIndexForComment(quasis, comment, options) {\r\n    const startPos = options.locStart(comment) - 1;\r\n\r\n    for (let i = 1; i < quasis.length; ++i) {\r\n      if (startPos < getQuasiRange(quasis[i]).start) {\r\n        return i - 1;\r\n      }\r\n    } // We haven't found it, it probably means that some of the locations are off.\r\n    // Let's just return the first one.\r\n\r\n    /* istanbul ignore next */\r\n\r\n\r\n    return 0;\r\n  }\r\n\r\n  function getQuasiRange(expr) {\r\n    if (expr.start !== undefined) {\r\n      // Babel\r\n      return {\r\n        start: expr.start,\r\n        end: expr.end\r\n      };\r\n    } // Flow\r\n\r\n\r\n    return {\r\n      start: expr.range[0],\r\n      end: expr.range[1]\r\n    };\r\n  }\r\n\r\n  function printLeadingComment(commentPath, print, options) {\r\n    const comment = commentPath.getValue();\r\n    const contents = printComment(commentPath, options);\r\n\r\n    if (!contents) {\r\n      return \"\";\r\n    }\r\n\r\n    const isBlock = options.printer.isBlockComment && options.printer.isBlockComment(comment); // Leading block comments should see if they need to stay on the\r\n    // same line or not.\r\n\r\n    if (isBlock) {\r\n      const lineBreak = hasNewline$2(options.originalText, options.locEnd(comment)) ? hasNewline$2(options.originalText, options.locStart(comment), {\r\n        backwards: true\r\n      }) ? hardline$1 : line$1 : \" \";\r\n      return concat$2([contents, lineBreak]);\r\n    }\r\n\r\n    return concat$2([contents, hardline$1]);\r\n  }\r\n\r\n  function printTrailingComment(commentPath, print, options) {\r\n    const comment = commentPath.getValue();\r\n    const contents = printComment(commentPath, options);\r\n\r\n    if (!contents) {\r\n      return \"\";\r\n    }\r\n\r\n    const isBlock = options.printer.isBlockComment && options.printer.isBlockComment(comment); // We don't want the line to break\r\n    // when the parentParentNode is a ClassDeclaration/-Expression\r\n    // And the parentNode is in the superClass property\r\n\r\n    const parentNode = commentPath.getNode(1);\r\n    const parentParentNode = commentPath.getNode(2);\r\n    const isParentSuperClass = parentParentNode && (parentParentNode.type === \"ClassDeclaration\" || parentParentNode.type === \"ClassExpression\") && parentParentNode.superClass === parentNode;\r\n\r\n    if (hasNewline$2(options.originalText, options.locStart(comment), {\r\n      backwards: true\r\n    })) {\r\n      // This allows comments at the end of nested structures:\r\n      // {\r\n      //   x: 1,\r\n      //   y: 2\r\n      //   // A comment\r\n      // }\r\n      // Those kinds of comments are almost always leading comments, but\r\n      // here it doesn't go \"outside\" the block and turns it into a\r\n      // trailing comment for `2`. We can simulate the above by checking\r\n      // if this a comment on its own line; normal trailing comments are\r\n      // always at the end of another expression.\r\n      const isLineBeforeEmpty = isPreviousLineEmpty$2(options.originalText, comment, options.locStart);\r\n      return lineSuffix$1(concat$2([hardline$1, isLineBeforeEmpty ? hardline$1 : \"\", contents]));\r\n    } else if (isBlock || isParentSuperClass) {\r\n      // Trailing block comments never need a newline\r\n      return concat$2([\" \", contents]);\r\n    }\r\n\r\n    return concat$2([lineSuffix$1(concat$2([\" \", contents])), !isBlock ? breakParent$1 : \"\"]);\r\n  }\r\n\r\n  function printDanglingComments(path, options, sameIndent, filter) {\r\n    const parts = [];\r\n    const node = path.getValue();\r\n\r\n    if (!node || !node.comments) {\r\n      return \"\";\r\n    }\r\n\r\n    path.each(commentPath => {\r\n      const comment = commentPath.getValue();\r\n\r\n      if (comment && !comment.leading && !comment.trailing && (!filter || filter(comment))) {\r\n        parts.push(printComment(commentPath, options));\r\n      }\r\n    }, \"comments\");\r\n\r\n    if (parts.length === 0) {\r\n      return \"\";\r\n    }\r\n\r\n    if (sameIndent) {\r\n      return join$1(hardline$1, parts);\r\n    }\r\n\r\n    return indent$1(concat$2([hardline$1, join$1(hardline$1, parts)]));\r\n  }\r\n\r\n  function prependCursorPlaceholder(path, options, printed) {\r\n    if (path.getNode() === options.cursorNode && path.getValue()) {\r\n      return concat$2([cursor$2, printed, cursor$2]);\r\n    }\r\n\r\n    return printed;\r\n  }\r\n\r\n  function printComments(path, print, options, needsSemi) {\r\n    const value = path.getValue();\r\n    const printed = print(path);\r\n    const comments = value && value.comments;\r\n\r\n    if (!comments || comments.length === 0) {\r\n      return prependCursorPlaceholder(path, options, printed);\r\n    }\r\n\r\n    const leadingParts = [];\r\n    const trailingParts = [needsSemi ? \";\" : \"\", printed];\r\n    path.each(commentPath => {\r\n      const comment = commentPath.getValue();\r\n      const {\r\n        leading,\r\n        trailing\r\n      } = comment;\r\n\r\n      if (leading) {\r\n        const contents = printLeadingComment(commentPath, print, options);\r\n\r\n        if (!contents) {\r\n          return;\r\n        }\r\n\r\n        leadingParts.push(contents);\r\n        const text = options.originalText;\r\n        const index = skipNewline$2(text, options.locEnd(comment));\r\n\r\n        if (index !== false && hasNewline$2(text, index)) {\r\n          leadingParts.push(hardline$1);\r\n        }\r\n      } else if (trailing) {\r\n        trailingParts.push(printTrailingComment(commentPath, print, options));\r\n      }\r\n    }, \"comments\");\r\n    return prependCursorPlaceholder(path, options, concat$2(leadingParts.concat(trailingParts)));\r\n  }\r\n\r\n  var comments = {\r\n    attach,\r\n    printComments,\r\n    printDanglingComments,\r\n    getSortedChildNodes\r\n  };\r\n\r\n  function getNodeHelper(path, count) {\r\n    const stackIndex = getNodeStackIndexHelper(path.stack, count);\r\n    return stackIndex === -1 ? null : path.stack[stackIndex];\r\n  }\r\n\r\n  function getNodeStackIndexHelper(stack, count) {\r\n    for (let i = stack.length - 1; i >= 0; i -= 2) {\r\n      const value = stack[i];\r\n\r\n      if (value && !Array.isArray(value) && --count < 0) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  class FastPath {\r\n    constructor(value) {\r\n      this.stack = [value];\r\n    } // The name of the current property is always the penultimate element of\r\n    // this.stack, and always a String.\r\n\r\n\r\n    getName() {\r\n      const {\r\n        stack\r\n      } = this;\r\n      const {\r\n        length\r\n      } = stack;\r\n\r\n      if (length > 1) {\r\n        return stack[length - 2];\r\n      } // Since the name is always a string, null is a safe sentinel value to\r\n      // return if we do not know the name of the (root) value.\r\n\r\n      /* istanbul ignore next */\r\n\r\n\r\n      return null;\r\n    } // The value of the current property is always the final element of\r\n    // this.stack.\r\n\r\n\r\n    getValue() {\r\n      return getLast(this.stack);\r\n    }\r\n\r\n    getNode(count = 0) {\r\n      return getNodeHelper(this, count);\r\n    }\r\n\r\n    getParentNode(count = 0) {\r\n      return getNodeHelper(this, count + 1);\r\n    } // Temporarily push properties named by string arguments given after the\r\n    // callback function onto this.stack, then call the callback with a\r\n    // reference to this (modified) FastPath object. Note that the stack will\r\n    // be restored to its original state after the callback is finished, so it\r\n    // is probably a mistake to retain a reference to the path.\r\n\r\n\r\n    call(callback, ...names) {\r\n      const {\r\n        stack\r\n      } = this;\r\n      const {\r\n        length\r\n      } = stack;\r\n      let value = getLast(stack);\r\n\r\n      for (const name of names) {\r\n        value = value[name];\r\n        stack.push(name, value);\r\n      }\r\n\r\n      const result = callback(this);\r\n      stack.length = length;\r\n      return result;\r\n    }\r\n\r\n    callParent(callback, count = 0) {\r\n      const stackIndex = getNodeStackIndexHelper(this.stack, count + 1);\r\n      const parentValues = this.stack.splice(stackIndex + 1);\r\n      const result = callback(this);\r\n      this.stack.push(...parentValues);\r\n      return result;\r\n    } // Similar to FastPath.prototype.call, except that the value obtained by\r\n    // accessing this.getValue()[name1][name2]... should be array-like. The\r\n    // callback will be called with a reference to this path object for each\r\n    // element of the array.\r\n\r\n\r\n    each(callback, ...names) {\r\n      const {\r\n        stack\r\n      } = this;\r\n      const {\r\n        length\r\n      } = stack;\r\n      let value = getLast(stack);\r\n\r\n      for (const name of names) {\r\n        value = value[name];\r\n        stack.push(name, value);\r\n      }\r\n\r\n      for (let i = 0; i < value.length; ++i) {\r\n        if (i in value) {\r\n          stack.push(i, value[i]); // If the callback needs to know the value of i, call\r\n          // path.getName(), assuming path is the parameter name.\r\n\r\n          callback(this);\r\n          stack.length -= 2;\r\n        }\r\n      }\r\n\r\n      stack.length = length;\r\n    } // Similar to FastPath.prototype.each, except that the results of the\r\n    // callback function invocations are stored in an array and returned at\r\n    // the end of the iteration.\r\n\r\n\r\n    map(callback, ...names) {\r\n      const {\r\n        stack\r\n      } = this;\r\n      const {\r\n        length\r\n      } = stack;\r\n      let value = getLast(stack);\r\n\r\n      for (const name of names) {\r\n        value = value[name];\r\n        stack.push(name, value);\r\n      }\r\n\r\n      const result = new Array(value.length);\r\n\r\n      for (let i = 0; i < value.length; ++i) {\r\n        if (i in value) {\r\n          stack.push(i, value[i]);\r\n          result[i] = callback(this, i);\r\n          stack.length -= 2;\r\n        }\r\n      }\r\n\r\n      stack.length = length;\r\n      return result;\r\n    }\r\n    /**\r\n     * @param {...(\r\n     *   | ((node: any, name: string | null, number: number | null) => boolean)\r\n     *   | undefined\r\n     * )} predicates\r\n     */\r\n\r\n\r\n    match(...predicates) {\r\n      let stackPointer = this.stack.length - 1;\r\n      let name = null;\r\n      let node = this.stack[stackPointer--];\r\n\r\n      for (const predicate of predicates) {\r\n        if (node === undefined) {\r\n          return false;\r\n        } // skip index/array\r\n\r\n\r\n        let number = null;\r\n\r\n        if (typeof name === \"number\") {\r\n          number = name;\r\n          name = this.stack[stackPointer--];\r\n          node = this.stack[stackPointer--];\r\n        }\r\n\r\n        if (predicate && !predicate(node, name, number)) {\r\n          return false;\r\n        }\r\n\r\n        name = this.stack[stackPointer--];\r\n        node = this.stack[stackPointer--];\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n  }\r\n\r\n  var fastPath = FastPath;\r\n\r\n  const {\r\n    normalize: normalize$2\r\n  } = options$1;\r\n\r\n  function printSubtree(path, print, options, printAstToDoc) {\r\n    if (options.printer.embed) {\r\n      return options.printer.embed(path, print, (text, partialNextOptions) => textToDoc(text, partialNextOptions, options, printAstToDoc), options);\r\n    }\r\n  }\r\n\r\n  function textToDoc(text, partialNextOptions, parentOptions, printAstToDoc) {\r\n    const nextOptions = normalize$2(Object.assign({}, parentOptions, {}, partialNextOptions, {\r\n      parentParser: parentOptions.parser,\r\n      embeddedInHtml: !!(parentOptions.embeddedInHtml || parentOptions.parser === \"html\" || parentOptions.parser === \"vue\" || parentOptions.parser === \"angular\" || parentOptions.parser === \"lwc\"),\r\n      originalText: text\r\n    }), {\r\n      passThrough: true\r\n    });\r\n    const result = parser.parse(text, nextOptions);\r\n    const {\r\n      ast\r\n    } = result;\r\n    text = result.text;\r\n    const astComments = ast.comments;\r\n    delete ast.comments;\r\n    comments.attach(astComments, ast, text, nextOptions);\r\n    return printAstToDoc(ast, nextOptions);\r\n  }\r\n\r\n  var multiparser = {\r\n    printSubtree\r\n  };\r\n\r\n  const doc = document;\r\n  const docBuilders$1 = doc.builders;\r\n  const {\r\n    concat: concat$3,\r\n    hardline: hardline$2,\r\n    addAlignmentToDoc: addAlignmentToDoc$1\r\n  } = docBuilders$1;\r\n  const docUtils$1 = doc.utils;\r\n  /**\r\n   * Takes an abstract syntax tree (AST) and recursively converts it to a\r\n   * document (series of printing primitives).\r\n   *\r\n   * This is done by descending down the AST recursively. The recursion\r\n   * involves two functions that call each other:\r\n   *\r\n   * 1. printGenerically(), which is defined as an inner function here.\r\n   *    It basically takes care of node caching.\r\n   * 2. callPluginPrintFunction(), which checks for some options, and\r\n   *    ultimately calls the print() function provided by the plugin.\r\n   *\r\n   * The plugin function will call printGenerically() again for child nodes\r\n   * of the current node, which will do its housekeeping, then call the\r\n   * plugin function again, and so on.\r\n   *\r\n   * All the while, these functions pass a \"path\" variable around, which\r\n   * is a stack-like data structure (FastPath) that maintains the current\r\n   * state of the recursion. It is called \"path\", because it represents\r\n   * the path to the current node through the Abstract Syntax Tree.\r\n   */\r\n\r\n  function printAstToDoc(ast, options, alignmentSize = 0) {\r\n    const {\r\n      printer\r\n    } = options;\r\n\r\n    if (printer.preprocess) {\r\n      ast = printer.preprocess(ast, options);\r\n    }\r\n\r\n    const cache = new Map();\r\n\r\n    function printGenerically(path, args) {\r\n      const node = path.getValue();\r\n      const shouldCache = node && typeof node === \"object\" && args === undefined;\r\n\r\n      if (shouldCache && cache.has(node)) {\r\n        return cache.get(node);\r\n      } // We let JSXElement print its comments itself because it adds () around\r\n      // UnionTypeAnnotation has to align the child without the comments\r\n\r\n\r\n      let res;\r\n\r\n      if (printer.willPrintOwnComments && printer.willPrintOwnComments(path, options)) {\r\n        res = callPluginPrintFunction(path, options, printGenerically, args);\r\n      } else {\r\n        // printComments will call the plugin print function and check for\r\n        // comments to print\r\n        res = comments.printComments(path, p => callPluginPrintFunction(p, options, printGenerically, args), options, args && args.needsSemi);\r\n      }\r\n\r\n      if (shouldCache) {\r\n        cache.set(node, res);\r\n      }\r\n\r\n      return res;\r\n    }\r\n\r\n    let doc = printGenerically(new fastPath(ast));\r\n\r\n    if (alignmentSize > 0) {\r\n      // Add a hardline to make the indents take effect\r\n      // It should be removed in index.js format()\r\n      doc = addAlignmentToDoc$1(concat$3([hardline$2, doc]), alignmentSize, options.tabWidth);\r\n    }\r\n\r\n    docUtils$1.propagateBreaks(doc);\r\n    return doc;\r\n  }\r\n\r\n  function callPluginPrintFunction(path, options, printPath, args) {\r\n    assert.ok(path instanceof fastPath);\r\n    const node = path.getValue();\r\n    const {\r\n      printer\r\n    } = options; // Escape hatch\r\n\r\n    if (printer.hasPrettierIgnore && printer.hasPrettierIgnore(path)) {\r\n      return options.originalText.slice(options.locStart(node), options.locEnd(node));\r\n    }\r\n\r\n    if (node) {\r\n      try {\r\n        // Potentially switch to a different parser\r\n        const sub = multiparser.printSubtree(path, printPath, options, printAstToDoc);\r\n\r\n        if (sub) {\r\n          return sub;\r\n        }\r\n      } catch (error) {\r\n        /* istanbul ignore if */\r\n        if (commonjsGlobal.PRETTIER_DEBUG) {\r\n          throw error;\r\n        } // Continue with current parser\r\n\r\n      }\r\n    }\r\n\r\n    return printer.print(path, options, printPath, args);\r\n  }\r\n\r\n  var astToDoc = printAstToDoc;\r\n\r\n  function findSiblingAncestors(startNodeAndParents, endNodeAndParents, opts) {\r\n    let resultStartNode = startNodeAndParents.node;\r\n    let resultEndNode = endNodeAndParents.node;\r\n\r\n    if (resultStartNode === resultEndNode) {\r\n      return {\r\n        startNode: resultStartNode,\r\n        endNode: resultEndNode\r\n      };\r\n    }\r\n\r\n    for (const endParent of endNodeAndParents.parentNodes) {\r\n      if (endParent.type !== \"Program\" && endParent.type !== \"File\" && opts.locStart(endParent) >= opts.locStart(startNodeAndParents.node)) {\r\n        resultEndNode = endParent;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    for (const startParent of startNodeAndParents.parentNodes) {\r\n      if (startParent.type !== \"Program\" && startParent.type !== \"File\" && opts.locEnd(startParent) <= opts.locEnd(endNodeAndParents.node)) {\r\n        resultStartNode = startParent;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return {\r\n      startNode: resultStartNode,\r\n      endNode: resultEndNode\r\n    };\r\n  }\r\n\r\n  function findNodeAtOffset(node, offset, options, predicate, parentNodes) {\r\n    predicate = predicate || (() => true);\r\n\r\n    parentNodes = parentNodes || [];\r\n    const start = options.locStart(node, options.locStart);\r\n    const end = options.locEnd(node, options.locEnd);\r\n\r\n    if (start <= offset && offset <= end) {\r\n      for (const childNode of comments.getSortedChildNodes(node, options)) {\r\n        const childResult = findNodeAtOffset(childNode, offset, options, predicate, [node].concat(parentNodes));\r\n\r\n        if (childResult) {\r\n          return childResult;\r\n        }\r\n      }\r\n\r\n      if (predicate(node)) {\r\n        return {\r\n          node,\r\n          parentNodes\r\n        };\r\n      }\r\n    }\r\n  } // See https://www.ecma-international.org/ecma-262/5.1/#sec-A.5\r\n\r\n\r\n  function isSourceElement(opts, node) {\r\n    if (node == null) {\r\n      return false;\r\n    } // JS and JS like to avoid repetitions\r\n\r\n\r\n    const jsSourceElements = [\"FunctionDeclaration\", \"BlockStatement\", \"BreakStatement\", \"ContinueStatement\", \"DebuggerStatement\", \"DoWhileStatement\", \"EmptyStatement\", \"ExpressionStatement\", \"ForInStatement\", \"ForStatement\", \"IfStatement\", \"LabeledStatement\", \"ReturnStatement\", \"SwitchStatement\", \"ThrowStatement\", \"TryStatement\", \"VariableDeclaration\", \"WhileStatement\", \"WithStatement\", \"ClassDeclaration\", // ES 2015\r\n    \"ImportDeclaration\", // Module\r\n    \"ExportDefaultDeclaration\", // Module\r\n    \"ExportNamedDeclaration\", // Module\r\n    \"ExportAllDeclaration\", // Module\r\n    \"TypeAlias\", // Flow\r\n    \"InterfaceDeclaration\", // Flow, TypeScript\r\n    \"TypeAliasDeclaration\", // TypeScript\r\n    \"ExportAssignment\", // TypeScript\r\n    \"ExportDeclaration\" // TypeScript\r\n    ];\r\n    const jsonSourceElements = [\"ObjectExpression\", \"ArrayExpression\", \"StringLiteral\", \"NumericLiteral\", \"BooleanLiteral\", \"NullLiteral\"];\r\n    const graphqlSourceElements = [\"OperationDefinition\", \"FragmentDefinition\", \"VariableDefinition\", \"TypeExtensionDefinition\", \"ObjectTypeDefinition\", \"FieldDefinition\", \"DirectiveDefinition\", \"EnumTypeDefinition\", \"EnumValueDefinition\", \"InputValueDefinition\", \"InputObjectTypeDefinition\", \"SchemaDefinition\", \"OperationTypeDefinition\", \"InterfaceTypeDefinition\", \"UnionTypeDefinition\", \"ScalarTypeDefinition\"];\r\n\r\n    switch (opts.parser) {\r\n      case \"flow\":\r\n      case \"babel\":\r\n      case \"babel-flow\":\r\n      case \"babel-ts\":\r\n      case \"typescript\":\r\n        return jsSourceElements.includes(node.type);\r\n\r\n      case \"json\":\r\n        return jsonSourceElements.includes(node.type);\r\n\r\n      case \"graphql\":\r\n        return graphqlSourceElements.includes(node.kind);\r\n\r\n      case \"vue\":\r\n        return node.tag !== \"root\";\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function calculateRange(text, opts, ast) {\r\n    // Contract the range so that it has non-whitespace characters at its endpoints.\r\n    // This ensures we can format a range that doesn't end on a node.\r\n    const rangeStringOrig = text.slice(opts.rangeStart, opts.rangeEnd);\r\n    const startNonWhitespace = Math.max(opts.rangeStart + rangeStringOrig.search(/\\S/), opts.rangeStart);\r\n    let endNonWhitespace;\r\n\r\n    for (endNonWhitespace = opts.rangeEnd; endNonWhitespace > opts.rangeStart; --endNonWhitespace) {\r\n      if (text[endNonWhitespace - 1].match(/\\S/)) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    const startNodeAndParents = findNodeAtOffset(ast, startNonWhitespace, opts, node => isSourceElement(opts, node));\r\n    const endNodeAndParents = findNodeAtOffset(ast, endNonWhitespace, opts, node => isSourceElement(opts, node));\r\n\r\n    if (!startNodeAndParents || !endNodeAndParents) {\r\n      return {\r\n        rangeStart: 0,\r\n        rangeEnd: 0\r\n      };\r\n    }\r\n\r\n    const siblingAncestors = findSiblingAncestors(startNodeAndParents, endNodeAndParents, opts);\r\n    const {\r\n      startNode,\r\n      endNode\r\n    } = siblingAncestors;\r\n    const rangeStart = Math.min(opts.locStart(startNode, opts.locStart), opts.locStart(endNode, opts.locStart));\r\n    const rangeEnd = Math.max(opts.locEnd(startNode, opts.locEnd), opts.locEnd(endNode, opts.locEnd));\r\n    return {\r\n      rangeStart,\r\n      rangeEnd\r\n    };\r\n  }\r\n\r\n  var rangeUtil = {\r\n    calculateRange,\r\n    findNodeAtOffset\r\n  };\r\n\r\n  var diff = getCjsExportFromNamespace(index_es6);\r\n\r\n  const normalizeOptions$1 = options$1.normalize;\r\n  const {\r\n    guessEndOfLine: guessEndOfLine$1,\r\n    convertEndOfLineToChars: convertEndOfLineToChars$2\r\n  } = endOfLine;\r\n  const {\r\n    printer: {\r\n      printDocToString: printDocToString$1\r\n    },\r\n    debug: {\r\n      printDocToDebug\r\n    }\r\n  } = document;\r\n  const BOM = \"\\uFEFF\";\r\n  const CURSOR = Symbol(\"cursor\");\r\n  const PLACEHOLDERS = {\r\n    cursorOffset: \"<<<PRETTIER_CURSOR>>>\",\r\n    rangeStart: \"<<<PRETTIER_RANGE_START>>>\",\r\n    rangeEnd: \"<<<PRETTIER_RANGE_END>>>\"\r\n  };\r\n\r\n  function ensureAllCommentsPrinted(astComments) {\r\n    if (!astComments) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < astComments.length; ++i) {\r\n      if (util$1.isNodeIgnoreComment(astComments[i])) {\r\n        // If there's a prettier-ignore, we're not printing that sub-tree so we\r\n        // don't know if the comments was printed or not.\r\n        return;\r\n      }\r\n    }\r\n\r\n    astComments.forEach(comment => {\r\n      if (!comment.printed) {\r\n        throw new Error('Comment \"' + comment.value.trim() + '\" was not printed. Please report this error!');\r\n      }\r\n\r\n      delete comment.printed;\r\n    });\r\n  }\r\n\r\n  function attachComments(text, ast, opts) {\r\n    const astComments = ast.comments;\r\n\r\n    if (astComments) {\r\n      delete ast.comments;\r\n      comments.attach(astComments, ast, text, opts);\r\n    }\r\n\r\n    ast.tokens = [];\r\n    opts.originalText = opts.parser === \"yaml\" ? text : text.trimEnd();\r\n    return astComments;\r\n  }\r\n\r\n  function coreFormat(text, opts, addAlignmentSize) {\r\n    if (!text || !text.trim().length) {\r\n      return {\r\n        formatted: \"\",\r\n        cursorOffset: 0\r\n      };\r\n    }\r\n\r\n    addAlignmentSize = addAlignmentSize || 0;\r\n    const parsed = parser.parse(text, opts);\r\n    const {\r\n      ast\r\n    } = parsed;\r\n    text = parsed.text;\r\n\r\n    if (opts.cursorOffset >= 0) {\r\n      const nodeResult = rangeUtil.findNodeAtOffset(ast, opts.cursorOffset, opts);\r\n\r\n      if (nodeResult && nodeResult.node) {\r\n        opts.cursorNode = nodeResult.node;\r\n      }\r\n    }\r\n\r\n    const astComments = attachComments(text, ast, opts);\r\n    const doc = astToDoc(ast, opts, addAlignmentSize);\r\n    const result = printDocToString$1(doc, opts);\r\n    ensureAllCommentsPrinted(astComments); // Remove extra leading indentation as well as the added indentation after last newline\r\n\r\n    if (addAlignmentSize > 0) {\r\n      const trimmed = result.formatted.trim();\r\n\r\n      if (result.cursorNodeStart !== undefined) {\r\n        result.cursorNodeStart -= result.formatted.indexOf(trimmed);\r\n      }\r\n\r\n      result.formatted = trimmed + convertEndOfLineToChars$2(opts.endOfLine);\r\n    }\r\n\r\n    if (opts.cursorOffset >= 0) {\r\n      let oldCursorNodeStart;\r\n      let oldCursorNodeText;\r\n      let cursorOffsetRelativeToOldCursorNode;\r\n      let newCursorNodeStart;\r\n      let newCursorNodeText;\r\n\r\n      if (opts.cursorNode && result.cursorNodeText) {\r\n        oldCursorNodeStart = opts.locStart(opts.cursorNode);\r\n        oldCursorNodeText = text.slice(oldCursorNodeStart, opts.locEnd(opts.cursorNode));\r\n        cursorOffsetRelativeToOldCursorNode = opts.cursorOffset - oldCursorNodeStart;\r\n        newCursorNodeStart = result.cursorNodeStart;\r\n        newCursorNodeText = result.cursorNodeText;\r\n      } else {\r\n        oldCursorNodeStart = 0;\r\n        oldCursorNodeText = text;\r\n        cursorOffsetRelativeToOldCursorNode = opts.cursorOffset;\r\n        newCursorNodeStart = 0;\r\n        newCursorNodeText = result.formatted;\r\n      }\r\n\r\n      if (oldCursorNodeText === newCursorNodeText) {\r\n        return {\r\n          formatted: result.formatted,\r\n          cursorOffset: newCursorNodeStart + cursorOffsetRelativeToOldCursorNode\r\n        };\r\n      } // diff old and new cursor node texts, with a special cursor\r\n      // symbol inserted to find out where it moves to\r\n\r\n\r\n      const oldCursorNodeCharArray = oldCursorNodeText.split(\"\");\r\n      oldCursorNodeCharArray.splice(cursorOffsetRelativeToOldCursorNode, 0, CURSOR);\r\n      const newCursorNodeCharArray = newCursorNodeText.split(\"\");\r\n      const cursorNodeDiff = diff.diffArrays(oldCursorNodeCharArray, newCursorNodeCharArray);\r\n      let cursorOffset = newCursorNodeStart;\r\n\r\n      for (const entry of cursorNodeDiff) {\r\n        if (entry.removed) {\r\n          if (entry.value.includes(CURSOR)) {\r\n            break;\r\n          }\r\n        } else {\r\n          cursorOffset += entry.count;\r\n        }\r\n      }\r\n\r\n      return {\r\n        formatted: result.formatted,\r\n        cursorOffset\r\n      };\r\n    }\r\n\r\n    return {\r\n      formatted: result.formatted\r\n    };\r\n  }\r\n\r\n  function formatRange(text, opts) {\r\n    const parsed = parser.parse(text, opts);\r\n    const {\r\n      ast\r\n    } = parsed;\r\n    text = parsed.text;\r\n    const range = rangeUtil.calculateRange(text, opts, ast);\r\n    const {\r\n      rangeStart,\r\n      rangeEnd\r\n    } = range;\r\n    const rangeString = text.slice(rangeStart, rangeEnd); // Try to extend the range backwards to the beginning of the line.\r\n    // This is so we can detect indentation correctly and restore it.\r\n    // Use `Math.min` since `lastIndexOf` returns 0 when `rangeStart` is 0\r\n\r\n    const rangeStart2 = Math.min(rangeStart, text.lastIndexOf(\"\\n\", rangeStart) + 1);\r\n    const indentString = text.slice(rangeStart2, rangeStart);\r\n    const alignmentSize = util$1.getAlignmentSize(indentString, opts.tabWidth);\r\n    const rangeResult = coreFormat(rangeString, Object.assign({}, opts, {\r\n      rangeStart: 0,\r\n      rangeEnd: Infinity,\r\n      // track the cursor offset only if it's within our range\r\n      cursorOffset: opts.cursorOffset >= rangeStart && opts.cursorOffset < rangeEnd ? opts.cursorOffset - rangeStart : -1\r\n    }), alignmentSize); // Since the range contracts to avoid trailing whitespace,\r\n    // we need to remove the newline that was inserted by the `format` call.\r\n\r\n    const rangeTrimmed = rangeResult.formatted.trimEnd();\r\n    const rangeLeft = text.slice(0, rangeStart);\r\n    const rangeRight = text.slice(rangeEnd);\r\n    let {\r\n      cursorOffset\r\n    } = opts;\r\n\r\n    if (opts.cursorOffset >= rangeEnd) {\r\n      // handle the case where the cursor was past the end of the range\r\n      cursorOffset = opts.cursorOffset - rangeEnd + (rangeStart + rangeTrimmed.length);\r\n    } else if (rangeResult.cursorOffset !== undefined) {\r\n      // handle the case where the cursor was in the range\r\n      cursorOffset = rangeResult.cursorOffset + rangeStart;\r\n    } // keep the cursor as it was if it was before the start of the range\r\n\r\n\r\n    let formatted;\r\n\r\n    if (opts.endOfLine === \"lf\") {\r\n      formatted = rangeLeft + rangeTrimmed + rangeRight;\r\n    } else {\r\n      const eol = convertEndOfLineToChars$2(opts.endOfLine);\r\n\r\n      if (cursorOffset >= 0) {\r\n        const parts = [rangeLeft, rangeTrimmed, rangeRight];\r\n        let partIndex = 0;\r\n        let partOffset = cursorOffset;\r\n\r\n        while (partIndex < parts.length) {\r\n          const part = parts[partIndex];\r\n\r\n          if (partOffset < part.length) {\r\n            parts[partIndex] = parts[partIndex].slice(0, partOffset) + PLACEHOLDERS.cursorOffset + parts[partIndex].slice(partOffset);\r\n            break;\r\n          }\r\n\r\n          partIndex++;\r\n          partOffset -= part.length;\r\n        }\r\n\r\n        const [newRangeLeft, newRangeTrimmed, newRangeRight] = parts;\r\n        formatted = (newRangeLeft.replace(/\\n/g, eol) + newRangeTrimmed + newRangeRight.replace(/\\n/g, eol)).replace(PLACEHOLDERS.cursorOffset, (_, index) => {\r\n          cursorOffset = index;\r\n          return \"\";\r\n        });\r\n      } else {\r\n        formatted = rangeLeft.replace(/\\n/g, eol) + rangeTrimmed + rangeRight.replace(/\\n/g, eol);\r\n      }\r\n    }\r\n\r\n    return {\r\n      formatted,\r\n      cursorOffset\r\n    };\r\n  }\r\n\r\n  function format(text, opts) {\r\n    const selectedParser = parser.resolveParser(opts);\r\n    const hasPragma = !selectedParser.hasPragma || selectedParser.hasPragma(text);\r\n\r\n    if (opts.requirePragma && !hasPragma) {\r\n      return {\r\n        formatted: text\r\n      };\r\n    }\r\n\r\n    if (opts.endOfLine === \"auto\") {\r\n      opts.endOfLine = guessEndOfLine$1(text);\r\n    }\r\n\r\n    const hasCursor = opts.cursorOffset >= 0;\r\n    const hasRangeStart = opts.rangeStart > 0;\r\n    const hasRangeEnd = opts.rangeEnd < text.length; // get rid of CR/CRLF parsing\r\n\r\n    if (text.includes(\"\\r\")) {\r\n      const offsetKeys = [hasCursor && \"cursorOffset\", hasRangeStart && \"rangeStart\", hasRangeEnd && \"rangeEnd\"].filter(Boolean).sort((aKey, bKey) => opts[aKey] - opts[bKey]);\r\n\r\n      for (let i = offsetKeys.length - 1; i >= 0; i--) {\r\n        const key = offsetKeys[i];\r\n        text = text.slice(0, opts[key]) + PLACEHOLDERS[key] + text.slice(opts[key]);\r\n      }\r\n\r\n      text = text.replace(/\\r\\n?/g, \"\\n\");\r\n\r\n      for (let i = 0; i < offsetKeys.length; i++) {\r\n        const key = offsetKeys[i];\r\n        text = text.replace(PLACEHOLDERS[key], (_, index) => {\r\n          opts[key] = index;\r\n          return \"\";\r\n        });\r\n      }\r\n    }\r\n\r\n    const hasUnicodeBOM = text.charAt(0) === BOM;\r\n\r\n    if (hasUnicodeBOM) {\r\n      text = text.slice(1);\r\n\r\n      if (hasCursor) {\r\n        opts.cursorOffset++;\r\n      }\r\n\r\n      if (hasRangeStart) {\r\n        opts.rangeStart++;\r\n      }\r\n\r\n      if (hasRangeEnd) {\r\n        opts.rangeEnd++;\r\n      }\r\n    }\r\n\r\n    if (!hasCursor) {\r\n      opts.cursorOffset = -1;\r\n    }\r\n\r\n    if (opts.rangeStart < 0) {\r\n      opts.rangeStart = 0;\r\n    }\r\n\r\n    if (opts.rangeEnd > text.length) {\r\n      opts.rangeEnd = text.length;\r\n    }\r\n\r\n    const result = hasRangeStart || hasRangeEnd ? formatRange(text, opts) : coreFormat(opts.insertPragma && opts.printer.insertPragma && !hasPragma ? opts.printer.insertPragma(text) : text, opts);\r\n\r\n    if (hasUnicodeBOM) {\r\n      result.formatted = BOM + result.formatted;\r\n\r\n      if (hasCursor) {\r\n        result.cursorOffset++;\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  var core = {\r\n    formatWithCursor(text, opts) {\r\n      opts = normalizeOptions$1(opts);\r\n      return format(text, opts);\r\n    },\r\n\r\n    parse(text, opts, massage) {\r\n      opts = normalizeOptions$1(opts);\r\n\r\n      if (text.includes(\"\\r\")) {\r\n        text = text.replace(/\\r\\n?/g, \"\\n\");\r\n      }\r\n\r\n      const parsed = parser.parse(text, opts);\r\n\r\n      if (massage) {\r\n        parsed.ast = massageAst(parsed.ast, opts);\r\n      }\r\n\r\n      return parsed;\r\n    },\r\n\r\n    formatAST(ast, opts) {\r\n      opts = normalizeOptions$1(opts);\r\n      const doc = astToDoc(ast, opts);\r\n      return printDocToString$1(doc, opts);\r\n    },\r\n\r\n    // Doesn't handle shebang for now\r\n    formatDoc(doc, opts) {\r\n      const debug = printDocToDebug(doc);\r\n      opts = normalizeOptions$1(Object.assign({}, opts, {\r\n        parser: \"babel\"\r\n      }));\r\n      return format(debug, opts).formatted;\r\n    },\r\n\r\n    printToDoc(text, opts) {\r\n      opts = normalizeOptions$1(opts);\r\n      const parsed = parser.parse(text, opts);\r\n      const {\r\n        ast\r\n      } = parsed;\r\n      text = parsed.text;\r\n      attachComments(text, ast, opts);\r\n      return astToDoc(ast, opts);\r\n    },\r\n\r\n    printDocToString(doc, opts) {\r\n      return printDocToString$1(doc, normalizeOptions$1(opts));\r\n    }\r\n\r\n  };\r\n\r\n  function clean(ast, newObj, parent) {\r\n    [\"raw\", // front-matter\r\n    \"raws\", \"sourceIndex\", \"source\", \"before\", \"after\", \"trailingComma\"].forEach(name => {\r\n      delete newObj[name];\r\n    });\r\n\r\n    if (ast.type === \"yaml\") {\r\n      delete newObj.value;\r\n    } // --insert-pragma\r\n\r\n\r\n    if (ast.type === \"css-comment\" && parent.type === \"css-root\" && parent.nodes.length !== 0 && ( // first non-front-matter comment\r\n    parent.nodes[0] === ast || (parent.nodes[0].type === \"yaml\" || parent.nodes[0].type === \"toml\") && parent.nodes[1] === ast)) {\r\n      /**\r\n       * something\r\n       *\r\n       * @format\r\n       */\r\n      delete newObj.text; // standalone pragma\r\n\r\n      if (/^\\*\\s*@(format|prettier)\\s*$/.test(ast.text)) {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    if (ast.type === \"media-query\" || ast.type === \"media-query-list\" || ast.type === \"media-feature-expression\") {\r\n      delete newObj.value;\r\n    }\r\n\r\n    if (ast.type === \"css-rule\") {\r\n      delete newObj.params;\r\n    }\r\n\r\n    if (ast.type === \"selector-combinator\") {\r\n      newObj.value = newObj.value.replace(/\\s+/g, \" \");\r\n    }\r\n\r\n    if (ast.type === \"media-feature\") {\r\n      newObj.value = newObj.value.replace(/ /g, \"\");\r\n    }\r\n\r\n    if (ast.type === \"value-word\" && (ast.isColor && ast.isHex || [\"initial\", \"inherit\", \"unset\", \"revert\"].includes(newObj.value.replace().toLowerCase())) || ast.type === \"media-feature\" || ast.type === \"selector-root-invalid\" || ast.type === \"selector-pseudo\") {\r\n      newObj.value = newObj.value.toLowerCase();\r\n    }\r\n\r\n    if (ast.type === \"css-decl\") {\r\n      newObj.prop = newObj.prop.toLowerCase();\r\n    }\r\n\r\n    if (ast.type === \"css-atrule\" || ast.type === \"css-import\") {\r\n      newObj.name = newObj.name.toLowerCase();\r\n    }\r\n\r\n    if (ast.type === \"value-number\") {\r\n      newObj.unit = newObj.unit.toLowerCase();\r\n    }\r\n\r\n    if ((ast.type === \"media-feature\" || ast.type === \"media-keyword\" || ast.type === \"media-type\" || ast.type === \"media-unknown\" || ast.type === \"media-url\" || ast.type === \"media-value\" || ast.type === \"selector-attribute\" || ast.type === \"selector-string\" || ast.type === \"selector-class\" || ast.type === \"selector-combinator\" || ast.type === \"value-string\") && newObj.value) {\r\n      newObj.value = cleanCSSStrings(newObj.value);\r\n    }\r\n\r\n    if (ast.type === \"selector-attribute\") {\r\n      newObj.attribute = newObj.attribute.trim();\r\n\r\n      if (newObj.namespace) {\r\n        if (typeof newObj.namespace === \"string\") {\r\n          newObj.namespace = newObj.namespace.trim();\r\n\r\n          if (newObj.namespace.length === 0) {\r\n            newObj.namespace = true;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (newObj.value) {\r\n        newObj.value = newObj.value.trim().replace(/^['\"]|['\"]$/g, \"\");\r\n        delete newObj.quoted;\r\n      }\r\n    }\r\n\r\n    if ((ast.type === \"media-value\" || ast.type === \"media-type\" || ast.type === \"value-number\" || ast.type === \"selector-root-invalid\" || ast.type === \"selector-class\" || ast.type === \"selector-combinator\" || ast.type === \"selector-tag\") && newObj.value) {\r\n      newObj.value = newObj.value.replace(/([\\d.eE+-]+)([a-zA-Z]*)/g, (match, numStr, unit) => {\r\n        const num = Number(numStr);\r\n        return isNaN(num) ? match : num + unit.toLowerCase();\r\n      });\r\n    }\r\n\r\n    if (ast.type === \"selector-tag\") {\r\n      const lowercasedValue = ast.value.toLowerCase();\r\n\r\n      if ([\"from\", \"to\"].includes(lowercasedValue)) {\r\n        newObj.value = lowercasedValue;\r\n      }\r\n    } // Workaround when `postcss-values-parser` parse `not`, `and` or `or` keywords as `value-func`\r\n\r\n\r\n    if (ast.type === \"css-atrule\" && ast.name.toLowerCase() === \"supports\") {\r\n      delete newObj.value;\r\n    } // Workaround for SCSS nested properties\r\n\r\n\r\n    if (ast.type === \"selector-unknown\") {\r\n      delete newObj.value;\r\n    }\r\n  }\r\n\r\n  function cleanCSSStrings(value) {\r\n    return value.replace(/'/g, '\"').replace(/\\\\([^a-fA-F\\d])/g, \"$1\");\r\n  }\r\n\r\n  var clean_1 = clean;\r\n\r\n  const {\r\n    builders: {\r\n      hardline: hardline$3,\r\n      literalline: literalline$1,\r\n      concat: concat$4,\r\n      markAsRoot: markAsRoot$1\r\n    },\r\n    utils: {\r\n      mapDoc: mapDoc$1\r\n    }\r\n  } = document;\r\n\r\n  function embed(path, print, textToDoc\r\n  /*, options */\r\n  ) {\r\n    const node = path.getValue();\r\n\r\n    if (node.type === \"yaml\") {\r\n      return markAsRoot$1(concat$4([\"---\", hardline$3, node.value.trim() ? replaceNewlinesWithLiterallines(textToDoc(node.value, {\r\n        parser: \"yaml\"\r\n      })) : \"\", \"---\", hardline$3]));\r\n    }\r\n\r\n    return null;\r\n\r\n    function replaceNewlinesWithLiterallines(doc) {\r\n      return mapDoc$1(doc, currentDoc => typeof currentDoc === \"string\" && currentDoc.includes(\"\\n\") ? concat$4(currentDoc.split(/(\\n)/g).map((v, i) => i % 2 === 0 ? v : literalline$1)) : currentDoc);\r\n    }\r\n  }\r\n\r\n  var embed_1 = embed;\r\n\r\n  const detectNewline = string => {\r\n    if (typeof string !== 'string') {\r\n      throw new TypeError('Expected a string');\r\n    }\r\n\r\n    const newlines = string.match(/(?:\\r?\\n)/g) || [];\r\n\r\n    if (newlines.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const crlf = newlines.filter(newline => newline === '\\r\\n').length;\r\n    const lf = newlines.length - crlf;\r\n    return crlf > lf ? '\\r\\n' : '\\n';\r\n  };\r\n\r\n  var detectNewline_1 = detectNewline;\r\n\r\n  var graceful = string => typeof string === 'string' && detectNewline(string) || '\\n';\r\n  detectNewline_1.graceful = graceful;\r\n\r\n  var build = createCommonjsModule(function (module, exports) {\r\n\r\n    Object.defineProperty(exports, '__esModule', {\r\n      value: true\r\n    });\r\n    exports.extract = extract;\r\n    exports.strip = strip;\r\n    exports.parse = parse;\r\n    exports.parseWithComments = parseWithComments;\r\n    exports.print = print;\r\n\r\n    function _os() {\r\n      const data = require$$0$1;\r\n\r\n      _os = function _os() {\r\n        return data;\r\n      };\r\n\r\n      return data;\r\n    }\r\n\r\n    function _detectNewline() {\r\n      const data = _interopRequireDefault(detectNewline_1);\r\n\r\n      _detectNewline = function _detectNewline() {\r\n        return data;\r\n      };\r\n\r\n      return data;\r\n    }\r\n\r\n    function _interopRequireDefault(obj) {\r\n      return obj && obj.__esModule ? obj : {\r\n        default: obj\r\n      };\r\n    }\r\n    /**\r\n     * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\r\n     *\r\n     * This source code is licensed under the MIT license found in the\r\n     * LICENSE file in the root directory of this source tree.\r\n     */\r\n\r\n\r\n    const commentEndRe = /\\*\\/$/;\r\n    const commentStartRe = /^\\/\\*\\*/;\r\n    const docblockRe = /^\\s*(\\/\\*\\*?(.|\\r?\\n)*?\\*\\/)/;\r\n    const lineCommentRe = /(^|\\s+)\\/\\/([^\\r\\n]*)/g;\r\n    const ltrimNewlineRe = /^(\\r?\\n)+/;\r\n    const multilineRe = /(?:^|\\r?\\n) *(@[^\\r\\n]*?) *\\r?\\n *(?![^@\\r\\n]*\\/\\/[^]*)([^@\\r\\n\\s][^@\\r\\n]+?) *\\r?\\n/g;\r\n    const propertyRe = /(?:^|\\r?\\n) *@(\\S+) *([^\\r\\n]*)/g;\r\n    const stringStartRe = /(\\r?\\n|^) *\\* ?/g;\r\n\r\n    function extract(contents) {\r\n      const match = contents.match(docblockRe);\r\n      return match ? match[0].trimLeft() : '';\r\n    }\r\n\r\n    function strip(contents) {\r\n      const match = contents.match(docblockRe);\r\n      return match && match[0] ? contents.substring(match[0].length) : contents;\r\n    }\r\n\r\n    function parse(docblock) {\r\n      return parseWithComments(docblock).pragmas;\r\n    }\r\n\r\n    function parseWithComments(docblock) {\r\n      const line = (0, _detectNewline().default)(docblock) || _os().EOL;\r\n\r\n      docblock = docblock.replace(commentStartRe, '').replace(commentEndRe, '').replace(stringStartRe, '$1'); // Normalize multi-line directives\r\n\r\n      let prev = '';\r\n\r\n      while (prev !== docblock) {\r\n        prev = docblock;\r\n        docblock = docblock.replace(multilineRe, \"\".concat(line, \"$1 $2\").concat(line));\r\n      }\r\n\r\n      docblock = docblock.replace(ltrimNewlineRe, '').trimRight();\r\n      const result = Object.create(null);\r\n      const comments = docblock.replace(propertyRe, '').replace(ltrimNewlineRe, '').trimRight();\r\n      let match;\r\n\r\n      while (match = propertyRe.exec(docblock)) {\r\n        // strip linecomments from pragmas\r\n        const nextPragma = match[2].replace(lineCommentRe, '');\r\n\r\n        if (typeof result[match[1]] === 'string' || Array.isArray(result[match[1]])) {\r\n          result[match[1]] = [].concat(result[match[1]], nextPragma);\r\n        } else {\r\n          result[match[1]] = nextPragma;\r\n        }\r\n      }\r\n\r\n      return {\r\n        comments,\r\n        pragmas: result\r\n      };\r\n    }\r\n\r\n    function print({\r\n      comments = '',\r\n      pragmas = {}\r\n    }) {\r\n      const line = (0, _detectNewline().default)(comments) || _os().EOL;\r\n\r\n      const head = '/**';\r\n      const start = ' *';\r\n      const tail = ' */';\r\n      const keys = Object.keys(pragmas);\r\n      const printedObject = keys.map(key => printKeyValues(key, pragmas[key])).reduce((arr, next) => arr.concat(next), []).map(keyValue => start + ' ' + keyValue + line).join('');\r\n\r\n      if (!comments) {\r\n        if (keys.length === 0) {\r\n          return '';\r\n        }\r\n\r\n        if (keys.length === 1 && !Array.isArray(pragmas[keys[0]])) {\r\n          const value = pragmas[keys[0]];\r\n          return \"\".concat(head, \" \").concat(printKeyValues(keys[0], value)[0]).concat(tail);\r\n        }\r\n      }\r\n\r\n      const printedComments = comments.split(line).map(textLine => \"\".concat(start, \" \").concat(textLine)).join(line) + line;\r\n      return head + line + (comments ? printedComments : '') + (comments && keys.length ? start + line : '') + printedObject + tail;\r\n    }\r\n\r\n    function printKeyValues(key, valueOrArray) {\r\n      return [].concat(valueOrArray).map(value => \"@\".concat(key, \" \").concat(value).trim());\r\n    }\r\n  });\r\n  unwrapExports(build);\r\n  var build_1 = build.extract;\r\n  var build_2 = build.strip;\r\n  var build_3 = build.parse;\r\n  var build_4 = build.parseWithComments;\r\n  var build_5 = build.print;\r\n\r\n  function hasPragma(text) {\r\n    const pragmas = Object.keys(build.parse(build.extract(text)));\r\n    return pragmas.includes(\"prettier\") || pragmas.includes(\"format\");\r\n  }\r\n\r\n  function insertPragma(text) {\r\n    const parsedDocblock = build.parseWithComments(build.extract(text));\r\n    const pragmas = Object.assign({\r\n      format: \"\"\r\n    }, parsedDocblock.pragmas);\r\n    const newDocblock = build.print({\r\n      pragmas,\r\n      comments: parsedDocblock.comments.replace(/^(\\s+?\\r?\\n)+/, \"\") // remove leading newlines\r\n\r\n    }).replace(/(\\r\\n|\\r)/g, \"\\n\"); // normalise newlines (mitigate use of os.EOL by jest-docblock)\r\n\r\n    const strippedText = build.strip(text);\r\n    const separatingNewlines = strippedText.startsWith(\"\\n\") ? \"\\n\" : \"\\n\\n\";\r\n    return newDocblock + separatingNewlines + strippedText;\r\n  }\r\n\r\n  var pragma = {\r\n    hasPragma,\r\n    insertPragma\r\n  };\r\n\r\n  const DELIMITER_MAP = {\r\n    \"---\": \"yaml\",\r\n    \"+++\": \"toml\"\r\n  };\r\n\r\n  function parse$1(text) {\r\n    const delimiterRegex = Object.keys(DELIMITER_MAP).map(escapeStringRegexp$2).join(\"|\");\r\n    const match = text.match( // trailing spaces after delimiters are allowed\r\n    new RegExp(\"^(\".concat(delimiterRegex, \")[^\\\\n\\\\S]*\\\\n(?:([\\\\s\\\\S]*?)\\\\n)?\\\\1[^\\\\n\\\\S]*(\\\\n|$)\")));\r\n\r\n    if (match === null) {\r\n      return {\r\n        frontMatter: null,\r\n        content: text\r\n      };\r\n    }\r\n\r\n    const [raw, delimiter, value] = match;\r\n    return {\r\n      frontMatter: {\r\n        type: DELIMITER_MAP[delimiter],\r\n        value,\r\n        raw: raw.replace(/\\n$/, \"\")\r\n      },\r\n      content: raw.replace(/[^\\n]/g, \" \") + text.slice(raw.length)\r\n    };\r\n  }\r\n\r\n  var frontMatter = parse$1;\r\n\r\n  function hasPragma$1(text) {\r\n    return pragma.hasPragma(frontMatter(text).content);\r\n  }\r\n\r\n  function insertPragma$1(text) {\r\n    const {\r\n      frontMatter: frontMatter$1,\r\n      content\r\n    } = frontMatter(text);\r\n    return (frontMatter$1 ? frontMatter$1.raw + \"\\n\\n\" : \"\") + pragma.insertPragma(content);\r\n  }\r\n\r\n  var pragma$1 = {\r\n    hasPragma: hasPragma$1,\r\n    insertPragma: insertPragma$1\r\n  };\r\n\r\n  var lineColumnToIndex = function lineColumnToIndex(lineColumn, text) {\r\n    let index = 0;\r\n\r\n    for (let i = 0; i < lineColumn.line - 1; ++i) {\r\n      index = text.indexOf(\"\\n\", index) + 1;\r\n\r\n      if (index === -1) {\r\n        return -1;\r\n      }\r\n    }\r\n\r\n    return index + lineColumn.column;\r\n  };\r\n\r\n  const {\r\n    getLast: getLast$1,\r\n    skipEverythingButNewLine: skipEverythingButNewLine$2\r\n  } = util$1;\r\n\r\n  function calculateLocStart(node, text) {\r\n    if (node.source) {\r\n      return lineColumnToIndex(node.source.start, text) - 1;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  function calculateLocEnd(node, text) {\r\n    if (node.type === \"css-comment\" && node.inline) {\r\n      return skipEverythingButNewLine$2(text, node.source.startOffset);\r\n    }\r\n\r\n    const endNode = node.nodes && getLast$1(node.nodes);\r\n\r\n    if (endNode && node.source && !node.source.end) {\r\n      node = endNode;\r\n    }\r\n\r\n    if (node.source && node.source.end) {\r\n      return lineColumnToIndex(node.source.end, text);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  function calculateLoc(node, text) {\r\n    if (node && typeof node === \"object\") {\r\n      if (node.source) {\r\n        node.source.startOffset = calculateLocStart(node, text);\r\n        node.source.endOffset = calculateLocEnd(node, text);\r\n      }\r\n\r\n      for (const key in node) {\r\n        calculateLoc(node[key], text);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * Workaround for a bug: quotes in inline comments corrupt loc data of subsequent nodes.\r\n   * This function replaces the quotes with U+FFFE and U+FFFF. Later, when the comments are printed,\r\n   * their content is extracted from the original text or restored by replacing the placeholder\r\n   * characters back with quotes.\r\n   * - https://github.com/prettier/prettier/issues/7780\r\n   * - https://github.com/shellscape/postcss-less/issues/145\r\n   * - About noncharacters (U+FFFE and U+FFFF): http://www.unicode.org/faq/private_use.html#nonchar1\r\n   * @param text {string}\r\n   */\r\n\r\n\r\n  function replaceQuotesInInlineComments(text) {\r\n    /** @typedef { 'initial' | 'single-quotes' | 'double-quotes' | 'url' | 'comment-block' | 'comment-inline' } State */\r\n\r\n    /** @type {State} */\r\n    let state = \"initial\";\r\n    /** @type {State} */\r\n\r\n    let stateToReturnFromQuotes = \"initial\";\r\n    let inlineCommentStartIndex;\r\n    let inlineCommentContainsQuotes = false;\r\n    const inlineCommentsToReplace = [];\r\n\r\n    for (let i = 0; i < text.length; i++) {\r\n      const c = text[i];\r\n\r\n      switch (state) {\r\n        case \"initial\":\r\n          if (c === \"'\") {\r\n            state = \"single-quotes\";\r\n            continue;\r\n          }\r\n\r\n          if (c === '\"') {\r\n            state = \"double-quotes\";\r\n            continue;\r\n          }\r\n\r\n          if ((c === \"u\" || c === \"U\") && text.slice(i, i + 4).toLowerCase() === \"url(\") {\r\n            state = \"url\";\r\n            i += 3;\r\n            continue;\r\n          }\r\n\r\n          if (c === \"*\" && text[i - 1] === \"/\") {\r\n            state = \"comment-block\";\r\n            continue;\r\n          }\r\n\r\n          if (c === \"/\" && text[i - 1] === \"/\") {\r\n            state = \"comment-inline\";\r\n            inlineCommentStartIndex = i - 1;\r\n            continue;\r\n          }\r\n\r\n          continue;\r\n\r\n        case \"single-quotes\":\r\n          if (c === \"'\" && text[i - 1] !== \"\\\\\") {\r\n            state = stateToReturnFromQuotes;\r\n            stateToReturnFromQuotes = \"initial\";\r\n          }\r\n\r\n          if (c === \"\\n\" || c === \"\\r\") {\r\n            return text; // invalid input\r\n          }\r\n\r\n          continue;\r\n\r\n        case \"double-quotes\":\r\n          if (c === '\"' && text[i - 1] !== \"\\\\\") {\r\n            state = stateToReturnFromQuotes;\r\n            stateToReturnFromQuotes = \"initial\";\r\n          }\r\n\r\n          if (c === \"\\n\" || c === \"\\r\") {\r\n            return text; // invalid input\r\n          }\r\n\r\n          continue;\r\n\r\n        case \"url\":\r\n          if (c === \")\") {\r\n            state = \"initial\";\r\n          }\r\n\r\n          if (c === \"\\n\" || c === \"\\r\") {\r\n            return text; // invalid input\r\n          }\r\n\r\n          if (c === \"'\") {\r\n            state = \"single-quotes\";\r\n            stateToReturnFromQuotes = \"url\";\r\n            continue;\r\n          }\r\n\r\n          if (c === '\"') {\r\n            state = \"double-quotes\";\r\n            stateToReturnFromQuotes = \"url\";\r\n            continue;\r\n          }\r\n\r\n          continue;\r\n\r\n        case \"comment-block\":\r\n          if (c === \"/\" && text[i - 1] === \"*\") {\r\n            state = \"initial\";\r\n          }\r\n\r\n          continue;\r\n\r\n        case \"comment-inline\":\r\n          if (c === '\"' || c === \"'\") {\r\n            inlineCommentContainsQuotes = true;\r\n          }\r\n\r\n          if (c === \"\\n\" || c === \"\\r\") {\r\n            if (inlineCommentContainsQuotes) {\r\n              inlineCommentsToReplace.push([inlineCommentStartIndex, i]);\r\n            }\r\n\r\n            state = \"initial\";\r\n            inlineCommentContainsQuotes = false;\r\n          }\r\n\r\n          continue;\r\n      }\r\n    }\r\n\r\n    for (const [start, end] of inlineCommentsToReplace) {\r\n      text = text.slice(0, start) + text.slice(start, end).replace(/'/g, \"\\ufffe\").replace(/\"/g, \"\\uffff\") + text.slice(end);\r\n    }\r\n\r\n    return text;\r\n  }\r\n\r\n  function restoreQuotesInInlineComments(text) {\r\n    return text.replace(/\\ufffe/g, \"'\").replace(/\\uffff/g, '\"');\r\n  }\r\n\r\n  var loc$1 = {\r\n    calculateLoc,\r\n    replaceQuotesInInlineComments,\r\n    restoreQuotesInInlineComments\r\n  };\r\n\r\n  const colorAdjusterFunctions = [\"red\", \"green\", \"blue\", \"alpha\", \"a\", \"rgb\", \"hue\", \"h\", \"saturation\", \"s\", \"lightness\", \"l\", \"whiteness\", \"w\", \"blackness\", \"b\", \"tint\", \"shade\", \"blend\", \"blenda\", \"contrast\", \"hsl\", \"hsla\", \"hwb\", \"hwba\"];\r\n\r\n  function getAncestorCounter(path, typeOrTypes) {\r\n    const types = [].concat(typeOrTypes);\r\n    let counter = -1;\r\n    let ancestorNode;\r\n\r\n    while (ancestorNode = path.getParentNode(++counter)) {\r\n      if (types.includes(ancestorNode.type)) {\r\n        return counter;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  function getAncestorNode(path, typeOrTypes) {\r\n    const counter = getAncestorCounter(path, typeOrTypes);\r\n    return counter === -1 ? null : path.getParentNode(counter);\r\n  }\r\n\r\n  function getPropOfDeclNode(path) {\r\n    const declAncestorNode = getAncestorNode(path, \"css-decl\");\r\n    return declAncestorNode && declAncestorNode.prop && declAncestorNode.prop.toLowerCase();\r\n  }\r\n\r\n  function isSCSS(parser, text) {\r\n    const hasExplicitParserChoice = parser === \"less\" || parser === \"scss\";\r\n    const IS_POSSIBLY_SCSS = /(\\w\\s*:\\s*[^}:]+|#){|@import[^\\n]+(?:url|,)/;\r\n    return hasExplicitParserChoice ? parser === \"scss\" : IS_POSSIBLY_SCSS.test(text);\r\n  }\r\n\r\n  function isWideKeywords(value) {\r\n    return [\"initial\", \"inherit\", \"unset\", \"revert\"].includes(value.toLowerCase());\r\n  }\r\n\r\n  function isKeyframeAtRuleKeywords(path, value) {\r\n    const atRuleAncestorNode = getAncestorNode(path, \"css-atrule\");\r\n    return atRuleAncestorNode && atRuleAncestorNode.name && atRuleAncestorNode.name.toLowerCase().endsWith(\"keyframes\") && [\"from\", \"to\"].includes(value.toLowerCase());\r\n  }\r\n\r\n  function maybeToLowerCase(value) {\r\n    return value.includes(\"$\") || value.includes(\"@\") || value.includes(\"#\") || value.startsWith(\"%\") || value.startsWith(\"--\") || value.startsWith(\":--\") || value.includes(\"(\") && value.includes(\")\") ? value : value.toLowerCase();\r\n  }\r\n\r\n  function insideValueFunctionNode(path, functionName) {\r\n    const funcAncestorNode = getAncestorNode(path, \"value-func\");\r\n    return funcAncestorNode && funcAncestorNode.value && funcAncestorNode.value.toLowerCase() === functionName;\r\n  }\r\n\r\n  function insideICSSRuleNode(path) {\r\n    const ruleAncestorNode = getAncestorNode(path, \"css-rule\");\r\n    return ruleAncestorNode && ruleAncestorNode.raws && ruleAncestorNode.raws.selector && (ruleAncestorNode.raws.selector.startsWith(\":import\") || ruleAncestorNode.raws.selector.startsWith(\":export\"));\r\n  }\r\n\r\n  function insideAtRuleNode(path, atRuleNameOrAtRuleNames) {\r\n    const atRuleNames = [].concat(atRuleNameOrAtRuleNames);\r\n    const atRuleAncestorNode = getAncestorNode(path, \"css-atrule\");\r\n    return atRuleAncestorNode && atRuleNames.includes(atRuleAncestorNode.name.toLowerCase());\r\n  }\r\n\r\n  function insideURLFunctionInImportAtRuleNode(path) {\r\n    const node = path.getValue();\r\n    const atRuleAncestorNode = getAncestorNode(path, \"css-atrule\");\r\n    return atRuleAncestorNode && atRuleAncestorNode.name === \"import\" && node.groups[0].value === \"url\" && node.groups.length === 2;\r\n  }\r\n\r\n  function isURLFunctionNode(node) {\r\n    return node.type === \"value-func\" && node.value.toLowerCase() === \"url\";\r\n  }\r\n\r\n  function isLastNode(path, node) {\r\n    const parentNode = path.getParentNode();\r\n\r\n    if (!parentNode) {\r\n      return false;\r\n    }\r\n\r\n    const {\r\n      nodes\r\n    } = parentNode;\r\n    return nodes && nodes.indexOf(node) === nodes.length - 1;\r\n  }\r\n\r\n  function isDetachedRulesetDeclarationNode(node) {\r\n    // If a Less file ends up being parsed with the SCSS parser, Less\r\n    // variable declarations will be parsed as atrules with names ending\r\n    // with a colon, so keep the original case then.\r\n    if (!node.selector) {\r\n      return false;\r\n    }\r\n\r\n    return typeof node.selector === \"string\" && /^@.+:.*$/.test(node.selector) || node.selector.value && /^@.+:.*$/.test(node.selector.value);\r\n  }\r\n\r\n  function isForKeywordNode(node) {\r\n    return node.type === \"value-word\" && [\"from\", \"through\", \"end\"].includes(node.value);\r\n  }\r\n\r\n  function isIfElseKeywordNode(node) {\r\n    return node.type === \"value-word\" && [\"and\", \"or\", \"not\"].includes(node.value);\r\n  }\r\n\r\n  function isEachKeywordNode(node) {\r\n    return node.type === \"value-word\" && node.value === \"in\";\r\n  }\r\n\r\n  function isMultiplicationNode(node) {\r\n    return node.type === \"value-operator\" && node.value === \"*\";\r\n  }\r\n\r\n  function isDivisionNode(node) {\r\n    return node.type === \"value-operator\" && node.value === \"/\";\r\n  }\r\n\r\n  function isAdditionNode(node) {\r\n    return node.type === \"value-operator\" && node.value === \"+\";\r\n  }\r\n\r\n  function isSubtractionNode(node) {\r\n    return node.type === \"value-operator\" && node.value === \"-\";\r\n  }\r\n\r\n  function isModuloNode(node) {\r\n    return node.type === \"value-operator\" && node.value === \"%\";\r\n  }\r\n\r\n  function isMathOperatorNode(node) {\r\n    return isMultiplicationNode(node) || isDivisionNode(node) || isAdditionNode(node) || isSubtractionNode(node) || isModuloNode(node);\r\n  }\r\n\r\n  function isEqualityOperatorNode(node) {\r\n    return node.type === \"value-word\" && [\"==\", \"!=\"].includes(node.value);\r\n  }\r\n\r\n  function isRelationalOperatorNode(node) {\r\n    return node.type === \"value-word\" && [\"<\", \">\", \"<=\", \">=\"].includes(node.value);\r\n  }\r\n\r\n  function isSCSSControlDirectiveNode(node) {\r\n    return node.type === \"css-atrule\" && [\"if\", \"else\", \"for\", \"each\", \"while\"].includes(node.name);\r\n  }\r\n\r\n  function isSCSSNestedPropertyNode(node) {\r\n    if (!node.selector) {\r\n      return false;\r\n    }\r\n\r\n    return node.selector.replace(/\\/\\*.*?\\*\\//, \"\").replace(/\\/\\/.*?\\n/, \"\").trim().endsWith(\":\");\r\n  }\r\n\r\n  function isDetachedRulesetCallNode(node) {\r\n    return node.raws && node.raws.params && /^\\(\\s*\\)$/.test(node.raws.params);\r\n  }\r\n\r\n  function isTemplatePlaceholderNode(node) {\r\n    return node.name.startsWith(\"prettier-placeholder\");\r\n  }\r\n\r\n  function isTemplatePropNode(node) {\r\n    return node.prop.startsWith(\"@prettier-placeholder\");\r\n  }\r\n\r\n  function isPostcssSimpleVarNode(currentNode, nextNode) {\r\n    return currentNode.value === \"$$\" && currentNode.type === \"value-func\" && nextNode && nextNode.type === \"value-word\" && !nextNode.raws.before;\r\n  }\r\n\r\n  function hasComposesNode(node) {\r\n    return node.value && node.value.type === \"value-root\" && node.value.group && node.value.group.type === \"value-value\" && node.prop.toLowerCase() === \"composes\";\r\n  }\r\n\r\n  function hasParensAroundNode(node) {\r\n    return node.value && node.value.group && node.value.group.group && node.value.group.group.type === \"value-paren_group\" && node.value.group.group.open !== null && node.value.group.group.close !== null;\r\n  }\r\n\r\n  function hasEmptyRawBefore(node) {\r\n    return node.raws && node.raws.before === \"\";\r\n  }\r\n\r\n  function isKeyValuePairNode(node) {\r\n    return node.type === \"value-comma_group\" && node.groups && node.groups[1] && node.groups[1].type === \"value-colon\";\r\n  }\r\n\r\n  function isKeyValuePairInParenGroupNode(node) {\r\n    return node.type === \"value-paren_group\" && node.groups && node.groups[0] && isKeyValuePairNode(node.groups[0]);\r\n  }\r\n\r\n  function isSCSSMapItemNode(path) {\r\n    const node = path.getValue(); // Ignore empty item (i.e. `$key: ()`)\r\n\r\n    if (node.groups.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    const parentParentNode = path.getParentNode(1); // Check open parens contain key/value pair (i.e. `(key: value)` and `(key: (value, other-value)`)\r\n\r\n    if (!isKeyValuePairInParenGroupNode(node) && !(parentParentNode && isKeyValuePairInParenGroupNode(parentParentNode))) {\r\n      return false;\r\n    }\r\n\r\n    const declNode = getAncestorNode(path, \"css-decl\"); // SCSS map declaration (i.e. `$map: (key: value, other-key: other-value)`)\r\n\r\n    if (declNode && declNode.prop && declNode.prop.startsWith(\"$\")) {\r\n      return true;\r\n    } // List as value of key inside SCSS map (i.e. `$map: (key: (value other-value other-other-value))`)\r\n\r\n\r\n    if (isKeyValuePairInParenGroupNode(parentParentNode)) {\r\n      return true;\r\n    } // SCSS Map is argument of function (i.e. `func((key: value, other-key: other-value))`)\r\n\r\n\r\n    if (parentParentNode.type === \"value-func\") {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function isInlineValueCommentNode(node) {\r\n    return node.type === \"value-comment\" && node.inline;\r\n  }\r\n\r\n  function isHashNode(node) {\r\n    return node.type === \"value-word\" && node.value === \"#\";\r\n  }\r\n\r\n  function isLeftCurlyBraceNode(node) {\r\n    return node.type === \"value-word\" && node.value === \"{\";\r\n  }\r\n\r\n  function isRightCurlyBraceNode(node) {\r\n    return node.type === \"value-word\" && node.value === \"}\";\r\n  }\r\n\r\n  function isWordNode(node) {\r\n    return [\"value-word\", \"value-atword\"].includes(node.type);\r\n  }\r\n\r\n  function isColonNode(node) {\r\n    return node.type === \"value-colon\";\r\n  }\r\n\r\n  function isMediaAndSupportsKeywords(node) {\r\n    return node.value && [\"not\", \"and\", \"or\"].includes(node.value.toLowerCase());\r\n  }\r\n\r\n  function isColorAdjusterFuncNode(node) {\r\n    if (node.type !== \"value-func\") {\r\n      return false;\r\n    }\r\n\r\n    return colorAdjusterFunctions.includes(node.value.toLowerCase());\r\n  } // TODO: only check `less` when we don't use `less` to parse `css`\r\n\r\n\r\n  function isLessParser(options) {\r\n    return options.parser === \"css\" || options.parser === \"less\";\r\n  }\r\n\r\n  function lastLineHasInlineComment(text) {\r\n    return /\\/\\//.test(text.split(/[\\r\\n]/).pop());\r\n  }\r\n\r\n  var utils$2 = {\r\n    getAncestorCounter,\r\n    getAncestorNode,\r\n    getPropOfDeclNode,\r\n    maybeToLowerCase,\r\n    insideValueFunctionNode,\r\n    insideICSSRuleNode,\r\n    insideAtRuleNode,\r\n    insideURLFunctionInImportAtRuleNode,\r\n    isKeyframeAtRuleKeywords,\r\n    isWideKeywords,\r\n    isSCSS,\r\n    isLastNode,\r\n    isLessParser,\r\n    isSCSSControlDirectiveNode,\r\n    isDetachedRulesetDeclarationNode,\r\n    isRelationalOperatorNode,\r\n    isEqualityOperatorNode,\r\n    isMultiplicationNode,\r\n    isDivisionNode,\r\n    isAdditionNode,\r\n    isSubtractionNode,\r\n    isModuloNode,\r\n    isMathOperatorNode,\r\n    isEachKeywordNode,\r\n    isForKeywordNode,\r\n    isURLFunctionNode,\r\n    isIfElseKeywordNode,\r\n    hasComposesNode,\r\n    hasParensAroundNode,\r\n    hasEmptyRawBefore,\r\n    isSCSSNestedPropertyNode,\r\n    isDetachedRulesetCallNode,\r\n    isTemplatePlaceholderNode,\r\n    isTemplatePropNode,\r\n    isPostcssSimpleVarNode,\r\n    isKeyValuePairNode,\r\n    isKeyValuePairInParenGroupNode,\r\n    isSCSSMapItemNode,\r\n    isInlineValueCommentNode,\r\n    isHashNode,\r\n    isLeftCurlyBraceNode,\r\n    isRightCurlyBraceNode,\r\n    isWordNode,\r\n    isColonNode,\r\n    isMediaAndSupportsKeywords,\r\n    isColorAdjusterFuncNode,\r\n    lastLineHasInlineComment\r\n  };\r\n\r\n  const {\r\n    insertPragma: insertPragma$2\r\n  } = pragma$1;\r\n  const {\r\n    printNumber: printNumber$1,\r\n    printString: printString$1,\r\n    hasIgnoreComment: hasIgnoreComment$1,\r\n    hasNewline: hasNewline$3\r\n  } = util$1;\r\n  const {\r\n    isNextLineEmpty: isNextLineEmpty$2\r\n  } = utilShared;\r\n  const {\r\n    restoreQuotesInInlineComments: restoreQuotesInInlineComments$1\r\n  } = loc$1;\r\n  const {\r\n    builders: {\r\n      concat: concat$5,\r\n      join: join$2,\r\n      line: line$2,\r\n      hardline: hardline$4,\r\n      softline: softline$1,\r\n      group: group$1,\r\n      fill: fill$2,\r\n      indent: indent$2,\r\n      dedent: dedent$1,\r\n      ifBreak: ifBreak$1\r\n    },\r\n    utils: {\r\n      removeLines: removeLines$1\r\n    }\r\n  } = document;\r\n  const {\r\n    getAncestorNode: getAncestorNode$1,\r\n    getPropOfDeclNode: getPropOfDeclNode$1,\r\n    maybeToLowerCase: maybeToLowerCase$1,\r\n    insideValueFunctionNode: insideValueFunctionNode$1,\r\n    insideICSSRuleNode: insideICSSRuleNode$1,\r\n    insideAtRuleNode: insideAtRuleNode$1,\r\n    insideURLFunctionInImportAtRuleNode: insideURLFunctionInImportAtRuleNode$1,\r\n    isKeyframeAtRuleKeywords: isKeyframeAtRuleKeywords$1,\r\n    isWideKeywords: isWideKeywords$1,\r\n    isSCSS: isSCSS$1,\r\n    isLastNode: isLastNode$1,\r\n    isLessParser: isLessParser$1,\r\n    isSCSSControlDirectiveNode: isSCSSControlDirectiveNode$1,\r\n    isDetachedRulesetDeclarationNode: isDetachedRulesetDeclarationNode$1,\r\n    isRelationalOperatorNode: isRelationalOperatorNode$1,\r\n    isEqualityOperatorNode: isEqualityOperatorNode$1,\r\n    isMultiplicationNode: isMultiplicationNode$1,\r\n    isDivisionNode: isDivisionNode$1,\r\n    isAdditionNode: isAdditionNode$1,\r\n    isSubtractionNode: isSubtractionNode$1,\r\n    isMathOperatorNode: isMathOperatorNode$1,\r\n    isEachKeywordNode: isEachKeywordNode$1,\r\n    isForKeywordNode: isForKeywordNode$1,\r\n    isURLFunctionNode: isURLFunctionNode$1,\r\n    isIfElseKeywordNode: isIfElseKeywordNode$1,\r\n    hasComposesNode: hasComposesNode$1,\r\n    hasParensAroundNode: hasParensAroundNode$1,\r\n    hasEmptyRawBefore: hasEmptyRawBefore$1,\r\n    isKeyValuePairNode: isKeyValuePairNode$1,\r\n    isDetachedRulesetCallNode: isDetachedRulesetCallNode$1,\r\n    isTemplatePlaceholderNode: isTemplatePlaceholderNode$1,\r\n    isTemplatePropNode: isTemplatePropNode$1,\r\n    isPostcssSimpleVarNode: isPostcssSimpleVarNode$1,\r\n    isSCSSMapItemNode: isSCSSMapItemNode$1,\r\n    isInlineValueCommentNode: isInlineValueCommentNode$1,\r\n    isHashNode: isHashNode$1,\r\n    isLeftCurlyBraceNode: isLeftCurlyBraceNode$1,\r\n    isRightCurlyBraceNode: isRightCurlyBraceNode$1,\r\n    isWordNode: isWordNode$1,\r\n    isColonNode: isColonNode$1,\r\n    isMediaAndSupportsKeywords: isMediaAndSupportsKeywords$1,\r\n    isColorAdjusterFuncNode: isColorAdjusterFuncNode$1,\r\n    lastLineHasInlineComment: lastLineHasInlineComment$1\r\n  } = utils$2;\r\n\r\n  function shouldPrintComma(options) {\r\n    switch (options.trailingComma) {\r\n      case \"all\":\r\n      case \"es5\":\r\n        return true;\r\n\r\n      case \"none\":\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  function genericPrint(path, options, print) {\r\n    const node = path.getValue();\r\n    /* istanbul ignore if */\r\n\r\n    if (!node) {\r\n      return \"\";\r\n    }\r\n\r\n    if (typeof node === \"string\") {\r\n      return node;\r\n    }\r\n\r\n    switch (node.type) {\r\n      case \"yaml\":\r\n      case \"toml\":\r\n        return concat$5([node.raw, hardline$4]);\r\n\r\n      case \"css-root\":\r\n        {\r\n          const nodes = printNodeSequence(path, options, print);\r\n\r\n          if (nodes.parts.length) {\r\n            return concat$5([nodes, options.__isHTMLStyleAttribute ? \"\" : hardline$4]);\r\n          }\r\n\r\n          return nodes;\r\n        }\r\n\r\n      case \"css-comment\":\r\n        {\r\n          const isInlineComment = node.inline || node.raws.inline;\r\n          const text = options.originalText.slice(options.locStart(node), options.locEnd(node));\r\n          return isInlineComment ? text.trimEnd() : text;\r\n        }\r\n\r\n      case \"css-rule\":\r\n        {\r\n          return concat$5([path.call(print, \"selector\"), node.important ? \" !important\" : \"\", node.nodes ? concat$5([node.selector && node.selector.type === \"selector-unknown\" && lastLineHasInlineComment$1(node.selector.value) ? line$2 : \" \", \"{\", node.nodes.length > 0 ? indent$2(concat$5([hardline$4, printNodeSequence(path, options, print)])) : \"\", hardline$4, \"}\", isDetachedRulesetDeclarationNode$1(node) ? \";\" : \"\"]) : \";\"]);\r\n        }\r\n\r\n      case \"css-decl\":\r\n        {\r\n          const parentNode = path.getParentNode();\r\n          return concat$5([node.raws.before.replace(/[\\s;]/g, \"\"), insideICSSRuleNode$1(path) ? node.prop : maybeToLowerCase$1(node.prop), node.raws.between.trim() === \":\" ? \":\" : node.raws.between.trim(), node.extend ? \"\" : \" \", hasComposesNode$1(node) ? removeLines$1(path.call(print, \"value\")) : path.call(print, \"value\"), node.raws.important ? node.raws.important.replace(/\\s*!\\s*important/i, \" !important\") : node.important ? \" !important\" : \"\", node.raws.scssDefault ? node.raws.scssDefault.replace(/\\s*!default/i, \" !default\") : node.scssDefault ? \" !default\" : \"\", node.raws.scssGlobal ? node.raws.scssGlobal.replace(/\\s*!global/i, \" !global\") : node.scssGlobal ? \" !global\" : \"\", node.nodes ? concat$5([\" {\", indent$2(concat$5([softline$1, printNodeSequence(path, options, print)])), softline$1, \"}\"]) : isTemplatePropNode$1(node) && !parentNode.raws.semicolon && options.originalText[options.locEnd(node) - 1] !== \";\" ? \"\" : \";\"]);\r\n        }\r\n\r\n      case \"css-atrule\":\r\n        {\r\n          const parentNode = path.getParentNode();\r\n          const isTemplatePlaceholderNodeWithoutSemiColon = isTemplatePlaceholderNode$1(node) && !parentNode.raws.semicolon && options.originalText[options.locEnd(node) - 1] !== \";\";\r\n\r\n          if (isLessParser$1(options)) {\r\n            if (node.mixin) {\r\n              return concat$5([path.call(print, \"selector\"), node.important ? \" !important\" : \"\", isTemplatePlaceholderNodeWithoutSemiColon ? \"\" : \";\"]);\r\n            }\r\n\r\n            if (node.function) {\r\n              return concat$5([node.name, concat$5([path.call(print, \"params\")]), isTemplatePlaceholderNodeWithoutSemiColon ? \"\" : \";\"]);\r\n            }\r\n\r\n            if (node.variable) {\r\n              return concat$5([\"@\", node.name, \": \", node.value ? concat$5([path.call(print, \"value\")]) : \"\", node.raws.between.trim() ? node.raws.between.trim() + \" \" : \"\", node.nodes ? concat$5([\"{\", indent$2(concat$5([node.nodes.length > 0 ? softline$1 : \"\", printNodeSequence(path, options, print)])), softline$1, \"}\"]) : \"\", isTemplatePlaceholderNodeWithoutSemiColon ? \"\" : \";\"]);\r\n            }\r\n          }\r\n\r\n          return concat$5([\"@\", // If a Less file ends up being parsed with the SCSS parser, Less\r\n          // variable declarations will be parsed as at-rules with names ending\r\n          // with a colon, so keep the original case then.\r\n          isDetachedRulesetCallNode$1(node) || node.name.endsWith(\":\") ? node.name : maybeToLowerCase$1(node.name), node.params ? concat$5([isDetachedRulesetCallNode$1(node) ? \"\" : isTemplatePlaceholderNode$1(node) ? node.raws.afterName === \"\" ? \"\" : node.name.endsWith(\":\") ? \" \" : /^\\s*\\n\\s*\\n/.test(node.raws.afterName) ? concat$5([hardline$4, hardline$4]) : /^\\s*\\n/.test(node.raws.afterName) ? hardline$4 : \" \" : \" \", path.call(print, \"params\")]) : \"\", node.selector ? indent$2(concat$5([\" \", path.call(print, \"selector\")])) : \"\", node.value ? group$1(concat$5([\" \", path.call(print, \"value\"), isSCSSControlDirectiveNode$1(node) ? hasParensAroundNode$1(node) ? \" \" : line$2 : \"\"])) : node.name === \"else\" ? \" \" : \"\", node.nodes ? concat$5([isSCSSControlDirectiveNode$1(node) ? \"\" : \" \", \"{\", indent$2(concat$5([node.nodes.length > 0 ? softline$1 : \"\", printNodeSequence(path, options, print)])), softline$1, \"}\"]) : isTemplatePlaceholderNodeWithoutSemiColon ? \"\" : \";\"]);\r\n        }\r\n      // postcss-media-query-parser\r\n\r\n      case \"media-query-list\":\r\n        {\r\n          const parts = [];\r\n          path.each(childPath => {\r\n            const node = childPath.getValue();\r\n\r\n            if (node.type === \"media-query\" && node.value === \"\") {\r\n              return;\r\n            }\r\n\r\n            parts.push(childPath.call(print));\r\n          }, \"nodes\");\r\n          return group$1(indent$2(join$2(line$2, parts)));\r\n        }\r\n\r\n      case \"media-query\":\r\n        {\r\n          return concat$5([join$2(\" \", path.map(print, \"nodes\")), isLastNode$1(path, node) ? \"\" : \",\"]);\r\n        }\r\n\r\n      case \"media-type\":\r\n        {\r\n          return adjustNumbers(adjustStrings(node.value, options));\r\n        }\r\n\r\n      case \"media-feature-expression\":\r\n        {\r\n          if (!node.nodes) {\r\n            return node.value;\r\n          }\r\n\r\n          return concat$5([\"(\", concat$5(path.map(print, \"nodes\")), \")\"]);\r\n        }\r\n\r\n      case \"media-feature\":\r\n        {\r\n          return maybeToLowerCase$1(adjustStrings(node.value.replace(/ +/g, \" \"), options));\r\n        }\r\n\r\n      case \"media-colon\":\r\n        {\r\n          return concat$5([node.value, \" \"]);\r\n        }\r\n\r\n      case \"media-value\":\r\n        {\r\n          return adjustNumbers(adjustStrings(node.value, options));\r\n        }\r\n\r\n      case \"media-keyword\":\r\n        {\r\n          return adjustStrings(node.value, options);\r\n        }\r\n\r\n      case \"media-url\":\r\n        {\r\n          return adjustStrings(node.value.replace(/^url\\(\\s+/gi, \"url(\").replace(/\\s+\\)$/gi, \")\"), options);\r\n        }\r\n\r\n      case \"media-unknown\":\r\n        {\r\n          return node.value;\r\n        }\r\n      // postcss-selector-parser\r\n\r\n      case \"selector-root\":\r\n        {\r\n          return group$1(concat$5([insideAtRuleNode$1(path, \"custom-selector\") ? concat$5([getAncestorNode$1(path, \"css-atrule\").customSelector, line$2]) : \"\", join$2(concat$5([\",\", insideAtRuleNode$1(path, [\"extend\", \"custom-selector\", \"nest\"]) ? line$2 : hardline$4]), path.map(print, \"nodes\"))]));\r\n        }\r\n\r\n      case \"selector-selector\":\r\n        {\r\n          return group$1(indent$2(concat$5(path.map(print, \"nodes\"))));\r\n        }\r\n\r\n      case \"selector-comment\":\r\n        {\r\n          return node.value;\r\n        }\r\n\r\n      case \"selector-string\":\r\n        {\r\n          return adjustStrings(node.value, options);\r\n        }\r\n\r\n      case \"selector-tag\":\r\n        {\r\n          const parentNode = path.getParentNode();\r\n          const index = parentNode && parentNode.nodes.indexOf(node);\r\n          const prevNode = index && parentNode.nodes[index - 1];\r\n          return concat$5([node.namespace ? concat$5([node.namespace === true ? \"\" : node.namespace.trim(), \"|\"]) : \"\", prevNode.type === \"selector-nesting\" ? node.value : adjustNumbers(isKeyframeAtRuleKeywords$1(path, node.value) ? node.value.toLowerCase() : node.value)]);\r\n        }\r\n\r\n      case \"selector-id\":\r\n        {\r\n          return concat$5([\"#\", node.value]);\r\n        }\r\n\r\n      case \"selector-class\":\r\n        {\r\n          return concat$5([\".\", adjustNumbers(adjustStrings(node.value, options))]);\r\n        }\r\n\r\n      case \"selector-attribute\":\r\n        {\r\n          return concat$5([\"[\", node.namespace ? concat$5([node.namespace === true ? \"\" : node.namespace.trim(), \"|\"]) : \"\", node.attribute.trim(), node.operator ? node.operator : \"\", node.value ? quoteAttributeValue(adjustStrings(node.value.trim(), options), options) : \"\", node.insensitive ? \" i\" : \"\", \"]\"]);\r\n        }\r\n\r\n      case \"selector-combinator\":\r\n        {\r\n          if (node.value === \"+\" || node.value === \">\" || node.value === \"~\" || node.value === \">>>\") {\r\n            const parentNode = path.getParentNode();\r\n            const leading = parentNode.type === \"selector-selector\" && parentNode.nodes[0] === node ? \"\" : line$2;\r\n            return concat$5([leading, node.value, isLastNode$1(path, node) ? \"\" : \" \"]);\r\n          }\r\n\r\n          const leading = node.value.trim().startsWith(\"(\") ? line$2 : \"\";\r\n          const value = adjustNumbers(adjustStrings(node.value.trim(), options)) || line$2;\r\n          return concat$5([leading, value]);\r\n        }\r\n\r\n      case \"selector-universal\":\r\n        {\r\n          return concat$5([node.namespace ? concat$5([node.namespace === true ? \"\" : node.namespace.trim(), \"|\"]) : \"\", node.value]);\r\n        }\r\n\r\n      case \"selector-pseudo\":\r\n        {\r\n          return concat$5([maybeToLowerCase$1(node.value), node.nodes && node.nodes.length > 0 ? concat$5([\"(\", join$2(\", \", path.map(print, \"nodes\")), \")\"]) : \"\"]);\r\n        }\r\n\r\n      case \"selector-nesting\":\r\n        {\r\n          return node.value;\r\n        }\r\n\r\n      case \"selector-unknown\":\r\n        {\r\n          const ruleAncestorNode = getAncestorNode$1(path, \"css-rule\"); // Nested SCSS property\r\n\r\n          if (ruleAncestorNode && ruleAncestorNode.isSCSSNesterProperty) {\r\n            return adjustNumbers(adjustStrings(maybeToLowerCase$1(node.value), options));\r\n          } // originalText has to be used for Less, see replaceQuotesInInlineComments in loc.js\r\n\r\n\r\n          const parentNode = path.getParentNode();\r\n\r\n          if (parentNode.raws && parentNode.raws.selector) {\r\n            const start = options.locStart(parentNode);\r\n            const end = start + parentNode.raws.selector.length;\r\n            return options.originalText.slice(start, end).trim();\r\n          }\r\n\r\n          return node.value;\r\n        }\r\n      // postcss-values-parser\r\n\r\n      case \"value-value\":\r\n      case \"value-root\":\r\n        {\r\n          return path.call(print, \"group\");\r\n        }\r\n\r\n      case \"value-comment\":\r\n        {\r\n          return concat$5([node.inline ? \"//\" : \"/*\", // see replaceQuotesInInlineComments in loc.js\r\n          // value-* nodes don't have correct location data, so we have to rely on placeholder characters.\r\n          restoreQuotesInInlineComments$1(node.value), node.inline ? \"\" : \"*/\"]);\r\n        }\r\n\r\n      case \"value-comma_group\":\r\n        {\r\n          const parentNode = path.getParentNode();\r\n          const parentParentNode = path.getParentNode(1);\r\n          const declAncestorProp = getPropOfDeclNode$1(path);\r\n          const isGridValue = declAncestorProp && parentNode.type === \"value-value\" && (declAncestorProp === \"grid\" || declAncestorProp.startsWith(\"grid-template\"));\r\n          const atRuleAncestorNode = getAncestorNode$1(path, \"css-atrule\");\r\n          const isControlDirective = atRuleAncestorNode && isSCSSControlDirectiveNode$1(atRuleAncestorNode);\r\n          const printed = path.map(print, \"groups\");\r\n          const parts = [];\r\n          const insideURLFunction = insideValueFunctionNode$1(path, \"url\");\r\n          let insideSCSSInterpolationInString = false;\r\n          let didBreak = false;\r\n\r\n          for (let i = 0; i < node.groups.length; ++i) {\r\n            parts.push(printed[i]);\r\n            const iPrevNode = node.groups[i - 1];\r\n            const iNode = node.groups[i];\r\n            const iNextNode = node.groups[i + 1];\r\n            const iNextNextNode = node.groups[i + 2];\r\n\r\n            if (insideURLFunction) {\r\n              if (iNextNode && isAdditionNode$1(iNextNode) || isAdditionNode$1(iNode)) {\r\n                parts.push(\" \");\r\n              }\r\n\r\n              continue;\r\n            } // Ignore after latest node (i.e. before semicolon)\r\n\r\n\r\n            if (!iNextNode) {\r\n              continue;\r\n            } // styled.div` background: var(--${one}); `\r\n\r\n\r\n            if (!iPrevNode && iNode.value === \"--\" && iNextNode.type === \"value-atword\") {\r\n              continue;\r\n            } // Ignore spaces before/after string interpolation (i.e. `\"#{my-fn(\"_\")}\"`)\r\n\r\n\r\n            const isStartSCSSInterpolationInString = iNode.type === \"value-string\" && iNode.value.startsWith(\"#{\");\r\n            const isEndingSCSSInterpolationInString = insideSCSSInterpolationInString && iNextNode.type === \"value-string\" && iNextNode.value.endsWith(\"}\");\r\n\r\n            if (isStartSCSSInterpolationInString || isEndingSCSSInterpolationInString) {\r\n              insideSCSSInterpolationInString = !insideSCSSInterpolationInString;\r\n              continue;\r\n            }\r\n\r\n            if (insideSCSSInterpolationInString) {\r\n              continue;\r\n            } // Ignore colon (i.e. `:`)\r\n\r\n\r\n            if (isColonNode$1(iNode) || isColonNode$1(iNextNode)) {\r\n              continue;\r\n            } // Ignore `@` in Less (i.e. `@@var;`)\r\n\r\n\r\n            if (iNode.type === \"value-atword\" && iNode.value === \"\") {\r\n              continue;\r\n            } // Ignore `~` in Less (i.e. `content: ~\"^//* some horrible but needed css hack\";`)\r\n\r\n\r\n            if (iNode.value === \"~\") {\r\n              continue;\r\n            } // Ignore escape `\\`\r\n\r\n\r\n            if (iNode.value && iNode.value.includes(\"\\\\\") && iNextNode && iNextNode.type !== \"value-comment\") {\r\n              continue;\r\n            } // Ignore escaped `/`\r\n\r\n\r\n            if (iPrevNode && iPrevNode.value && iPrevNode.value.indexOf(\"\\\\\") === iPrevNode.value.length - 1 && iNode.type === \"value-operator\" && iNode.value === \"/\") {\r\n              continue;\r\n            } // Ignore `\\` (i.e. `$variable: \\@small;`)\r\n\r\n\r\n            if (iNode.value === \"\\\\\") {\r\n              continue;\r\n            } // Ignore `$$` (i.e. `background-color: $$(style)Color;`)\r\n\r\n\r\n            if (isPostcssSimpleVarNode$1(iNode, iNextNode)) {\r\n              continue;\r\n            } // Ignore spaces after `#` and after `{` and before `}` in SCSS interpolation (i.e. `#{variable}`)\r\n\r\n\r\n            if (isHashNode$1(iNode) || isLeftCurlyBraceNode$1(iNode) || isRightCurlyBraceNode$1(iNextNode) || isLeftCurlyBraceNode$1(iNextNode) && hasEmptyRawBefore$1(iNextNode) || isRightCurlyBraceNode$1(iNode) && hasEmptyRawBefore$1(iNextNode)) {\r\n              continue;\r\n            } // Ignore css variables and interpolation in SCSS (i.e. `--#{$var}`)\r\n\r\n\r\n            if (iNode.value === \"--\" && isHashNode$1(iNextNode)) {\r\n              continue;\r\n            } // Formatting math operations\r\n\r\n\r\n            const isMathOperator = isMathOperatorNode$1(iNode);\r\n            const isNextMathOperator = isMathOperatorNode$1(iNextNode); // Print spaces before and after math operators beside SCSS interpolation as is\r\n            // (i.e. `#{$var}+5`, `#{$var} +5`, `#{$var}+ 5`, `#{$var} + 5`)\r\n            // (i.e. `5+#{$var}`, `5 +#{$var}`, `5+ #{$var}`, `5 + #{$var}`)\r\n\r\n            if ((isMathOperator && isHashNode$1(iNextNode) || isNextMathOperator && isRightCurlyBraceNode$1(iNode)) && hasEmptyRawBefore$1(iNextNode)) {\r\n              continue;\r\n            } // Print spaces before and after addition and subtraction math operators as is in `calc` function\r\n            // due to the fact that it is not valid syntax\r\n            // (i.e. `calc(1px+1px)`, `calc(1px+ 1px)`, `calc(1px +1px)`, `calc(1px + 1px)`)\r\n\r\n\r\n            if (insideValueFunctionNode$1(path, \"calc\") && (isAdditionNode$1(iNode) || isAdditionNode$1(iNextNode) || isSubtractionNode$1(iNode) || isSubtractionNode$1(iNextNode)) && hasEmptyRawBefore$1(iNextNode)) {\r\n              continue;\r\n            } // Print spaces after `+` and `-` in color adjuster functions as is (e.g. `color(red l(+ 20%))`)\r\n            // Adjusters with signed numbers (e.g. `color(red l(+20%))`) output as-is.\r\n\r\n\r\n            const isColorAdjusterNode = (isAdditionNode$1(iNode) || isSubtractionNode$1(iNode)) && i === 0 && (iNextNode.type === \"value-number\" || iNextNode.isHex) && parentParentNode && isColorAdjusterFuncNode$1(parentParentNode) && !hasEmptyRawBefore$1(iNextNode);\r\n            const requireSpaceBeforeOperator = iNextNextNode && iNextNextNode.type === \"value-func\" || iNextNextNode && isWordNode$1(iNextNextNode) || iNode.type === \"value-func\" || isWordNode$1(iNode);\r\n            const requireSpaceAfterOperator = iNextNode.type === \"value-func\" || isWordNode$1(iNextNode) || iPrevNode && iPrevNode.type === \"value-func\" || iPrevNode && isWordNode$1(iPrevNode); // Formatting `/`, `+`, `-` sign\r\n\r\n            if (!(isMultiplicationNode$1(iNextNode) || isMultiplicationNode$1(iNode)) && !insideValueFunctionNode$1(path, \"calc\") && !isColorAdjusterNode && (isDivisionNode$1(iNextNode) && !requireSpaceBeforeOperator || isDivisionNode$1(iNode) && !requireSpaceAfterOperator || isAdditionNode$1(iNextNode) && !requireSpaceBeforeOperator || isAdditionNode$1(iNode) && !requireSpaceAfterOperator || isSubtractionNode$1(iNextNode) || isSubtractionNode$1(iNode)) && (hasEmptyRawBefore$1(iNextNode) || isMathOperator && (!iPrevNode || iPrevNode && isMathOperatorNode$1(iPrevNode)))) {\r\n              continue;\r\n            } // Add `hardline` after inline comment (i.e. `// comment\\n foo: bar;`)\r\n\r\n\r\n            if (isInlineValueCommentNode$1(iNode)) {\r\n              parts.push(hardline$4);\r\n              continue;\r\n            } // Handle keywords in SCSS control directive\r\n\r\n\r\n            if (isControlDirective && (isEqualityOperatorNode$1(iNextNode) || isRelationalOperatorNode$1(iNextNode) || isIfElseKeywordNode$1(iNextNode) || isEachKeywordNode$1(iNode) || isForKeywordNode$1(iNode))) {\r\n              parts.push(\" \");\r\n              continue;\r\n            } // At-rule `namespace` should be in one line\r\n\r\n\r\n            if (atRuleAncestorNode && atRuleAncestorNode.name.toLowerCase() === \"namespace\") {\r\n              parts.push(\" \");\r\n              continue;\r\n            } // Formatting `grid` property\r\n\r\n\r\n            if (isGridValue) {\r\n              if (iNode.source && iNextNode.source && iNode.source.start.line !== iNextNode.source.start.line) {\r\n                parts.push(hardline$4);\r\n                didBreak = true;\r\n              } else {\r\n                parts.push(\" \");\r\n              }\r\n\r\n              continue;\r\n            } // Add `space` before next math operation\r\n            // Note: `grip` property have `/` delimiter and it is not math operation, so\r\n            // `grid` property handles above\r\n\r\n\r\n            if (isNextMathOperator) {\r\n              parts.push(\" \");\r\n              continue;\r\n            } // Be default all values go through `line`\r\n\r\n\r\n            parts.push(line$2);\r\n          }\r\n\r\n          if (didBreak) {\r\n            parts.unshift(hardline$4);\r\n          }\r\n\r\n          if (isControlDirective) {\r\n            return group$1(indent$2(concat$5(parts)));\r\n          } // Indent is not needed for import url when url is very long\r\n          // and node has two groups\r\n          // when type is value-comma_group\r\n          // example @import url(\"verylongurl\") projection,tv\r\n\r\n\r\n          if (insideURLFunctionInImportAtRuleNode$1(path)) {\r\n            return group$1(fill$2(parts));\r\n          }\r\n\r\n          return group$1(indent$2(fill$2(parts)));\r\n        }\r\n\r\n      case \"value-paren_group\":\r\n        {\r\n          const parentNode = path.getParentNode();\r\n\r\n          if (parentNode && isURLFunctionNode$1(parentNode) && (node.groups.length === 1 || node.groups.length > 0 && node.groups[0].type === \"value-comma_group\" && node.groups[0].groups.length > 0 && node.groups[0].groups[0].type === \"value-word\" && node.groups[0].groups[0].value.startsWith(\"data:\"))) {\r\n            return concat$5([node.open ? path.call(print, \"open\") : \"\", join$2(\",\", path.map(print, \"groups\")), node.close ? path.call(print, \"close\") : \"\"]);\r\n          }\r\n\r\n          if (!node.open) {\r\n            const printed = path.map(print, \"groups\");\r\n            const res = [];\r\n\r\n            for (let i = 0; i < printed.length; i++) {\r\n              if (i !== 0) {\r\n                res.push(concat$5([\",\", line$2]));\r\n              }\r\n\r\n              res.push(printed[i]);\r\n            }\r\n\r\n            return group$1(indent$2(fill$2(res)));\r\n          }\r\n\r\n          const isSCSSMapItem = isSCSSMapItemNode$1(path);\r\n          const lastItem = node.groups[node.groups.length - 1];\r\n          const isLastItemComment = lastItem && lastItem.type === \"value-comment\";\r\n          return group$1(concat$5([node.open ? path.call(print, \"open\") : \"\", indent$2(concat$5([softline$1, join$2(concat$5([\",\", line$2]), path.map(childPath => {\r\n            const node = childPath.getValue();\r\n            const printed = print(childPath); // Key/Value pair in open paren already indented\r\n\r\n            if (isKeyValuePairNode$1(node) && node.type === \"value-comma_group\" && node.groups && node.groups[2] && node.groups[2].type === \"value-paren_group\") {\r\n              printed.contents.contents.parts[1] = group$1(printed.contents.contents.parts[1]);\r\n              return group$1(dedent$1(printed));\r\n            }\r\n\r\n            return printed;\r\n          }, \"groups\"))])), ifBreak$1(!isLastItemComment && isSCSS$1(options.parser, options.originalText) && isSCSSMapItem && shouldPrintComma(options) ? \",\" : \"\"), softline$1, node.close ? path.call(print, \"close\") : \"\"]), {\r\n            shouldBreak: isSCSSMapItem\r\n          });\r\n        }\r\n\r\n      case \"value-func\":\r\n        {\r\n          return concat$5([node.value, insideAtRuleNode$1(path, \"supports\") && isMediaAndSupportsKeywords$1(node) ? \" \" : \"\", path.call(print, \"group\")]);\r\n        }\r\n\r\n      case \"value-paren\":\r\n        {\r\n          return node.value;\r\n        }\r\n\r\n      case \"value-number\":\r\n        {\r\n          return concat$5([printCssNumber(node.value), maybeToLowerCase$1(node.unit)]);\r\n        }\r\n\r\n      case \"value-operator\":\r\n        {\r\n          return node.value;\r\n        }\r\n\r\n      case \"value-word\":\r\n        {\r\n          if (node.isColor && node.isHex || isWideKeywords$1(node.value)) {\r\n            return node.value.toLowerCase();\r\n          }\r\n\r\n          return node.value;\r\n        }\r\n\r\n      case \"value-colon\":\r\n        {\r\n          return concat$5([node.value, // Don't add spaces on `:` in `url` function (i.e. `url(fbglyph: cross-outline, fig-white)`)\r\n          insideValueFunctionNode$1(path, \"url\") ? \"\" : line$2]);\r\n        }\r\n\r\n      case \"value-comma\":\r\n        {\r\n          return concat$5([node.value, \" \"]);\r\n        }\r\n\r\n      case \"value-string\":\r\n        {\r\n          return printString$1(node.raws.quote + node.value + node.raws.quote, options);\r\n        }\r\n\r\n      case \"value-atword\":\r\n        {\r\n          return concat$5([\"@\", node.value]);\r\n        }\r\n\r\n      case \"value-unicode-range\":\r\n        {\r\n          return node.value;\r\n        }\r\n\r\n      case \"value-unknown\":\r\n        {\r\n          return node.value;\r\n        }\r\n\r\n      default:\r\n        /* istanbul ignore next */\r\n        throw new Error(\"Unknown postcss type \".concat(JSON.stringify(node.type)));\r\n    }\r\n  }\r\n\r\n  function printNodeSequence(path, options, print) {\r\n    const node = path.getValue();\r\n    const parts = [];\r\n    let i = 0;\r\n    path.map(pathChild => {\r\n      const prevNode = node.nodes[i - 1];\r\n\r\n      if (prevNode && prevNode.type === \"css-comment\" && prevNode.text.trim() === \"prettier-ignore\") {\r\n        const childNode = pathChild.getValue();\r\n        parts.push(options.originalText.slice(options.locStart(childNode), options.locEnd(childNode)));\r\n      } else {\r\n        parts.push(pathChild.call(print));\r\n      }\r\n\r\n      if (i !== node.nodes.length - 1) {\r\n        if (node.nodes[i + 1].type === \"css-comment\" && !hasNewline$3(options.originalText, options.locStart(node.nodes[i + 1]), {\r\n          backwards: true\r\n        }) && node.nodes[i].type !== \"yaml\" && node.nodes[i].type !== \"toml\" || node.nodes[i + 1].type === \"css-atrule\" && node.nodes[i + 1].name === \"else\" && node.nodes[i].type !== \"css-comment\") {\r\n          parts.push(\" \");\r\n        } else {\r\n          parts.push(options.__isHTMLStyleAttribute ? line$2 : hardline$4);\r\n\r\n          if (isNextLineEmpty$2(options.originalText, pathChild.getValue(), options.locEnd) && node.nodes[i].type !== \"yaml\" && node.nodes[i].type !== \"toml\") {\r\n            parts.push(hardline$4);\r\n          }\r\n        }\r\n      }\r\n\r\n      i++;\r\n    }, \"nodes\");\r\n    return concat$5(parts);\r\n  }\r\n\r\n  const STRING_REGEX$3 = /(['\"])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/g;\r\n  const NUMBER_REGEX = /(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?/g;\r\n  const STANDARD_UNIT_REGEX = /[a-zA-Z]+/g;\r\n  const WORD_PART_REGEX = /[$@]?[a-zA-Z_\\u0080-\\uFFFF][\\w\\-\\u0080-\\uFFFF]*/g;\r\n  const ADJUST_NUMBERS_REGEX = new RegExp(STRING_REGEX$3.source + \"|\" + \"(\".concat(WORD_PART_REGEX.source, \")?\") + \"(\".concat(NUMBER_REGEX.source, \")\") + \"(\".concat(STANDARD_UNIT_REGEX.source, \")?\"), \"g\");\r\n\r\n  function adjustStrings(value, options) {\r\n    return value.replace(STRING_REGEX$3, match => printString$1(match, options));\r\n  }\r\n\r\n  function quoteAttributeValue(value, options) {\r\n    const quote = options.singleQuote ? \"'\" : '\"';\r\n    return value.includes('\"') || value.includes(\"'\") ? value : quote + value + quote;\r\n  }\r\n\r\n  function adjustNumbers(value) {\r\n    return value.replace(ADJUST_NUMBERS_REGEX, (match, quote, wordPart, number, unit) => !wordPart && number ? printCssNumber(number) + maybeToLowerCase$1(unit || \"\") : match);\r\n  }\r\n\r\n  function printCssNumber(rawNumber) {\r\n    return printNumber$1(rawNumber) // Remove trailing `.0`.\r\n    .replace(/\\.0(?=$|e)/, \"\");\r\n  }\r\n\r\n  var printerPostcss = {\r\n    print: genericPrint,\r\n    embed: embed_1,\r\n    insertPragma: insertPragma$2,\r\n    hasPrettierIgnore: hasIgnoreComment$1,\r\n    massageAstNode: clean_1\r\n  };\r\n\r\n  const CATEGORY_COMMON = \"Common\"; // format based on https://github.com/prettier/prettier/blob/master/src/main/core-options.js\r\n\r\n  var commonOptions = {\r\n    bracketSpacing: {\r\n      since: \"0.0.0\",\r\n      category: CATEGORY_COMMON,\r\n      type: \"boolean\",\r\n      default: true,\r\n      description: \"Print spaces between brackets.\",\r\n      oppositeDescription: \"Do not print spaces between brackets.\"\r\n    },\r\n    singleQuote: {\r\n      since: \"0.0.0\",\r\n      category: CATEGORY_COMMON,\r\n      type: \"boolean\",\r\n      default: false,\r\n      description: \"Use single quotes instead of double quotes.\"\r\n    },\r\n    proseWrap: {\r\n      since: \"1.8.2\",\r\n      category: CATEGORY_COMMON,\r\n      type: \"choice\",\r\n      default: [{\r\n        since: \"1.8.2\",\r\n        value: true\r\n      }, {\r\n        since: \"1.9.0\",\r\n        value: \"preserve\"\r\n      }],\r\n      description: \"How to wrap prose.\",\r\n      choices: [{\r\n        since: \"1.9.0\",\r\n        value: \"always\",\r\n        description: \"Wrap prose if it exceeds the print width.\"\r\n      }, {\r\n        since: \"1.9.0\",\r\n        value: \"never\",\r\n        description: \"Do not wrap prose.\"\r\n      }, {\r\n        since: \"1.9.0\",\r\n        value: \"preserve\",\r\n        description: \"Wrap prose as-is.\"\r\n      }]\r\n    }\r\n  };\r\n\r\n  var options$2 = {\r\n    singleQuote: commonOptions.singleQuote\r\n  };\r\n\r\n  var createLanguage = function createLanguage(linguistData, override) {\r\n    const {\r\n      languageId\r\n    } = linguistData,\r\n          rest = _objectWithoutPropertiesLoose(linguistData, [\"languageId\"]);\r\n\r\n    return Object.assign({\r\n      linguistLanguageId: languageId\r\n    }, rest, {}, override(linguistData));\r\n  };\r\n\r\n  var name$1 = \"CSS\";\r\n  var type = \"markup\";\r\n  var tmScope = \"source.css\";\r\n  var aceMode = \"css\";\r\n  var codemirrorMode = \"css\";\r\n  var codemirrorMimeType = \"text/css\";\r\n  var color = \"#563d7c\";\r\n  var extensions = [\r\n  \t\".css\"\r\n  ];\r\n  var languageId = 50;\r\n  var CSS = {\r\n  \tname: name$1,\r\n  \ttype: type,\r\n  \ttmScope: tmScope,\r\n  \taceMode: aceMode,\r\n  \tcodemirrorMode: codemirrorMode,\r\n  \tcodemirrorMimeType: codemirrorMimeType,\r\n  \tcolor: color,\r\n  \textensions: extensions,\r\n  \tlanguageId: languageId\r\n  };\r\n\r\n  var CSS$1 = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    name: name$1,\r\n    type: type,\r\n    tmScope: tmScope,\r\n    aceMode: aceMode,\r\n    codemirrorMode: codemirrorMode,\r\n    codemirrorMimeType: codemirrorMimeType,\r\n    color: color,\r\n    extensions: extensions,\r\n    languageId: languageId,\r\n    'default': CSS\r\n  });\r\n\r\n  var name$2 = \"PostCSS\";\r\n  var type$1 = \"markup\";\r\n  var tmScope$1 = \"source.postcss\";\r\n  var group$2 = \"CSS\";\r\n  var extensions$1 = [\r\n  \t\".pcss\",\r\n  \t\".postcss\"\r\n  ];\r\n  var aceMode$1 = \"text\";\r\n  var languageId$1 = 262764437;\r\n  var PostCSS = {\r\n  \tname: name$2,\r\n  \ttype: type$1,\r\n  \ttmScope: tmScope$1,\r\n  \tgroup: group$2,\r\n  \textensions: extensions$1,\r\n  \taceMode: aceMode$1,\r\n  \tlanguageId: languageId$1\r\n  };\r\n\r\n  var PostCSS$1 = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    name: name$2,\r\n    type: type$1,\r\n    tmScope: tmScope$1,\r\n    group: group$2,\r\n    extensions: extensions$1,\r\n    aceMode: aceMode$1,\r\n    languageId: languageId$1,\r\n    'default': PostCSS\r\n  });\r\n\r\n  var name$3 = \"Less\";\r\n  var type$2 = \"markup\";\r\n  var group$3 = \"CSS\";\r\n  var extensions$2 = [\r\n  \t\".less\"\r\n  ];\r\n  var tmScope$2 = \"source.css.less\";\r\n  var aceMode$2 = \"less\";\r\n  var codemirrorMode$1 = \"css\";\r\n  var codemirrorMimeType$1 = \"text/css\";\r\n  var languageId$2 = 198;\r\n  var Less = {\r\n  \tname: name$3,\r\n  \ttype: type$2,\r\n  \tgroup: group$3,\r\n  \textensions: extensions$2,\r\n  \ttmScope: tmScope$2,\r\n  \taceMode: aceMode$2,\r\n  \tcodemirrorMode: codemirrorMode$1,\r\n  \tcodemirrorMimeType: codemirrorMimeType$1,\r\n  \tlanguageId: languageId$2\r\n  };\r\n\r\n  var Less$1 = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    name: name$3,\r\n    type: type$2,\r\n    group: group$3,\r\n    extensions: extensions$2,\r\n    tmScope: tmScope$2,\r\n    aceMode: aceMode$2,\r\n    codemirrorMode: codemirrorMode$1,\r\n    codemirrorMimeType: codemirrorMimeType$1,\r\n    languageId: languageId$2,\r\n    'default': Less\r\n  });\r\n\r\n  var name$4 = \"SCSS\";\r\n  var type$3 = \"markup\";\r\n  var tmScope$3 = \"source.css.scss\";\r\n  var group$4 = \"CSS\";\r\n  var aceMode$3 = \"scss\";\r\n  var codemirrorMode$2 = \"css\";\r\n  var codemirrorMimeType$2 = \"text/x-scss\";\r\n  var extensions$3 = [\r\n  \t\".scss\"\r\n  ];\r\n  var languageId$3 = 329;\r\n  var SCSS = {\r\n  \tname: name$4,\r\n  \ttype: type$3,\r\n  \ttmScope: tmScope$3,\r\n  \tgroup: group$4,\r\n  \taceMode: aceMode$3,\r\n  \tcodemirrorMode: codemirrorMode$2,\r\n  \tcodemirrorMimeType: codemirrorMimeType$2,\r\n  \textensions: extensions$3,\r\n  \tlanguageId: languageId$3\r\n  };\r\n\r\n  var SCSS$1 = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    name: name$4,\r\n    type: type$3,\r\n    tmScope: tmScope$3,\r\n    group: group$4,\r\n    aceMode: aceMode$3,\r\n    codemirrorMode: codemirrorMode$2,\r\n    codemirrorMimeType: codemirrorMimeType$2,\r\n    extensions: extensions$3,\r\n    languageId: languageId$3,\r\n    'default': SCSS\r\n  });\r\n\r\n  var require$$0$2 = getCjsExportFromNamespace(CSS$1);\r\n\r\n  var require$$1 = getCjsExportFromNamespace(PostCSS$1);\r\n\r\n  var require$$2 = getCjsExportFromNamespace(Less$1);\r\n\r\n  var require$$3 = getCjsExportFromNamespace(SCSS$1);\r\n\r\n  const languages = [createLanguage(require$$0$2, () => ({\r\n    since: \"1.4.0\",\r\n    parsers: [\"css\"],\r\n    vscodeLanguageIds: [\"css\"]\r\n  })), createLanguage(require$$1, () => ({\r\n    since: \"1.4.0\",\r\n    parsers: [\"css\"],\r\n    vscodeLanguageIds: [\"postcss\"]\r\n  })), createLanguage(require$$2, () => ({\r\n    since: \"1.4.0\",\r\n    parsers: [\"less\"],\r\n    vscodeLanguageIds: [\"less\"]\r\n  })), createLanguage(require$$3, () => ({\r\n    since: \"1.4.0\",\r\n    parsers: [\"scss\"],\r\n    vscodeLanguageIds: [\"scss\"]\r\n  }))];\r\n  const printers = {\r\n    postcss: printerPostcss\r\n  };\r\n  var languageCss = {\r\n    languages,\r\n    options: options$2,\r\n    printers\r\n  };\r\n\r\n  function hasPragma$2(text) {\r\n    return /^\\s*#[^\\n\\S]*@(format|prettier)\\s*(\\n|$)/.test(text);\r\n  }\r\n\r\n  function insertPragma$3(text) {\r\n    return \"# @format\\n\\n\" + text;\r\n  }\r\n\r\n  var pragma$2 = {\r\n    hasPragma: hasPragma$2,\r\n    insertPragma: insertPragma$3\r\n  };\r\n\r\n  const {\r\n    concat: concat$6,\r\n    join: join$3,\r\n    hardline: hardline$5,\r\n    line: line$3,\r\n    softline: softline$2,\r\n    group: group$5,\r\n    indent: indent$3,\r\n    ifBreak: ifBreak$2\r\n  } = document.builders;\r\n  const {\r\n    hasIgnoreComment: hasIgnoreComment$2\r\n  } = util$1;\r\n  const {\r\n    isNextLineEmpty: isNextLineEmpty$3\r\n  } = utilShared;\r\n  const {\r\n    insertPragma: insertPragma$4\r\n  } = pragma$2;\r\n\r\n  function genericPrint$1(path, options, print) {\r\n    const n = path.getValue();\r\n\r\n    if (!n) {\r\n      return \"\";\r\n    }\r\n\r\n    if (typeof n === \"string\") {\r\n      return n;\r\n    }\r\n\r\n    switch (n.kind) {\r\n      case \"Document\":\r\n        {\r\n          const parts = [];\r\n          path.map((pathChild, index) => {\r\n            parts.push(concat$6([pathChild.call(print)]));\r\n\r\n            if (index !== n.definitions.length - 1) {\r\n              parts.push(hardline$5);\r\n\r\n              if (isNextLineEmpty$3(options.originalText, pathChild.getValue(), options.locEnd)) {\r\n                parts.push(hardline$5);\r\n              }\r\n            }\r\n          }, \"definitions\");\r\n          return concat$6([concat$6(parts), hardline$5]);\r\n        }\r\n\r\n      case \"OperationDefinition\":\r\n        {\r\n          const hasOperation = options.originalText[options.locStart(n)] !== \"{\";\r\n          const hasName = !!n.name;\r\n          return concat$6([hasOperation ? n.operation : \"\", hasOperation && hasName ? concat$6([\" \", path.call(print, \"name\")]) : \"\", n.variableDefinitions && n.variableDefinitions.length ? group$5(concat$6([\"(\", indent$3(concat$6([softline$2, join$3(concat$6([ifBreak$2(\"\", \", \"), softline$2]), path.map(print, \"variableDefinitions\"))])), softline$2, \")\"])) : \"\", printDirectives(path, print, n), n.selectionSet ? !hasOperation && !hasName ? \"\" : \" \" : \"\", path.call(print, \"selectionSet\")]);\r\n        }\r\n\r\n      case \"FragmentDefinition\":\r\n        {\r\n          return concat$6([\"fragment \", path.call(print, \"name\"), n.variableDefinitions && n.variableDefinitions.length ? group$5(concat$6([\"(\", indent$3(concat$6([softline$2, join$3(concat$6([ifBreak$2(\"\", \", \"), softline$2]), path.map(print, \"variableDefinitions\"))])), softline$2, \")\"])) : \"\", \" on \", path.call(print, \"typeCondition\"), printDirectives(path, print, n), \" \", path.call(print, \"selectionSet\")]);\r\n        }\r\n\r\n      case \"SelectionSet\":\r\n        {\r\n          return concat$6([\"{\", indent$3(concat$6([hardline$5, join$3(hardline$5, path.call(selectionsPath => printSequence(selectionsPath, options, print), \"selections\"))])), hardline$5, \"}\"]);\r\n        }\r\n\r\n      case \"Field\":\r\n        {\r\n          return group$5(concat$6([n.alias ? concat$6([path.call(print, \"alias\"), \": \"]) : \"\", path.call(print, \"name\"), n.arguments.length > 0 ? group$5(concat$6([\"(\", indent$3(concat$6([softline$2, join$3(concat$6([ifBreak$2(\"\", \", \"), softline$2]), path.call(argsPath => printSequence(argsPath, options, print), \"arguments\"))])), softline$2, \")\"])) : \"\", printDirectives(path, print, n), n.selectionSet ? \" \" : \"\", path.call(print, \"selectionSet\")]));\r\n        }\r\n\r\n      case \"Name\":\r\n        {\r\n          return n.value;\r\n        }\r\n\r\n      case \"StringValue\":\r\n        {\r\n          if (n.block) {\r\n            return concat$6(['\"\"\"', hardline$5, join$3(hardline$5, n.value.replace(/\"\"\"/g, \"\\\\$&\").split(\"\\n\")), hardline$5, '\"\"\"']);\r\n          }\r\n\r\n          return concat$6(['\"', n.value.replace(/[\"\\\\]/g, \"\\\\$&\").replace(/\\n/g, \"\\\\n\"), '\"']);\r\n        }\r\n\r\n      case \"IntValue\":\r\n      case \"FloatValue\":\r\n      case \"EnumValue\":\r\n        {\r\n          return n.value;\r\n        }\r\n\r\n      case \"BooleanValue\":\r\n        {\r\n          return n.value ? \"true\" : \"false\";\r\n        }\r\n\r\n      case \"NullValue\":\r\n        {\r\n          return \"null\";\r\n        }\r\n\r\n      case \"Variable\":\r\n        {\r\n          return concat$6([\"$\", path.call(print, \"name\")]);\r\n        }\r\n\r\n      case \"ListValue\":\r\n        {\r\n          return group$5(concat$6([\"[\", indent$3(concat$6([softline$2, join$3(concat$6([ifBreak$2(\"\", \", \"), softline$2]), path.map(print, \"values\"))])), softline$2, \"]\"]));\r\n        }\r\n\r\n      case \"ObjectValue\":\r\n        {\r\n          return group$5(concat$6([\"{\", options.bracketSpacing && n.fields.length > 0 ? \" \" : \"\", indent$3(concat$6([softline$2, join$3(concat$6([ifBreak$2(\"\", \", \"), softline$2]), path.map(print, \"fields\"))])), softline$2, ifBreak$2(\"\", options.bracketSpacing && n.fields.length > 0 ? \" \" : \"\"), \"}\"]));\r\n        }\r\n\r\n      case \"ObjectField\":\r\n      case \"Argument\":\r\n        {\r\n          return concat$6([path.call(print, \"name\"), \": \", path.call(print, \"value\")]);\r\n        }\r\n\r\n      case \"Directive\":\r\n        {\r\n          return concat$6([\"@\", path.call(print, \"name\"), n.arguments.length > 0 ? group$5(concat$6([\"(\", indent$3(concat$6([softline$2, join$3(concat$6([ifBreak$2(\"\", \", \"), softline$2]), path.call(argsPath => printSequence(argsPath, options, print), \"arguments\"))])), softline$2, \")\"])) : \"\"]);\r\n        }\r\n\r\n      case \"NamedType\":\r\n        {\r\n          return path.call(print, \"name\");\r\n        }\r\n\r\n      case \"VariableDefinition\":\r\n        {\r\n          return concat$6([path.call(print, \"variable\"), \": \", path.call(print, \"type\"), n.defaultValue ? concat$6([\" = \", path.call(print, \"defaultValue\")]) : \"\", printDirectives(path, print, n)]);\r\n        }\r\n\r\n      case \"TypeExtensionDefinition\":\r\n        {\r\n          return concat$6([\"extend \", path.call(print, \"definition\")]);\r\n        }\r\n\r\n      case \"ObjectTypeExtension\":\r\n      case \"ObjectTypeDefinition\":\r\n        {\r\n          return concat$6([path.call(print, \"description\"), n.description ? hardline$5 : \"\", n.kind === \"ObjectTypeExtension\" ? \"extend \" : \"\", \"type \", path.call(print, \"name\"), n.interfaces.length > 0 ? concat$6([\" implements \", concat$6(printInterfaces(path, options, print))]) : \"\", printDirectives(path, print, n), n.fields.length > 0 ? concat$6([\" {\", indent$3(concat$6([hardline$5, join$3(hardline$5, path.call(fieldsPath => printSequence(fieldsPath, options, print), \"fields\"))])), hardline$5, \"}\"]) : \"\"]);\r\n        }\r\n\r\n      case \"FieldDefinition\":\r\n        {\r\n          return concat$6([path.call(print, \"description\"), n.description ? hardline$5 : \"\", path.call(print, \"name\"), n.arguments.length > 0 ? group$5(concat$6([\"(\", indent$3(concat$6([softline$2, join$3(concat$6([ifBreak$2(\"\", \", \"), softline$2]), path.call(argsPath => printSequence(argsPath, options, print), \"arguments\"))])), softline$2, \")\"])) : \"\", \": \", path.call(print, \"type\"), printDirectives(path, print, n)]);\r\n        }\r\n\r\n      case \"DirectiveDefinition\":\r\n        {\r\n          return concat$6([path.call(print, \"description\"), n.description ? hardline$5 : \"\", \"directive \", \"@\", path.call(print, \"name\"), n.arguments.length > 0 ? group$5(concat$6([\"(\", indent$3(concat$6([softline$2, join$3(concat$6([ifBreak$2(\"\", \", \"), softline$2]), path.call(argsPath => printSequence(argsPath, options, print), \"arguments\"))])), softline$2, \")\"])) : \"\", n.repeatable ? \" repeatable\" : \"\", concat$6([\" on \", join$3(\" | \", path.map(print, \"locations\"))])]);\r\n        }\r\n\r\n      case \"EnumTypeExtension\":\r\n      case \"EnumTypeDefinition\":\r\n        {\r\n          return concat$6([path.call(print, \"description\"), n.description ? hardline$5 : \"\", n.kind === \"EnumTypeExtension\" ? \"extend \" : \"\", \"enum \", path.call(print, \"name\"), printDirectives(path, print, n), n.values.length > 0 ? concat$6([\" {\", indent$3(concat$6([hardline$5, join$3(hardline$5, path.call(valuesPath => printSequence(valuesPath, options, print), \"values\"))])), hardline$5, \"}\"]) : \"\"]);\r\n        }\r\n\r\n      case \"EnumValueDefinition\":\r\n        {\r\n          return concat$6([path.call(print, \"description\"), n.description ? hardline$5 : \"\", path.call(print, \"name\"), printDirectives(path, print, n)]);\r\n        }\r\n\r\n      case \"InputValueDefinition\":\r\n        {\r\n          return concat$6([path.call(print, \"description\"), n.description ? n.description.block ? hardline$5 : line$3 : \"\", path.call(print, \"name\"), \": \", path.call(print, \"type\"), n.defaultValue ? concat$6([\" = \", path.call(print, \"defaultValue\")]) : \"\", printDirectives(path, print, n)]);\r\n        }\r\n\r\n      case \"InputObjectTypeExtension\":\r\n      case \"InputObjectTypeDefinition\":\r\n        {\r\n          return concat$6([path.call(print, \"description\"), n.description ? hardline$5 : \"\", n.kind === \"InputObjectTypeExtension\" ? \"extend \" : \"\", \"input \", path.call(print, \"name\"), printDirectives(path, print, n), n.fields.length > 0 ? concat$6([\" {\", indent$3(concat$6([hardline$5, join$3(hardline$5, path.call(fieldsPath => printSequence(fieldsPath, options, print), \"fields\"))])), hardline$5, \"}\"]) : \"\"]);\r\n        }\r\n\r\n      case \"SchemaDefinition\":\r\n        {\r\n          return concat$6([\"schema\", printDirectives(path, print, n), \" {\", n.operationTypes.length > 0 ? indent$3(concat$6([hardline$5, join$3(hardline$5, path.call(opsPath => printSequence(opsPath, options, print), \"operationTypes\"))])) : \"\", hardline$5, \"}\"]);\r\n        }\r\n\r\n      case \"OperationTypeDefinition\":\r\n        {\r\n          return concat$6([path.call(print, \"operation\"), \": \", path.call(print, \"type\")]);\r\n        }\r\n\r\n      case \"InterfaceTypeExtension\":\r\n      case \"InterfaceTypeDefinition\":\r\n        {\r\n          return concat$6([path.call(print, \"description\"), n.description ? hardline$5 : \"\", n.kind === \"InterfaceTypeExtension\" ? \"extend \" : \"\", \"interface \", path.call(print, \"name\"), printDirectives(path, print, n), n.fields.length > 0 ? concat$6([\" {\", indent$3(concat$6([hardline$5, join$3(hardline$5, path.call(fieldsPath => printSequence(fieldsPath, options, print), \"fields\"))])), hardline$5, \"}\"]) : \"\"]);\r\n        }\r\n\r\n      case \"FragmentSpread\":\r\n        {\r\n          return concat$6([\"...\", path.call(print, \"name\"), printDirectives(path, print, n)]);\r\n        }\r\n\r\n      case \"InlineFragment\":\r\n        {\r\n          return concat$6([\"...\", n.typeCondition ? concat$6([\" on \", path.call(print, \"typeCondition\")]) : \"\", printDirectives(path, print, n), \" \", path.call(print, \"selectionSet\")]);\r\n        }\r\n\r\n      case \"UnionTypeExtension\":\r\n      case \"UnionTypeDefinition\":\r\n        {\r\n          return group$5(concat$6([path.call(print, \"description\"), n.description ? hardline$5 : \"\", group$5(concat$6([n.kind === \"UnionTypeExtension\" ? \"extend \" : \"\", \"union \", path.call(print, \"name\"), printDirectives(path, print, n), n.types.length > 0 ? concat$6([\" =\", ifBreak$2(\"\", \" \"), indent$3(concat$6([ifBreak$2(concat$6([line$3, \"  \"])), join$3(concat$6([line$3, \"| \"]), path.map(print, \"types\"))]))]) : \"\"]))]));\r\n        }\r\n\r\n      case \"ScalarTypeExtension\":\r\n      case \"ScalarTypeDefinition\":\r\n        {\r\n          return concat$6([path.call(print, \"description\"), n.description ? hardline$5 : \"\", n.kind === \"ScalarTypeExtension\" ? \"extend \" : \"\", \"scalar \", path.call(print, \"name\"), printDirectives(path, print, n)]);\r\n        }\r\n\r\n      case \"NonNullType\":\r\n        {\r\n          return concat$6([path.call(print, \"type\"), \"!\"]);\r\n        }\r\n\r\n      case \"ListType\":\r\n        {\r\n          return concat$6([\"[\", path.call(print, \"type\"), \"]\"]);\r\n        }\r\n\r\n      default:\r\n        /* istanbul ignore next */\r\n        throw new Error(\"unknown graphql type: \" + JSON.stringify(n.kind));\r\n    }\r\n  }\r\n\r\n  function printDirectives(path, print, n) {\r\n    if (n.directives.length === 0) {\r\n      return \"\";\r\n    }\r\n\r\n    return concat$6([\" \", group$5(indent$3(concat$6([softline$2, join$3(concat$6([ifBreak$2(\"\", \" \"), softline$2]), path.map(print, \"directives\"))])))]);\r\n  }\r\n\r\n  function printSequence(sequencePath, options, print) {\r\n    const count = sequencePath.getValue().length;\r\n    return sequencePath.map((path, i) => {\r\n      const printed = print(path);\r\n\r\n      if (isNextLineEmpty$3(options.originalText, path.getValue(), options.locEnd) && i < count - 1) {\r\n        return concat$6([printed, hardline$5]);\r\n      }\r\n\r\n      return printed;\r\n    });\r\n  }\r\n\r\n  function canAttachComment(node) {\r\n    return node.kind && node.kind !== \"Comment\";\r\n  }\r\n\r\n  function printComment$1(commentPath) {\r\n    const comment = commentPath.getValue();\r\n\r\n    if (comment.kind === \"Comment\") {\r\n      return \"#\" + comment.value.trimEnd();\r\n    }\r\n\r\n    throw new Error(\"Not a comment: \" + JSON.stringify(comment));\r\n  }\r\n\r\n  function determineInterfaceSeparatorBetween(first, second, options) {\r\n    const textBetween = options.originalText.slice(first.loc.end, second.loc.start).replace(/#.*/g, \"\").trim();\r\n    return textBetween === \",\" ? \", \" : \" & \";\r\n  }\r\n\r\n  function printInterfaces(path, options, print) {\r\n    const node = path.getNode();\r\n    const parts = [];\r\n    const {\r\n      interfaces\r\n    } = node;\r\n    const printed = path.map(node => print(node), \"interfaces\");\r\n\r\n    for (let index = 0; index < interfaces.length; index++) {\r\n      const interfaceNode = interfaces[index];\r\n\r\n      if (index > 0) {\r\n        parts.push(determineInterfaceSeparatorBetween(interfaces[index - 1], interfaceNode, options));\r\n      }\r\n\r\n      parts.push(printed[index]);\r\n    }\r\n\r\n    return parts;\r\n  }\r\n\r\n  function clean$1(node, newNode\r\n  /*, parent*/\r\n  ) {\r\n    delete newNode.loc;\r\n    delete newNode.comments;\r\n  }\r\n\r\n  var printerGraphql = {\r\n    print: genericPrint$1,\r\n    massageAstNode: clean$1,\r\n    hasPrettierIgnore: hasIgnoreComment$2,\r\n    insertPragma: insertPragma$4,\r\n    printComment: printComment$1,\r\n    canAttachComment\r\n  };\r\n\r\n  var options$3 = {\r\n    bracketSpacing: commonOptions.bracketSpacing\r\n  };\r\n\r\n  var name$5 = \"GraphQL\";\r\n  var type$4 = \"data\";\r\n  var extensions$4 = [\r\n  \t\".graphql\",\r\n  \t\".gql\",\r\n  \t\".graphqls\"\r\n  ];\r\n  var tmScope$4 = \"source.graphql\";\r\n  var aceMode$4 = \"text\";\r\n  var languageId$4 = 139;\r\n  var GraphQL = {\r\n  \tname: name$5,\r\n  \ttype: type$4,\r\n  \textensions: extensions$4,\r\n  \ttmScope: tmScope$4,\r\n  \taceMode: aceMode$4,\r\n  \tlanguageId: languageId$4\r\n  };\r\n\r\n  var GraphQL$1 = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    name: name$5,\r\n    type: type$4,\r\n    extensions: extensions$4,\r\n    tmScope: tmScope$4,\r\n    aceMode: aceMode$4,\r\n    languageId: languageId$4,\r\n    'default': GraphQL\r\n  });\r\n\r\n  var require$$0$3 = getCjsExportFromNamespace(GraphQL$1);\r\n\r\n  const languages$1 = [createLanguage(require$$0$3, () => ({\r\n    since: \"1.5.0\",\r\n    parsers: [\"graphql\"],\r\n    vscodeLanguageIds: [\"graphql\"]\r\n  }))];\r\n  const printers$1 = {\r\n    graphql: printerGraphql\r\n  };\r\n  var languageGraphql = {\r\n    languages: languages$1,\r\n    options: options$3,\r\n    printers: printers$1\r\n  };\r\n\r\n  var clean$2 = function clean(ast, newNode) {\r\n    delete newNode.loc;\r\n    delete newNode.selfClosing; // (Glimmer/HTML) ignore TextNode whitespace\r\n\r\n    if (ast.type === \"TextNode\") {\r\n      const trimmed = ast.chars.trim();\r\n\r\n      if (!trimmed) {\r\n        return null;\r\n      }\r\n\r\n      newNode.chars = trimmed;\r\n    }\r\n  };\r\n\r\n  function isUppercase(string) {\r\n    return string.toUpperCase() === string;\r\n  }\r\n\r\n  function isGlimmerComponent(node) {\r\n    return isNodeOfSomeType(node, [\"ElementNode\"]) && typeof node.tag === \"string\" && (isUppercase(node.tag[0]) || node.tag.includes(\".\"));\r\n  }\r\n\r\n  function isWhitespaceNode(node) {\r\n    return isNodeOfSomeType(node, [\"TextNode\"]) && !/\\S/.test(node.chars);\r\n  }\r\n\r\n  function isNodeOfSomeType(node, types) {\r\n    return node && types.some(type => node.type === type);\r\n  }\r\n\r\n  function isParentOfSomeType(path, types) {\r\n    const parentNode = path.getParentNode(0);\r\n    return isNodeOfSomeType(parentNode, types);\r\n  }\r\n\r\n  function isPreviousNodeOfSomeType(path, types) {\r\n    const previousNode = getPreviousNode(path);\r\n    return isNodeOfSomeType(previousNode, types);\r\n  }\r\n\r\n  function isNextNodeOfSomeType(path, types) {\r\n    const nextNode = getNextNode(path);\r\n    return isNodeOfSomeType(nextNode, types);\r\n  }\r\n\r\n  function getSiblingNode(path, offset) {\r\n    const node = path.getValue();\r\n    const parentNode = path.getParentNode(0) || {};\r\n    const children = parentNode.children || parentNode.body || [];\r\n    const index = children.indexOf(node);\r\n    return index !== -1 && children[index + offset];\r\n  }\r\n\r\n  function getPreviousNode(path, lookBack = 1) {\r\n    return getSiblingNode(path, -lookBack);\r\n  }\r\n\r\n  function getNextNode(path) {\r\n    return getSiblingNode(path, 1);\r\n  }\r\n\r\n  function isPrettierIgnoreNode(node) {\r\n    return isNodeOfSomeType(node, [\"MustacheCommentStatement\"]) && typeof node.value === \"string\" && node.value.trim() === \"prettier-ignore\";\r\n  }\r\n\r\n  function hasPrettierIgnore(path) {\r\n    const node = path.getValue();\r\n    const previousPreviousNode = getPreviousNode(path, 2);\r\n    return isPrettierIgnoreNode(node) || isPrettierIgnoreNode(previousPreviousNode);\r\n  }\r\n\r\n  var utils$3 = {\r\n    getNextNode,\r\n    getPreviousNode,\r\n    hasPrettierIgnore,\r\n    isGlimmerComponent,\r\n    isNextNodeOfSomeType,\r\n    isNodeOfSomeType,\r\n    isParentOfSomeType,\r\n    isPreviousNodeOfSomeType,\r\n    isWhitespaceNode\r\n  };\r\n\r\n  const {\r\n    concat: concat$7,\r\n    join: join$4,\r\n    softline: softline$3,\r\n    hardline: hardline$6,\r\n    line: line$4,\r\n    group: group$6,\r\n    indent: indent$4,\r\n    ifBreak: ifBreak$3\r\n  } = document.builders;\r\n  const {\r\n    getNextNode: getNextNode$1,\r\n    getPreviousNode: getPreviousNode$1,\r\n    hasPrettierIgnore: hasPrettierIgnore$1,\r\n    isGlimmerComponent: isGlimmerComponent$1,\r\n    isNextNodeOfSomeType: isNextNodeOfSomeType$1,\r\n    isParentOfSomeType: isParentOfSomeType$1,\r\n    isPreviousNodeOfSomeType: isPreviousNodeOfSomeType$1,\r\n    isWhitespaceNode: isWhitespaceNode$1\r\n  } = utils$3; // http://w3c.github.io/html/single-page.html#void-elements\r\n\r\n  const voidTags = [\"area\", \"base\", \"br\", \"col\", \"embed\", \"hr\", \"img\", \"input\", \"link\", \"meta\", \"param\", \"source\", \"track\", \"wbr\"]; // Formatter based on @glimmerjs/syntax's built-in test formatter:\r\n  // https://github.com/glimmerjs/glimmer-vm/blob/master/packages/%40glimmer/syntax/lib/generation/print.ts\r\n\r\n  function print(path, options, print) {\r\n    const n = path.getValue();\r\n    /* istanbul ignore if*/\r\n\r\n    if (!n) {\r\n      return \"\";\r\n    }\r\n\r\n    if (hasPrettierIgnore$1(path)) {\r\n      const startOffset = locationToOffset(options.originalText, n.loc.start.line - 1, n.loc.start.column);\r\n      const endOffset = locationToOffset(options.originalText, n.loc.end.line - 1, n.loc.end.column);\r\n      const ignoredText = options.originalText.slice(startOffset, endOffset);\r\n      return ignoredText;\r\n    }\r\n\r\n    switch (n.type) {\r\n      case \"Block\":\r\n      case \"Program\":\r\n      case \"Template\":\r\n        {\r\n          return group$6(concat$7(path.map(print, \"body\")));\r\n        }\r\n\r\n      case \"ElementNode\":\r\n        {\r\n          const hasChildren = n.children.length > 0;\r\n          const hasNonWhitespaceChildren = n.children.some(n => !isWhitespaceNode$1(n));\r\n          const isVoid = isGlimmerComponent$1(n) && (!hasChildren || !hasNonWhitespaceChildren) || voidTags.includes(n.tag);\r\n          const closeTagForNoBreak = isVoid ? concat$7([\" />\", softline$3]) : \">\";\r\n          const closeTagForBreak = isVoid ? \"/>\" : \">\";\r\n\r\n          const printParams = (path, print) => indent$4(concat$7([n.attributes.length ? line$4 : \"\", join$4(line$4, path.map(print, \"attributes\")), n.modifiers.length ? line$4 : \"\", join$4(line$4, path.map(print, \"modifiers\")), n.comments.length ? line$4 : \"\", join$4(line$4, path.map(print, \"comments\"))]));\r\n\r\n          const nextNode = getNextNode$1(path);\r\n          return concat$7([group$6(concat$7([\"<\", n.tag, printParams(path, print), n.blockParams.length ? \" as |\".concat(n.blockParams.join(\" \"), \"|\") : \"\", ifBreak$3(softline$3, \"\"), ifBreak$3(closeTagForBreak, closeTagForNoBreak)])), !isVoid ? group$6(concat$7([hasNonWhitespaceChildren ? indent$4(printChildren(path, options, print)) : \"\", ifBreak$3(hasChildren ? hardline$6 : \"\", \"\"), concat$7([\"</\", n.tag, \">\"])])) : \"\", nextNode && nextNode.type === \"ElementNode\" ? hardline$6 : \"\"]);\r\n        }\r\n\r\n      case \"BlockStatement\":\r\n        {\r\n          const pp = path.getParentNode(1);\r\n          const isElseIf = pp && pp.inverse && pp.inverse.body.length === 1 && pp.inverse.body[0] === n && pp.inverse.body[0].path.parts[0] === \"if\";\r\n          const hasElseIf = n.inverse && n.inverse.body.length === 1 && n.inverse.body[0].type === \"BlockStatement\" && n.inverse.body[0].path.parts[0] === \"if\";\r\n          const indentElse = hasElseIf ? a => a : indent$4;\r\n          const inverseElseStatement = (n.inverseStrip.open ? \"{{~\" : \"{{\") + \"else\" + (n.inverseStrip.close ? \"~}}\" : \"}}\");\r\n\r\n          if (n.inverse) {\r\n            return concat$7([isElseIf ? concat$7([n.openStrip.open ? \"{{~else \" : \"{{else \", printPathParams(path, print), n.openStrip.close ? \"~}}\" : \"}}\"]) : printOpenBlock(path, print, n.openStrip), indent$4(concat$7([hardline$6, path.call(print, \"program\")])), n.inverse && !hasElseIf ? concat$7([hardline$6, inverseElseStatement]) : \"\", n.inverse ? indentElse(concat$7([hardline$6, path.call(print, \"inverse\")])) : \"\", isElseIf ? \"\" : concat$7([hardline$6, printCloseBlock(path, print, n.closeStrip)])]);\r\n          } else if (isElseIf) {\r\n            return concat$7([concat$7([n.openStrip.open ? \"{{~else\" : \"{{else \", printPathParams(path, print), n.openStrip.close ? \"~}}\" : \"}}\"]), indent$4(concat$7([hardline$6, path.call(print, \"program\")]))]);\r\n          }\r\n\r\n          const hasNonWhitespaceChildren = n.program.body.some(n => !isWhitespaceNode$1(n));\r\n          return concat$7([printOpenBlock(path, print, n.openStrip), group$6(concat$7([indent$4(concat$7([softline$3, path.call(print, \"program\")])), hasNonWhitespaceChildren ? hardline$6 : softline$3, printCloseBlock(path, print, n.closeStrip)]))]);\r\n        }\r\n\r\n      case \"ElementModifierStatement\":\r\n        {\r\n          return group$6(concat$7([\"{{\", printPathParams(path, print), softline$3, \"}}\"]));\r\n        }\r\n\r\n      case \"MustacheStatement\":\r\n        {\r\n          const isEscaped = n.escaped === false;\r\n          const {\r\n            open: openStrip,\r\n            close: closeStrip\r\n          } = n.strip;\r\n          const opening = (isEscaped ? \"{{{\" : \"{{\") + (openStrip ? \"~\" : \"\");\r\n          const closing = (closeStrip ? \"~\" : \"\") + (isEscaped ? \"}}}\" : \"}}\");\r\n          const leading = isParentOfSomeType$1(path, [\"AttrNode\", \"ConcatStatement\", \"ElementNode\"]) ? [opening, indent$4(softline$3)] : [opening];\r\n          return group$6(concat$7([...leading, printPathParams(path, print), softline$3, closing]));\r\n        }\r\n\r\n      case \"SubExpression\":\r\n        {\r\n          const params = printParams(path, print);\r\n          const printedParams = params.length > 0 ? indent$4(concat$7([line$4, group$6(join$4(line$4, params))])) : \"\";\r\n          return group$6(concat$7([\"(\", printPath(path, print), printedParams, softline$3, \")\"]));\r\n        }\r\n\r\n      case \"AttrNode\":\r\n        {\r\n          const isText = n.value.type === \"TextNode\";\r\n          const isEmptyText = isText && n.value.chars === \"\"; // If the text is empty and the value's loc start and end columns are the\r\n          // same, there is no value for this AttrNode and it should be printed\r\n          // without the `=\"\"`. Example: `<img data-test>` -> `<img data-test>`\r\n\r\n          const isEmptyValue = isEmptyText && n.value.loc.start.column === n.value.loc.end.column;\r\n\r\n          if (isEmptyValue) {\r\n            return concat$7([n.name]);\r\n          }\r\n\r\n          const value = path.call(print, \"value\");\r\n          const quotedValue = isText ? printStringLiteral(value.parts.join(), options) : value;\r\n          return concat$7([n.name, \"=\", quotedValue]);\r\n        }\r\n\r\n      case \"ConcatStatement\":\r\n        {\r\n          return concat$7(['\"', concat$7(path.map(partPath => print(partPath), \"parts\").filter(a => a !== \"\")), '\"']);\r\n        }\r\n\r\n      case \"Hash\":\r\n        {\r\n          return concat$7([join$4(line$4, path.map(print, \"pairs\"))]);\r\n        }\r\n\r\n      case \"HashPair\":\r\n        {\r\n          return concat$7([n.key, \"=\", path.call(print, \"value\")]);\r\n        }\r\n\r\n      case \"TextNode\":\r\n        {\r\n          const maxLineBreaksToPreserve = 2;\r\n          const isFirstElement = !getPreviousNode$1(path);\r\n          const isLastElement = !getNextNode$1(path);\r\n          const isWhitespaceOnly = !/\\S/.test(n.chars);\r\n          const lineBreaksCount = countNewLines(n.chars);\r\n          const hasBlockParent = path.getParentNode(0).type === \"Block\";\r\n          const hasElementParent = path.getParentNode(0).type === \"ElementNode\";\r\n          const hasTemplateParent = path.getParentNode(0).type === \"Template\";\r\n          let leadingLineBreaksCount = countLeadingNewLines(n.chars);\r\n          let trailingLineBreaksCount = countTrailingNewLines(n.chars);\r\n\r\n          if ((isFirstElement || isLastElement) && isWhitespaceOnly && (hasBlockParent || hasElementParent || hasTemplateParent)) {\r\n            return \"\";\r\n          }\r\n\r\n          if (isWhitespaceOnly && lineBreaksCount) {\r\n            leadingLineBreaksCount = Math.min(lineBreaksCount, maxLineBreaksToPreserve);\r\n            trailingLineBreaksCount = 0;\r\n          } else {\r\n            if (isNextNodeOfSomeType$1(path, [\"BlockStatement\", \"ElementNode\"])) {\r\n              trailingLineBreaksCount = Math.max(trailingLineBreaksCount, 1);\r\n            }\r\n\r\n            if (isPreviousNodeOfSomeType$1(path, [\"ElementNode\"]) || isPreviousNodeOfSomeType$1(path, [\"BlockStatement\"])) {\r\n              leadingLineBreaksCount = Math.max(leadingLineBreaksCount, 1);\r\n            }\r\n          }\r\n\r\n          let leadingSpace = \"\";\r\n          let trailingSpace = \"\"; // preserve a space inside of an attribute node where whitespace present,\r\n          // when next to mustache statement.\r\n\r\n          const inAttrNode = path.stack.includes(\"attributes\");\r\n\r\n          if (inAttrNode) {\r\n            const parentNode = path.getParentNode(0);\r\n            const isConcat = parentNode.type === \"ConcatStatement\";\r\n\r\n            if (isConcat) {\r\n              const {\r\n                parts\r\n              } = parentNode;\r\n              const partIndex = parts.indexOf(n);\r\n\r\n              if (partIndex > 0) {\r\n                const partType = parts[partIndex - 1].type;\r\n                const isMustache = partType === \"MustacheStatement\";\r\n\r\n                if (isMustache) {\r\n                  leadingSpace = \" \";\r\n                }\r\n              }\r\n\r\n              if (partIndex < parts.length - 1) {\r\n                const partType = parts[partIndex + 1].type;\r\n                const isMustache = partType === \"MustacheStatement\";\r\n\r\n                if (isMustache) {\r\n                  trailingSpace = \" \";\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            if (trailingLineBreaksCount === 0 && isNextNodeOfSomeType$1(path, [\"MustacheStatement\"])) {\r\n              trailingSpace = \" \";\r\n            }\r\n\r\n            if (leadingLineBreaksCount === 0 && isPreviousNodeOfSomeType$1(path, [\"MustacheStatement\"])) {\r\n              leadingSpace = \" \";\r\n            }\r\n\r\n            if (isFirstElement) {\r\n              leadingLineBreaksCount = 0;\r\n              leadingSpace = \"\";\r\n            }\r\n\r\n            if (isLastElement) {\r\n              trailingLineBreaksCount = 0;\r\n              trailingSpace = \"\";\r\n            }\r\n          }\r\n\r\n          return concat$7([...generateHardlines(leadingLineBreaksCount, maxLineBreaksToPreserve), n.chars.replace(/^[\\s ]+/g, leadingSpace).replace(/[\\s ]+$/, trailingSpace), ...generateHardlines(trailingLineBreaksCount, maxLineBreaksToPreserve)].filter(Boolean));\r\n        }\r\n\r\n      case \"MustacheCommentStatement\":\r\n        {\r\n          const dashes = n.value.includes(\"}}\") ? \"--\" : \"\";\r\n          return concat$7([\"{{!\", dashes, n.value, dashes, \"}}\"]);\r\n        }\r\n\r\n      case \"PathExpression\":\r\n        {\r\n          return n.original;\r\n        }\r\n\r\n      case \"BooleanLiteral\":\r\n        {\r\n          return String(n.value);\r\n        }\r\n\r\n      case \"CommentStatement\":\r\n        {\r\n          return concat$7([\"<!--\", n.value, \"-->\"]);\r\n        }\r\n\r\n      case \"StringLiteral\":\r\n        {\r\n          return printStringLiteral(n.value, options);\r\n        }\r\n\r\n      case \"NumberLiteral\":\r\n        {\r\n          return String(n.value);\r\n        }\r\n\r\n      case \"UndefinedLiteral\":\r\n        {\r\n          return \"undefined\";\r\n        }\r\n\r\n      case \"NullLiteral\":\r\n        {\r\n          return \"null\";\r\n        }\r\n\r\n      /* istanbul ignore next */\r\n\r\n      default:\r\n        throw new Error(\"unknown glimmer type: \" + JSON.stringify(n.type));\r\n    }\r\n  }\r\n\r\n  function printChildren(path, options, print) {\r\n    return concat$7(path.map((childPath, childIndex) => {\r\n      const childNode = path.getValue();\r\n      const isFirstNode = childIndex === 0;\r\n      const isLastNode = childIndex === path.getParentNode(0).children.length - 1;\r\n      const isLastNodeInMultiNodeList = isLastNode && !isFirstNode;\r\n      const isWhitespace = isWhitespaceNode$1(childNode);\r\n\r\n      if (isWhitespace && isLastNodeInMultiNodeList) {\r\n        return print(childPath, options, print);\r\n      } else if (isFirstNode) {\r\n        return concat$7([softline$3, print(childPath, options, print)]);\r\n      }\r\n\r\n      return print(childPath, options, print);\r\n    }, \"children\"));\r\n  }\r\n  /**\r\n   * Prints a string literal with the correct surrounding quotes based on\r\n   * `options.singleQuote` and the number of escaped quotes contained in\r\n   * the string literal. This function is the glimmer equivalent of `printString`\r\n   * in `common/util`, but has differences because of the way escaped characters\r\n   * are treated in hbs string literals.\r\n   * @param {string} stringLiteral - the string literal value\r\n   * @param {object} options - the prettier options object\r\n   */\r\n\r\n\r\n  function printStringLiteral(stringLiteral, options) {\r\n    const double = {\r\n      quote: '\"',\r\n      regex: /\"/g\r\n    };\r\n    const single = {\r\n      quote: \"'\",\r\n      regex: /'/g\r\n    };\r\n    const preferred = options.singleQuote ? single : double;\r\n    const alternate = preferred === single ? double : single;\r\n    let shouldUseAlternateQuote = false; // If `stringLiteral` contains at least one of the quote preferred for\r\n    // enclosing the string, we might want to enclose with the alternate quote\r\n    // instead, to minimize the number of escaped quotes.\r\n\r\n    if (stringLiteral.includes(preferred.quote) || stringLiteral.includes(alternate.quote)) {\r\n      const numPreferredQuotes = (stringLiteral.match(preferred.regex) || []).length;\r\n      const numAlternateQuotes = (stringLiteral.match(alternate.regex) || []).length;\r\n      shouldUseAlternateQuote = numPreferredQuotes > numAlternateQuotes;\r\n    }\r\n\r\n    const enclosingQuote = shouldUseAlternateQuote ? alternate : preferred;\r\n    const escapedStringLiteral = stringLiteral.replace(enclosingQuote.regex, \"\\\\\".concat(enclosingQuote.quote));\r\n    return concat$7([enclosingQuote.quote, escapedStringLiteral, enclosingQuote.quote]);\r\n  }\r\n\r\n  function printPath(path, print) {\r\n    return path.call(print, \"path\");\r\n  }\r\n\r\n  function printParams(path, print) {\r\n    const node = path.getValue();\r\n    let parts = [];\r\n\r\n    if (node.params.length > 0) {\r\n      parts = parts.concat(path.map(print, \"params\"));\r\n    }\r\n\r\n    if (node.hash && node.hash.pairs.length > 0) {\r\n      parts.push(path.call(print, \"hash\"));\r\n    }\r\n\r\n    return parts;\r\n  }\r\n\r\n  function printPathParams(path, print) {\r\n    const printedPath = printPath(path, print);\r\n    const printedParams = printParams(path, print);\r\n    const parts = [printedPath, ...printedParams];\r\n    return indent$4(group$6(join$4(line$4, parts)));\r\n  }\r\n\r\n  function printBlockParams(path) {\r\n    const block = path.getValue();\r\n\r\n    if (!block.program || !block.program.blockParams.length) {\r\n      return \"\";\r\n    }\r\n\r\n    return concat$7([\" as |\", block.program.blockParams.join(\" \"), \"|\"]);\r\n  }\r\n\r\n  function printOpenBlock(path, print, {\r\n    open: isOpenStrip = false,\r\n    close: isCloseStrip = false\r\n  } = {}) {\r\n    return group$6(concat$7([isOpenStrip ? \"{{~#\" : \"{{#\", printPathParams(path, print), printBlockParams(path), softline$3, isCloseStrip ? \"~}}\" : \"}}\"]));\r\n  }\r\n\r\n  function printCloseBlock(path, print, {\r\n    open: isOpenStrip = false,\r\n    close: isCloseStrip = false\r\n  } = {}) {\r\n    return concat$7([isOpenStrip ? \"{{~/\" : \"{{/\", path.call(print, \"path\"), isCloseStrip ? \"~}}\" : \"}}\"]);\r\n  }\r\n\r\n  function countNewLines(string) {\r\n    /* istanbul ignore next */\r\n    string = typeof string === \"string\" ? string : \"\";\r\n    return string.split(\"\\n\").length - 1;\r\n  }\r\n\r\n  function countLeadingNewLines(string) {\r\n    /* istanbul ignore next */\r\n    string = typeof string === \"string\" ? string : \"\";\r\n    const newLines = (string.match(/^([^\\S\\r\\n]*[\\r\\n])+/g) || [])[0] || \"\";\r\n    return countNewLines(newLines);\r\n  }\r\n\r\n  function countTrailingNewLines(string) {\r\n    /* istanbul ignore next */\r\n    string = typeof string === \"string\" ? string : \"\";\r\n    const newLines = (string.match(/([\\r\\n][^\\S\\r\\n]*)+$/g) || [])[0] || \"\";\r\n    return countNewLines(newLines);\r\n  }\r\n\r\n  function generateHardlines(number = 0, max = 0) {\r\n    return new Array(Math.min(number, max)).fill(hardline$6);\r\n  }\r\n  /* istanbul ignore next\r\n     https://github.com/glimmerjs/glimmer-vm/blob/master/packages/%40glimmer/compiler/lib/location.ts#L5-L29\r\n  */\r\n\r\n\r\n  function locationToOffset(source, line, column) {\r\n    let seenLines = 0;\r\n    let seenChars = 0; // eslint-disable-next-line no-constant-condition\r\n\r\n    while (true) {\r\n      if (seenChars === source.length) {\r\n        return null;\r\n      }\r\n\r\n      let nextLine = source.indexOf(\"\\n\", seenChars);\r\n\r\n      if (nextLine === -1) {\r\n        nextLine = source.length;\r\n      }\r\n\r\n      if (seenLines === line) {\r\n        if (seenChars + column > nextLine) {\r\n          return null;\r\n        }\r\n\r\n        return seenChars + column;\r\n      } else if (nextLine === -1) {\r\n        return null;\r\n      }\r\n\r\n      seenLines += 1;\r\n      seenChars = nextLine + 1;\r\n    }\r\n  }\r\n\r\n  var printerGlimmer = {\r\n    print,\r\n    massageAstNode: clean$2\r\n  };\r\n\r\n  var name$6 = \"Handlebars\";\r\n  var type$5 = \"markup\";\r\n  var group$7 = \"HTML\";\r\n  var aliases = [\r\n  \t\"hbs\",\r\n  \t\"htmlbars\"\r\n  ];\r\n  var extensions$5 = [\r\n  \t\".handlebars\",\r\n  \t\".hbs\"\r\n  ];\r\n  var tmScope$5 = \"text.html.handlebars\";\r\n  var aceMode$5 = \"handlebars\";\r\n  var languageId$5 = 155;\r\n  var Handlebars = {\r\n  \tname: name$6,\r\n  \ttype: type$5,\r\n  \tgroup: group$7,\r\n  \taliases: aliases,\r\n  \textensions: extensions$5,\r\n  \ttmScope: tmScope$5,\r\n  \taceMode: aceMode$5,\r\n  \tlanguageId: languageId$5\r\n  };\r\n\r\n  var Handlebars$1 = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    name: name$6,\r\n    type: type$5,\r\n    group: group$7,\r\n    aliases: aliases,\r\n    extensions: extensions$5,\r\n    tmScope: tmScope$5,\r\n    aceMode: aceMode$5,\r\n    languageId: languageId$5,\r\n    'default': Handlebars\r\n  });\r\n\r\n  var require$$0$4 = getCjsExportFromNamespace(Handlebars$1);\r\n\r\n  const languages$2 = [createLanguage(require$$0$4, () => ({\r\n    since: null,\r\n    // unreleased\r\n    parsers: [\"glimmer\"],\r\n    vscodeLanguageIds: [\"handlebars\"]\r\n  }))];\r\n  const printers$2 = {\r\n    glimmer: printerGlimmer\r\n  };\r\n  var languageHandlebars = {\r\n    languages: languages$2,\r\n    printers: printers$2\r\n  };\r\n\r\n  var clean$3 = function clean(ast, newNode) {\r\n    delete newNode.sourceSpan;\r\n    delete newNode.startSourceSpan;\r\n    delete newNode.endSourceSpan;\r\n    delete newNode.nameSpan;\r\n    delete newNode.valueSpan;\r\n\r\n    if (ast.type === \"text\" || ast.type === \"comment\") {\r\n      return null;\r\n    } // may be formatted by multiparser\r\n\r\n\r\n    if (ast.type === \"yaml\" || ast.type === \"toml\") {\r\n      return null;\r\n    }\r\n\r\n    if (ast.type === \"attribute\") {\r\n      delete newNode.value;\r\n    }\r\n\r\n    if (ast.type === \"docType\") {\r\n      delete newNode.value;\r\n    }\r\n  };\r\n\r\n  var json = {\r\n    \"CSS_DISPLAY_TAGS\": {\r\n      \"area\": \"none\",\r\n      \"base\": \"none\",\r\n      \"basefont\": \"none\",\r\n      \"datalist\": \"none\",\r\n      \"head\": \"none\",\r\n      \"link\": \"none\",\r\n      \"meta\": \"none\",\r\n      \"noembed\": \"none\",\r\n      \"noframes\": \"none\",\r\n      \"param\": \"none\",\r\n      \"rp\": \"none\",\r\n      \"script\": \"block\",\r\n      \"source\": \"block\",\r\n      \"style\": \"none\",\r\n      \"template\": \"inline\",\r\n      \"track\": \"block\",\r\n      \"title\": \"none\",\r\n      \"html\": \"block\",\r\n      \"body\": \"block\",\r\n      \"address\": \"block\",\r\n      \"blockquote\": \"block\",\r\n      \"center\": \"block\",\r\n      \"div\": \"block\",\r\n      \"figure\": \"block\",\r\n      \"figcaption\": \"block\",\r\n      \"footer\": \"block\",\r\n      \"form\": \"block\",\r\n      \"header\": \"block\",\r\n      \"hr\": \"block\",\r\n      \"legend\": \"block\",\r\n      \"listing\": \"block\",\r\n      \"main\": \"block\",\r\n      \"p\": \"block\",\r\n      \"plaintext\": \"block\",\r\n      \"pre\": \"block\",\r\n      \"xmp\": \"block\",\r\n      \"slot\": \"contents\",\r\n      \"ruby\": \"ruby\",\r\n      \"rt\": \"ruby-text\",\r\n      \"article\": \"block\",\r\n      \"aside\": \"block\",\r\n      \"h1\": \"block\",\r\n      \"h2\": \"block\",\r\n      \"h3\": \"block\",\r\n      \"h4\": \"block\",\r\n      \"h5\": \"block\",\r\n      \"h6\": \"block\",\r\n      \"hgroup\": \"block\",\r\n      \"nav\": \"block\",\r\n      \"section\": \"block\",\r\n      \"dir\": \"block\",\r\n      \"dd\": \"block\",\r\n      \"dl\": \"block\",\r\n      \"dt\": \"block\",\r\n      \"ol\": \"block\",\r\n      \"ul\": \"block\",\r\n      \"li\": \"list-item\",\r\n      \"table\": \"table\",\r\n      \"caption\": \"table-caption\",\r\n      \"colgroup\": \"table-column-group\",\r\n      \"col\": \"table-column\",\r\n      \"thead\": \"table-header-group\",\r\n      \"tbody\": \"table-row-group\",\r\n      \"tfoot\": \"table-footer-group\",\r\n      \"tr\": \"table-row\",\r\n      \"td\": \"table-cell\",\r\n      \"th\": \"table-cell\",\r\n      \"fieldset\": \"block\",\r\n      \"button\": \"inline-block\",\r\n      \"video\": \"inline-block\",\r\n      \"audio\": \"inline-block\"\r\n    },\r\n    \"CSS_DISPLAY_DEFAULT\": \"inline\",\r\n    \"CSS_WHITE_SPACE_TAGS\": {\r\n      \"listing\": \"pre\",\r\n      \"plaintext\": \"pre\",\r\n      \"pre\": \"pre\",\r\n      \"xmp\": \"pre\",\r\n      \"nobr\": \"nowrap\",\r\n      \"table\": \"initial\",\r\n      \"textarea\": \"pre-wrap\"\r\n    },\r\n    \"CSS_WHITE_SPACE_DEFAULT\": \"normal\"\r\n  };\r\n\r\n  var index = [\r\n  \t\"a\",\r\n  \t\"abbr\",\r\n  \t\"acronym\",\r\n  \t\"address\",\r\n  \t\"applet\",\r\n  \t\"area\",\r\n  \t\"article\",\r\n  \t\"aside\",\r\n  \t\"audio\",\r\n  \t\"b\",\r\n  \t\"base\",\r\n  \t\"basefont\",\r\n  \t\"bdi\",\r\n  \t\"bdo\",\r\n  \t\"bgsound\",\r\n  \t\"big\",\r\n  \t\"blink\",\r\n  \t\"blockquote\",\r\n  \t\"body\",\r\n  \t\"br\",\r\n  \t\"button\",\r\n  \t\"canvas\",\r\n  \t\"caption\",\r\n  \t\"center\",\r\n  \t\"cite\",\r\n  \t\"code\",\r\n  \t\"col\",\r\n  \t\"colgroup\",\r\n  \t\"command\",\r\n  \t\"content\",\r\n  \t\"data\",\r\n  \t\"datalist\",\r\n  \t\"dd\",\r\n  \t\"del\",\r\n  \t\"details\",\r\n  \t\"dfn\",\r\n  \t\"dialog\",\r\n  \t\"dir\",\r\n  \t\"div\",\r\n  \t\"dl\",\r\n  \t\"dt\",\r\n  \t\"element\",\r\n  \t\"em\",\r\n  \t\"embed\",\r\n  \t\"fieldset\",\r\n  \t\"figcaption\",\r\n  \t\"figure\",\r\n  \t\"font\",\r\n  \t\"footer\",\r\n  \t\"form\",\r\n  \t\"frame\",\r\n  \t\"frameset\",\r\n  \t\"h1\",\r\n  \t\"h2\",\r\n  \t\"h3\",\r\n  \t\"h4\",\r\n  \t\"h5\",\r\n  \t\"h6\",\r\n  \t\"head\",\r\n  \t\"header\",\r\n  \t\"hgroup\",\r\n  \t\"hr\",\r\n  \t\"html\",\r\n  \t\"i\",\r\n  \t\"iframe\",\r\n  \t\"image\",\r\n  \t\"img\",\r\n  \t\"input\",\r\n  \t\"ins\",\r\n  \t\"isindex\",\r\n  \t\"kbd\",\r\n  \t\"keygen\",\r\n  \t\"label\",\r\n  \t\"legend\",\r\n  \t\"li\",\r\n  \t\"link\",\r\n  \t\"listing\",\r\n  \t\"main\",\r\n  \t\"map\",\r\n  \t\"mark\",\r\n  \t\"marquee\",\r\n  \t\"math\",\r\n  \t\"menu\",\r\n  \t\"menuitem\",\r\n  \t\"meta\",\r\n  \t\"meter\",\r\n  \t\"multicol\",\r\n  \t\"nav\",\r\n  \t\"nextid\",\r\n  \t\"nobr\",\r\n  \t\"noembed\",\r\n  \t\"noframes\",\r\n  \t\"noscript\",\r\n  \t\"object\",\r\n  \t\"ol\",\r\n  \t\"optgroup\",\r\n  \t\"option\",\r\n  \t\"output\",\r\n  \t\"p\",\r\n  \t\"param\",\r\n  \t\"picture\",\r\n  \t\"plaintext\",\r\n  \t\"pre\",\r\n  \t\"progress\",\r\n  \t\"q\",\r\n  \t\"rb\",\r\n  \t\"rbc\",\r\n  \t\"rp\",\r\n  \t\"rt\",\r\n  \t\"rtc\",\r\n  \t\"ruby\",\r\n  \t\"s\",\r\n  \t\"samp\",\r\n  \t\"script\",\r\n  \t\"section\",\r\n  \t\"select\",\r\n  \t\"shadow\",\r\n  \t\"slot\",\r\n  \t\"small\",\r\n  \t\"source\",\r\n  \t\"spacer\",\r\n  \t\"span\",\r\n  \t\"strike\",\r\n  \t\"strong\",\r\n  \t\"style\",\r\n  \t\"sub\",\r\n  \t\"summary\",\r\n  \t\"sup\",\r\n  \t\"svg\",\r\n  \t\"table\",\r\n  \t\"tbody\",\r\n  \t\"td\",\r\n  \t\"template\",\r\n  \t\"textarea\",\r\n  \t\"tfoot\",\r\n  \t\"th\",\r\n  \t\"thead\",\r\n  \t\"time\",\r\n  \t\"title\",\r\n  \t\"tr\",\r\n  \t\"track\",\r\n  \t\"tt\",\r\n  \t\"u\",\r\n  \t\"ul\",\r\n  \t\"var\",\r\n  \t\"video\",\r\n  \t\"wbr\",\r\n  \t\"xmp\"\r\n  ];\r\n\r\n  var htmlTagNames = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    'default': index\r\n  });\r\n\r\n  var a = [\r\n  \t\"accesskey\",\r\n  \t\"charset\",\r\n  \t\"coords\",\r\n  \t\"download\",\r\n  \t\"href\",\r\n  \t\"hreflang\",\r\n  \t\"name\",\r\n  \t\"ping\",\r\n  \t\"referrerpolicy\",\r\n  \t\"rel\",\r\n  \t\"rev\",\r\n  \t\"shape\",\r\n  \t\"tabindex\",\r\n  \t\"target\",\r\n  \t\"type\"\r\n  ];\r\n  var abbr = [\r\n  \t\"title\"\r\n  ];\r\n  var applet = [\r\n  \t\"align\",\r\n  \t\"alt\",\r\n  \t\"archive\",\r\n  \t\"code\",\r\n  \t\"codebase\",\r\n  \t\"height\",\r\n  \t\"hspace\",\r\n  \t\"name\",\r\n  \t\"object\",\r\n  \t\"vspace\",\r\n  \t\"width\"\r\n  ];\r\n  var area = [\r\n  \t\"accesskey\",\r\n  \t\"alt\",\r\n  \t\"coords\",\r\n  \t\"download\",\r\n  \t\"href\",\r\n  \t\"hreflang\",\r\n  \t\"nohref\",\r\n  \t\"ping\",\r\n  \t\"referrerpolicy\",\r\n  \t\"rel\",\r\n  \t\"shape\",\r\n  \t\"tabindex\",\r\n  \t\"target\",\r\n  \t\"type\"\r\n  ];\r\n  var audio = [\r\n  \t\"autoplay\",\r\n  \t\"controls\",\r\n  \t\"crossorigin\",\r\n  \t\"loop\",\r\n  \t\"muted\",\r\n  \t\"preload\",\r\n  \t\"src\"\r\n  ];\r\n  var base = [\r\n  \t\"href\",\r\n  \t\"target\"\r\n  ];\r\n  var basefont = [\r\n  \t\"color\",\r\n  \t\"face\",\r\n  \t\"size\"\r\n  ];\r\n  var bdo = [\r\n  \t\"dir\"\r\n  ];\r\n  var blockquote = [\r\n  \t\"cite\"\r\n  ];\r\n  var body = [\r\n  \t\"alink\",\r\n  \t\"background\",\r\n  \t\"bgcolor\",\r\n  \t\"link\",\r\n  \t\"text\",\r\n  \t\"vlink\"\r\n  ];\r\n  var br = [\r\n  \t\"clear\"\r\n  ];\r\n  var button = [\r\n  \t\"accesskey\",\r\n  \t\"autofocus\",\r\n  \t\"disabled\",\r\n  \t\"form\",\r\n  \t\"formaction\",\r\n  \t\"formenctype\",\r\n  \t\"formmethod\",\r\n  \t\"formnovalidate\",\r\n  \t\"formtarget\",\r\n  \t\"name\",\r\n  \t\"tabindex\",\r\n  \t\"type\",\r\n  \t\"value\"\r\n  ];\r\n  var canvas = [\r\n  \t\"height\",\r\n  \t\"width\"\r\n  ];\r\n  var caption = [\r\n  \t\"align\"\r\n  ];\r\n  var col = [\r\n  \t\"align\",\r\n  \t\"char\",\r\n  \t\"charoff\",\r\n  \t\"span\",\r\n  \t\"valign\",\r\n  \t\"width\"\r\n  ];\r\n  var colgroup = [\r\n  \t\"align\",\r\n  \t\"char\",\r\n  \t\"charoff\",\r\n  \t\"span\",\r\n  \t\"valign\",\r\n  \t\"width\"\r\n  ];\r\n  var data = [\r\n  \t\"value\"\r\n  ];\r\n  var del = [\r\n  \t\"cite\",\r\n  \t\"datetime\"\r\n  ];\r\n  var details = [\r\n  \t\"open\"\r\n  ];\r\n  var dfn = [\r\n  \t\"title\"\r\n  ];\r\n  var dialog = [\r\n  \t\"open\"\r\n  ];\r\n  var dir = [\r\n  \t\"compact\"\r\n  ];\r\n  var div = [\r\n  \t\"align\"\r\n  ];\r\n  var dl = [\r\n  \t\"compact\"\r\n  ];\r\n  var embed$1 = [\r\n  \t\"height\",\r\n  \t\"src\",\r\n  \t\"type\",\r\n  \t\"width\"\r\n  ];\r\n  var fieldset = [\r\n  \t\"disabled\",\r\n  \t\"form\",\r\n  \t\"name\"\r\n  ];\r\n  var font = [\r\n  \t\"color\",\r\n  \t\"face\",\r\n  \t\"size\"\r\n  ];\r\n  var form = [\r\n  \t\"accept\",\r\n  \t\"accept-charset\",\r\n  \t\"action\",\r\n  \t\"autocomplete\",\r\n  \t\"enctype\",\r\n  \t\"method\",\r\n  \t\"name\",\r\n  \t\"novalidate\",\r\n  \t\"target\"\r\n  ];\r\n  var frame = [\r\n  \t\"frameborder\",\r\n  \t\"longdesc\",\r\n  \t\"marginheight\",\r\n  \t\"marginwidth\",\r\n  \t\"name\",\r\n  \t\"noresize\",\r\n  \t\"scrolling\",\r\n  \t\"src\"\r\n  ];\r\n  var frameset = [\r\n  \t\"cols\",\r\n  \t\"rows\"\r\n  ];\r\n  var h1 = [\r\n  \t\"align\"\r\n  ];\r\n  var h2 = [\r\n  \t\"align\"\r\n  ];\r\n  var h3 = [\r\n  \t\"align\"\r\n  ];\r\n  var h4 = [\r\n  \t\"align\"\r\n  ];\r\n  var h5 = [\r\n  \t\"align\"\r\n  ];\r\n  var h6 = [\r\n  \t\"align\"\r\n  ];\r\n  var head = [\r\n  \t\"profile\"\r\n  ];\r\n  var hr = [\r\n  \t\"align\",\r\n  \t\"noshade\",\r\n  \t\"size\",\r\n  \t\"width\"\r\n  ];\r\n  var html = [\r\n  \t\"manifest\",\r\n  \t\"version\"\r\n  ];\r\n  var iframe = [\r\n  \t\"align\",\r\n  \t\"allow\",\r\n  \t\"allowfullscreen\",\r\n  \t\"allowpaymentrequest\",\r\n  \t\"allowusermedia\",\r\n  \t\"frameborder\",\r\n  \t\"height\",\r\n  \t\"longdesc\",\r\n  \t\"marginheight\",\r\n  \t\"marginwidth\",\r\n  \t\"name\",\r\n  \t\"referrerpolicy\",\r\n  \t\"sandbox\",\r\n  \t\"scrolling\",\r\n  \t\"src\",\r\n  \t\"srcdoc\",\r\n  \t\"width\"\r\n  ];\r\n  var img = [\r\n  \t\"align\",\r\n  \t\"alt\",\r\n  \t\"border\",\r\n  \t\"crossorigin\",\r\n  \t\"decoding\",\r\n  \t\"height\",\r\n  \t\"hspace\",\r\n  \t\"ismap\",\r\n  \t\"longdesc\",\r\n  \t\"name\",\r\n  \t\"referrerpolicy\",\r\n  \t\"sizes\",\r\n  \t\"src\",\r\n  \t\"srcset\",\r\n  \t\"usemap\",\r\n  \t\"vspace\",\r\n  \t\"width\"\r\n  ];\r\n  var input = [\r\n  \t\"accept\",\r\n  \t\"accesskey\",\r\n  \t\"align\",\r\n  \t\"alt\",\r\n  \t\"autocomplete\",\r\n  \t\"autofocus\",\r\n  \t\"checked\",\r\n  \t\"dirname\",\r\n  \t\"disabled\",\r\n  \t\"form\",\r\n  \t\"formaction\",\r\n  \t\"formenctype\",\r\n  \t\"formmethod\",\r\n  \t\"formnovalidate\",\r\n  \t\"formtarget\",\r\n  \t\"height\",\r\n  \t\"ismap\",\r\n  \t\"list\",\r\n  \t\"max\",\r\n  \t\"maxlength\",\r\n  \t\"min\",\r\n  \t\"minlength\",\r\n  \t\"multiple\",\r\n  \t\"name\",\r\n  \t\"pattern\",\r\n  \t\"placeholder\",\r\n  \t\"readonly\",\r\n  \t\"required\",\r\n  \t\"size\",\r\n  \t\"src\",\r\n  \t\"step\",\r\n  \t\"tabindex\",\r\n  \t\"title\",\r\n  \t\"type\",\r\n  \t\"usemap\",\r\n  \t\"value\",\r\n  \t\"width\"\r\n  ];\r\n  var ins = [\r\n  \t\"cite\",\r\n  \t\"datetime\"\r\n  ];\r\n  var isindex = [\r\n  \t\"prompt\"\r\n  ];\r\n  var label = [\r\n  \t\"accesskey\",\r\n  \t\"for\",\r\n  \t\"form\"\r\n  ];\r\n  var legend = [\r\n  \t\"accesskey\",\r\n  \t\"align\"\r\n  ];\r\n  var li = [\r\n  \t\"type\",\r\n  \t\"value\"\r\n  ];\r\n  var link$3 = [\r\n  \t\"as\",\r\n  \t\"charset\",\r\n  \t\"color\",\r\n  \t\"crossorigin\",\r\n  \t\"href\",\r\n  \t\"hreflang\",\r\n  \t\"imagesizes\",\r\n  \t\"imagesrcset\",\r\n  \t\"integrity\",\r\n  \t\"media\",\r\n  \t\"nonce\",\r\n  \t\"referrerpolicy\",\r\n  \t\"rel\",\r\n  \t\"rev\",\r\n  \t\"sizes\",\r\n  \t\"target\",\r\n  \t\"title\",\r\n  \t\"type\"\r\n  ];\r\n  var map = [\r\n  \t\"name\"\r\n  ];\r\n  var menu = [\r\n  \t\"compact\"\r\n  ];\r\n  var meta = [\r\n  \t\"charset\",\r\n  \t\"content\",\r\n  \t\"http-equiv\",\r\n  \t\"name\",\r\n  \t\"scheme\"\r\n  ];\r\n  var meter = [\r\n  \t\"high\",\r\n  \t\"low\",\r\n  \t\"max\",\r\n  \t\"min\",\r\n  \t\"optimum\",\r\n  \t\"value\"\r\n  ];\r\n  var object = [\r\n  \t\"align\",\r\n  \t\"archive\",\r\n  \t\"border\",\r\n  \t\"classid\",\r\n  \t\"codebase\",\r\n  \t\"codetype\",\r\n  \t\"data\",\r\n  \t\"declare\",\r\n  \t\"form\",\r\n  \t\"height\",\r\n  \t\"hspace\",\r\n  \t\"name\",\r\n  \t\"standby\",\r\n  \t\"tabindex\",\r\n  \t\"type\",\r\n  \t\"typemustmatch\",\r\n  \t\"usemap\",\r\n  \t\"vspace\",\r\n  \t\"width\"\r\n  ];\r\n  var ol = [\r\n  \t\"compact\",\r\n  \t\"reversed\",\r\n  \t\"start\",\r\n  \t\"type\"\r\n  ];\r\n  var optgroup = [\r\n  \t\"disabled\",\r\n  \t\"label\"\r\n  ];\r\n  var option = [\r\n  \t\"disabled\",\r\n  \t\"label\",\r\n  \t\"selected\",\r\n  \t\"value\"\r\n  ];\r\n  var output = [\r\n  \t\"for\",\r\n  \t\"form\",\r\n  \t\"name\"\r\n  ];\r\n  var p = [\r\n  \t\"align\"\r\n  ];\r\n  var param = [\r\n  \t\"name\",\r\n  \t\"type\",\r\n  \t\"value\",\r\n  \t\"valuetype\"\r\n  ];\r\n  var pre = [\r\n  \t\"width\"\r\n  ];\r\n  var progress = [\r\n  \t\"max\",\r\n  \t\"value\"\r\n  ];\r\n  var q = [\r\n  \t\"cite\"\r\n  ];\r\n  var script = [\r\n  \t\"async\",\r\n  \t\"charset\",\r\n  \t\"crossorigin\",\r\n  \t\"defer\",\r\n  \t\"integrity\",\r\n  \t\"language\",\r\n  \t\"nomodule\",\r\n  \t\"nonce\",\r\n  \t\"referrerpolicy\",\r\n  \t\"src\",\r\n  \t\"type\"\r\n  ];\r\n  var select = [\r\n  \t\"autocomplete\",\r\n  \t\"autofocus\",\r\n  \t\"disabled\",\r\n  \t\"form\",\r\n  \t\"multiple\",\r\n  \t\"name\",\r\n  \t\"required\",\r\n  \t\"size\",\r\n  \t\"tabindex\"\r\n  ];\r\n  var slot = [\r\n  \t\"name\"\r\n  ];\r\n  var source$1 = [\r\n  \t\"media\",\r\n  \t\"sizes\",\r\n  \t\"src\",\r\n  \t\"srcset\",\r\n  \t\"type\"\r\n  ];\r\n  var style = [\r\n  \t\"media\",\r\n  \t\"nonce\",\r\n  \t\"title\",\r\n  \t\"type\"\r\n  ];\r\n  var table = [\r\n  \t\"align\",\r\n  \t\"bgcolor\",\r\n  \t\"border\",\r\n  \t\"cellpadding\",\r\n  \t\"cellspacing\",\r\n  \t\"frame\",\r\n  \t\"rules\",\r\n  \t\"summary\",\r\n  \t\"width\"\r\n  ];\r\n  var tbody = [\r\n  \t\"align\",\r\n  \t\"char\",\r\n  \t\"charoff\",\r\n  \t\"valign\"\r\n  ];\r\n  var td = [\r\n  \t\"abbr\",\r\n  \t\"align\",\r\n  \t\"axis\",\r\n  \t\"bgcolor\",\r\n  \t\"char\",\r\n  \t\"charoff\",\r\n  \t\"colspan\",\r\n  \t\"headers\",\r\n  \t\"height\",\r\n  \t\"nowrap\",\r\n  \t\"rowspan\",\r\n  \t\"scope\",\r\n  \t\"valign\",\r\n  \t\"width\"\r\n  ];\r\n  var textarea = [\r\n  \t\"accesskey\",\r\n  \t\"autocomplete\",\r\n  \t\"autofocus\",\r\n  \t\"cols\",\r\n  \t\"dirname\",\r\n  \t\"disabled\",\r\n  \t\"form\",\r\n  \t\"maxlength\",\r\n  \t\"minlength\",\r\n  \t\"name\",\r\n  \t\"placeholder\",\r\n  \t\"readonly\",\r\n  \t\"required\",\r\n  \t\"rows\",\r\n  \t\"tabindex\",\r\n  \t\"wrap\"\r\n  ];\r\n  var tfoot = [\r\n  \t\"align\",\r\n  \t\"char\",\r\n  \t\"charoff\",\r\n  \t\"valign\"\r\n  ];\r\n  var th = [\r\n  \t\"abbr\",\r\n  \t\"align\",\r\n  \t\"axis\",\r\n  \t\"bgcolor\",\r\n  \t\"char\",\r\n  \t\"charoff\",\r\n  \t\"colspan\",\r\n  \t\"headers\",\r\n  \t\"height\",\r\n  \t\"nowrap\",\r\n  \t\"rowspan\",\r\n  \t\"scope\",\r\n  \t\"valign\",\r\n  \t\"width\"\r\n  ];\r\n  var thead = [\r\n  \t\"align\",\r\n  \t\"char\",\r\n  \t\"charoff\",\r\n  \t\"valign\"\r\n  ];\r\n  var time = [\r\n  \t\"datetime\"\r\n  ];\r\n  var tr = [\r\n  \t\"align\",\r\n  \t\"bgcolor\",\r\n  \t\"char\",\r\n  \t\"charoff\",\r\n  \t\"valign\"\r\n  ];\r\n  var track = [\r\n  \t\"default\",\r\n  \t\"kind\",\r\n  \t\"label\",\r\n  \t\"src\",\r\n  \t\"srclang\"\r\n  ];\r\n  var ul = [\r\n  \t\"compact\",\r\n  \t\"type\"\r\n  ];\r\n  var video = [\r\n  \t\"autoplay\",\r\n  \t\"controls\",\r\n  \t\"crossorigin\",\r\n  \t\"height\",\r\n  \t\"loop\",\r\n  \t\"muted\",\r\n  \t\"playsinline\",\r\n  \t\"poster\",\r\n  \t\"preload\",\r\n  \t\"src\",\r\n  \t\"width\"\r\n  ];\r\n  var index$1 = {\r\n  \t\"*\": [\r\n  \t\"accesskey\",\r\n  \t\"autocapitalize\",\r\n  \t\"autofocus\",\r\n  \t\"class\",\r\n  \t\"contenteditable\",\r\n  \t\"dir\",\r\n  \t\"draggable\",\r\n  \t\"enterkeyhint\",\r\n  \t\"hidden\",\r\n  \t\"id\",\r\n  \t\"inputmode\",\r\n  \t\"is\",\r\n  \t\"itemid\",\r\n  \t\"itemprop\",\r\n  \t\"itemref\",\r\n  \t\"itemscope\",\r\n  \t\"itemtype\",\r\n  \t\"lang\",\r\n  \t\"nonce\",\r\n  \t\"slot\",\r\n  \t\"spellcheck\",\r\n  \t\"style\",\r\n  \t\"tabindex\",\r\n  \t\"title\",\r\n  \t\"translate\"\r\n  ],\r\n  \ta: a,\r\n  \tabbr: abbr,\r\n  \tapplet: applet,\r\n  \tarea: area,\r\n  \taudio: audio,\r\n  \tbase: base,\r\n  \tbasefont: basefont,\r\n  \tbdo: bdo,\r\n  \tblockquote: blockquote,\r\n  \tbody: body,\r\n  \tbr: br,\r\n  \tbutton: button,\r\n  \tcanvas: canvas,\r\n  \tcaption: caption,\r\n  \tcol: col,\r\n  \tcolgroup: colgroup,\r\n  \tdata: data,\r\n  \tdel: del,\r\n  \tdetails: details,\r\n  \tdfn: dfn,\r\n  \tdialog: dialog,\r\n  \tdir: dir,\r\n  \tdiv: div,\r\n  \tdl: dl,\r\n  \tembed: embed$1,\r\n  \tfieldset: fieldset,\r\n  \tfont: font,\r\n  \tform: form,\r\n  \tframe: frame,\r\n  \tframeset: frameset,\r\n  \th1: h1,\r\n  \th2: h2,\r\n  \th3: h3,\r\n  \th4: h4,\r\n  \th5: h5,\r\n  \th6: h6,\r\n  \thead: head,\r\n  \thr: hr,\r\n  \thtml: html,\r\n  \tiframe: iframe,\r\n  \timg: img,\r\n  \tinput: input,\r\n  \tins: ins,\r\n  \tisindex: isindex,\r\n  \tlabel: label,\r\n  \tlegend: legend,\r\n  \tli: li,\r\n  \tlink: link$3,\r\n  \tmap: map,\r\n  \tmenu: menu,\r\n  \tmeta: meta,\r\n  \tmeter: meter,\r\n  \tobject: object,\r\n  \tol: ol,\r\n  \toptgroup: optgroup,\r\n  \toption: option,\r\n  \toutput: output,\r\n  \tp: p,\r\n  \tparam: param,\r\n  \tpre: pre,\r\n  \tprogress: progress,\r\n  \tq: q,\r\n  \tscript: script,\r\n  \tselect: select,\r\n  \tslot: slot,\r\n  \tsource: source$1,\r\n  \tstyle: style,\r\n  \ttable: table,\r\n  \ttbody: tbody,\r\n  \ttd: td,\r\n  \ttextarea: textarea,\r\n  \ttfoot: tfoot,\r\n  \tth: th,\r\n  \tthead: thead,\r\n  \ttime: time,\r\n  \ttr: tr,\r\n  \ttrack: track,\r\n  \tul: ul,\r\n  \tvideo: video\r\n  };\r\n\r\n  var htmlElementAttributes = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    a: a,\r\n    abbr: abbr,\r\n    applet: applet,\r\n    area: area,\r\n    audio: audio,\r\n    base: base,\r\n    basefont: basefont,\r\n    bdo: bdo,\r\n    blockquote: blockquote,\r\n    body: body,\r\n    br: br,\r\n    button: button,\r\n    canvas: canvas,\r\n    caption: caption,\r\n    col: col,\r\n    colgroup: colgroup,\r\n    data: data,\r\n    del: del,\r\n    details: details,\r\n    dfn: dfn,\r\n    dialog: dialog,\r\n    dir: dir,\r\n    div: div,\r\n    dl: dl,\r\n    embed: embed$1,\r\n    fieldset: fieldset,\r\n    font: font,\r\n    form: form,\r\n    frame: frame,\r\n    frameset: frameset,\r\n    h1: h1,\r\n    h2: h2,\r\n    h3: h3,\r\n    h4: h4,\r\n    h5: h5,\r\n    h6: h6,\r\n    head: head,\r\n    hr: hr,\r\n    html: html,\r\n    iframe: iframe,\r\n    img: img,\r\n    input: input,\r\n    ins: ins,\r\n    isindex: isindex,\r\n    label: label,\r\n    legend: legend,\r\n    li: li,\r\n    link: link$3,\r\n    map: map,\r\n    menu: menu,\r\n    meta: meta,\r\n    meter: meter,\r\n    object: object,\r\n    ol: ol,\r\n    optgroup: optgroup,\r\n    option: option,\r\n    output: output,\r\n    p: p,\r\n    param: param,\r\n    pre: pre,\r\n    progress: progress,\r\n    q: q,\r\n    script: script,\r\n    select: select,\r\n    slot: slot,\r\n    source: source$1,\r\n    style: style,\r\n    table: table,\r\n    tbody: tbody,\r\n    td: td,\r\n    textarea: textarea,\r\n    tfoot: tfoot,\r\n    th: th,\r\n    thead: thead,\r\n    time: time,\r\n    tr: tr,\r\n    track: track,\r\n    ul: ul,\r\n    video: video,\r\n    'default': index$1\r\n  });\r\n\r\n  var htmlTagNames$1 = getCjsExportFromNamespace(htmlTagNames);\r\n\r\n  var htmlElementAttributes$1 = getCjsExportFromNamespace(htmlElementAttributes);\r\n\r\n  const {\r\n    CSS_DISPLAY_TAGS,\r\n    CSS_DISPLAY_DEFAULT,\r\n    CSS_WHITE_SPACE_TAGS,\r\n    CSS_WHITE_SPACE_DEFAULT\r\n  } = json;\r\n  const HTML_TAGS = arrayToMap(htmlTagNames$1);\r\n  const HTML_ELEMENT_ATTRIBUTES = mapObject(htmlElementAttributes$1, arrayToMap);\r\n\r\n  function arrayToMap(array) {\r\n    const map = Object.create(null);\r\n\r\n    for (const value of array) {\r\n      map[value] = true;\r\n    }\r\n\r\n    return map;\r\n  }\r\n\r\n  function mapObject(object, fn) {\r\n    const newObject = Object.create(null);\r\n\r\n    for (const key of Object.keys(object)) {\r\n      newObject[key] = fn(object[key], key);\r\n    }\r\n\r\n    return newObject;\r\n  }\r\n\r\n  function shouldPreserveContent(node, options) {\r\n    if (!node.endSourceSpan) {\r\n      return false;\r\n    }\r\n\r\n    if (node.type === \"element\" && node.fullName === \"template\" && node.attrMap.lang && node.attrMap.lang !== \"html\") {\r\n      return true;\r\n    } // unterminated node in ie conditional comment\r\n    // e.g. <!--[if lt IE 9]><html><![endif]-->\r\n\r\n\r\n    if (node.type === \"ieConditionalComment\" && node.lastChild && !node.lastChild.isSelfClosing && !node.lastChild.endSourceSpan) {\r\n      return true;\r\n    } // incomplete html in ie conditional comment\r\n    // e.g. <!--[if lt IE 9]></div><![endif]-->\r\n\r\n\r\n    if (node.type === \"ieConditionalComment\" && !node.complete) {\r\n      return true;\r\n    } // top-level elements (excluding <template>, <style> and <script>) in Vue SFC are considered custom block\r\n    // custom blocks can be written in other languages so we should preserve them to not break the code\r\n\r\n\r\n    if (options.parser === \"vue\" && node.type === \"element\" && node.parent.type === \"root\" && ![\"template\", \"style\", \"script\", // vue parser can be used for vue dom template as well, so we should still format top-level <html>\r\n    \"html\"].includes(node.fullName)) {\r\n      return true;\r\n    } // TODO: handle non-text children in <pre>\r\n\r\n\r\n    if (isPreLikeNode(node) && node.children.some(child => child.type !== \"text\" && child.type !== \"interpolation\")) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function hasPrettierIgnore$2(node) {\r\n    if (node.type === \"attribute\") {\r\n      return false;\r\n    }\r\n\r\n    if (!node.parent) {\r\n      return false;\r\n    }\r\n\r\n    if (typeof node.index !== \"number\" || node.index === 0) {\r\n      return false;\r\n    }\r\n\r\n    const prevNode = node.parent.children[node.index - 1];\r\n    return isPrettierIgnore(prevNode);\r\n  }\r\n\r\n  function isPrettierIgnore(node) {\r\n    return node.type === \"comment\" && node.value.trim() === \"prettier-ignore\";\r\n  }\r\n\r\n  function getPrettierIgnoreAttributeCommentData(value) {\r\n    const match = value.trim().match(/^prettier-ignore-attribute(?:\\s+([^]+))?$/);\r\n\r\n    if (!match) {\r\n      return false;\r\n    }\r\n\r\n    if (!match[1]) {\r\n      return true;\r\n    }\r\n\r\n    return match[1].split(/\\s+/);\r\n  }\r\n  /** there's no opening/closing tag or it's considered not breakable */\r\n\r\n\r\n  function isTextLikeNode(node) {\r\n    return node.type === \"text\" || node.type === \"comment\";\r\n  }\r\n\r\n  function isScriptLikeTag(node) {\r\n    return node.type === \"element\" && (node.fullName === \"script\" || node.fullName === \"style\" || node.fullName === \"svg:style\" || isUnknownNamespace(node) && (node.name === \"script\" || node.name === \"style\"));\r\n  }\r\n\r\n  function isFrontMatterNode(node) {\r\n    return node.type === \"yaml\" || node.type === \"toml\";\r\n  }\r\n\r\n  function canHaveInterpolation(node) {\r\n    return node.children && !isScriptLikeTag(node);\r\n  }\r\n\r\n  function isWhitespaceSensitiveNode(node) {\r\n    return isScriptLikeTag(node) || node.type === \"interpolation\" || isIndentationSensitiveNode(node);\r\n  }\r\n\r\n  function isIndentationSensitiveNode(node) {\r\n    return getNodeCssStyleWhiteSpace(node).startsWith(\"pre\");\r\n  }\r\n\r\n  function isLeadingSpaceSensitiveNode(node) {\r\n    const isLeadingSpaceSensitive = _isLeadingSpaceSensitiveNode();\r\n\r\n    if (isLeadingSpaceSensitive && !node.prev && node.parent && node.parent.tagDefinition && node.parent.tagDefinition.ignoreFirstLf) {\r\n      return node.type === \"interpolation\";\r\n    }\r\n\r\n    return isLeadingSpaceSensitive;\r\n\r\n    function _isLeadingSpaceSensitiveNode() {\r\n      if (isFrontMatterNode(node)) {\r\n        return false;\r\n      }\r\n\r\n      if ((node.type === \"text\" || node.type === \"interpolation\") && node.prev && (node.prev.type === \"text\" || node.prev.type === \"interpolation\")) {\r\n        return true;\r\n      }\r\n\r\n      if (!node.parent || node.parent.cssDisplay === \"none\") {\r\n        return false;\r\n      }\r\n\r\n      if (isPreLikeNode(node.parent)) {\r\n        return true;\r\n      }\r\n\r\n      if (!node.prev && (node.parent.type === \"root\" || isPreLikeNode(node) && node.parent || isScriptLikeTag(node.parent) || !isFirstChildLeadingSpaceSensitiveCssDisplay(node.parent.cssDisplay))) {\r\n        return false;\r\n      }\r\n\r\n      if (node.prev && !isNextLeadingSpaceSensitiveCssDisplay(node.prev.cssDisplay)) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    }\r\n  }\r\n\r\n  function isTrailingSpaceSensitiveNode(node) {\r\n    if (isFrontMatterNode(node)) {\r\n      return false;\r\n    }\r\n\r\n    if ((node.type === \"text\" || node.type === \"interpolation\") && node.next && (node.next.type === \"text\" || node.next.type === \"interpolation\")) {\r\n      return true;\r\n    }\r\n\r\n    if (!node.parent || node.parent.cssDisplay === \"none\") {\r\n      return false;\r\n    }\r\n\r\n    if (isPreLikeNode(node.parent)) {\r\n      return true;\r\n    }\r\n\r\n    if (!node.next && (node.parent.type === \"root\" || isPreLikeNode(node) && node.parent || isScriptLikeTag(node.parent) || !isLastChildTrailingSpaceSensitiveCssDisplay(node.parent.cssDisplay))) {\r\n      return false;\r\n    }\r\n\r\n    if (node.next && !isPrevTrailingSpaceSensitiveCssDisplay(node.next.cssDisplay)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function isDanglingSpaceSensitiveNode(node) {\r\n    return isDanglingSpaceSensitiveCssDisplay(node.cssDisplay) && !isScriptLikeTag(node);\r\n  }\r\n\r\n  function forceNextEmptyLine(node) {\r\n    return isFrontMatterNode(node) || node.next && node.sourceSpan.end.line + 1 < node.next.sourceSpan.start.line;\r\n  }\r\n  /** firstChild leadingSpaces and lastChild trailingSpaces */\r\n\r\n\r\n  function forceBreakContent(node) {\r\n    return forceBreakChildren(node) || node.type === \"element\" && node.children.length !== 0 && ([\"body\", \"script\", \"style\"].includes(node.name) || node.children.some(child => hasNonTextChild(child))) || node.firstChild && node.firstChild === node.lastChild && hasLeadingLineBreak(node.firstChild) && (!node.lastChild.isTrailingSpaceSensitive || hasTrailingLineBreak(node.lastChild));\r\n  }\r\n  /** spaces between children */\r\n\r\n\r\n  function forceBreakChildren(node) {\r\n    return node.type === \"element\" && node.children.length !== 0 && ([\"html\", \"head\", \"ul\", \"ol\", \"select\"].includes(node.name) || node.cssDisplay.startsWith(\"table\") && node.cssDisplay !== \"table-cell\");\r\n  }\r\n\r\n  function preferHardlineAsLeadingSpaces(node) {\r\n    return preferHardlineAsSurroundingSpaces(node) || node.prev && preferHardlineAsTrailingSpaces(node.prev) || hasSurroundingLineBreak(node);\r\n  }\r\n\r\n  function preferHardlineAsTrailingSpaces(node) {\r\n    return preferHardlineAsSurroundingSpaces(node) || node.type === \"element\" && node.fullName === \"br\" || hasSurroundingLineBreak(node);\r\n  }\r\n\r\n  function hasSurroundingLineBreak(node) {\r\n    return hasLeadingLineBreak(node) && hasTrailingLineBreak(node);\r\n  }\r\n\r\n  function hasLeadingLineBreak(node) {\r\n    return node.hasLeadingSpaces && (node.prev ? node.prev.sourceSpan.end.line < node.sourceSpan.start.line : node.parent.type === \"root\" || node.parent.startSourceSpan.end.line < node.sourceSpan.start.line);\r\n  }\r\n\r\n  function hasTrailingLineBreak(node) {\r\n    return node.hasTrailingSpaces && (node.next ? node.next.sourceSpan.start.line > node.sourceSpan.end.line : node.parent.type === \"root\" || node.parent.endSourceSpan && node.parent.endSourceSpan.start.line > node.sourceSpan.end.line);\r\n  }\r\n\r\n  function preferHardlineAsSurroundingSpaces(node) {\r\n    switch (node.type) {\r\n      case \"ieConditionalComment\":\r\n      case \"comment\":\r\n      case \"directive\":\r\n        return true;\r\n\r\n      case \"element\":\r\n        return [\"script\", \"select\"].includes(node.name);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function getLastDescendant(node) {\r\n    return node.lastChild ? getLastDescendant(node.lastChild) : node;\r\n  }\r\n\r\n  function hasNonTextChild(node) {\r\n    return node.children && node.children.some(child => child.type !== \"text\");\r\n  }\r\n\r\n  function inferScriptParser(node) {\r\n    if (node.name === \"script\" && !node.attrMap.src) {\r\n      if (!node.attrMap.lang && !node.attrMap.type || node.attrMap.type === \"module\" || node.attrMap.type === \"text/javascript\" || node.attrMap.type === \"text/babel\" || node.attrMap.type === \"application/javascript\" || node.attrMap.lang === \"jsx\") {\r\n        return \"babel\";\r\n      }\r\n\r\n      if (node.attrMap.type === \"application/x-typescript\" || node.attrMap.lang === \"ts\" || node.attrMap.lang === \"tsx\") {\r\n        return \"typescript\";\r\n      }\r\n\r\n      if (node.attrMap.type === \"text/markdown\") {\r\n        return \"markdown\";\r\n      }\r\n\r\n      if (node.attrMap.type.endsWith(\"json\") || node.attrMap.type.endsWith(\"importmap\")) {\r\n        return \"json\";\r\n      }\r\n\r\n      if (node.attrMap.type === \"text/x-handlebars-template\") {\r\n        return \"glimmer\";\r\n      }\r\n    }\r\n\r\n    if (node.name === \"style\") {\r\n      if (!node.attrMap.lang || node.attrMap.lang === \"postcss\" || node.attrMap.lang === \"css\") {\r\n        return \"css\";\r\n      }\r\n\r\n      if (node.attrMap.lang === \"scss\") {\r\n        return \"scss\";\r\n      }\r\n\r\n      if (node.attrMap.lang === \"less\") {\r\n        return \"less\";\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  function isBlockLikeCssDisplay(cssDisplay) {\r\n    return cssDisplay === \"block\" || cssDisplay === \"list-item\" || cssDisplay.startsWith(\"table\");\r\n  }\r\n\r\n  function isFirstChildLeadingSpaceSensitiveCssDisplay(cssDisplay) {\r\n    return !isBlockLikeCssDisplay(cssDisplay) && cssDisplay !== \"inline-block\";\r\n  }\r\n\r\n  function isLastChildTrailingSpaceSensitiveCssDisplay(cssDisplay) {\r\n    return !isBlockLikeCssDisplay(cssDisplay) && cssDisplay !== \"inline-block\";\r\n  }\r\n\r\n  function isPrevTrailingSpaceSensitiveCssDisplay(cssDisplay) {\r\n    return !isBlockLikeCssDisplay(cssDisplay);\r\n  }\r\n\r\n  function isNextLeadingSpaceSensitiveCssDisplay(cssDisplay) {\r\n    return !isBlockLikeCssDisplay(cssDisplay);\r\n  }\r\n\r\n  function isDanglingSpaceSensitiveCssDisplay(cssDisplay) {\r\n    return !isBlockLikeCssDisplay(cssDisplay) && cssDisplay !== \"inline-block\";\r\n  }\r\n\r\n  function isPreLikeNode(node) {\r\n    return getNodeCssStyleWhiteSpace(node).startsWith(\"pre\");\r\n  }\r\n\r\n  function countParents(path, predicate = () => true) {\r\n    let counter = 0;\r\n\r\n    for (let i = path.stack.length - 1; i >= 0; i--) {\r\n      const value = path.stack[i];\r\n\r\n      if (value && typeof value === \"object\" && !Array.isArray(value) && predicate(value)) {\r\n        counter++;\r\n      }\r\n    }\r\n\r\n    return counter;\r\n  }\r\n\r\n  function hasParent(node, fn) {\r\n    let current = node;\r\n\r\n    while (current) {\r\n      if (fn(current)) {\r\n        return true;\r\n      }\r\n\r\n      current = current.parent;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function getNodeCssStyleDisplay(node, options) {\r\n    if (node.prev && node.prev.type === \"comment\") {\r\n      // <!-- display: block -->\r\n      const match = node.prev.value.match(/^\\s*display:\\s*([a-z]+)\\s*$/);\r\n\r\n      if (match) {\r\n        return match[1];\r\n      }\r\n    }\r\n\r\n    let isInSvgForeignObject = false;\r\n\r\n    if (node.type === \"element\" && node.namespace === \"svg\") {\r\n      if (hasParent(node, parent => parent.fullName === \"svg:foreignObject\")) {\r\n        isInSvgForeignObject = true;\r\n      } else {\r\n        return node.name === \"svg\" ? \"inline-block\" : \"block\";\r\n      }\r\n    }\r\n\r\n    switch (options.htmlWhitespaceSensitivity) {\r\n      case \"strict\":\r\n        return \"inline\";\r\n\r\n      case \"ignore\":\r\n        return \"block\";\r\n\r\n      default:\r\n        return node.type === \"element\" && (!node.namespace || isInSvgForeignObject || isUnknownNamespace(node)) && CSS_DISPLAY_TAGS[node.name] || CSS_DISPLAY_DEFAULT;\r\n    }\r\n  }\r\n\r\n  function isUnknownNamespace(node) {\r\n    return node.type === \"element\" && !node.hasExplicitNamespace && ![\"html\", \"svg\"].includes(node.namespace);\r\n  }\r\n\r\n  function getNodeCssStyleWhiteSpace(node) {\r\n    return node.type === \"element\" && (!node.namespace || isUnknownNamespace(node)) && CSS_WHITE_SPACE_TAGS[node.name] || CSS_WHITE_SPACE_DEFAULT;\r\n  }\r\n\r\n  function getMinIndentation(text) {\r\n    let minIndentation = Infinity;\r\n\r\n    for (const lineText of text.split(\"\\n\")) {\r\n      if (lineText.length === 0) {\r\n        continue;\r\n      }\r\n\r\n      if (/\\S/.test(lineText[0])) {\r\n        return 0;\r\n      }\r\n\r\n      const indentation = lineText.match(/^\\s*/)[0].length;\r\n\r\n      if (lineText.length === indentation) {\r\n        continue;\r\n      }\r\n\r\n      if (indentation < minIndentation) {\r\n        minIndentation = indentation;\r\n      }\r\n    }\r\n\r\n    return minIndentation === Infinity ? 0 : minIndentation;\r\n  }\r\n\r\n  function dedentString(text, minIndent = getMinIndentation(text)) {\r\n    return minIndent === 0 ? text : text.split(\"\\n\").map(lineText => lineText.slice(minIndent)).join(\"\\n\");\r\n  }\r\n\r\n  function normalizeParts(parts) {\r\n    const newParts = [];\r\n    const restParts = parts.slice();\r\n\r\n    while (restParts.length !== 0) {\r\n      const part = restParts.shift();\r\n\r\n      if (!part) {\r\n        continue;\r\n      }\r\n\r\n      if (part.type === \"concat\") {\r\n        restParts.unshift(...part.parts);\r\n        continue;\r\n      }\r\n\r\n      if (newParts.length !== 0 && typeof newParts[newParts.length - 1] === \"string\" && typeof part === \"string\") {\r\n        newParts.push(newParts.pop() + part);\r\n        continue;\r\n      }\r\n\r\n      newParts.push(part);\r\n    }\r\n\r\n    return newParts;\r\n  }\r\n\r\n  function identity(x) {\r\n    return x;\r\n  }\r\n\r\n  function shouldNotPrintClosingTag(node, options) {\r\n    return !node.isSelfClosing && !node.endSourceSpan && (hasPrettierIgnore$2(node) || shouldPreserveContent(node.parent, options));\r\n  }\r\n\r\n  function countChars(text, char) {\r\n    let counter = 0;\r\n\r\n    for (let i = 0; i < text.length; i++) {\r\n      if (text[i] === char) {\r\n        counter++;\r\n      }\r\n    }\r\n\r\n    return counter;\r\n  }\r\n\r\n  function unescapeQuoteEntities(text) {\r\n    return text.replace(/&apos;/g, \"'\").replace(/&quot;/g, '\"');\r\n  }\r\n\r\n  var utils$4 = {\r\n    HTML_ELEMENT_ATTRIBUTES,\r\n    HTML_TAGS,\r\n    canHaveInterpolation,\r\n    countChars,\r\n    countParents,\r\n    dedentString,\r\n    forceBreakChildren,\r\n    forceBreakContent,\r\n    forceNextEmptyLine,\r\n    getLastDescendant,\r\n    getNodeCssStyleDisplay,\r\n    getNodeCssStyleWhiteSpace,\r\n    getPrettierIgnoreAttributeCommentData,\r\n    hasPrettierIgnore: hasPrettierIgnore$2,\r\n    identity,\r\n    inferScriptParser,\r\n    isDanglingSpaceSensitiveNode,\r\n    isFrontMatterNode,\r\n    isIndentationSensitiveNode,\r\n    isLeadingSpaceSensitiveNode,\r\n    isPreLikeNode,\r\n    isScriptLikeTag,\r\n    isTextLikeNode,\r\n    isTrailingSpaceSensitiveNode,\r\n    isWhitespaceSensitiveNode,\r\n    isUnknownNamespace,\r\n    normalizeParts,\r\n    preferHardlineAsLeadingSpaces,\r\n    preferHardlineAsTrailingSpaces,\r\n    shouldNotPrintClosingTag,\r\n    shouldPreserveContent,\r\n    unescapeQuoteEntities\r\n  };\r\n\r\n  const {\r\n    canHaveInterpolation: canHaveInterpolation$1,\r\n    getNodeCssStyleDisplay: getNodeCssStyleDisplay$1,\r\n    isDanglingSpaceSensitiveNode: isDanglingSpaceSensitiveNode$1,\r\n    isIndentationSensitiveNode: isIndentationSensitiveNode$1,\r\n    isLeadingSpaceSensitiveNode: isLeadingSpaceSensitiveNode$1,\r\n    isTrailingSpaceSensitiveNode: isTrailingSpaceSensitiveNode$1,\r\n    isWhitespaceSensitiveNode: isWhitespaceSensitiveNode$1\r\n  } = utils$4;\r\n  const PREPROCESS_PIPELINE = [removeIgnorableFirstLf, mergeIeConditonalStartEndCommentIntoElementOpeningTag, mergeCdataIntoText, extractInterpolation, extractWhitespaces, addCssDisplay, addIsSelfClosing, addHasHtmComponentClosingTag, addIsSpaceSensitive, mergeSimpleElementIntoText];\r\n\r\n  function preprocess(ast, options) {\r\n    for (const fn of PREPROCESS_PIPELINE) {\r\n      ast = fn(ast, options);\r\n    }\r\n\r\n    return ast;\r\n  }\r\n\r\n  function removeIgnorableFirstLf(ast\r\n  /*, options */\r\n  ) {\r\n    return ast.map(node => {\r\n      if (node.type === \"element\" && node.tagDefinition.ignoreFirstLf && node.children.length !== 0 && node.children[0].type === \"text\" && node.children[0].value[0] === \"\\n\") {\r\n        const [text, ...rest] = node.children;\r\n        return node.clone({\r\n          children: text.value.length === 1 ? rest : [text.clone({\r\n            value: text.value.slice(1)\r\n          }), ...rest]\r\n        });\r\n      }\r\n\r\n      return node;\r\n    });\r\n  }\r\n\r\n  function mergeIeConditonalStartEndCommentIntoElementOpeningTag(ast\r\n  /*, options */\r\n  ) {\r\n    /**\r\n     *     <!--[if ...]><!--><target><!--<![endif]-->\r\n     */\r\n    const isTarget = node => node.type === \"element\" && node.prev && node.prev.type === \"ieConditionalStartComment\" && node.prev.sourceSpan.end.offset === node.startSourceSpan.start.offset && node.firstChild && node.firstChild.type === \"ieConditionalEndComment\" && node.firstChild.sourceSpan.start.offset === node.startSourceSpan.end.offset;\r\n\r\n    return ast.map(node => {\r\n      if (node.children) {\r\n        const isTargetResults = node.children.map(isTarget);\r\n\r\n        if (isTargetResults.some(Boolean)) {\r\n          const newChildren = [];\r\n\r\n          for (let i = 0; i < node.children.length; i++) {\r\n            const child = node.children[i];\r\n\r\n            if (isTargetResults[i + 1]) {\r\n              // ieConditionalStartComment\r\n              continue;\r\n            }\r\n\r\n            if (isTargetResults[i]) {\r\n              const ieConditionalStartComment = child.prev;\r\n              const ieConditionalEndComment = child.firstChild;\r\n              const ParseSourceSpan = child.sourceSpan.constructor;\r\n              const startSourceSpan = new ParseSourceSpan(ieConditionalStartComment.sourceSpan.start, ieConditionalEndComment.sourceSpan.end);\r\n              const sourceSpan = new ParseSourceSpan(startSourceSpan.start, child.sourceSpan.end);\r\n              newChildren.push(child.clone({\r\n                condition: ieConditionalStartComment.condition,\r\n                sourceSpan,\r\n                startSourceSpan,\r\n                children: child.children.slice(1)\r\n              }));\r\n              continue;\r\n            }\r\n\r\n            newChildren.push(child);\r\n          }\r\n\r\n          return node.clone({\r\n            children: newChildren\r\n          });\r\n        }\r\n      }\r\n\r\n      return node;\r\n    });\r\n  }\r\n\r\n  function mergeNodeIntoText(ast, shouldMerge, getValue) {\r\n    return ast.map(node => {\r\n      if (node.children) {\r\n        const shouldMergeResults = node.children.map(shouldMerge);\r\n\r\n        if (shouldMergeResults.some(Boolean)) {\r\n          const newChildren = [];\r\n\r\n          for (let i = 0; i < node.children.length; i++) {\r\n            const child = node.children[i];\r\n\r\n            if (child.type !== \"text\" && !shouldMergeResults[i]) {\r\n              newChildren.push(child);\r\n              continue;\r\n            }\r\n\r\n            const newChild = child.type === \"text\" ? child : child.clone({\r\n              type: \"text\",\r\n              value: getValue(child)\r\n            });\r\n\r\n            if (newChildren.length === 0 || newChildren[newChildren.length - 1].type !== \"text\") {\r\n              newChildren.push(newChild);\r\n              continue;\r\n            }\r\n\r\n            const lastChild = newChildren.pop();\r\n            const ParseSourceSpan = lastChild.sourceSpan.constructor;\r\n            newChildren.push(lastChild.clone({\r\n              value: lastChild.value + newChild.value,\r\n              sourceSpan: new ParseSourceSpan(lastChild.sourceSpan.start, newChild.sourceSpan.end)\r\n            }));\r\n          }\r\n\r\n          return node.clone({\r\n            children: newChildren\r\n          });\r\n        }\r\n      }\r\n\r\n      return node;\r\n    });\r\n  }\r\n\r\n  function mergeCdataIntoText(ast\r\n  /*, options */\r\n  ) {\r\n    return mergeNodeIntoText(ast, node => node.type === \"cdata\", node => \"<![CDATA[\".concat(node.value, \"]]>\"));\r\n  }\r\n\r\n  function mergeSimpleElementIntoText(ast\r\n  /*, options */\r\n  ) {\r\n    const isSimpleElement = node => node.type === \"element\" && node.attrs.length === 0 && node.children.length === 1 && node.firstChild.type === \"text\" && // \\xA0: non-breaking whitespace\r\n    !/[^\\S\\xA0]/.test(node.children[0].value) && !node.firstChild.hasLeadingSpaces && !node.firstChild.hasTrailingSpaces && node.isLeadingSpaceSensitive && !node.hasLeadingSpaces && node.isTrailingSpaceSensitive && !node.hasTrailingSpaces && node.prev && node.prev.type === \"text\" && node.next && node.next.type === \"text\";\r\n\r\n    return ast.map(node => {\r\n      if (node.children) {\r\n        const isSimpleElementResults = node.children.map(isSimpleElement);\r\n\r\n        if (isSimpleElementResults.some(Boolean)) {\r\n          const newChildren = [];\r\n\r\n          for (let i = 0; i < node.children.length; i++) {\r\n            const child = node.children[i];\r\n\r\n            if (isSimpleElementResults[i]) {\r\n              const lastChild = newChildren.pop();\r\n              const nextChild = node.children[++i];\r\n              const ParseSourceSpan = node.sourceSpan.constructor;\r\n              const {\r\n                isTrailingSpaceSensitive,\r\n                hasTrailingSpaces\r\n              } = nextChild;\r\n              newChildren.push(lastChild.clone({\r\n                value: lastChild.value + \"<\".concat(child.rawName, \">\") + child.firstChild.value + \"</\".concat(child.rawName, \">\") + nextChild.value,\r\n                sourceSpan: new ParseSourceSpan(lastChild.sourceSpan.start, nextChild.sourceSpan.end),\r\n                isTrailingSpaceSensitive,\r\n                hasTrailingSpaces\r\n              }));\r\n            } else {\r\n              newChildren.push(child);\r\n            }\r\n          }\r\n\r\n          return node.clone({\r\n            children: newChildren\r\n          });\r\n        }\r\n      }\r\n\r\n      return node;\r\n    });\r\n  }\r\n\r\n  function extractInterpolation(ast, options) {\r\n    if (options.parser === \"html\") {\r\n      return ast;\r\n    }\r\n\r\n    const interpolationRegex = /\\{\\{([\\s\\S]+?)\\}\\}/g;\r\n    return ast.map(node => {\r\n      if (!canHaveInterpolation$1(node)) {\r\n        return node;\r\n      }\r\n\r\n      const newChildren = [];\r\n\r\n      for (const child of node.children) {\r\n        if (child.type !== \"text\") {\r\n          newChildren.push(child);\r\n          continue;\r\n        }\r\n\r\n        const ParseSourceSpan = child.sourceSpan.constructor;\r\n        let startSourceSpan = child.sourceSpan.start;\r\n        let endSourceSpan = null;\r\n        const components = child.value.split(interpolationRegex);\r\n\r\n        for (let i = 0; i < components.length; i++, startSourceSpan = endSourceSpan) {\r\n          const value = components[i];\r\n\r\n          if (i % 2 === 0) {\r\n            endSourceSpan = startSourceSpan.moveBy(value.length);\r\n\r\n            if (value.length !== 0) {\r\n              newChildren.push({\r\n                type: \"text\",\r\n                value,\r\n                sourceSpan: new ParseSourceSpan(startSourceSpan, endSourceSpan)\r\n              });\r\n            }\r\n\r\n            continue;\r\n          }\r\n\r\n          endSourceSpan = startSourceSpan.moveBy(value.length + 4); // `{{` + `}}`\r\n\r\n          newChildren.push({\r\n            type: \"interpolation\",\r\n            sourceSpan: new ParseSourceSpan(startSourceSpan, endSourceSpan),\r\n            children: value.length === 0 ? [] : [{\r\n              type: \"text\",\r\n              value,\r\n              sourceSpan: new ParseSourceSpan(startSourceSpan.moveBy(2), endSourceSpan.moveBy(-2))\r\n            }]\r\n          });\r\n        }\r\n      }\r\n\r\n      return node.clone({\r\n        children: newChildren\r\n      });\r\n    });\r\n  }\r\n  /**\r\n   * - add `hasLeadingSpaces` field\r\n   * - add `hasTrailingSpaces` field\r\n   * - add `hasDanglingSpaces` field for parent nodes\r\n   * - add `isWhitespaceSensitive`, `isIndentationSensitive` field for text nodes\r\n   * - remove insensitive whitespaces\r\n   */\r\n\r\n\r\n  function extractWhitespaces(ast\r\n  /*, options*/\r\n  ) {\r\n    const TYPE_WHITESPACE = \"whitespace\";\r\n    return ast.map(node => {\r\n      if (!node.children) {\r\n        return node;\r\n      }\r\n\r\n      if (node.children.length === 0 || node.children.length === 1 && node.children[0].type === \"text\" && node.children[0].value.trim().length === 0) {\r\n        return node.clone({\r\n          children: [],\r\n          hasDanglingSpaces: node.children.length !== 0\r\n        });\r\n      }\r\n\r\n      const isWhitespaceSensitive = isWhitespaceSensitiveNode$1(node);\r\n      const isIndentationSensitive = isIndentationSensitiveNode$1(node);\r\n      return node.clone({\r\n        isWhitespaceSensitive,\r\n        isIndentationSensitive,\r\n        children: node.children // extract whitespace nodes\r\n        .reduce((newChildren, child) => {\r\n          if (child.type !== \"text\" || isWhitespaceSensitive) {\r\n            return newChildren.concat(child);\r\n          }\r\n\r\n          const localChildren = [];\r\n          const [, leadingSpaces, text, trailingSpaces] = child.value.match(/^(\\s*)([\\s\\S]*?)(\\s*)$/);\r\n\r\n          if (leadingSpaces) {\r\n            localChildren.push({\r\n              type: TYPE_WHITESPACE\r\n            });\r\n          }\r\n\r\n          const ParseSourceSpan = child.sourceSpan.constructor;\r\n\r\n          if (text) {\r\n            localChildren.push({\r\n              type: \"text\",\r\n              value: text,\r\n              sourceSpan: new ParseSourceSpan(child.sourceSpan.start.moveBy(leadingSpaces.length), child.sourceSpan.end.moveBy(-trailingSpaces.length))\r\n            });\r\n          }\r\n\r\n          if (trailingSpaces) {\r\n            localChildren.push({\r\n              type: TYPE_WHITESPACE\r\n            });\r\n          }\r\n\r\n          return newChildren.concat(localChildren);\r\n        }, []) // set hasLeadingSpaces/hasTrailingSpaces and filter whitespace nodes\r\n        .reduce((newChildren, child, i, children) => {\r\n          if (child.type === TYPE_WHITESPACE) {\r\n            return newChildren;\r\n          }\r\n\r\n          const hasLeadingSpaces = i !== 0 && children[i - 1].type === TYPE_WHITESPACE;\r\n          const hasTrailingSpaces = i !== children.length - 1 && children[i + 1].type === TYPE_WHITESPACE;\r\n          return newChildren.concat(Object.assign({}, child, {\r\n            hasLeadingSpaces,\r\n            hasTrailingSpaces\r\n          }));\r\n        }, [])\r\n      });\r\n    });\r\n  }\r\n\r\n  function addIsSelfClosing(ast\r\n  /*, options */\r\n  ) {\r\n    return ast.map(node => Object.assign(node, {\r\n      isSelfClosing: !node.children || node.type === \"element\" && (node.tagDefinition.isVoid || // self-closing\r\n      node.startSourceSpan === node.endSourceSpan)\r\n    }));\r\n  }\r\n\r\n  function addHasHtmComponentClosingTag(ast, options) {\r\n    return ast.map(node => node.type !== \"element\" ? node : Object.assign(node, {\r\n      hasHtmComponentClosingTag: node.endSourceSpan && /^<\\s*\\/\\s*\\/\\s*>$/.test(options.originalText.slice(node.endSourceSpan.start.offset, node.endSourceSpan.end.offset))\r\n    }));\r\n  }\r\n\r\n  function addCssDisplay(ast, options) {\r\n    return ast.map(node => Object.assign(node, {\r\n      cssDisplay: getNodeCssStyleDisplay$1(node, options)\r\n    }));\r\n  }\r\n  /**\r\n   * - add `isLeadingSpaceSensitive` field\r\n   * - add `isTrailingSpaceSensitive` field\r\n   * - add `isDanglingSpaceSensitive` field for parent nodes\r\n   */\r\n\r\n\r\n  function addIsSpaceSensitive(ast\r\n  /*, options */\r\n  ) {\r\n    return ast.map(node => {\r\n      if (!node.children) {\r\n        return node;\r\n      }\r\n\r\n      if (node.children.length === 0) {\r\n        return node.clone({\r\n          isDanglingSpaceSensitive: isDanglingSpaceSensitiveNode$1(node)\r\n        });\r\n      }\r\n\r\n      return node.clone({\r\n        children: node.children.map(child => {\r\n          return Object.assign({}, child, {\r\n            isLeadingSpaceSensitive: isLeadingSpaceSensitiveNode$1(child),\r\n            isTrailingSpaceSensitive: isTrailingSpaceSensitiveNode$1(child)\r\n          });\r\n        }).map((child, index, children) => Object.assign({}, child, {\r\n          isLeadingSpaceSensitive: index === 0 ? child.isLeadingSpaceSensitive : children[index - 1].isTrailingSpaceSensitive && child.isLeadingSpaceSensitive,\r\n          isTrailingSpaceSensitive: index === children.length - 1 ? child.isTrailingSpaceSensitive : children[index + 1].isLeadingSpaceSensitive && child.isTrailingSpaceSensitive\r\n        }))\r\n      });\r\n    });\r\n  }\r\n\r\n  var preprocess_1 = preprocess;\r\n\r\n  function hasPragma$3(text) {\r\n    return /^\\s*<!--\\s*@(format|prettier)\\s*-->/.test(text);\r\n  }\r\n\r\n  function insertPragma$5(text) {\r\n    return \"<!-- @format -->\\n\\n\" + text.replace(/^\\s*\\n/, \"\");\r\n  }\r\n\r\n  var pragma$3 = {\r\n    hasPragma: hasPragma$3,\r\n    insertPragma: insertPragma$5\r\n  };\r\n\r\n  const {\r\n    builders: {\r\n      concat: concat$8,\r\n      group: group$8\r\n    }\r\n  } = document;\r\n  /**\r\n   *     v-for=\"... in ...\"\r\n   *     v-for=\"... of ...\"\r\n   *     v-for=\"(..., ...) in ...\"\r\n   *     v-for=\"(..., ...) of ...\"\r\n   */\r\n\r\n  function printVueFor(value, textToDoc) {\r\n    const {\r\n      left,\r\n      operator,\r\n      right\r\n    } = parseVueFor(value);\r\n    return concat$8([group$8(textToDoc(\"function _(\".concat(left, \") {}\"), {\r\n      parser: \"babel\",\r\n      __isVueForBindingLeft: true\r\n    })), \" \", operator, \" \", textToDoc(right, {\r\n      parser: \"__js_expression\"\r\n    })]);\r\n  } // modified from https://github.com/vuejs/vue/blob/v2.5.17/src/compiler/parser/index.js#L370-L387\r\n\r\n\r\n  function parseVueFor(value) {\r\n    const forAliasRE = /([^]*?)\\s+(in|of)\\s+([^]*)/;\r\n    const forIteratorRE = /,([^,}\\]]*)(?:,([^,}\\]]*))?$/;\r\n    const stripParensRE = /^\\(|\\)$/g;\r\n    const inMatch = value.match(forAliasRE);\r\n\r\n    if (!inMatch) {\r\n      return;\r\n    }\r\n\r\n    const res = {};\r\n    res.for = inMatch[3].trim();\r\n    const alias = inMatch[1].trim().replace(stripParensRE, \"\");\r\n    const iteratorMatch = alias.match(forIteratorRE);\r\n\r\n    if (iteratorMatch) {\r\n      res.alias = alias.replace(forIteratorRE, \"\");\r\n      res.iterator1 = iteratorMatch[1].trim();\r\n\r\n      if (iteratorMatch[2]) {\r\n        res.iterator2 = iteratorMatch[2].trim();\r\n      }\r\n    } else {\r\n      res.alias = alias;\r\n    }\r\n\r\n    return {\r\n      left: \"\".concat([res.alias, res.iterator1, res.iterator2].filter(Boolean).join(\",\")),\r\n      operator: inMatch[2],\r\n      right: res.for\r\n    };\r\n  }\r\n\r\n  function printVueSlotScope(value, textToDoc) {\r\n    return textToDoc(\"function _(\".concat(value, \") {}\"), {\r\n      parser: \"babel\",\r\n      __isVueSlotScope: true\r\n    });\r\n  }\r\n\r\n  function isVueEventBindingExpression(eventBindingValue) {\r\n    // https://github.com/vuejs/vue/blob/v2.5.17/src/compiler/codegen/events.js#L3-L4\r\n    // arrow function or anonymous function\r\n    const fnExpRE = /^([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/; // simple member expression chain (a, a.b, a['b'], a[\"b\"], a[0], a[b])\r\n\r\n    const simplePathRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['[^']*?']|\\[\"[^\"]*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*$/; // https://github.com/vuejs/vue/blob/v2.5.17/src/compiler/helpers.js#L104\r\n\r\n    const value = eventBindingValue.trim();\r\n    return fnExpRE.test(value) || simplePathRE.test(value);\r\n  }\r\n\r\n  var syntaxVue = {\r\n    isVueEventBindingExpression,\r\n    printVueFor,\r\n    printVueSlotScope\r\n  };\r\n\r\n  const integerRegex = /^\\d+$/;\r\n\r\n  function deepUnique(array) {\r\n    return array.sort().filter((element, index) => {\r\n      return JSON.stringify(element) !== JSON.stringify(array[index - 1]);\r\n    });\r\n  }\r\n\r\n  var parse$2 = string => {\r\n    return deepUnique(string.split(',').map(part => {\r\n      const result = {};\r\n      part.trim().split(/\\s+/).forEach((element, index) => {\r\n        if (index === 0) {\r\n          result.url = element;\r\n          return;\r\n        }\r\n\r\n        const value = element.slice(0, element.length - 1);\r\n        const postfix = element[element.length - 1];\r\n        const integerValue = parseInt(value, 10);\r\n        const floatValue = parseFloat(value);\r\n\r\n        if (postfix === 'w' && integerRegex.test(value)) {\r\n          result.width = integerValue;\r\n        } else if (postfix === 'h' && integerRegex.test(value)) {\r\n          result.height = integerValue;\r\n        } else if (postfix === 'x' && !Number.isNaN(floatValue)) {\r\n          result.density = floatValue;\r\n        } else {\r\n          throw new Error(\"Invalid srcset descriptor: \".concat(element));\r\n        }\r\n      });\r\n      return result;\r\n    }));\r\n  };\r\n\r\n  var stringify = array => {\r\n    return [...new Set(array.map(element => {\r\n      if (!element.url) {\r\n        throw new Error('URL is required');\r\n      }\r\n\r\n      const result = [element.url];\r\n\r\n      if (element.width) {\r\n        result.push(\"\".concat(element.width, \"w\"));\r\n      }\r\n\r\n      if (element.height) {\r\n        result.push(\"\".concat(element.height, \"h\"));\r\n      }\r\n\r\n      if (element.density) {\r\n        result.push(\"\".concat(element.density, \"x\"));\r\n      }\r\n\r\n      return result.join(' ');\r\n    }))].join(', ');\r\n  };\r\n\r\n  var srcset = {\r\n    parse: parse$2,\r\n    stringify: stringify\r\n  };\r\n\r\n  const {\r\n    builders: {\r\n      concat: concat$9,\r\n      ifBreak: ifBreak$4,\r\n      join: join$5,\r\n      line: line$5\r\n    }\r\n  } = document;\r\n  const parseSrcset = srcset.parse;\r\n\r\n  function printImgSrcset(value) {\r\n    const srcset = parseSrcset(value);\r\n    const hasW = srcset.some(src => src.width);\r\n    const hasH = srcset.some(src => src.height);\r\n    const hasX = srcset.some(src => src.density);\r\n\r\n    if (hasW + hasH + hasX > 1) {\r\n      throw new Error(\"Mixed descriptor in srcset is not supported\");\r\n    }\r\n\r\n    const key = hasW ? \"width\" : hasH ? \"height\" : \"density\";\r\n    const unit = hasW ? \"w\" : hasH ? \"h\" : \"x\";\r\n\r\n    const getMax = values => Math.max(...values);\r\n\r\n    const urls = srcset.map(src => src.url);\r\n    const maxUrlLength = getMax(urls.map(url => url.length));\r\n    const descriptors = srcset.map(src => src[key]).map(descriptor => descriptor ? descriptor.toString() : \"\");\r\n    const descriptorLeftLengths = descriptors.map(descriptor => {\r\n      const index = descriptor.indexOf(\".\");\r\n      return index === -1 ? descriptor.length : index;\r\n    });\r\n    const maxDescriptorLeftLength = getMax(descriptorLeftLengths);\r\n    return join$5(concat$9([\",\", line$5]), urls.map((url, index) => {\r\n      const parts = [url];\r\n      const descriptor = descriptors[index];\r\n\r\n      if (descriptor) {\r\n        const urlPadding = maxUrlLength - url.length + 1;\r\n        const descriptorPadding = maxDescriptorLeftLength - descriptorLeftLengths[index];\r\n        const alignment = \" \".repeat(urlPadding + descriptorPadding);\r\n        parts.push(ifBreak$4(alignment, \" \"), descriptor + unit);\r\n      }\r\n\r\n      return concat$9(parts);\r\n    }));\r\n  }\r\n\r\n  function printClassNames(value) {\r\n    return value.trim().split(/\\s+/).join(\" \");\r\n  }\r\n\r\n  var syntaxAttribute = {\r\n    printImgSrcset,\r\n    printClassNames\r\n  };\r\n\r\n  const {\r\n    builders,\r\n    utils: {\r\n      stripTrailingHardline: stripTrailingHardline$1,\r\n      mapDoc: mapDoc$2\r\n    }\r\n  } = document;\r\n  const {\r\n    breakParent: breakParent$2,\r\n    dedentToRoot: dedentToRoot$1,\r\n    fill: fill$3,\r\n    group: group$9,\r\n    hardline: hardline$7,\r\n    ifBreak: ifBreak$5,\r\n    indent: indent$5,\r\n    join: join$6,\r\n    line: line$6,\r\n    literalline: literalline$2,\r\n    markAsRoot: markAsRoot$2,\r\n    softline: softline$4\r\n  } = builders;\r\n  const {\r\n    countChars: countChars$1,\r\n    countParents: countParents$1,\r\n    dedentString: dedentString$1,\r\n    forceBreakChildren: forceBreakChildren$1,\r\n    forceBreakContent: forceBreakContent$1,\r\n    forceNextEmptyLine: forceNextEmptyLine$1,\r\n    getLastDescendant: getLastDescendant$1,\r\n    getPrettierIgnoreAttributeCommentData: getPrettierIgnoreAttributeCommentData$1,\r\n    hasPrettierIgnore: hasPrettierIgnore$3,\r\n    inferScriptParser: inferScriptParser$1,\r\n    isScriptLikeTag: isScriptLikeTag$1,\r\n    isTextLikeNode: isTextLikeNode$1,\r\n    normalizeParts: normalizeParts$1,\r\n    preferHardlineAsLeadingSpaces: preferHardlineAsLeadingSpaces$1,\r\n    shouldNotPrintClosingTag: shouldNotPrintClosingTag$1,\r\n    shouldPreserveContent: shouldPreserveContent$1,\r\n    unescapeQuoteEntities: unescapeQuoteEntities$1\r\n  } = utils$4;\r\n  const {\r\n    replaceEndOfLineWith: replaceEndOfLineWith$1\r\n  } = util$1;\r\n  const {\r\n    insertPragma: insertPragma$6\r\n  } = pragma$3;\r\n  const {\r\n    printVueFor: printVueFor$1,\r\n    printVueSlotScope: printVueSlotScope$1,\r\n    isVueEventBindingExpression: isVueEventBindingExpression$1\r\n  } = syntaxVue;\r\n  const {\r\n    printImgSrcset: printImgSrcset$1,\r\n    printClassNames: printClassNames$1\r\n  } = syntaxAttribute;\r\n\r\n  function concat$a(parts) {\r\n    const newParts = normalizeParts$1(parts);\r\n    return newParts.length === 0 ? \"\" : newParts.length === 1 ? newParts[0] : builders.concat(newParts);\r\n  }\r\n\r\n  function embed$2(path, print, textToDoc, options) {\r\n    const node = path.getValue();\r\n\r\n    switch (node.type) {\r\n      case \"text\":\r\n        {\r\n          if (isScriptLikeTag$1(node.parent)) {\r\n            const parser = inferScriptParser$1(node.parent);\r\n\r\n            if (parser) {\r\n              const value = parser === \"markdown\" ? dedentString$1(node.value.replace(/^[^\\S\\n]*?\\n/, \"\")) : node.value;\r\n              return builders.concat([concat$a([breakParent$2, printOpeningTagPrefix(node, options), stripTrailingHardline$1(textToDoc(value, {\r\n                parser\r\n              })), printClosingTagSuffix(node, options)])]);\r\n            }\r\n          } else if (node.parent.type === \"interpolation\") {\r\n            return concat$a([indent$5(concat$a([line$6, textToDoc(node.value, Object.assign({\r\n              __isInHtmlInterpolation: true\r\n            }, options.parser === \"angular\" ? {\r\n              parser: \"__ng_interpolation\",\r\n              trailingComma: \"none\"\r\n            } : options.parser === \"vue\" ? {\r\n              parser: \"__vue_expression\"\r\n            } : {\r\n              parser: \"__js_expression\"\r\n            }))])), node.parent.next && needsToBorrowPrevClosingTagEndMarker(node.parent.next) ? \" \" : line$6]);\r\n          }\r\n\r\n          break;\r\n        }\r\n\r\n      case \"attribute\":\r\n        {\r\n          if (!node.value) {\r\n            break;\r\n          } // lit-html: html`<my-element obj=${obj}></my-element>`\r\n\r\n\r\n          if (/^PRETTIER_HTML_PLACEHOLDER_\\d+_\\d+_IN_JS$/.test(options.originalText.slice(node.valueSpan.start.offset, node.valueSpan.end.offset))) {\r\n            return concat$a([node.rawName, \"=\", node.value]);\r\n          } // lwc: html`<my-element data-for={value}></my-element>`\r\n\r\n\r\n          if (options.parser === \"lwc\") {\r\n            const interpolationRegex = /^\\{[\\s\\S]*\\}$/;\r\n\r\n            if (interpolationRegex.test(options.originalText.slice(node.valueSpan.start.offset, node.valueSpan.end.offset))) {\r\n              return concat$a([node.rawName, \"=\", node.value]);\r\n            }\r\n          }\r\n\r\n          const embeddedAttributeValueDoc = printEmbeddedAttributeValue(node, (code, opts) => // strictly prefer single quote to avoid unnecessary html entity escape\r\n          textToDoc(code, Object.assign({\r\n            __isInHtmlAttribute: true\r\n          }, opts)), options);\r\n\r\n          if (embeddedAttributeValueDoc) {\r\n            return concat$a([node.rawName, '=\"', group$9(mapDoc$2(embeddedAttributeValueDoc, doc => typeof doc === \"string\" ? doc.replace(/\"/g, \"&quot;\") : doc)), '\"']);\r\n          }\r\n\r\n          break;\r\n        }\r\n\r\n      case \"yaml\":\r\n        return markAsRoot$2(concat$a([\"---\", hardline$7, node.value.trim().length === 0 ? \"\" : textToDoc(node.value, {\r\n          parser: \"yaml\"\r\n        }), \"---\"]));\r\n    }\r\n  }\r\n\r\n  function genericPrint$2(path, options, print) {\r\n    const node = path.getValue();\r\n\r\n    switch (node.type) {\r\n      case \"root\":\r\n        if (options.__onHtmlRoot) {\r\n          options.__onHtmlRoot(node);\r\n        } // use original concat to not break stripTrailingHardline\r\n\r\n\r\n        return builders.concat([group$9(printChildren$1(path, options, print)), hardline$7]);\r\n\r\n      case \"element\":\r\n      case \"ieConditionalComment\":\r\n        {\r\n          /**\r\n           * do not break:\r\n           *\r\n           *     <div>{{\r\n           *         ~\r\n           *       interpolation\r\n           *     }}</div>\r\n           *            ~\r\n           *\r\n           * exception: break if the opening tag breaks\r\n           *\r\n           *     <div\r\n           *       long\r\n           *           ~\r\n           *       >{{\r\n           *         interpolation\r\n           *       }}</div\r\n           *              ~\r\n           *     >\r\n           */\r\n          const shouldHugContent = node.children.length === 1 && node.firstChild.type === \"interpolation\" && node.firstChild.isLeadingSpaceSensitive && !node.firstChild.hasLeadingSpaces && node.lastChild.isTrailingSpaceSensitive && !node.lastChild.hasTrailingSpaces;\r\n          const attrGroupId = Symbol(\"element-attr-group-id\");\r\n          return concat$a([group$9(concat$a([group$9(printOpeningTag(path, options, print), {\r\n            id: attrGroupId\r\n          }), node.children.length === 0 ? node.hasDanglingSpaces && node.isDanglingSpaceSensitive ? line$6 : \"\" : concat$a([forceBreakContent$1(node) ? breakParent$2 : \"\", (childrenDoc => shouldHugContent ? ifBreak$5(indent$5(childrenDoc), childrenDoc, {\r\n            groupId: attrGroupId\r\n          }) : isScriptLikeTag$1(node) && node.parent.type === \"root\" && options.parser === \"vue\" && !options.vueIndentScriptAndStyle ? childrenDoc : indent$5(childrenDoc))(concat$a([shouldHugContent ? ifBreak$5(softline$4, \"\", {\r\n            groupId: attrGroupId\r\n          }) : node.firstChild.hasLeadingSpaces && node.firstChild.isLeadingSpaceSensitive ? line$6 : node.firstChild.type === \"text\" && node.isWhitespaceSensitive && node.isIndentationSensitive ? dedentToRoot$1(softline$4) : softline$4, printChildren$1(path, options, print)])), (node.next ? needsToBorrowPrevClosingTagEndMarker(node.next) : needsToBorrowLastChildClosingTagEndMarker(node.parent)) ? node.lastChild.hasTrailingSpaces && node.lastChild.isTrailingSpaceSensitive ? \" \" : \"\" : shouldHugContent ? ifBreak$5(softline$4, \"\", {\r\n            groupId: attrGroupId\r\n          }) : node.lastChild.hasTrailingSpaces && node.lastChild.isTrailingSpaceSensitive ? line$6 : (node.lastChild.type === \"comment\" || node.lastChild.type === \"text\" && node.isWhitespaceSensitive && node.isIndentationSensitive) && new RegExp(\"\\\\n\\\\s{\".concat(options.tabWidth * countParents$1(path, n => n.parent && n.parent.type !== \"root\"), \"}$\")).test(node.lastChild.value) ?\r\n          /**\r\n           *     <div>\r\n           *       <pre>\r\n           *         something\r\n           *       </pre>\r\n           *            ~\r\n           *     </div>\r\n           */\r\n          \"\" : softline$4])])), printClosingTag(node, options)]);\r\n        }\r\n\r\n      case \"ieConditionalStartComment\":\r\n      case \"ieConditionalEndComment\":\r\n        return concat$a([printOpeningTagStart(node), printClosingTagEnd(node)]);\r\n\r\n      case \"interpolation\":\r\n        return concat$a([printOpeningTagStart(node, options), concat$a(path.map(print, \"children\")), printClosingTagEnd(node, options)]);\r\n\r\n      case \"text\":\r\n        {\r\n          if (node.parent.type === \"interpolation\") {\r\n            // replace the trailing literalline with hardline for better readability\r\n            const trailingNewlineRegex = /\\n[^\\S\\n]*?$/;\r\n            const hasTrailingNewline = trailingNewlineRegex.test(node.value);\r\n            const value = hasTrailingNewline ? node.value.replace(trailingNewlineRegex, \"\") : node.value;\r\n            return concat$a([concat$a(replaceEndOfLineWith$1(value, literalline$2)), hasTrailingNewline ? hardline$7 : \"\"]);\r\n          }\r\n\r\n          return fill$3(normalizeParts$1([].concat(printOpeningTagPrefix(node, options), getTextValueParts(node), printClosingTagSuffix(node, options))));\r\n        }\r\n\r\n      case \"docType\":\r\n        return concat$a([group$9(concat$a([printOpeningTagStart(node, options), \" \", node.value.replace(/^html\\b/i, \"html\").replace(/\\s+/g, \" \")])), printClosingTagEnd(node, options)]);\r\n\r\n      case \"comment\":\r\n        {\r\n          return concat$a([printOpeningTagPrefix(node, options), concat$a(replaceEndOfLineWith$1(options.originalText.slice(options.locStart(node), options.locEnd(node)), literalline$2)), printClosingTagSuffix(node, options)]);\r\n        }\r\n\r\n      case \"attribute\":\r\n        {\r\n          if (node.value === null) {\r\n            return node.rawName;\r\n          }\r\n\r\n          const value = unescapeQuoteEntities$1(node.value);\r\n          const singleQuoteCount = countChars$1(value, \"'\");\r\n          const doubleQuoteCount = countChars$1(value, '\"');\r\n          const quote = singleQuoteCount < doubleQuoteCount ? \"'\" : '\"';\r\n          return concat$a([node.rawName, concat$a([\"=\", quote, concat$a(replaceEndOfLineWith$1(quote === '\"' ? value.replace(/\"/g, \"&quot;\") : value.replace(/'/g, \"&apos;\"), literalline$2)), quote])]);\r\n        }\r\n\r\n      case \"yaml\":\r\n      case \"toml\":\r\n        return concat$a(replaceEndOfLineWith$1(node.raw, literalline$2));\r\n\r\n      default:\r\n        throw new Error(\"Unexpected node type \".concat(node.type));\r\n    }\r\n  }\r\n\r\n  function printChildren$1(path, options, print) {\r\n    const node = path.getValue();\r\n\r\n    if (forceBreakChildren$1(node)) {\r\n      return concat$a([breakParent$2, concat$a(path.map(childPath => {\r\n        const childNode = childPath.getValue();\r\n        const prevBetweenLine = !childNode.prev ? \"\" : printBetweenLine(childNode.prev, childNode);\r\n        return concat$a([!prevBetweenLine ? \"\" : concat$a([prevBetweenLine, forceNextEmptyLine$1(childNode.prev) ? hardline$7 : \"\"]), printChild(childPath)]);\r\n      }, \"children\"))]);\r\n    }\r\n\r\n    const groupIds = node.children.map(() => Symbol(\"\"));\r\n    return concat$a(path.map((childPath, childIndex) => {\r\n      const childNode = childPath.getValue();\r\n\r\n      if (isTextLikeNode$1(childNode)) {\r\n        if (childNode.prev && isTextLikeNode$1(childNode.prev)) {\r\n          const prevBetweenLine = printBetweenLine(childNode.prev, childNode);\r\n\r\n          if (prevBetweenLine) {\r\n            if (forceNextEmptyLine$1(childNode.prev)) {\r\n              return concat$a([hardline$7, hardline$7, printChild(childPath)]);\r\n            }\r\n\r\n            return concat$a([prevBetweenLine, printChild(childPath)]);\r\n          }\r\n        }\r\n\r\n        return printChild(childPath);\r\n      }\r\n\r\n      const prevParts = [];\r\n      const leadingParts = [];\r\n      const trailingParts = [];\r\n      const nextParts = [];\r\n      const prevBetweenLine = childNode.prev ? printBetweenLine(childNode.prev, childNode) : \"\";\r\n      const nextBetweenLine = childNode.next ? printBetweenLine(childNode, childNode.next) : \"\";\r\n\r\n      if (prevBetweenLine) {\r\n        if (forceNextEmptyLine$1(childNode.prev)) {\r\n          prevParts.push(hardline$7, hardline$7);\r\n        } else if (prevBetweenLine === hardline$7) {\r\n          prevParts.push(hardline$7);\r\n        } else {\r\n          if (isTextLikeNode$1(childNode.prev)) {\r\n            leadingParts.push(prevBetweenLine);\r\n          } else {\r\n            leadingParts.push(ifBreak$5(\"\", softline$4, {\r\n              groupId: groupIds[childIndex - 1]\r\n            }));\r\n          }\r\n        }\r\n      }\r\n\r\n      if (nextBetweenLine) {\r\n        if (forceNextEmptyLine$1(childNode)) {\r\n          if (isTextLikeNode$1(childNode.next)) {\r\n            nextParts.push(hardline$7, hardline$7);\r\n          }\r\n        } else if (nextBetweenLine === hardline$7) {\r\n          if (isTextLikeNode$1(childNode.next)) {\r\n            nextParts.push(hardline$7);\r\n          }\r\n        } else {\r\n          trailingParts.push(nextBetweenLine);\r\n        }\r\n      }\r\n\r\n      return concat$a([].concat(prevParts, group$9(concat$a([concat$a(leadingParts), group$9(concat$a([printChild(childPath), concat$a(trailingParts)]), {\r\n        id: groupIds[childIndex]\r\n      })])), nextParts));\r\n    }, \"children\"));\r\n\r\n    function printChild(childPath) {\r\n      const child = childPath.getValue();\r\n\r\n      if (hasPrettierIgnore$3(child)) {\r\n        return concat$a([].concat(printOpeningTagPrefix(child, options), replaceEndOfLineWith$1(options.originalText.slice(options.locStart(child) + (child.prev && needsToBorrowNextOpeningTagStartMarker(child.prev) ? printOpeningTagStartMarker(child).length : 0), options.locEnd(child) - (child.next && needsToBorrowPrevClosingTagEndMarker(child.next) ? printClosingTagEndMarker(child, options).length : 0)), literalline$2), printClosingTagSuffix(child, options)));\r\n      }\r\n\r\n      if (shouldPreserveContent$1(child, options)) {\r\n        return concat$a([].concat(printOpeningTagPrefix(child, options), group$9(printOpeningTag(childPath, options, print)), replaceEndOfLineWith$1(options.originalText.slice(child.startSourceSpan.end.offset + (child.firstChild && needsToBorrowParentOpeningTagEndMarker(child.firstChild) ? -printOpeningTagEndMarker(child).length : 0), child.endSourceSpan.start.offset + (child.lastChild && needsToBorrowParentClosingTagStartMarker(child.lastChild) ? printClosingTagStartMarker(child, options).length : needsToBorrowLastChildClosingTagEndMarker(child) ? -printClosingTagEndMarker(child.lastChild, options).length : 0)), literalline$2), printClosingTag(child, options), printClosingTagSuffix(child, options)));\r\n      }\r\n\r\n      return print(childPath);\r\n    }\r\n\r\n    function printBetweenLine(prevNode, nextNode) {\r\n      return isTextLikeNode$1(prevNode) && isTextLikeNode$1(nextNode) ? prevNode.isTrailingSpaceSensitive ? prevNode.hasTrailingSpaces ? preferHardlineAsLeadingSpaces$1(nextNode) ? hardline$7 : line$6 : \"\" : preferHardlineAsLeadingSpaces$1(nextNode) ? hardline$7 : softline$4 : needsToBorrowNextOpeningTagStartMarker(prevNode) && (hasPrettierIgnore$3(nextNode) ||\r\n      /**\r\n       *     123<a\r\n       *          ~\r\n       *       ><b>\r\n       */\r\n      nextNode.firstChild ||\r\n      /**\r\n       *     123<!--\r\n       *            ~\r\n       *     -->\r\n       */\r\n      nextNode.isSelfClosing ||\r\n      /**\r\n       *     123<span\r\n       *             ~\r\n       *       attr\r\n       */\r\n      nextNode.type === \"element\" && nextNode.attrs.length !== 0) ||\r\n      /**\r\n       *     <img\r\n       *       src=\"long\"\r\n       *                 ~\r\n       *     />123\r\n       */\r\n      prevNode.type === \"element\" && prevNode.isSelfClosing && needsToBorrowPrevClosingTagEndMarker(nextNode) ? \"\" : !nextNode.isLeadingSpaceSensitive || preferHardlineAsLeadingSpaces$1(nextNode) ||\r\n      /**\r\n       *       Want to write us a letter? Use our<a\r\n       *         ><b><a>mailing address</a></b></a\r\n       *                                          ~\r\n       *       >.\r\n       */\r\n      needsToBorrowPrevClosingTagEndMarker(nextNode) && prevNode.lastChild && needsToBorrowParentClosingTagStartMarker(prevNode.lastChild) && prevNode.lastChild.lastChild && needsToBorrowParentClosingTagStartMarker(prevNode.lastChild.lastChild) ? hardline$7 : nextNode.hasLeadingSpaces ? line$6 : softline$4;\r\n    }\r\n  }\r\n\r\n  function printOpeningTag(path, options, print) {\r\n    const node = path.getValue();\r\n    const forceNotToBreakAttrContent = node.type === \"element\" && node.fullName === \"script\" && node.attrs.length === 1 && node.attrs[0].fullName === \"src\" && node.children.length === 0;\r\n    return concat$a([printOpeningTagStart(node, options), !node.attrs || node.attrs.length === 0 ? node.isSelfClosing ?\r\n    /**\r\n     *     <br />\r\n     *        ^\r\n     */\r\n    \" \" : \"\" : concat$a([indent$5(concat$a([forceNotToBreakAttrContent ? \" \" : line$6, join$6(line$6, (ignoreAttributeData => {\r\n      const hasPrettierIgnoreAttribute = typeof ignoreAttributeData === \"boolean\" ? () => ignoreAttributeData : Array.isArray(ignoreAttributeData) ? attr => ignoreAttributeData.includes(attr.rawName) : () => false;\r\n      return path.map(attrPath => {\r\n        const attr = attrPath.getValue();\r\n        return hasPrettierIgnoreAttribute(attr) ? concat$a(replaceEndOfLineWith$1(options.originalText.slice(options.locStart(attr), options.locEnd(attr)), literalline$2)) : print(attrPath);\r\n      }, \"attrs\");\r\n    })(node.prev && node.prev.type === \"comment\" && getPrettierIgnoreAttributeCommentData$1(node.prev.value)))])),\r\n    /**\r\n     *     123<a\r\n     *       attr\r\n     *           ~\r\n     *       >456\r\n     */\r\n    node.firstChild && needsToBorrowParentOpeningTagEndMarker(node.firstChild) ||\r\n    /**\r\n     *     <span\r\n     *       >123<meta\r\n     *                ~\r\n     *     /></span>\r\n     */\r\n    node.isSelfClosing && needsToBorrowLastChildClosingTagEndMarker(node.parent) ? node.isSelfClosing ? \" \" : \"\" : node.isSelfClosing ? forceNotToBreakAttrContent ? \" \" : line$6 : forceNotToBreakAttrContent ? \"\" : softline$4]), node.isSelfClosing ? \"\" : printOpeningTagEnd(node)]);\r\n  }\r\n\r\n  function printOpeningTagStart(node, options) {\r\n    return node.prev && needsToBorrowNextOpeningTagStartMarker(node.prev) ? \"\" : concat$a([printOpeningTagPrefix(node, options), printOpeningTagStartMarker(node)]);\r\n  }\r\n\r\n  function printOpeningTagEnd(node) {\r\n    return node.firstChild && needsToBorrowParentOpeningTagEndMarker(node.firstChild) ? \"\" : printOpeningTagEndMarker(node);\r\n  }\r\n\r\n  function printClosingTag(node, options) {\r\n    return concat$a([node.isSelfClosing ? \"\" : printClosingTagStart(node, options), printClosingTagEnd(node, options)]);\r\n  }\r\n\r\n  function printClosingTagStart(node, options) {\r\n    return node.lastChild && needsToBorrowParentClosingTagStartMarker(node.lastChild) ? \"\" : concat$a([printClosingTagPrefix(node, options), printClosingTagStartMarker(node, options)]);\r\n  }\r\n\r\n  function printClosingTagEnd(node, options) {\r\n    return (node.next ? needsToBorrowPrevClosingTagEndMarker(node.next) : needsToBorrowLastChildClosingTagEndMarker(node.parent)) ? \"\" : concat$a([printClosingTagEndMarker(node, options), printClosingTagSuffix(node, options)]);\r\n  }\r\n\r\n  function needsToBorrowNextOpeningTagStartMarker(node) {\r\n    /**\r\n     *     123<p\r\n     *        ^^\r\n     *     >\r\n     */\r\n    return node.next && !isTextLikeNode$1(node.next) && isTextLikeNode$1(node) && node.isTrailingSpaceSensitive && !node.hasTrailingSpaces;\r\n  }\r\n\r\n  function needsToBorrowParentOpeningTagEndMarker(node) {\r\n    /**\r\n     *     <p\r\n     *       >123\r\n     *       ^\r\n     *\r\n     *     <p\r\n     *       ><a\r\n     *       ^\r\n     */\r\n    return !node.prev && node.isLeadingSpaceSensitive && !node.hasLeadingSpaces;\r\n  }\r\n\r\n  function needsToBorrowPrevClosingTagEndMarker(node) {\r\n    /**\r\n     *     <p></p\r\n     *     >123\r\n     *     ^\r\n     *\r\n     *     <p></p\r\n     *     ><a\r\n     *     ^\r\n     */\r\n    return node.prev && !isTextLikeNode$1(node.prev) && node.isLeadingSpaceSensitive && !node.hasLeadingSpaces;\r\n  }\r\n\r\n  function needsToBorrowLastChildClosingTagEndMarker(node) {\r\n    /**\r\n     *     <p\r\n     *       ><a></a\r\n     *       ></p\r\n     *       ^\r\n     *     >\r\n     */\r\n    return node.lastChild && node.lastChild.isTrailingSpaceSensitive && !node.lastChild.hasTrailingSpaces && !isTextLikeNode$1(getLastDescendant$1(node.lastChild));\r\n  }\r\n\r\n  function needsToBorrowParentClosingTagStartMarker(node) {\r\n    /**\r\n     *     <p>\r\n     *       123</p\r\n     *          ^^^\r\n     *     >\r\n     *\r\n     *         123</b\r\n     *       ></a\r\n     *        ^^^\r\n     *     >\r\n     */\r\n    return !node.next && !node.hasTrailingSpaces && node.isTrailingSpaceSensitive && isTextLikeNode$1(getLastDescendant$1(node));\r\n  }\r\n\r\n  function printOpeningTagPrefix(node, options) {\r\n    return needsToBorrowParentOpeningTagEndMarker(node) ? printOpeningTagEndMarker(node.parent) : needsToBorrowPrevClosingTagEndMarker(node) ? printClosingTagEndMarker(node.prev, options) : \"\";\r\n  }\r\n\r\n  function printClosingTagPrefix(node, options) {\r\n    return needsToBorrowLastChildClosingTagEndMarker(node) ? printClosingTagEndMarker(node.lastChild, options) : \"\";\r\n  }\r\n\r\n  function printClosingTagSuffix(node, options) {\r\n    return needsToBorrowParentClosingTagStartMarker(node) ? printClosingTagStartMarker(node.parent, options) : needsToBorrowNextOpeningTagStartMarker(node) ? printOpeningTagStartMarker(node.next) : \"\";\r\n  }\r\n\r\n  function printOpeningTagStartMarker(node) {\r\n    switch (node.type) {\r\n      case \"ieConditionalComment\":\r\n      case \"ieConditionalStartComment\":\r\n        return \"<!--[if \".concat(node.condition);\r\n\r\n      case \"ieConditionalEndComment\":\r\n        return \"<!--<!\";\r\n\r\n      case \"interpolation\":\r\n        return \"{{\";\r\n\r\n      case \"docType\":\r\n        return \"<!DOCTYPE\";\r\n\r\n      case \"element\":\r\n        if (node.condition) {\r\n          return \"<!--[if \".concat(node.condition, \"]><!--><\").concat(node.rawName);\r\n        }\r\n\r\n      // fall through\r\n\r\n      default:\r\n        return \"<\".concat(node.rawName);\r\n    }\r\n  }\r\n\r\n  function printOpeningTagEndMarker(node) {\r\n    assert(!node.isSelfClosing);\r\n\r\n    switch (node.type) {\r\n      case \"ieConditionalComment\":\r\n        return \"]>\";\r\n\r\n      case \"element\":\r\n        if (node.condition) {\r\n          return \"><!--<![endif]-->\";\r\n        }\r\n\r\n      // fall through\r\n\r\n      default:\r\n        return \">\";\r\n    }\r\n  }\r\n\r\n  function printClosingTagStartMarker(node, options) {\r\n    assert(!node.isSelfClosing);\r\n\r\n    if (shouldNotPrintClosingTag$1(node, options)) {\r\n      return \"\";\r\n    }\r\n\r\n    switch (node.type) {\r\n      case \"ieConditionalComment\":\r\n        return \"<!\";\r\n\r\n      case \"element\":\r\n        if (node.hasHtmComponentClosingTag) {\r\n          return \"<//\";\r\n        }\r\n\r\n      // fall through\r\n\r\n      default:\r\n        return \"</\".concat(node.rawName);\r\n    }\r\n  }\r\n\r\n  function printClosingTagEndMarker(node, options) {\r\n    if (shouldNotPrintClosingTag$1(node, options)) {\r\n      return \"\";\r\n    }\r\n\r\n    switch (node.type) {\r\n      case \"ieConditionalComment\":\r\n      case \"ieConditionalEndComment\":\r\n        return \"[endif]-->\";\r\n\r\n      case \"ieConditionalStartComment\":\r\n        return \"]><!-->\";\r\n\r\n      case \"interpolation\":\r\n        return \"}}\";\r\n\r\n      case \"element\":\r\n        if (node.isSelfClosing) {\r\n          return \"/>\";\r\n        }\r\n\r\n      // fall through\r\n\r\n      default:\r\n        return \">\";\r\n    }\r\n  }\r\n\r\n  function getTextValueParts(node, value = node.value) {\r\n    return node.parent.isWhitespaceSensitive ? node.parent.isIndentationSensitive ? replaceEndOfLineWith$1(value, literalline$2) : replaceEndOfLineWith$1(dedentString$1(value.replace(/^\\s*?\\n|\\n\\s*?$/g, \"\")), hardline$7) : // https://infra.spec.whatwg.org/#ascii-whitespace\r\n    join$6(line$6, value.split(/[\\t\\n\\f\\r ]+/)).parts;\r\n  }\r\n\r\n  function printEmbeddedAttributeValue(node, originalTextToDoc, options) {\r\n    const isKeyMatched = patterns => new RegExp(patterns.join(\"|\")).test(node.fullName);\r\n\r\n    const getValue = () => unescapeQuoteEntities$1(node.value);\r\n\r\n    let shouldHug = false;\r\n\r\n    const __onHtmlBindingRoot = (root, options) => {\r\n      const rootNode = root.type === \"NGRoot\" ? root.node.type === \"NGMicrosyntax\" && root.node.body.length === 1 && root.node.body[0].type === \"NGMicrosyntaxExpression\" ? root.node.body[0].expression : root.node : root.type === \"JsExpressionRoot\" ? root.node : root;\r\n\r\n      if (rootNode && (rootNode.type === \"ObjectExpression\" || rootNode.type === \"ArrayExpression\" || options.parser === \"__vue_expression\" && (rootNode.type === \"TemplateLiteral\" || rootNode.type === \"StringLiteral\"))) {\r\n        shouldHug = true;\r\n      }\r\n    };\r\n\r\n    const printHug = doc => group$9(doc);\r\n\r\n    const printExpand = (doc, canHaveTrailingWhitespace = true) => group$9(concat$a([indent$5(concat$a([softline$4, doc])), canHaveTrailingWhitespace ? softline$4 : \"\"]));\r\n\r\n    const printMaybeHug = doc => shouldHug ? printHug(doc) : printExpand(doc);\r\n\r\n    const textToDoc = (code, opts) => originalTextToDoc(code, Object.assign({\r\n      __onHtmlBindingRoot\r\n    }, opts));\r\n\r\n    if (node.fullName === \"srcset\" && (node.parent.fullName === \"img\" || node.parent.fullName === \"source\")) {\r\n      return printExpand(printImgSrcset$1(getValue()));\r\n    }\r\n\r\n    if (node.fullName === \"class\" && !options.parentParser) {\r\n      const value = getValue();\r\n\r\n      if (!value.includes(\"{{\")) {\r\n        return printClassNames$1(value);\r\n      }\r\n    }\r\n\r\n    if (node.fullName === \"style\" && !options.parentParser) {\r\n      const value = getValue();\r\n\r\n      if (!value.includes(\"{{\")) {\r\n        return printExpand(textToDoc(value, {\r\n          parser: \"css\",\r\n          __isHTMLStyleAttribute: true\r\n        }));\r\n      }\r\n    }\r\n\r\n    if (options.parser === \"vue\") {\r\n      if (node.fullName === \"v-for\") {\r\n        return printVueFor$1(getValue(), textToDoc);\r\n      }\r\n\r\n      if (node.fullName === \"slot-scope\") {\r\n        return printVueSlotScope$1(getValue(), textToDoc);\r\n      }\r\n      /**\r\n       *     @click=\"jsStatement\"\r\n       *     @click=\"jsExpression\"\r\n       *     v-on:click=\"jsStatement\"\r\n       *     v-on:click=\"jsExpression\"\r\n       */\r\n\r\n\r\n      const vueEventBindingPatterns = [\"^@\", \"^v-on:\"];\r\n      /**\r\n       *     :class=\"vueExpression\"\r\n       *     v-bind:id=\"vueExpression\"\r\n       */\r\n\r\n      const vueExpressionBindingPatterns = [\"^:\", \"^v-bind:\"];\r\n      /**\r\n       *     v-if=\"jsExpression\"\r\n       */\r\n\r\n      const jsExpressionBindingPatterns = [\"^v-\"];\r\n\r\n      if (isKeyMatched(vueEventBindingPatterns)) {\r\n        const value = getValue();\r\n        return printMaybeHug(isVueEventBindingExpression$1(value) ? textToDoc(value, {\r\n          parser: \"__js_expression\"\r\n        }) : stripTrailingHardline$1(textToDoc(value, {\r\n          parser: \"__vue_event_binding\"\r\n        })));\r\n      }\r\n\r\n      if (isKeyMatched(vueExpressionBindingPatterns)) {\r\n        return printMaybeHug(textToDoc(getValue(), {\r\n          parser: \"__vue_expression\"\r\n        }));\r\n      }\r\n\r\n      if (isKeyMatched(jsExpressionBindingPatterns)) {\r\n        return printMaybeHug(textToDoc(getValue(), {\r\n          parser: \"__js_expression\"\r\n        }));\r\n      }\r\n    }\r\n\r\n    if (options.parser === \"angular\") {\r\n      const ngTextToDoc = (code, opts) => // angular does not allow trailing comma\r\n      textToDoc(code, Object.assign({}, opts, {\r\n        trailingComma: \"none\"\r\n      }));\r\n      /**\r\n       *     *directive=\"angularDirective\"\r\n       */\r\n\r\n\r\n      const ngDirectiveBindingPatterns = [\"^\\\\*\"];\r\n      /**\r\n       *     (click)=\"angularStatement\"\r\n       *     on-click=\"angularStatement\"\r\n       */\r\n\r\n      const ngStatementBindingPatterns = [\"^\\\\(.+\\\\)$\", \"^on-\"];\r\n      /**\r\n       *     [target]=\"angularExpression\"\r\n       *     bind-target=\"angularExpression\"\r\n       *     [(target)]=\"angularExpression\"\r\n       *     bindon-target=\"angularExpression\"\r\n       */\r\n\r\n      const ngExpressionBindingPatterns = [\"^\\\\[.+\\\\]$\", \"^bind(on)?-\", // Unofficial rudimentary support for some of the most used directives of AngularJS 1.x\r\n      \"^ng-(if|show|hide|class|style)$\"];\r\n      /**\r\n       *     i18n=\"longDescription\"\r\n       *     i18n-attr=\"longDescription\"\r\n       */\r\n\r\n      const ngI18nPatterns = [\"^i18n(-.+)?$\"];\r\n\r\n      if (isKeyMatched(ngStatementBindingPatterns)) {\r\n        return printMaybeHug(ngTextToDoc(getValue(), {\r\n          parser: \"__ng_action\"\r\n        }));\r\n      }\r\n\r\n      if (isKeyMatched(ngExpressionBindingPatterns)) {\r\n        return printMaybeHug(ngTextToDoc(getValue(), {\r\n          parser: \"__ng_binding\"\r\n        }));\r\n      }\r\n\r\n      if (isKeyMatched(ngI18nPatterns)) {\r\n        const value = getValue().trim();\r\n        return printExpand(fill$3(getTextValueParts(node, value)), !value.includes(\"@@\"));\r\n      }\r\n\r\n      if (isKeyMatched(ngDirectiveBindingPatterns)) {\r\n        return printMaybeHug(ngTextToDoc(getValue(), {\r\n          parser: \"__ng_directive\"\r\n        }));\r\n      }\r\n\r\n      const interpolationRegex = /\\{\\{([\\s\\S]+?)\\}\\}/g;\r\n      const value = getValue();\r\n\r\n      if (interpolationRegex.test(value)) {\r\n        const parts = [];\r\n        value.split(interpolationRegex).forEach((part, index) => {\r\n          if (index % 2 === 0) {\r\n            parts.push(concat$a(replaceEndOfLineWith$1(part, literalline$2)));\r\n          } else {\r\n            try {\r\n              parts.push(group$9(concat$a([\"{{\", indent$5(concat$a([line$6, ngTextToDoc(part, {\r\n                parser: \"__ng_interpolation\",\r\n                __isInHtmlInterpolation: true // to avoid unexpected `}}`\r\n\r\n              })])), line$6, \"}}\"])));\r\n            } catch (e) {\r\n              parts.push(\"{{\", concat$a(replaceEndOfLineWith$1(part, literalline$2)), \"}}\");\r\n            }\r\n          }\r\n        });\r\n        return group$9(concat$a(parts));\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  var printerHtml = {\r\n    preprocess: preprocess_1,\r\n    print: genericPrint$2,\r\n    insertPragma: insertPragma$6,\r\n    massageAstNode: clean$3,\r\n    embed: embed$2\r\n  };\r\n\r\n  const CATEGORY_HTML = \"HTML\"; // format based on https://github.com/prettier/prettier/blob/master/src/main/core-options.js\r\n\r\n  var options$4 = {\r\n    htmlWhitespaceSensitivity: {\r\n      since: \"1.15.0\",\r\n      category: CATEGORY_HTML,\r\n      type: \"choice\",\r\n      default: \"css\",\r\n      description: \"How to handle whitespaces in HTML.\",\r\n      choices: [{\r\n        value: \"css\",\r\n        description: \"Respect the default value of CSS display property.\"\r\n      }, {\r\n        value: \"strict\",\r\n        description: \"Whitespaces are considered sensitive.\"\r\n      }, {\r\n        value: \"ignore\",\r\n        description: \"Whitespaces are considered insensitive.\"\r\n      }]\r\n    },\r\n    vueIndentScriptAndStyle: {\r\n      since: \"1.19.0\",\r\n      category: CATEGORY_HTML,\r\n      type: \"boolean\",\r\n      default: false,\r\n      description: \"Indent script and style tags in Vue files.\"\r\n    }\r\n  };\r\n\r\n  var name$7 = \"HTML\";\r\n  var type$6 = \"markup\";\r\n  var tmScope$6 = \"text.html.basic\";\r\n  var aceMode$6 = \"html\";\r\n  var codemirrorMode$3 = \"htmlmixed\";\r\n  var codemirrorMimeType$3 = \"text/html\";\r\n  var color$1 = \"#e34c26\";\r\n  var aliases$1 = [\r\n  \t\"xhtml\"\r\n  ];\r\n  var extensions$6 = [\r\n  \t\".html\",\r\n  \t\".htm\",\r\n  \t\".html.hl\",\r\n  \t\".inc\",\r\n  \t\".st\",\r\n  \t\".xht\",\r\n  \t\".xhtml\"\r\n  ];\r\n  var languageId$6 = 146;\r\n  var HTML = {\r\n  \tname: name$7,\r\n  \ttype: type$6,\r\n  \ttmScope: tmScope$6,\r\n  \taceMode: aceMode$6,\r\n  \tcodemirrorMode: codemirrorMode$3,\r\n  \tcodemirrorMimeType: codemirrorMimeType$3,\r\n  \tcolor: color$1,\r\n  \taliases: aliases$1,\r\n  \textensions: extensions$6,\r\n  \tlanguageId: languageId$6\r\n  };\r\n\r\n  var HTML$1 = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    name: name$7,\r\n    type: type$6,\r\n    tmScope: tmScope$6,\r\n    aceMode: aceMode$6,\r\n    codemirrorMode: codemirrorMode$3,\r\n    codemirrorMimeType: codemirrorMimeType$3,\r\n    color: color$1,\r\n    aliases: aliases$1,\r\n    extensions: extensions$6,\r\n    languageId: languageId$6,\r\n    'default': HTML\r\n  });\r\n\r\n  var name$8 = \"Vue\";\r\n  var type$7 = \"markup\";\r\n  var color$2 = \"#2c3e50\";\r\n  var extensions$7 = [\r\n  \t\".vue\"\r\n  ];\r\n  var tmScope$7 = \"text.html.vue\";\r\n  var aceMode$7 = \"html\";\r\n  var languageId$7 = 391;\r\n  var Vue = {\r\n  \tname: name$8,\r\n  \ttype: type$7,\r\n  \tcolor: color$2,\r\n  \textensions: extensions$7,\r\n  \ttmScope: tmScope$7,\r\n  \taceMode: aceMode$7,\r\n  \tlanguageId: languageId$7\r\n  };\r\n\r\n  var Vue$1 = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    name: name$8,\r\n    type: type$7,\r\n    color: color$2,\r\n    extensions: extensions$7,\r\n    tmScope: tmScope$7,\r\n    aceMode: aceMode$7,\r\n    languageId: languageId$7,\r\n    'default': Vue\r\n  });\r\n\r\n  var require$$0$5 = getCjsExportFromNamespace(HTML$1);\r\n\r\n  var require$$1$1 = getCjsExportFromNamespace(Vue$1);\r\n\r\n  const languages$3 = [createLanguage(require$$0$5, () => ({\r\n    name: \"Angular\",\r\n    since: \"1.15.0\",\r\n    parsers: [\"angular\"],\r\n    vscodeLanguageIds: [\"html\"],\r\n    extensions: [\".component.html\"],\r\n    filenames: []\r\n  })), createLanguage(require$$0$5, data => ({\r\n    since: \"1.15.0\",\r\n    parsers: [\"html\"],\r\n    vscodeLanguageIds: [\"html\"],\r\n    extensions: data.extensions.concat([\".mjml\" // MJML is considered XML in Linguist but it should be formatted as HTML\r\n    ])\r\n  })), createLanguage(require$$0$5, () => ({\r\n    name: \"Lightning Web Components\",\r\n    since: \"1.17.0\",\r\n    parsers: [\"lwc\"],\r\n    vscodeLanguageIds: [\"html\"],\r\n    extensions: [],\r\n    filenames: []\r\n  })), createLanguage(require$$1$1, () => ({\r\n    since: \"1.10.0\",\r\n    parsers: [\"vue\"],\r\n    vscodeLanguageIds: [\"vue\"]\r\n  }))];\r\n  const printers$3 = {\r\n    html: printerHtml\r\n  };\r\n  var languageHtml = {\r\n    languages: languages$3,\r\n    printers: printers$3,\r\n    options: options$4\r\n  };\r\n\r\n  const {\r\n    addLeadingComment: addLeadingComment$3,\r\n    addTrailingComment: addTrailingComment$3,\r\n    addDanglingComment: addDanglingComment$3,\r\n    getNextNonSpaceNonCommentCharacterIndex: getNextNonSpaceNonCommentCharacterIndex$2\r\n  } = utilShared;\r\n\r\n  function handleOwnLineComment(comment, text, options, ast, isLastComment) {\r\n    const {\r\n      precedingNode,\r\n      enclosingNode,\r\n      followingNode\r\n    } = comment;\r\n    return handleLastFunctionArgComments(text, precedingNode, enclosingNode, followingNode, comment, options) || handleMemberExpressionComments(enclosingNode, followingNode, comment) || handleIfStatementComments(text, precedingNode, enclosingNode, followingNode, comment, options) || handleWhileComments(text, precedingNode, enclosingNode, followingNode, comment, options) || handleTryStatementComments(enclosingNode, precedingNode, followingNode, comment) || handleClassComments(enclosingNode, precedingNode, followingNode, comment) || handleImportSpecifierComments(enclosingNode, comment) || handleForComments(enclosingNode, precedingNode, comment) || handleUnionTypeComments(precedingNode, enclosingNode, followingNode, comment) || handleOnlyComments(enclosingNode, ast, comment, isLastComment) || handleImportDeclarationComments(text, enclosingNode, precedingNode, comment, options) || handleAssignmentPatternComments(enclosingNode, comment) || handleMethodNameComments(text, enclosingNode, precedingNode, comment, options) || handleLabeledStatementComments(enclosingNode, comment);\r\n  }\r\n\r\n  function handleEndOfLineComment(comment, text, options, ast, isLastComment) {\r\n    const {\r\n      precedingNode,\r\n      enclosingNode,\r\n      followingNode\r\n    } = comment;\r\n    return handleClosureTypeCastComments(followingNode, comment) || handleLastFunctionArgComments(text, precedingNode, enclosingNode, followingNode, comment, options) || handleConditionalExpressionComments(enclosingNode, precedingNode, followingNode, comment, text, options) || handleImportSpecifierComments(enclosingNode, comment) || handleIfStatementComments(text, precedingNode, enclosingNode, followingNode, comment, options) || handleWhileComments(text, precedingNode, enclosingNode, followingNode, comment, options) || handleTryStatementComments(enclosingNode, precedingNode, followingNode, comment) || handleClassComments(enclosingNode, precedingNode, followingNode, comment) || handleLabeledStatementComments(enclosingNode, comment) || handleCallExpressionComments(precedingNode, enclosingNode, comment) || handlePropertyComments(enclosingNode, comment) || handleOnlyComments(enclosingNode, ast, comment, isLastComment) || handleTypeAliasComments(enclosingNode, followingNode, comment) || handleVariableDeclaratorComments(enclosingNode, followingNode, comment);\r\n  }\r\n\r\n  function handleRemainingComment(comment, text, options, ast, isLastComment) {\r\n    const {\r\n      precedingNode,\r\n      enclosingNode,\r\n      followingNode\r\n    } = comment;\r\n\r\n    if (handleIfStatementComments(text, precedingNode, enclosingNode, followingNode, comment, options) || handleWhileComments(text, precedingNode, enclosingNode, followingNode, comment, options) || handleObjectPropertyAssignment(enclosingNode, precedingNode, comment) || handleCommentInEmptyParens(text, enclosingNode, comment, options) || handleMethodNameComments(text, enclosingNode, precedingNode, comment, options) || handleOnlyComments(enclosingNode, ast, comment, isLastComment) || handleCommentAfterArrowParams(text, enclosingNode, comment, options) || handleFunctionNameComments(text, enclosingNode, precedingNode, comment, options) || handleTSMappedTypeComments(text, enclosingNode, precedingNode, followingNode, comment) || handleBreakAndContinueStatementComments(enclosingNode, comment) || handleTSFunctionTrailingComments(text, enclosingNode, followingNode, comment, options)) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function addBlockStatementFirstComment(node, comment) {\r\n    const body = node.body.filter(n => n.type !== \"EmptyStatement\");\r\n\r\n    if (body.length === 0) {\r\n      addDanglingComment$3(node, comment);\r\n    } else {\r\n      addLeadingComment$3(body[0], comment);\r\n    }\r\n  }\r\n\r\n  function addBlockOrNotComment(node, comment) {\r\n    if (node.type === \"BlockStatement\") {\r\n      addBlockStatementFirstComment(node, comment);\r\n    } else {\r\n      addLeadingComment$3(node, comment);\r\n    }\r\n  }\r\n\r\n  function handleClosureTypeCastComments(followingNode, comment) {\r\n    if (followingNode && isTypeCastComment(comment)) {\r\n      addLeadingComment$3(followingNode, comment);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  } // There are often comments before the else clause of if statements like\r\n  //\r\n  //   if (1) { ... }\r\n  //   // comment\r\n  //   else { ... }\r\n  //\r\n  // They are being attached as leading comments of the BlockExpression which\r\n  // is not well printed. What we want is to instead move the comment inside\r\n  // of the block and make it leadingComment of the first element of the block\r\n  // or dangling comment of the block if there is nothing inside\r\n  //\r\n  //   if (1) { ... }\r\n  //   else {\r\n  //     // comment\r\n  //     ...\r\n  //   }\r\n\r\n\r\n  function handleIfStatementComments(text, precedingNode, enclosingNode, followingNode, comment, options) {\r\n    if (!enclosingNode || enclosingNode.type !== \"IfStatement\" || !followingNode) {\r\n      return false;\r\n    } // We unfortunately have no way using the AST or location of nodes to know\r\n    // if the comment is positioned before the condition parenthesis:\r\n    //   if (a /* comment */) {}\r\n    // The only workaround I found is to look at the next character to see if\r\n    // it is a ).\r\n\r\n\r\n    const nextCharacter = util$1.getNextNonSpaceNonCommentCharacter(text, comment, options.locEnd);\r\n\r\n    if (nextCharacter === \")\") {\r\n      addTrailingComment$3(precedingNode, comment);\r\n      return true;\r\n    } // Comments before `else`:\r\n    // - treat as trailing comments of the consequent, if it's a BlockStatement\r\n    // - treat as a dangling comment otherwise\r\n\r\n\r\n    if (precedingNode === enclosingNode.consequent && followingNode === enclosingNode.alternate) {\r\n      if (precedingNode.type === \"BlockStatement\") {\r\n        addTrailingComment$3(precedingNode, comment);\r\n      } else {\r\n        addDanglingComment$3(enclosingNode, comment);\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    if (followingNode.type === \"BlockStatement\") {\r\n      addBlockStatementFirstComment(followingNode, comment);\r\n      return true;\r\n    }\r\n\r\n    if (followingNode.type === \"IfStatement\") {\r\n      addBlockOrNotComment(followingNode.consequent, comment);\r\n      return true;\r\n    } // For comments positioned after the condition parenthesis in an if statement\r\n    // before the consequent without brackets on, such as\r\n    // if (a) /* comment */ true,\r\n    // we look at the next character to see if the following node\r\n    // is the consequent for the if statement\r\n\r\n\r\n    if (enclosingNode.consequent === followingNode) {\r\n      addLeadingComment$3(followingNode, comment);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleWhileComments(text, precedingNode, enclosingNode, followingNode, comment, options) {\r\n    if (!enclosingNode || enclosingNode.type !== \"WhileStatement\" || !followingNode) {\r\n      return false;\r\n    } // We unfortunately have no way using the AST or location of nodes to know\r\n    // if the comment is positioned before the condition parenthesis:\r\n    //   while (a /* comment */) {}\r\n    // The only workaround I found is to look at the next character to see if\r\n    // it is a ).\r\n\r\n\r\n    const nextCharacter = util$1.getNextNonSpaceNonCommentCharacter(text, comment, options.locEnd);\r\n\r\n    if (nextCharacter === \")\") {\r\n      addTrailingComment$3(precedingNode, comment);\r\n      return true;\r\n    }\r\n\r\n    if (followingNode.type === \"BlockStatement\") {\r\n      addBlockStatementFirstComment(followingNode, comment);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  } // Same as IfStatement but for TryStatement\r\n\r\n\r\n  function handleTryStatementComments(enclosingNode, precedingNode, followingNode, comment) {\r\n    if (!enclosingNode || enclosingNode.type !== \"TryStatement\" && enclosingNode.type !== \"CatchClause\" || !followingNode) {\r\n      return false;\r\n    }\r\n\r\n    if (enclosingNode.type === \"CatchClause\" && precedingNode) {\r\n      addTrailingComment$3(precedingNode, comment);\r\n      return true;\r\n    }\r\n\r\n    if (followingNode.type === \"BlockStatement\") {\r\n      addBlockStatementFirstComment(followingNode, comment);\r\n      return true;\r\n    }\r\n\r\n    if (followingNode.type === \"TryStatement\") {\r\n      addBlockOrNotComment(followingNode.finalizer, comment);\r\n      return true;\r\n    }\r\n\r\n    if (followingNode.type === \"CatchClause\") {\r\n      addBlockOrNotComment(followingNode.body, comment);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleMemberExpressionComments(enclosingNode, followingNode, comment) {\r\n    if (enclosingNode && (enclosingNode.type === \"MemberExpression\" || enclosingNode.type === \"OptionalMemberExpression\") && followingNode && followingNode.type === \"Identifier\") {\r\n      addLeadingComment$3(enclosingNode, comment);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleConditionalExpressionComments(enclosingNode, precedingNode, followingNode, comment, text, options) {\r\n    const isSameLineAsPrecedingNode = precedingNode && !util$1.hasNewlineInRange(text, options.locEnd(precedingNode), options.locStart(comment));\r\n\r\n    if ((!precedingNode || !isSameLineAsPrecedingNode) && enclosingNode && enclosingNode.type === \"ConditionalExpression\" && followingNode) {\r\n      addLeadingComment$3(followingNode, comment);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleObjectPropertyAssignment(enclosingNode, precedingNode, comment) {\r\n    if (enclosingNode && (enclosingNode.type === \"ObjectProperty\" || enclosingNode.type === \"Property\") && enclosingNode.shorthand && enclosingNode.key === precedingNode && enclosingNode.value.type === \"AssignmentPattern\") {\r\n      addTrailingComment$3(enclosingNode.value.left, comment);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleClassComments(enclosingNode, precedingNode, followingNode, comment) {\r\n    if (enclosingNode && (enclosingNode.type === \"ClassDeclaration\" || enclosingNode.type === \"ClassExpression\") && enclosingNode.decorators && enclosingNode.decorators.length > 0 && !(followingNode && followingNode.type === \"Decorator\")) {\r\n      if (!enclosingNode.decorators || enclosingNode.decorators.length === 0) {\r\n        addLeadingComment$3(enclosingNode, comment);\r\n      } else {\r\n        addTrailingComment$3(enclosingNode.decorators[enclosingNode.decorators.length - 1], comment);\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleMethodNameComments(text, enclosingNode, precedingNode, comment, options) {\r\n    // This is only needed for estree parsers (flow, typescript) to attach\r\n    // after a method name:\r\n    // obj = { fn /*comment*/() {} };\r\n    if (enclosingNode && precedingNode && ( // \"MethodDefinition\" is handled in getCommentChildNodes\r\n    enclosingNode.type === \"Property\" || enclosingNode.type === \"TSDeclareMethod\" || enclosingNode.type === \"TSAbstractMethodDefinition\") && precedingNode.type === \"Identifier\" && enclosingNode.key === precedingNode && // special Property case: { key: /*comment*/(value) };\r\n    // comment should be attached to value instead of key\r\n    util$1.getNextNonSpaceNonCommentCharacter(text, precedingNode, options.locEnd) !== \":\") {\r\n      addTrailingComment$3(precedingNode, comment);\r\n      return true;\r\n    } // Print comments between decorators and class methods as a trailing comment\r\n    // on the decorator node instead of the method node\r\n\r\n\r\n    if (precedingNode && enclosingNode && precedingNode.type === \"Decorator\" && (enclosingNode.type === \"ClassMethod\" || enclosingNode.type === \"ClassProperty\" || enclosingNode.type === \"TSAbstractClassProperty\" || enclosingNode.type === \"TSAbstractMethodDefinition\" || enclosingNode.type === \"TSDeclareMethod\" || enclosingNode.type === \"MethodDefinition\")) {\r\n      addTrailingComment$3(precedingNode, comment);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleFunctionNameComments(text, enclosingNode, precedingNode, comment, options) {\r\n    if (util$1.getNextNonSpaceNonCommentCharacter(text, comment, options.locEnd) !== \"(\") {\r\n      return false;\r\n    }\r\n\r\n    if (precedingNode && enclosingNode && (enclosingNode.type === \"FunctionDeclaration\" || enclosingNode.type === \"FunctionExpression\" || enclosingNode.type === \"ClassMethod\" || enclosingNode.type === \"MethodDefinition\" || enclosingNode.type === \"ObjectMethod\")) {\r\n      addTrailingComment$3(precedingNode, comment);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleCommentAfterArrowParams(text, enclosingNode, comment, options) {\r\n    if (!(enclosingNode && enclosingNode.type === \"ArrowFunctionExpression\")) {\r\n      return false;\r\n    }\r\n\r\n    const index = getNextNonSpaceNonCommentCharacterIndex$2(text, comment, options.locEnd);\r\n\r\n    if (text.slice(index, index + 2) === \"=>\") {\r\n      addDanglingComment$3(enclosingNode, comment);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleCommentInEmptyParens(text, enclosingNode, comment, options) {\r\n    if (util$1.getNextNonSpaceNonCommentCharacter(text, comment, options.locEnd) !== \")\") {\r\n      return false;\r\n    } // Only add dangling comments to fix the case when no params are present,\r\n    // i.e. a function without any argument.\r\n\r\n\r\n    if (enclosingNode && (isRealFunctionLikeNode(enclosingNode) && // `params` vs `parameters` - see https://github.com/babel/babel/issues/9231\r\n    (enclosingNode.params || enclosingNode.parameters).length === 0 || (enclosingNode.type === \"CallExpression\" || enclosingNode.type === \"OptionalCallExpression\" || enclosingNode.type === \"NewExpression\") && enclosingNode.arguments.length === 0)) {\r\n      addDanglingComment$3(enclosingNode, comment);\r\n      return true;\r\n    }\r\n\r\n    if (enclosingNode && enclosingNode.type === \"MethodDefinition\" && enclosingNode.value.params.length === 0) {\r\n      addDanglingComment$3(enclosingNode.value, comment);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleLastFunctionArgComments(text, precedingNode, enclosingNode, followingNode, comment, options) {\r\n    // Flow function type definitions\r\n    if (precedingNode && precedingNode.type === \"FunctionTypeParam\" && enclosingNode && enclosingNode.type === \"FunctionTypeAnnotation\" && followingNode && followingNode.type !== \"FunctionTypeParam\") {\r\n      addTrailingComment$3(precedingNode, comment);\r\n      return true;\r\n    } // Real functions and TypeScript function type definitions\r\n\r\n\r\n    if (precedingNode && (precedingNode.type === \"Identifier\" || precedingNode.type === \"AssignmentPattern\") && enclosingNode && isRealFunctionLikeNode(enclosingNode) && util$1.getNextNonSpaceNonCommentCharacter(text, comment, options.locEnd) === \")\") {\r\n      addTrailingComment$3(precedingNode, comment);\r\n      return true;\r\n    }\r\n\r\n    if (enclosingNode && enclosingNode.type === \"FunctionDeclaration\" && followingNode && followingNode.type === \"BlockStatement\") {\r\n      const functionParamRightParenIndex = (() => {\r\n        if ((enclosingNode.params || enclosingNode.parameters).length !== 0) {\r\n          return util$1.getNextNonSpaceNonCommentCharacterIndexWithStartIndex(text, options.locEnd(util$1.getLast(enclosingNode.params || enclosingNode.parameters)));\r\n        }\r\n\r\n        const functionParamLeftParenIndex = util$1.getNextNonSpaceNonCommentCharacterIndexWithStartIndex(text, options.locEnd(enclosingNode.id));\r\n        return util$1.getNextNonSpaceNonCommentCharacterIndexWithStartIndex(text, functionParamLeftParenIndex + 1);\r\n      })();\r\n\r\n      if (options.locStart(comment) > functionParamRightParenIndex) {\r\n        addBlockStatementFirstComment(followingNode, comment);\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleImportSpecifierComments(enclosingNode, comment) {\r\n    if (enclosingNode && enclosingNode.type === \"ImportSpecifier\") {\r\n      addLeadingComment$3(enclosingNode, comment);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleLabeledStatementComments(enclosingNode, comment) {\r\n    if (enclosingNode && enclosingNode.type === \"LabeledStatement\") {\r\n      addLeadingComment$3(enclosingNode, comment);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleBreakAndContinueStatementComments(enclosingNode, comment) {\r\n    if (enclosingNode && (enclosingNode.type === \"ContinueStatement\" || enclosingNode.type === \"BreakStatement\") && !enclosingNode.label) {\r\n      addTrailingComment$3(enclosingNode, comment);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleCallExpressionComments(precedingNode, enclosingNode, comment) {\r\n    if (enclosingNode && (enclosingNode.type === \"CallExpression\" || enclosingNode.type === \"OptionalCallExpression\") && precedingNode && enclosingNode.callee === precedingNode && enclosingNode.arguments.length > 0) {\r\n      addLeadingComment$3(enclosingNode.arguments[0], comment);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleUnionTypeComments(precedingNode, enclosingNode, followingNode, comment) {\r\n    if (enclosingNode && (enclosingNode.type === \"UnionTypeAnnotation\" || enclosingNode.type === \"TSUnionType\")) {\r\n      if (util$1.isNodeIgnoreComment(comment)) {\r\n        followingNode.prettierIgnore = true;\r\n        comment.unignore = true;\r\n      }\r\n\r\n      if (precedingNode) {\r\n        addTrailingComment$3(precedingNode, comment);\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    }\r\n\r\n    if (followingNode && (followingNode.type === \"UnionTypeAnnotation\" || followingNode.type === \"TSUnionType\") && util$1.isNodeIgnoreComment(comment)) {\r\n      followingNode.types[0].prettierIgnore = true;\r\n      comment.unignore = true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handlePropertyComments(enclosingNode, comment) {\r\n    if (enclosingNode && (enclosingNode.type === \"Property\" || enclosingNode.type === \"ObjectProperty\")) {\r\n      addLeadingComment$3(enclosingNode, comment);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleOnlyComments(enclosingNode, ast, comment, isLastComment) {\r\n    // With Flow the enclosingNode is undefined so use the AST instead.\r\n    if (ast && ast.body && ast.body.length === 0) {\r\n      if (isLastComment) {\r\n        addDanglingComment$3(ast, comment);\r\n      } else {\r\n        addLeadingComment$3(ast, comment);\r\n      }\r\n\r\n      return true;\r\n    } else if (enclosingNode && enclosingNode.type === \"Program\" && enclosingNode.body.length === 0 && enclosingNode.directives && enclosingNode.directives.length === 0) {\r\n      if (isLastComment) {\r\n        addDanglingComment$3(enclosingNode, comment);\r\n      } else {\r\n        addLeadingComment$3(enclosingNode, comment);\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleForComments(enclosingNode, precedingNode, comment) {\r\n    if (enclosingNode && (enclosingNode.type === \"ForInStatement\" || enclosingNode.type === \"ForOfStatement\")) {\r\n      addLeadingComment$3(enclosingNode, comment);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleImportDeclarationComments(text, enclosingNode, precedingNode, comment, options) {\r\n    if (precedingNode && precedingNode.type === \"ImportSpecifier\" && enclosingNode && enclosingNode.type === \"ImportDeclaration\" && util$1.hasNewline(text, options.locEnd(comment))) {\r\n      addTrailingComment$3(precedingNode, comment);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleAssignmentPatternComments(enclosingNode, comment) {\r\n    if (enclosingNode && enclosingNode.type === \"AssignmentPattern\") {\r\n      addLeadingComment$3(enclosingNode, comment);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleTypeAliasComments(enclosingNode, followingNode, comment) {\r\n    if (enclosingNode && enclosingNode.type === \"TypeAlias\") {\r\n      addLeadingComment$3(enclosingNode, comment);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleVariableDeclaratorComments(enclosingNode, followingNode, comment) {\r\n    if (enclosingNode && (enclosingNode.type === \"VariableDeclarator\" || enclosingNode.type === \"AssignmentExpression\") && followingNode && (followingNode.type === \"ObjectExpression\" || followingNode.type === \"ArrayExpression\" || followingNode.type === \"TemplateLiteral\" || followingNode.type === \"TaggedTemplateExpression\" || isBlockComment(comment))) {\r\n      addLeadingComment$3(followingNode, comment);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleTSFunctionTrailingComments(text, enclosingNode, followingNode, comment, options) {\r\n    if (!followingNode && enclosingNode && (enclosingNode.type === \"TSMethodSignature\" || enclosingNode.type === \"TSDeclareFunction\" || enclosingNode.type === \"TSAbstractMethodDefinition\") && util$1.getNextNonSpaceNonCommentCharacter(text, comment, options.locEnd) === \";\") {\r\n      addTrailingComment$3(enclosingNode, comment);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handleTSMappedTypeComments(text, enclosingNode, precedingNode, followingNode, comment) {\r\n    if (!enclosingNode || enclosingNode.type !== \"TSMappedType\") {\r\n      return false;\r\n    }\r\n\r\n    if (followingNode && followingNode.type === \"TSTypeParameter\" && followingNode.name) {\r\n      addLeadingComment$3(followingNode.name, comment);\r\n      return true;\r\n    }\r\n\r\n    if (precedingNode && precedingNode.type === \"TSTypeParameter\" && precedingNode.constraint) {\r\n      addTrailingComment$3(precedingNode.constraint, comment);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function isBlockComment(comment) {\r\n    return comment.type === \"Block\" || comment.type === \"CommentBlock\";\r\n  }\r\n\r\n  function hasLeadingComment(node, fn = () => true) {\r\n    if (node.leadingComments) {\r\n      return node.leadingComments.some(fn);\r\n    }\r\n\r\n    if (node.comments) {\r\n      return node.comments.some(comment => comment.leading && fn(comment));\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function isRealFunctionLikeNode(node) {\r\n    return node.type === \"ArrowFunctionExpression\" || node.type === \"FunctionExpression\" || node.type === \"FunctionDeclaration\" || node.type === \"ObjectMethod\" || node.type === \"ClassMethod\" || node.type === \"TSDeclareFunction\" || node.type === \"TSCallSignatureDeclaration\" || node.type === \"TSConstructSignatureDeclaration\" || node.type === \"TSConstructSignatureDeclaration\" || node.type === \"TSMethodSignature\" || node.type === \"TSConstructorType\" || node.type === \"TSFunctionType\" || node.type === \"TSDeclareMethod\";\r\n  }\r\n\r\n  function getGapRegex(enclosingNode) {\r\n    if (enclosingNode && enclosingNode.type !== \"BinaryExpression\" && enclosingNode.type !== \"LogicalExpression\") {\r\n      // Support degenerate single-element unions and intersections.\r\n      // E.g.: `type A = /* 1 */ & B`\r\n      return /^[\\s(&|]*$/;\r\n    }\r\n  }\r\n\r\n  function getCommentChildNodes(node, options) {\r\n    // Prevent attaching comments to FunctionExpression in this case:\r\n    //     class Foo {\r\n    //       bar() // comment\r\n    //       {\r\n    //         baz();\r\n    //       }\r\n    //     }\r\n    if ((options.parser === \"typescript\" || options.parser === \"flow\") && node.type === \"MethodDefinition\" && node.value && node.value.type === \"FunctionExpression\" && node.value.params.length === 0 && !node.value.returnType && (!node.value.typeParameters || node.value.typeParameters.length === 0) && node.value.body) {\r\n      return [...(node.decorators || []), node.key, node.value.body];\r\n    }\r\n  }\r\n\r\n  function isTypeCastComment(comment) {\r\n    return isBlockComment(comment) && comment.value[0] === \"*\" && // TypeScript expects the type to be enclosed in curly brackets, however\r\n    // Closure Compiler accepts types in parens and even without any delimiters at all.\r\n    // That's why we just search for \"@type\".\r\n    /@type\\b/.test(comment.value);\r\n  }\r\n\r\n  var comments$1 = {\r\n    handleOwnLineComment,\r\n    handleEndOfLineComment,\r\n    handleRemainingComment,\r\n    hasLeadingComment,\r\n    isBlockComment,\r\n    isTypeCastComment,\r\n    getGapRegex,\r\n    getCommentChildNodes\r\n  };\r\n\r\n  const {\r\n    isBlockComment: isBlockComment$1,\r\n    hasLeadingComment: hasLeadingComment$1\r\n  } = comments$1;\r\n  const {\r\n    builders: {\r\n      indent: indent$6,\r\n      join: join$7,\r\n      line: line$7,\r\n      hardline: hardline$8,\r\n      softline: softline$5,\r\n      literalline: literalline$3,\r\n      concat: concat$b,\r\n      group: group$a,\r\n      dedentToRoot: dedentToRoot$2\r\n    },\r\n    utils: {\r\n      mapDoc: mapDoc$3,\r\n      stripTrailingHardline: stripTrailingHardline$2\r\n    }\r\n  } = document;\r\n\r\n  function embed$3(path, print, textToDoc, options) {\r\n    const node = path.getValue();\r\n    const parent = path.getParentNode();\r\n    const parentParent = path.getParentNode(1);\r\n\r\n    switch (node.type) {\r\n      case \"TemplateLiteral\":\r\n        {\r\n          const isCss = [isStyledJsx, isStyledComponents, isCssProp, isAngularComponentStyles].some(isIt => isIt(path));\r\n\r\n          if (isCss) {\r\n            // Get full template literal with expressions replaced by placeholders\r\n            const rawQuasis = node.quasis.map(q => q.value.raw);\r\n            let placeholderID = 0;\r\n            const text = rawQuasis.reduce((prevVal, currVal, idx) => {\r\n              return idx === 0 ? currVal : prevVal + \"@prettier-placeholder-\" + placeholderID++ + \"-id\" + currVal;\r\n            }, \"\");\r\n            const doc = textToDoc(text, {\r\n              parser: \"scss\"\r\n            });\r\n            return transformCssDoc(doc, path, print);\r\n          }\r\n          /*\r\n           * react-relay and graphql-tag\r\n           * graphql`...`\r\n           * graphql.experimental`...`\r\n           * gql`...`\r\n           *\r\n           * This intentionally excludes Relay Classic tags, as Prettier does not\r\n           * support Relay Classic formatting.\r\n           */\r\n\r\n\r\n          if (isGraphQL(path)) {\r\n            const expressionDocs = node.expressions ? path.map(print, \"expressions\") : [];\r\n            const numQuasis = node.quasis.length;\r\n\r\n            if (numQuasis === 1 && node.quasis[0].value.raw.trim() === \"\") {\r\n              return \"``\";\r\n            }\r\n\r\n            const parts = [];\r\n\r\n            for (let i = 0; i < numQuasis; i++) {\r\n              const templateElement = node.quasis[i];\r\n              const isFirst = i === 0;\r\n              const isLast = i === numQuasis - 1;\r\n              const text = templateElement.value.cooked; // Bail out if any of the quasis have an invalid escape sequence\r\n              // (which would make the `cooked` value be `null` or `undefined`)\r\n\r\n              if (typeof text !== \"string\") {\r\n                return null;\r\n              }\r\n\r\n              const lines = text.split(\"\\n\");\r\n              const numLines = lines.length;\r\n              const expressionDoc = expressionDocs[i];\r\n              const startsWithBlankLine = numLines > 2 && lines[0].trim() === \"\" && lines[1].trim() === \"\";\r\n              const endsWithBlankLine = numLines > 2 && lines[numLines - 1].trim() === \"\" && lines[numLines - 2].trim() === \"\";\r\n              const commentsAndWhitespaceOnly = lines.every(line => /^\\s*(?:#[^\\r\\n]*)?$/.test(line)); // Bail out if an interpolation occurs within a comment.\r\n\r\n              if (!isLast && /#[^\\r\\n]*$/.test(lines[numLines - 1])) {\r\n                return null;\r\n              }\r\n\r\n              let doc = null;\r\n\r\n              if (commentsAndWhitespaceOnly) {\r\n                doc = printGraphqlComments(lines);\r\n              } else {\r\n                doc = stripTrailingHardline$2(textToDoc(text, {\r\n                  parser: \"graphql\"\r\n                }));\r\n              }\r\n\r\n              if (doc) {\r\n                doc = escapeTemplateCharacters(doc, false);\r\n\r\n                if (!isFirst && startsWithBlankLine) {\r\n                  parts.push(\"\");\r\n                }\r\n\r\n                parts.push(doc);\r\n\r\n                if (!isLast && endsWithBlankLine) {\r\n                  parts.push(\"\");\r\n                }\r\n              } else if (!isFirst && !isLast && startsWithBlankLine) {\r\n                parts.push(\"\");\r\n              }\r\n\r\n              if (expressionDoc) {\r\n                parts.push(concat$b([\"${\", expressionDoc, \"}\"]));\r\n              }\r\n            }\r\n\r\n            return concat$b([\"`\", indent$6(concat$b([hardline$8, join$7(hardline$8, parts)])), hardline$8, \"`\"]);\r\n          }\r\n\r\n          const htmlParser = isHtml(path) ? \"html\" : isAngularComponentTemplate(path) ? \"angular\" : undefined;\r\n\r\n          if (htmlParser) {\r\n            return printHtmlTemplateLiteral(path, print, textToDoc, htmlParser, options);\r\n          }\r\n\r\n          break;\r\n        }\r\n\r\n      case \"TemplateElement\":\r\n        {\r\n          /**\r\n           * md`...`\r\n           * markdown`...`\r\n           */\r\n          if (parentParent && parentParent.type === \"TaggedTemplateExpression\" && parent.quasis.length === 1 && parentParent.tag.type === \"Identifier\" && (parentParent.tag.name === \"md\" || parentParent.tag.name === \"markdown\")) {\r\n            const text = parent.quasis[0].value.raw.replace(/((?:\\\\\\\\)*)\\\\`/g, (_, backslashes) => \"\\\\\".repeat(backslashes.length / 2) + \"`\");\r\n            const indentation = getIndentation(text);\r\n            const hasIndent = indentation !== \"\";\r\n            return concat$b([hasIndent ? indent$6(concat$b([softline$5, printMarkdown(text.replace(new RegExp(\"^\".concat(indentation), \"gm\"), \"\"))])) : concat$b([literalline$3, dedentToRoot$2(printMarkdown(text))]), softline$5]);\r\n          }\r\n\r\n          break;\r\n        }\r\n    }\r\n\r\n    function printMarkdown(text) {\r\n      const doc = textToDoc(text, {\r\n        parser: \"markdown\",\r\n        __inJsTemplate: true\r\n      });\r\n      return stripTrailingHardline$2(escapeTemplateCharacters(doc, true));\r\n    }\r\n  }\r\n\r\n  function getIndentation(str) {\r\n    const firstMatchedIndent = str.match(/^([^\\S\\n]*)\\S/m);\r\n    return firstMatchedIndent === null ? \"\" : firstMatchedIndent[1];\r\n  }\r\n\r\n  function uncook(cookedValue) {\r\n    return cookedValue.replace(/([\\\\`]|\\$\\{)/g, \"\\\\$1\");\r\n  }\r\n\r\n  function escapeTemplateCharacters(doc, raw) {\r\n    return mapDoc$3(doc, currentDoc => {\r\n      if (!currentDoc.parts) {\r\n        return currentDoc;\r\n      }\r\n\r\n      const parts = [];\r\n      currentDoc.parts.forEach(part => {\r\n        if (typeof part === \"string\") {\r\n          parts.push(raw ? part.replace(/(\\\\*)`/g, \"$1$1\\\\`\") : uncook(part));\r\n        } else {\r\n          parts.push(part);\r\n        }\r\n      });\r\n      return Object.assign({}, currentDoc, {\r\n        parts\r\n      });\r\n    });\r\n  }\r\n\r\n  function transformCssDoc(quasisDoc, path, print) {\r\n    const parentNode = path.getValue();\r\n    const isEmpty = parentNode.quasis.length === 1 && !parentNode.quasis[0].value.raw.trim();\r\n\r\n    if (isEmpty) {\r\n      return \"``\";\r\n    }\r\n\r\n    const expressionDocs = parentNode.expressions ? path.map(print, \"expressions\") : [];\r\n    const newDoc = replacePlaceholders(quasisDoc, expressionDocs);\r\n    /* istanbul ignore if */\r\n\r\n    if (!newDoc) {\r\n      throw new Error(\"Couldn't insert all the expressions\");\r\n    }\r\n\r\n    return concat$b([\"`\", indent$6(concat$b([hardline$8, stripTrailingHardline$2(newDoc)])), softline$5, \"`\"]);\r\n  } // Search all the placeholders in the quasisDoc tree\r\n  // and replace them with the expression docs one by one\r\n  // returns a new doc with all the placeholders replaced,\r\n  // or null if it couldn't replace any expression\r\n\r\n\r\n  function replacePlaceholders(quasisDoc, expressionDocs) {\r\n    if (!expressionDocs || !expressionDocs.length) {\r\n      return quasisDoc;\r\n    }\r\n\r\n    const expressions = expressionDocs.slice();\r\n    let replaceCounter = 0;\r\n    const newDoc = mapDoc$3(quasisDoc, doc => {\r\n      if (!doc || !doc.parts || !doc.parts.length) {\r\n        return doc;\r\n      }\r\n\r\n      let {\r\n        parts\r\n      } = doc;\r\n      const atIndex = parts.indexOf(\"@\");\r\n      const placeholderIndex = atIndex + 1;\r\n\r\n      if (atIndex > -1 && typeof parts[placeholderIndex] === \"string\" && parts[placeholderIndex].startsWith(\"prettier-placeholder\")) {\r\n        // If placeholder is split, join it\r\n        const at = parts[atIndex];\r\n        const placeholder = parts[placeholderIndex];\r\n        const rest = parts.slice(placeholderIndex + 1);\r\n        parts = parts.slice(0, atIndex).concat([at + placeholder]).concat(rest);\r\n      }\r\n\r\n      const atPlaceholderIndex = parts.findIndex(part => typeof part === \"string\" && part.startsWith(\"@prettier-placeholder\"));\r\n\r\n      if (atPlaceholderIndex > -1) {\r\n        const placeholder = parts[atPlaceholderIndex];\r\n        const rest = parts.slice(atPlaceholderIndex + 1);\r\n        const placeholderMatch = placeholder.match(/@prettier-placeholder-(.+)-id([\\s\\S]*)/);\r\n        const placeholderID = placeholderMatch[1]; // When the expression has a suffix appended, like:\r\n        // animation: linear ${time}s ease-out;\r\n\r\n        const suffix = placeholderMatch[2];\r\n        const expression = expressions[placeholderID];\r\n        replaceCounter++;\r\n        parts = parts.slice(0, atPlaceholderIndex).concat([\"${\", expression, \"}\" + suffix]).concat(rest);\r\n      }\r\n\r\n      return Object.assign({}, doc, {\r\n        parts\r\n      });\r\n    });\r\n    return expressions.length === replaceCounter ? newDoc : null;\r\n  }\r\n\r\n  function printGraphqlComments(lines) {\r\n    const parts = [];\r\n    let seenComment = false;\r\n    lines.map(textLine => textLine.trim()).forEach((textLine, i, array) => {\r\n      // Lines are either whitespace only, or a comment (with potential whitespace\r\n      // around it). Drop whitespace-only lines.\r\n      if (textLine === \"\") {\r\n        return;\r\n      }\r\n\r\n      if (array[i - 1] === \"\" && seenComment) {\r\n        // If a non-first comment is preceded by a blank (whitespace only) line,\r\n        // add in a blank line.\r\n        parts.push(concat$b([hardline$8, textLine]));\r\n      } else {\r\n        parts.push(textLine);\r\n      }\r\n\r\n      seenComment = true;\r\n    }); // If `lines` was whitespace only, return `null`.\r\n\r\n    return parts.length === 0 ? null : join$7(hardline$8, parts);\r\n  }\r\n  /**\r\n   * Template literal in these contexts:\r\n   * <style jsx>{`div{color:red}`}</style>\r\n   * css``\r\n   * css.global``\r\n   * css.resolve``\r\n   */\r\n\r\n\r\n  function isStyledJsx(path) {\r\n    const node = path.getValue();\r\n    const parent = path.getParentNode();\r\n    const parentParent = path.getParentNode(1);\r\n    return parentParent && node.quasis && parent.type === \"JSXExpressionContainer\" && parentParent.type === \"JSXElement\" && parentParent.openingElement.name.name === \"style\" && parentParent.openingElement.attributes.some(attribute => attribute.name.name === \"jsx\") || parent && parent.type === \"TaggedTemplateExpression\" && parent.tag.type === \"Identifier\" && parent.tag.name === \"css\" || parent && parent.type === \"TaggedTemplateExpression\" && parent.tag.type === \"MemberExpression\" && parent.tag.object.name === \"css\" && (parent.tag.property.name === \"global\" || parent.tag.property.name === \"resolve\");\r\n  }\r\n  /**\r\n   * Angular Components can have:\r\n   * - Inline HTML template\r\n   * - Inline CSS styles\r\n   *\r\n   * ...which are both within template literals somewhere\r\n   * inside of the Component decorator factory.\r\n   *\r\n   * E.g.\r\n   * @Component({\r\n   *  template: `<div>...</div>`,\r\n   *  styles: [`h1 { color: blue; }`]\r\n   * })\r\n   */\r\n\r\n\r\n  function isAngularComponentStyles(path) {\r\n    return path.match(node => node.type === \"TemplateLiteral\", (node, name) => node.type === \"ArrayExpression\" && name === \"elements\", (node, name) => (node.type === \"Property\" || node.type === \"ObjectProperty\") && node.key.type === \"Identifier\" && node.key.name === \"styles\" && name === \"value\", ...angularComponentObjectExpressionPredicates);\r\n  }\r\n\r\n  function isAngularComponentTemplate(path) {\r\n    return path.match(node => node.type === \"TemplateLiteral\", (node, name) => (node.type === \"Property\" || node.type === \"ObjectProperty\") && node.key.type === \"Identifier\" && node.key.name === \"template\" && name === \"value\", ...angularComponentObjectExpressionPredicates);\r\n  }\r\n\r\n  const angularComponentObjectExpressionPredicates = [(node, name) => node.type === \"ObjectExpression\" && name === \"properties\", (node, name) => node.type === \"CallExpression\" && node.callee.type === \"Identifier\" && node.callee.name === \"Component\" && name === \"arguments\", (node, name) => node.type === \"Decorator\" && name === \"expression\"];\r\n  /**\r\n   * styled-components template literals\r\n   */\r\n\r\n  function isStyledComponents(path) {\r\n    const parent = path.getParentNode();\r\n\r\n    if (!parent || parent.type !== \"TaggedTemplateExpression\") {\r\n      return false;\r\n    }\r\n\r\n    const {\r\n      tag\r\n    } = parent;\r\n\r\n    switch (tag.type) {\r\n      case \"MemberExpression\":\r\n        return (// styled.foo``\r\n          isStyledIdentifier(tag.object) || // Component.extend``\r\n          isStyledExtend(tag)\r\n        );\r\n\r\n      case \"CallExpression\":\r\n        return (// styled(Component)``\r\n          isStyledIdentifier(tag.callee) || tag.callee.type === \"MemberExpression\" && (tag.callee.object.type === \"MemberExpression\" && ( // styled.foo.attrs({})``\r\n          isStyledIdentifier(tag.callee.object.object) || // Component.extend.attrs({})``\r\n          isStyledExtend(tag.callee.object)) || // styled(Component).attrs({})``\r\n          tag.callee.object.type === \"CallExpression\" && isStyledIdentifier(tag.callee.object.callee))\r\n        );\r\n\r\n      case \"Identifier\":\r\n        // css``\r\n        return tag.name === \"css\";\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n  /**\r\n   * JSX element with CSS prop\r\n   */\r\n\r\n\r\n  function isCssProp(path) {\r\n    const parent = path.getParentNode();\r\n    const parentParent = path.getParentNode(1);\r\n    return parentParent && parent.type === \"JSXExpressionContainer\" && parentParent.type === \"JSXAttribute\" && parentParent.name.type === \"JSXIdentifier\" && parentParent.name.name === \"css\";\r\n  }\r\n\r\n  function isStyledIdentifier(node) {\r\n    return node.type === \"Identifier\" && node.name === \"styled\";\r\n  }\r\n\r\n  function isStyledExtend(node) {\r\n    return /^[A-Z]/.test(node.object.name) && node.property.name === \"extend\";\r\n  }\r\n  /*\r\n   * react-relay and graphql-tag\r\n   * graphql`...`\r\n   * graphql.experimental`...`\r\n   * gql`...`\r\n   * GraphQL comment block\r\n   *\r\n   * This intentionally excludes Relay Classic tags, as Prettier does not\r\n   * support Relay Classic formatting.\r\n   */\r\n\r\n\r\n  function isGraphQL(path) {\r\n    const node = path.getValue();\r\n    const parent = path.getParentNode();\r\n    return hasLanguageComment(node, \"GraphQL\") || parent && (parent.type === \"TaggedTemplateExpression\" && (parent.tag.type === \"MemberExpression\" && parent.tag.object.name === \"graphql\" && parent.tag.property.name === \"experimental\" || parent.tag.type === \"Identifier\" && (parent.tag.name === \"gql\" || parent.tag.name === \"graphql\")) || parent.type === \"CallExpression\" && parent.callee.type === \"Identifier\" && parent.callee.name === \"graphql\");\r\n  }\r\n\r\n  function hasLanguageComment(node, languageName) {\r\n    // This checks for a leading comment that is exactly `/* GraphQL */`\r\n    // In order to be in line with other implementations of this comment tag\r\n    // we will not trim the comment value and we will expect exactly one space on\r\n    // either side of the GraphQL string\r\n    // Also see ./clean.js\r\n    return hasLeadingComment$1(node, comment => isBlockComment$1(comment) && comment.value === \" \".concat(languageName, \" \"));\r\n  }\r\n  /**\r\n   *     - html`...`\r\n   *     - HTML comment block\r\n   */\r\n\r\n\r\n  function isHtml(path) {\r\n    return hasLanguageComment(path.getValue(), \"HTML\") || path.match(node => node.type === \"TemplateLiteral\", (node, name) => node.type === \"TaggedTemplateExpression\" && node.tag.type === \"Identifier\" && node.tag.name === \"html\" && name === \"quasi\");\r\n  } // The counter is needed to distinguish nested embeds.\r\n\r\n\r\n  let htmlTemplateLiteralCounter = 0;\r\n\r\n  function printHtmlTemplateLiteral(path, print, textToDoc, parser, options) {\r\n    const node = path.getValue();\r\n    const counter = htmlTemplateLiteralCounter;\r\n    htmlTemplateLiteralCounter = htmlTemplateLiteralCounter + 1 >>> 0;\r\n\r\n    const composePlaceholder = index => \"PRETTIER_HTML_PLACEHOLDER_\".concat(index, \"_\").concat(counter, \"_IN_JS\");\r\n\r\n    const text = node.quasis.map((quasi, index, quasis) => index === quasis.length - 1 ? quasi.value.cooked : quasi.value.cooked + composePlaceholder(index)).join(\"\");\r\n    const expressionDocs = path.map(print, \"expressions\");\r\n\r\n    if (expressionDocs.length === 0 && text.trim().length === 0) {\r\n      return \"``\";\r\n    }\r\n\r\n    const placeholderRegex = new RegExp(composePlaceholder(\"(\\\\d+)\"), \"g\");\r\n    let topLevelCount = 0;\r\n    const contentDoc = mapDoc$3(stripTrailingHardline$2(textToDoc(text, {\r\n      parser,\r\n\r\n      __onHtmlRoot(root) {\r\n        topLevelCount = root.children.length;\r\n      }\r\n\r\n    })), doc => {\r\n      if (typeof doc !== \"string\") {\r\n        return doc;\r\n      }\r\n\r\n      const parts = [];\r\n      const components = doc.split(placeholderRegex);\r\n\r\n      for (let i = 0; i < components.length; i++) {\r\n        let component = components[i];\r\n\r\n        if (i % 2 === 0) {\r\n          if (component) {\r\n            component = uncook(component);\r\n\r\n            if (options.embeddedInHtml) {\r\n              component = component.replace(/<\\/(script)\\b/gi, \"<\\\\/$1\");\r\n            }\r\n\r\n            parts.push(component);\r\n          }\r\n\r\n          continue;\r\n        }\r\n\r\n        const placeholderIndex = +component;\r\n        parts.push(concat$b([\"${\", group$a(expressionDocs[placeholderIndex]), \"}\"]));\r\n      }\r\n\r\n      return concat$b(parts);\r\n    });\r\n    const leadingWhitespace = /^\\s/.test(text) ? \" \" : \"\";\r\n    const trailingWhitespace = /\\s$/.test(text) ? \" \" : \"\";\r\n    const linebreak = options.htmlWhitespaceSensitivity === \"ignore\" ? hardline$8 : leadingWhitespace && trailingWhitespace ? line$7 : null;\r\n\r\n    if (linebreak) {\r\n      return group$a(concat$b([\"`\", indent$6(concat$b([linebreak, group$a(contentDoc)])), linebreak, \"`\"]));\r\n    }\r\n\r\n    return group$a(concat$b([\"`\", leadingWhitespace, topLevelCount > 1 ? indent$6(group$a(contentDoc)) : group$a(contentDoc), trailingWhitespace, \"`\"]));\r\n  }\r\n\r\n  var embed_1$1 = embed$3;\r\n\r\n  function clean$4(ast, newObj, parent) {\r\n    [\"range\", \"raw\", \"comments\", \"leadingComments\", \"trailingComments\", \"innerComments\", \"extra\", \"start\", \"end\", \"flags\", \"errors\"].forEach(name => {\r\n      delete newObj[name];\r\n    });\r\n\r\n    if (ast.loc && ast.loc.source === null) {\r\n      delete newObj.loc.source;\r\n    }\r\n\r\n    if (ast.type === \"BigIntLiteral\") {\r\n      newObj.value = newObj.value.toLowerCase();\r\n    } // We remove extra `;` and add them when needed\r\n\r\n\r\n    if (ast.type === \"EmptyStatement\") {\r\n      return null;\r\n    } // We move text around, including whitespaces and add {\" \"}\r\n\r\n\r\n    if (ast.type === \"JSXText\") {\r\n      return null;\r\n    }\r\n\r\n    if (ast.type === \"JSXExpressionContainer\" && ast.expression.type === \"Literal\" && ast.expression.value === \" \") {\r\n      return null;\r\n    } // (TypeScript) Ignore `static` in `constructor(static p) {}`\r\n    // and `export` in `constructor(export p) {}`\r\n\r\n\r\n    if (ast.type === \"TSParameterProperty\" && ast.accessibility === null && !ast.readonly) {\r\n      return {\r\n        type: \"Identifier\",\r\n        name: ast.parameter.name,\r\n        typeAnnotation: newObj.parameter.typeAnnotation,\r\n        decorators: newObj.decorators\r\n      };\r\n    } // (TypeScript) ignore empty `specifiers` array\r\n\r\n\r\n    if (ast.type === \"TSNamespaceExportDeclaration\" && ast.specifiers && ast.specifiers.length === 0) {\r\n      delete newObj.specifiers;\r\n    } // We convert <div></div> to <div />\r\n\r\n\r\n    if (ast.type === \"JSXOpeningElement\") {\r\n      delete newObj.selfClosing;\r\n    }\r\n\r\n    if (ast.type === \"JSXElement\") {\r\n      delete newObj.closingElement;\r\n    } // We change {'key': value} into {key: value}\r\n\r\n\r\n    if ((ast.type === \"Property\" || ast.type === \"ObjectProperty\" || ast.type === \"MethodDefinition\" || ast.type === \"ClassProperty\" || ast.type === \"TSPropertySignature\" || ast.type === \"ObjectTypeProperty\") && typeof ast.key === \"object\" && ast.key && (ast.key.type === \"Literal\" || ast.key.type === \"StringLiteral\" || ast.key.type === \"Identifier\")) {\r\n      delete newObj.key;\r\n    }\r\n\r\n    if (ast.type === \"OptionalMemberExpression\" && ast.optional === false) {\r\n      newObj.type = \"MemberExpression\";\r\n      delete newObj.optional;\r\n    } // Remove raw and cooked values from TemplateElement when it's CSS\r\n    // styled-jsx\r\n\r\n\r\n    if (ast.type === \"JSXElement\" && ast.openingElement.name.name === \"style\" && ast.openingElement.attributes.some(attr => attr.name.name === \"jsx\")) {\r\n      const templateLiterals = newObj.children.filter(child => child.type === \"JSXExpressionContainer\" && child.expression.type === \"TemplateLiteral\").map(container => container.expression);\r\n      const quasis = templateLiterals.reduce((quasis, templateLiteral) => quasis.concat(templateLiteral.quasis), []);\r\n      quasis.forEach(q => delete q.value);\r\n    } // CSS template literals in css prop\r\n\r\n\r\n    if (ast.type === \"JSXAttribute\" && ast.name.name === \"css\" && ast.value.type === \"JSXExpressionContainer\" && ast.value.expression.type === \"TemplateLiteral\") {\r\n      newObj.value.expression.quasis.forEach(q => delete q.value);\r\n    } // Angular Components: Inline HTML template and Inline CSS styles\r\n\r\n\r\n    const expression = ast.expression || ast.callee;\r\n\r\n    if (ast.type === \"Decorator\" && expression.type === \"CallExpression\" && expression.callee.name === \"Component\" && expression.arguments.length === 1) {\r\n      const astProps = ast.expression.arguments[0].properties;\r\n      newObj.expression.arguments[0].properties.forEach((prop, index) => {\r\n        let templateLiteral = null;\r\n\r\n        switch (astProps[index].key.name) {\r\n          case \"styles\":\r\n            if (prop.value.type === \"ArrayExpression\") {\r\n              templateLiteral = prop.value.elements[0];\r\n            }\r\n\r\n            break;\r\n\r\n          case \"template\":\r\n            if (prop.value.type === \"TemplateLiteral\") {\r\n              templateLiteral = prop.value;\r\n            }\r\n\r\n            break;\r\n        }\r\n\r\n        if (templateLiteral) {\r\n          templateLiteral.quasis.forEach(q => delete q.value);\r\n        }\r\n      });\r\n    } // styled-components, graphql, markdown\r\n\r\n\r\n    if (ast.type === \"TaggedTemplateExpression\" && (ast.tag.type === \"MemberExpression\" || ast.tag.type === \"Identifier\" && (ast.tag.name === \"gql\" || ast.tag.name === \"graphql\" || ast.tag.name === \"css\" || ast.tag.name === \"md\" || ast.tag.name === \"markdown\" || ast.tag.name === \"html\") || ast.tag.type === \"CallExpression\")) {\r\n      newObj.quasi.quasis.forEach(quasi => delete quasi.value);\r\n    }\r\n\r\n    if (ast.type === \"TemplateLiteral\") {\r\n      // This checks for a leading comment that is exactly `/* GraphQL */`\r\n      // In order to be in line with other implementations of this comment tag\r\n      // we will not trim the comment value and we will expect exactly one space on\r\n      // either side of the GraphQL string\r\n      // Also see ./embed.js\r\n      const hasLanguageComment = ast.leadingComments && ast.leadingComments.some(comment => comment.type === \"CommentBlock\" && [\"GraphQL\", \"HTML\"].some(languageName => comment.value === \" \".concat(languageName, \" \")));\r\n\r\n      if (hasLanguageComment || parent.type === \"CallExpression\" && parent.callee.name === \"graphql\") {\r\n        newObj.quasis.forEach(quasi => delete quasi.value);\r\n      }\r\n    }\r\n  }\r\n\r\n  var clean_1$1 = clean$4;\r\n\r\n  const {\r\n    getLast: getLast$2,\r\n    hasNewline: hasNewline$4,\r\n    hasNewlineInRange: hasNewlineInRange$2,\r\n    hasIgnoreComment: hasIgnoreComment$3,\r\n    hasNodeIgnoreComment: hasNodeIgnoreComment$1,\r\n    skipWhitespace: skipWhitespace$2\r\n  } = util$1;\r\n  const isIdentifierName = utils$1.keyword.isIdentifierNameES5; // We match any whitespace except line terminators because\r\n  // Flow annotation comments cannot be split across lines. For example:\r\n  //\r\n  // (this /*\r\n  // : any */).foo = 5;\r\n  //\r\n  // is not picked up by Flow (see https://github.com/facebook/flow/issues/7050), so\r\n  // removing the newline would create a type annotation that the user did not intend\r\n  // to create.\r\n\r\n  const NON_LINE_TERMINATING_WHITE_SPACE = \"(?:(?=.)\\\\s)\";\r\n  const FLOW_SHORTHAND_ANNOTATION = new RegExp(\"^\".concat(NON_LINE_TERMINATING_WHITE_SPACE, \"*:\"));\r\n  const FLOW_ANNOTATION = new RegExp(\"^\".concat(NON_LINE_TERMINATING_WHITE_SPACE, \"*::\"));\r\n\r\n  function hasFlowShorthandAnnotationComment(node) {\r\n    // https://flow.org/en/docs/types/comments/\r\n    // Syntax example: const r = new (window.Request /*: Class<Request> */)(\"\");\r\n    return node.extra && node.extra.parenthesized && node.trailingComments && node.trailingComments[0].value.match(FLOW_SHORTHAND_ANNOTATION);\r\n  }\r\n\r\n  function hasFlowAnnotationComment(comments) {\r\n    return comments && comments[0].value.match(FLOW_ANNOTATION);\r\n  }\r\n\r\n  function hasNode(node, fn) {\r\n    if (!node || typeof node !== \"object\") {\r\n      return false;\r\n    }\r\n\r\n    if (Array.isArray(node)) {\r\n      return node.some(value => hasNode(value, fn));\r\n    }\r\n\r\n    const result = fn(node);\r\n    return typeof result === \"boolean\" ? result : Object.keys(node).some(key => hasNode(node[key], fn));\r\n  }\r\n\r\n  function hasNakedLeftSide(node) {\r\n    return node.type === \"AssignmentExpression\" || node.type === \"BinaryExpression\" || node.type === \"LogicalExpression\" || node.type === \"NGPipeExpression\" || node.type === \"ConditionalExpression\" || node.type === \"CallExpression\" || node.type === \"OptionalCallExpression\" || node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\" || node.type === \"SequenceExpression\" || node.type === \"TaggedTemplateExpression\" || node.type === \"BindExpression\" || node.type === \"UpdateExpression\" && !node.prefix || node.type === \"TSAsExpression\" || node.type === \"TSNonNullExpression\";\r\n  }\r\n\r\n  function getLeftSide(node) {\r\n    if (node.expressions) {\r\n      return node.expressions[0];\r\n    }\r\n\r\n    return node.left || node.test || node.callee || node.object || node.tag || node.argument || node.expression;\r\n  }\r\n\r\n  function getLeftSidePathName(path, node) {\r\n    if (node.expressions) {\r\n      return [\"expressions\", 0];\r\n    }\r\n\r\n    if (node.left) {\r\n      return [\"left\"];\r\n    }\r\n\r\n    if (node.test) {\r\n      return [\"test\"];\r\n    }\r\n\r\n    if (node.object) {\r\n      return [\"object\"];\r\n    }\r\n\r\n    if (node.callee) {\r\n      return [\"callee\"];\r\n    }\r\n\r\n    if (node.tag) {\r\n      return [\"tag\"];\r\n    }\r\n\r\n    if (node.argument) {\r\n      return [\"argument\"];\r\n    }\r\n\r\n    if (node.expression) {\r\n      return [\"expression\"];\r\n    }\r\n\r\n    throw new Error(\"Unexpected node has no left side\", node);\r\n  }\r\n\r\n  const exportDeclarationTypes = new Set([\"ExportDefaultDeclaration\", \"ExportDefaultSpecifier\", \"DeclareExportDeclaration\", \"ExportNamedDeclaration\", \"ExportAllDeclaration\"]);\r\n\r\n  function isExportDeclaration(node) {\r\n    return node && exportDeclarationTypes.has(node.type);\r\n  }\r\n\r\n  function getParentExportDeclaration(path) {\r\n    const parentNode = path.getParentNode();\r\n\r\n    if (path.getName() === \"declaration\" && isExportDeclaration(parentNode)) {\r\n      return parentNode;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  function isLiteral(node) {\r\n    return node.type === \"BooleanLiteral\" || node.type === \"DirectiveLiteral\" || node.type === \"Literal\" || node.type === \"NullLiteral\" || node.type === \"NumericLiteral\" || node.type === \"RegExpLiteral\" || node.type === \"StringLiteral\" || node.type === \"TemplateLiteral\" || node.type === \"TSTypeLiteral\" || node.type === \"JSXText\";\r\n  }\r\n\r\n  function isNumericLiteral(node) {\r\n    return node.type === \"NumericLiteral\" || node.type === \"Literal\" && typeof node.value === \"number\";\r\n  }\r\n\r\n  function isStringLiteral(node) {\r\n    return node.type === \"StringLiteral\" || node.type === \"Literal\" && typeof node.value === \"string\";\r\n  }\r\n\r\n  function isObjectType(n) {\r\n    return n.type === \"ObjectTypeAnnotation\" || n.type === \"TSTypeLiteral\";\r\n  }\r\n\r\n  function isFunctionOrArrowExpression(node) {\r\n    return node.type === \"FunctionExpression\" || node.type === \"ArrowFunctionExpression\";\r\n  }\r\n\r\n  function isFunctionOrArrowExpressionWithBody(node) {\r\n    return node.type === \"FunctionExpression\" || node.type === \"ArrowFunctionExpression\" && node.body.type === \"BlockStatement\";\r\n  }\r\n\r\n  function isTemplateLiteral(node) {\r\n    return node.type === \"TemplateLiteral\";\r\n  } // `inject` is used in AngularJS 1.x, `async` in Angular 2+\r\n  // example: https://docs.angularjs.org/guide/unit-testing#using-beforeall-\r\n\r\n\r\n  function isAngularTestWrapper(node) {\r\n    return (node.type === \"CallExpression\" || node.type === \"OptionalCallExpression\") && node.callee.type === \"Identifier\" && (node.callee.name === \"async\" || node.callee.name === \"inject\" || node.callee.name === \"fakeAsync\");\r\n  }\r\n\r\n  function isJSXNode(node) {\r\n    return node.type === \"JSXElement\" || node.type === \"JSXFragment\";\r\n  }\r\n\r\n  function isTheOnlyJSXElementInMarkdown(options, path) {\r\n    if (options.parentParser !== \"markdown\" && options.parentParser !== \"mdx\") {\r\n      return false;\r\n    }\r\n\r\n    const node = path.getNode();\r\n\r\n    if (!node.expression || !isJSXNode(node.expression)) {\r\n      return false;\r\n    }\r\n\r\n    const parent = path.getParentNode();\r\n    return parent.type === \"Program\" && parent.body.length === 1;\r\n  } // Detect an expression node representing `{\" \"}`\r\n\r\n\r\n  function isJSXWhitespaceExpression(node) {\r\n    return node.type === \"JSXExpressionContainer\" && isLiteral(node.expression) && node.expression.value === \" \" && !node.expression.comments;\r\n  }\r\n\r\n  function isMemberExpressionChain(node) {\r\n    if (node.type !== \"MemberExpression\" && node.type !== \"OptionalMemberExpression\") {\r\n      return false;\r\n    }\r\n\r\n    if (node.object.type === \"Identifier\") {\r\n      return true;\r\n    }\r\n\r\n    return isMemberExpressionChain(node.object);\r\n  }\r\n\r\n  function isGetterOrSetter(node) {\r\n    return node.kind === \"get\" || node.kind === \"set\";\r\n  }\r\n\r\n  function sameLocStart(nodeA, nodeB, options) {\r\n    return options.locStart(nodeA) === options.locStart(nodeB);\r\n  } // TODO: This is a bad hack and we need a better way to distinguish between\r\n  // arrow functions and otherwise\r\n\r\n\r\n  function isFunctionNotation(node, options) {\r\n    return isGetterOrSetter(node) || sameLocStart(node, node.value, options);\r\n  } // Hack to differentiate between the following two which have the same ast\r\n  // type T = { method: () => void };\r\n  // type T = { method(): void };\r\n\r\n\r\n  function isObjectTypePropertyAFunction(node, options) {\r\n    return (node.type === \"ObjectTypeProperty\" || node.type === \"ObjectTypeInternalSlot\") && node.value.type === \"FunctionTypeAnnotation\" && !node.static && !isFunctionNotation(node, options);\r\n  } // Hack to differentiate between the following two which have the same ast\r\n  // declare function f(a): void;\r\n  // var f: (a) => void;\r\n\r\n\r\n  function isTypeAnnotationAFunction(node, options) {\r\n    return (node.type === \"TypeAnnotation\" || node.type === \"TSTypeAnnotation\") && node.typeAnnotation.type === \"FunctionTypeAnnotation\" && !node.static && !sameLocStart(node, node.typeAnnotation, options);\r\n  }\r\n\r\n  const binaryishNodeTypes = new Set([\"BinaryExpression\", \"LogicalExpression\", \"NGPipeExpression\"]);\r\n\r\n  function isBinaryish(node) {\r\n    return binaryishNodeTypes.has(node.type);\r\n  }\r\n\r\n  function isMemberish(node) {\r\n    return node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\" || node.type === \"BindExpression\" && node.object;\r\n  }\r\n\r\n  function isSimpleFlowType(node) {\r\n    const flowTypeAnnotations = [\"AnyTypeAnnotation\", \"NullLiteralTypeAnnotation\", \"GenericTypeAnnotation\", \"ThisTypeAnnotation\", \"NumberTypeAnnotation\", \"VoidTypeAnnotation\", \"EmptyTypeAnnotation\", \"MixedTypeAnnotation\", \"BooleanTypeAnnotation\", \"BooleanLiteralTypeAnnotation\", \"StringTypeAnnotation\"];\r\n    return node && flowTypeAnnotations.includes(node.type) && !(node.type === \"GenericTypeAnnotation\" && node.typeParameters);\r\n  }\r\n\r\n  const unitTestRe = /^(skip|[fx]?(it|describe|test))$/;\r\n\r\n  function isSkipOrOnlyBlock(node) {\r\n    return (node.callee.type === \"MemberExpression\" || node.callee.type === \"OptionalMemberExpression\") && node.callee.object.type === \"Identifier\" && node.callee.property.type === \"Identifier\" && unitTestRe.test(node.callee.object.name) && (node.callee.property.name === \"only\" || node.callee.property.name === \"skip\");\r\n  }\r\n\r\n  function isUnitTestSetUp(n) {\r\n    const unitTestSetUpRe = /^(before|after)(Each|All)$/;\r\n    return n.callee.type === \"Identifier\" && unitTestSetUpRe.test(n.callee.name) && n.arguments.length === 1;\r\n  } // eg; `describe(\"some string\", (done) => {})`\r\n\r\n\r\n  function isTestCall(n, parent) {\r\n    if (n.type !== \"CallExpression\") {\r\n      return false;\r\n    }\r\n\r\n    if (n.arguments.length === 1) {\r\n      if (isAngularTestWrapper(n) && parent && isTestCall(parent)) {\r\n        return isFunctionOrArrowExpression(n.arguments[0]);\r\n      }\r\n\r\n      if (isUnitTestSetUp(n)) {\r\n        return isAngularTestWrapper(n.arguments[0]);\r\n      }\r\n    } else if (n.arguments.length === 2 || n.arguments.length === 3) {\r\n      if ((n.callee.type === \"Identifier\" && unitTestRe.test(n.callee.name) || isSkipOrOnlyBlock(n)) && (isTemplateLiteral(n.arguments[0]) || isStringLiteral(n.arguments[0]))) {\r\n        // it(\"name\", () => { ... }, 2500)\r\n        if (n.arguments[2] && !isNumericLiteral(n.arguments[2])) {\r\n          return false;\r\n        }\r\n\r\n        return (n.arguments.length === 2 ? isFunctionOrArrowExpression(n.arguments[1]) : isFunctionOrArrowExpressionWithBody(n.arguments[1]) && n.arguments[1].params.length <= 1) || isAngularTestWrapper(n.arguments[1]);\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function hasLeadingComment$2(node) {\r\n    return node.comments && node.comments.some(comment => comment.leading);\r\n  }\r\n\r\n  function hasTrailingComment(node) {\r\n    return node.comments && node.comments.some(comment => comment.trailing);\r\n  }\r\n\r\n  function isCallOrOptionalCallExpression(node) {\r\n    return node.type === \"CallExpression\" || node.type === \"OptionalCallExpression\";\r\n  }\r\n\r\n  function hasDanglingComments(node) {\r\n    return node.comments && node.comments.some(comment => !comment.leading && !comment.trailing);\r\n  }\r\n  /** identify if an angular expression seems to have side effects */\r\n\r\n\r\n  function hasNgSideEffect(path) {\r\n    return hasNode(path.getValue(), node => {\r\n      switch (node.type) {\r\n        case undefined:\r\n          return false;\r\n\r\n        case \"CallExpression\":\r\n        case \"OptionalCallExpression\":\r\n        case \"AssignmentExpression\":\r\n          return true;\r\n      }\r\n    });\r\n  }\r\n\r\n  function isNgForOf(node, index, parentNode) {\r\n    return node.type === \"NGMicrosyntaxKeyedExpression\" && node.key.name === \"of\" && index === 1 && parentNode.body[0].type === \"NGMicrosyntaxLet\" && parentNode.body[0].value === null;\r\n  }\r\n  /** @param node {import(\"estree\").TemplateLiteral} */\r\n\r\n\r\n  function isSimpleTemplateLiteral(node) {\r\n    if (node.expressions.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    return node.expressions.every(expr => {\r\n      // Disallow comments since printDocToString can't print them here\r\n      if (expr.comments) {\r\n        return false;\r\n      } // Allow `x` and `this`\r\n\r\n\r\n      if (expr.type === \"Identifier\" || expr.type === \"ThisExpression\") {\r\n        return true;\r\n      } // Allow `a.b.c`, `a.b[c]`, and `this.x.y`\r\n\r\n\r\n      if (expr.type === \"MemberExpression\" || expr.type === \"OptionalMemberExpression\") {\r\n        let head = expr;\r\n\r\n        while (head.type === \"MemberExpression\" || head.type === \"OptionalMemberExpression\") {\r\n          if (head.property.type !== \"Identifier\" && head.property.type !== \"Literal\" && head.property.type !== \"StringLiteral\" && head.property.type !== \"NumericLiteral\") {\r\n            return false;\r\n          }\r\n\r\n          head = head.object;\r\n\r\n          if (head.comments) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        if (head.type === \"Identifier\" || head.type === \"ThisExpression\") {\r\n          return true;\r\n        }\r\n\r\n        return false;\r\n      }\r\n\r\n      return false;\r\n    });\r\n  }\r\n\r\n  function getFlowVariance(path) {\r\n    if (!path.variance) {\r\n      return null;\r\n    } // Babel 7.0 currently uses variance node type, and flow should\r\n    // follow suit soon:\r\n    // https://github.com/babel/babel/issues/4722\r\n\r\n\r\n    const variance = path.variance.kind || path.variance;\r\n\r\n    switch (variance) {\r\n      case \"plus\":\r\n        return \"+\";\r\n\r\n      case \"minus\":\r\n        return \"-\";\r\n\r\n      default:\r\n        /* istanbul ignore next */\r\n        return variance;\r\n    }\r\n  }\r\n\r\n  function classPropMayCauseASIProblems(path) {\r\n    const node = path.getNode();\r\n\r\n    if (node.type !== \"ClassProperty\") {\r\n      return false;\r\n    }\r\n\r\n    const name = node.key && node.key.name; // this isn't actually possible yet with most parsers available today\r\n    // so isn't properly tested yet.\r\n\r\n    if ((name === \"static\" || name === \"get\" || name === \"set\") && !node.value && !node.typeAnnotation) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  function classChildNeedsASIProtection(node) {\r\n    if (!node) {\r\n      return;\r\n    }\r\n\r\n    if (node.static || node.accessibility // TypeScript\r\n    ) {\r\n        return false;\r\n      }\r\n\r\n    if (!node.computed) {\r\n      const name = node.key && node.key.name;\r\n\r\n      if (name === \"in\" || name === \"instanceof\") {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    switch (node.type) {\r\n      case \"ClassProperty\":\r\n      case \"TSAbstractClassProperty\":\r\n        return node.computed;\r\n\r\n      case \"MethodDefinition\": // Flow\r\n\r\n      case \"TSAbstractMethodDefinition\": // TypeScript\r\n\r\n      case \"ClassMethod\":\r\n      case \"ClassPrivateMethod\":\r\n        {\r\n          // Babel\r\n          const isAsync = node.value ? node.value.async : node.async;\r\n          const isGenerator = node.value ? node.value.generator : node.generator;\r\n\r\n          if (isAsync || node.kind === \"get\" || node.kind === \"set\") {\r\n            return false;\r\n          }\r\n\r\n          if (node.computed || isGenerator) {\r\n            return true;\r\n          }\r\n\r\n          return false;\r\n        }\r\n\r\n      case \"TSIndexSignature\":\r\n        return true;\r\n\r\n      default:\r\n        /* istanbul ignore next */\r\n        return false;\r\n    }\r\n  }\r\n\r\n  function getTypeScriptMappedTypeModifier(tokenNode, keyword) {\r\n    if (tokenNode === \"+\") {\r\n      return \"+\" + keyword;\r\n    } else if (tokenNode === \"-\") {\r\n      return \"-\" + keyword;\r\n    }\r\n\r\n    return keyword;\r\n  }\r\n\r\n  function hasNewlineBetweenOrAfterDecorators(node, options) {\r\n    return hasNewlineInRange$2(options.originalText, options.locStart(node.decorators[0]), options.locEnd(getLast$2(node.decorators))) || hasNewline$4(options.originalText, options.locEnd(getLast$2(node.decorators)));\r\n  } // Only space, newline, carriage return, and tab are treated as whitespace\r\n  // inside JSX.\r\n\r\n\r\n  const jsxWhitespaceChars = \" \\n\\r\\t\";\r\n  const matchJsxWhitespaceRegex = new RegExp(\"([\" + jsxWhitespaceChars + \"]+)\");\r\n  const containsNonJsxWhitespaceRegex = new RegExp(\"[^\" + jsxWhitespaceChars + \"]\"); // Meaningful if it contains non-whitespace characters,\r\n  // or it contains whitespace without a new line.\r\n\r\n  function isMeaningfulJSXText(node) {\r\n    return isLiteral(node) && (containsNonJsxWhitespaceRegex.test(rawText(node)) || !/\\n/.test(rawText(node)));\r\n  }\r\n\r\n  function hasJsxIgnoreComment(path) {\r\n    const node = path.getValue();\r\n    const parent = path.getParentNode();\r\n\r\n    if (!parent || !node || !isJSXNode(node) || !isJSXNode(parent)) {\r\n      return false;\r\n    } // Lookup the previous sibling, ignoring any empty JSXText elements\r\n\r\n\r\n    const index = parent.children.indexOf(node);\r\n    let prevSibling = null;\r\n\r\n    for (let i = index; i > 0; i--) {\r\n      const candidate = parent.children[i - 1];\r\n\r\n      if (candidate.type === \"JSXText\" && !isMeaningfulJSXText(candidate)) {\r\n        continue;\r\n      }\r\n\r\n      prevSibling = candidate;\r\n      break;\r\n    }\r\n\r\n    return prevSibling && prevSibling.type === \"JSXExpressionContainer\" && prevSibling.expression.type === \"JSXEmptyExpression\" && prevSibling.expression.comments && prevSibling.expression.comments.find(comment => comment.value.trim() === \"prettier-ignore\");\r\n  }\r\n\r\n  function isEmptyJSXElement(node) {\r\n    if (node.children.length === 0) {\r\n      return true;\r\n    }\r\n\r\n    if (node.children.length > 1) {\r\n      return false;\r\n    } // if there is one text child and does not contain any meaningful text\r\n    // we can treat the element as empty.\r\n\r\n\r\n    const child = node.children[0];\r\n    return isLiteral(child) && !isMeaningfulJSXText(child);\r\n  }\r\n\r\n  function hasPrettierIgnore$4(path) {\r\n    return hasIgnoreComment$3(path) || hasJsxIgnoreComment(path);\r\n  }\r\n\r\n  function isLastStatement(path) {\r\n    const parent = path.getParentNode();\r\n\r\n    if (!parent) {\r\n      return true;\r\n    }\r\n\r\n    const node = path.getValue();\r\n    const body = (parent.body || parent.consequent).filter(stmt => stmt.type !== \"EmptyStatement\");\r\n    return body && body[body.length - 1] === node;\r\n  }\r\n\r\n  function isFlowAnnotationComment(text, typeAnnotation, options) {\r\n    const start = options.locStart(typeAnnotation);\r\n    const end = skipWhitespace$2(text, options.locEnd(typeAnnotation));\r\n    return text.slice(start, start + 2) === \"/*\" && text.slice(end, end + 2) === \"*/\";\r\n  }\r\n\r\n  function hasLeadingOwnLineComment(text, node, options) {\r\n    if (isJSXNode(node)) {\r\n      return hasNodeIgnoreComment$1(node);\r\n    }\r\n\r\n    const res = node.comments && node.comments.some(comment => comment.leading && hasNewline$4(text, options.locEnd(comment)));\r\n    return res;\r\n  } // This recurses the return argument, looking for the first token\r\n  // (the leftmost leaf node) and, if it (or its parents) has any\r\n  // leadingComments, returns true (so it can be wrapped in parens).\r\n\r\n\r\n  function returnArgumentHasLeadingComment(options, argument) {\r\n    if (hasLeadingOwnLineComment(options.originalText, argument, options)) {\r\n      return true;\r\n    }\r\n\r\n    if (hasNakedLeftSide(argument)) {\r\n      let leftMost = argument;\r\n      let newLeftMost;\r\n\r\n      while (newLeftMost = getLeftSide(leftMost)) {\r\n        leftMost = newLeftMost;\r\n\r\n        if (hasLeadingOwnLineComment(options.originalText, leftMost, options)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function isStringPropSafeToCoerceToIdentifier(node, options) {\r\n    return isStringLiteral(node.key) && isIdentifierName(node.key.value) && options.parser !== \"json\" && // With `--strictPropertyInitialization`, TS treats properties with quoted names differently than unquoted ones.\r\n    // See https://github.com/microsoft/TypeScript/pull/20075\r\n    !((options.parser === \"typescript\" || options.parser === \"babel-ts\") && node.type === \"ClassProperty\");\r\n  }\r\n\r\n  function isJestEachTemplateLiteral(node, parentNode) {\r\n    /**\r\n     * describe.each`table`(name, fn)\r\n     * describe.only.each`table`(name, fn)\r\n     * describe.skip.each`table`(name, fn)\r\n     * test.each`table`(name, fn)\r\n     * test.only.each`table`(name, fn)\r\n     * test.skip.each`table`(name, fn)\r\n     *\r\n     * Ref: https://github.com/facebook/jest/pull/6102\r\n     */\r\n    const jestEachTriggerRegex = /^[xf]?(describe|it|test)$/;\r\n    return parentNode.type === \"TaggedTemplateExpression\" && parentNode.quasi === node && parentNode.tag.type === \"MemberExpression\" && parentNode.tag.property.type === \"Identifier\" && parentNode.tag.property.name === \"each\" && (parentNode.tag.object.type === \"Identifier\" && jestEachTriggerRegex.test(parentNode.tag.object.name) || parentNode.tag.object.type === \"MemberExpression\" && parentNode.tag.object.property.type === \"Identifier\" && (parentNode.tag.object.property.name === \"only\" || parentNode.tag.object.property.name === \"skip\") && parentNode.tag.object.object.type === \"Identifier\" && jestEachTriggerRegex.test(parentNode.tag.object.object.name));\r\n  }\r\n\r\n  function templateLiteralHasNewLines(template) {\r\n    return template.quasis.some(quasi => quasi.value.raw.includes(\"\\n\"));\r\n  }\r\n\r\n  function isTemplateOnItsOwnLine(n, text, options) {\r\n    return (n.type === \"TemplateLiteral\" && templateLiteralHasNewLines(n) || n.type === \"TaggedTemplateExpression\" && templateLiteralHasNewLines(n.quasi)) && !hasNewline$4(text, options.locStart(n), {\r\n      backwards: true\r\n    });\r\n  }\r\n\r\n  function needsHardlineAfterDanglingComment(node) {\r\n    if (!node.comments) {\r\n      return false;\r\n    }\r\n\r\n    const lastDanglingComment = getLast$2(node.comments.filter(comment => !comment.leading && !comment.trailing));\r\n    return lastDanglingComment && !comments$1.isBlockComment(lastDanglingComment);\r\n  } // If we have nested conditional expressions, we want to print them in JSX mode\r\n  // if there's at least one JSXElement somewhere in the tree.\r\n  //\r\n  // A conditional expression chain like this should be printed in normal mode,\r\n  // because there aren't JSXElements anywhere in it:\r\n  //\r\n  // isA ? \"A\" : isB ? \"B\" : isC ? \"C\" : \"Unknown\";\r\n  //\r\n  // But a conditional expression chain like this should be printed in JSX mode,\r\n  // because there is a JSXElement in the last ConditionalExpression:\r\n  //\r\n  // isA ? \"A\" : isB ? \"B\" : isC ? \"C\" : <span className=\"warning\">Unknown</span>;\r\n  //\r\n  // This type of ConditionalExpression chain is structured like this in the AST:\r\n  //\r\n  // ConditionalExpression {\r\n  //   test: ...,\r\n  //   consequent: ...,\r\n  //   alternate: ConditionalExpression {\r\n  //     test: ...,\r\n  //     consequent: ...,\r\n  //     alternate: ConditionalExpression {\r\n  //       test: ...,\r\n  //       consequent: ...,\r\n  //       alternate: ...,\r\n  //     }\r\n  //   }\r\n  // }\r\n  //\r\n  // We want to traverse over that shape and convert it into a flat structure so\r\n  // that we can find if there's a JSXElement somewhere inside.\r\n\r\n\r\n  function getConditionalChainContents(node) {\r\n    // Given this code:\r\n    //\r\n    // // Using a ConditionalExpression as the consequent is uncommon, but should\r\n    // // be handled.\r\n    // A ? B : C ? D : E ? F ? G : H : I\r\n    //\r\n    // which has this AST:\r\n    //\r\n    // ConditionalExpression {\r\n    //   test: Identifier(A),\r\n    //   consequent: Identifier(B),\r\n    //   alternate: ConditionalExpression {\r\n    //     test: Identifier(C),\r\n    //     consequent: Identifier(D),\r\n    //     alternate: ConditionalExpression {\r\n    //       test: Identifier(E),\r\n    //       consequent: ConditionalExpression {\r\n    //         test: Identifier(F),\r\n    //         consequent: Identifier(G),\r\n    //         alternate: Identifier(H),\r\n    //       },\r\n    //       alternate: Identifier(I),\r\n    //     }\r\n    //   }\r\n    // }\r\n    //\r\n    // we should return this Array:\r\n    //\r\n    // [\r\n    //   Identifier(A),\r\n    //   Identifier(B),\r\n    //   Identifier(C),\r\n    //   Identifier(D),\r\n    //   Identifier(E),\r\n    //   Identifier(F),\r\n    //   Identifier(G),\r\n    //   Identifier(H),\r\n    //   Identifier(I)\r\n    // ];\r\n    //\r\n    // This loses the information about whether each node was the test,\r\n    // consequent, or alternate, but we don't care about that here- we are only\r\n    // flattening this structure to find if there's any JSXElements inside.\r\n    const nonConditionalExpressions = [];\r\n\r\n    function recurse(node) {\r\n      if (node.type === \"ConditionalExpression\") {\r\n        recurse(node.test);\r\n        recurse(node.consequent);\r\n        recurse(node.alternate);\r\n      } else {\r\n        nonConditionalExpressions.push(node);\r\n      }\r\n    }\r\n\r\n    recurse(node);\r\n    return nonConditionalExpressions;\r\n  }\r\n\r\n  function conditionalExpressionChainContainsJSX(node) {\r\n    return Boolean(getConditionalChainContents(node).find(isJSXNode));\r\n  } // Logic to check for args with multiple anonymous functions. For instance,\r\n  // the following call should be split on multiple lines for readability:\r\n  // source.pipe(map((x) => x + x), filter((x) => x % 2 === 0))\r\n\r\n\r\n  function isFunctionCompositionArgs(args) {\r\n    if (args.length <= 1) {\r\n      return false;\r\n    }\r\n\r\n    let count = 0;\r\n\r\n    for (const arg of args) {\r\n      if (isFunctionOrArrowExpression(arg)) {\r\n        count += 1;\r\n\r\n        if (count > 1) {\r\n          return true;\r\n        }\r\n      } else if (isCallOrOptionalCallExpression(arg)) {\r\n        for (const childArg of arg.arguments) {\r\n          if (isFunctionOrArrowExpression(childArg)) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  } // Logic to determine if a call is a “long curried function call”.\r\n  // See https://github.com/prettier/prettier/issues/1420.\r\n  //\r\n  // `connect(a, b, c)(d)`\r\n  // In the above call expression, the second call is the parent node and the\r\n  // first call is the current node.\r\n\r\n\r\n  function isLongCurriedCallExpression(path) {\r\n    const node = path.getValue();\r\n    const parent = path.getParentNode();\r\n    return isCallOrOptionalCallExpression(node) && isCallOrOptionalCallExpression(parent) && parent.callee === node && node.arguments.length > parent.arguments.length && parent.arguments.length > 0;\r\n  }\r\n  /**\r\n   * @param {import('estree').Node} node\r\n   * @param {number} depth\r\n   * @returns {boolean}\r\n   */\r\n\r\n\r\n  function isSimpleCallArgument(node, depth) {\r\n    if (depth >= 2) {\r\n      return false;\r\n    }\r\n\r\n    const isChildSimple = child => isSimpleCallArgument(child, depth + 1);\r\n\r\n    const regexpPattern = node.type === \"Literal\" && node.regex && node.regex.pattern || node.type === \"RegExpLiteral\" && node.pattern;\r\n\r\n    if (regexpPattern && regexpPattern.length > 5) {\r\n      return false;\r\n    }\r\n\r\n    if (node.type === \"Literal\" || node.type === \"BooleanLiteral\" || node.type === \"NullLiteral\" || node.type === \"NumericLiteral\" || node.type === \"StringLiteral\" || node.type === \"Identifier\" || node.type === \"ThisExpression\" || node.type === \"Super\" || node.type === \"BigIntLiteral\" || node.type === \"PrivateName\" || node.type === \"ArgumentPlaceholder\" || node.type === \"RegExpLiteral\" || node.type === \"Import\") {\r\n      return true;\r\n    }\r\n\r\n    if (node.type === \"TemplateLiteral\") {\r\n      return node.expressions.every(isChildSimple);\r\n    }\r\n\r\n    if (node.type === \"ObjectExpression\") {\r\n      return node.properties.every(p => !p.computed && (p.shorthand || p.value && isChildSimple(p.value)));\r\n    }\r\n\r\n    if (node.type === \"ArrayExpression\") {\r\n      return node.elements.every(x => x == null || isChildSimple(x));\r\n    }\r\n\r\n    if (node.type === \"CallExpression\" || node.type === \"OptionalCallExpression\" || node.type === \"NewExpression\") {\r\n      return isSimpleCallArgument(node.callee, depth) && node.arguments.every(isChildSimple);\r\n    }\r\n\r\n    if (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") {\r\n      return isSimpleCallArgument(node.object, depth) && isSimpleCallArgument(node.property, depth);\r\n    }\r\n\r\n    if (node.type === \"UnaryExpression\" && (node.operator === \"!\" || node.operator === \"-\")) {\r\n      return isSimpleCallArgument(node.argument, depth);\r\n    }\r\n\r\n    if (node.type === \"TSNonNullExpression\") {\r\n      return isSimpleCallArgument(node.expression, depth);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function rawText(node) {\r\n    return node.extra ? node.extra.raw : node.raw;\r\n  }\r\n\r\n  function identity$1(x) {\r\n    return x;\r\n  }\r\n\r\n  function isTSXFile(options) {\r\n    return options.filepath && /\\.tsx$/i.test(options.filepath);\r\n  }\r\n\r\n  var utils$5 = {\r\n    classChildNeedsASIProtection,\r\n    classPropMayCauseASIProblems,\r\n    conditionalExpressionChainContainsJSX,\r\n    getFlowVariance,\r\n    getLeftSidePathName,\r\n    getParentExportDeclaration,\r\n    getTypeScriptMappedTypeModifier,\r\n    hasDanglingComments,\r\n    hasFlowAnnotationComment,\r\n    hasFlowShorthandAnnotationComment,\r\n    hasLeadingComment: hasLeadingComment$2,\r\n    hasLeadingOwnLineComment,\r\n    hasNakedLeftSide,\r\n    hasNewlineBetweenOrAfterDecorators,\r\n    hasNgSideEffect,\r\n    hasNode,\r\n    hasPrettierIgnore: hasPrettierIgnore$4,\r\n    hasTrailingComment,\r\n    identity: identity$1,\r\n    isBinaryish,\r\n    isCallOrOptionalCallExpression,\r\n    isEmptyJSXElement,\r\n    isExportDeclaration,\r\n    isFlowAnnotationComment,\r\n    isFunctionCompositionArgs,\r\n    isFunctionNotation,\r\n    isFunctionOrArrowExpression,\r\n    isGetterOrSetter,\r\n    isJestEachTemplateLiteral,\r\n    isJSXNode,\r\n    isJSXWhitespaceExpression,\r\n    isLastStatement,\r\n    isLiteral,\r\n    isLongCurriedCallExpression,\r\n    isSimpleCallArgument,\r\n    isMeaningfulJSXText,\r\n    isMemberExpressionChain,\r\n    isMemberish,\r\n    isNgForOf,\r\n    isNumericLiteral,\r\n    isObjectType,\r\n    isObjectTypePropertyAFunction,\r\n    isSimpleFlowType,\r\n    isSimpleTemplateLiteral,\r\n    isStringLiteral,\r\n    isStringPropSafeToCoerceToIdentifier,\r\n    isTemplateOnItsOwnLine,\r\n    isTestCall,\r\n    isTheOnlyJSXElementInMarkdown,\r\n    isTSXFile,\r\n    isTypeAnnotationAFunction,\r\n    matchJsxWhitespaceRegex,\r\n    needsHardlineAfterDanglingComment,\r\n    rawText,\r\n    returnArgumentHasLeadingComment\r\n  };\r\n\r\n  const {\r\n    getLeftSidePathName: getLeftSidePathName$1,\r\n    hasFlowShorthandAnnotationComment: hasFlowShorthandAnnotationComment$1,\r\n    hasNakedLeftSide: hasNakedLeftSide$1,\r\n    hasNode: hasNode$1\r\n  } = utils$5;\r\n\r\n  function needsParens(path, options) {\r\n    const parent = path.getParentNode();\r\n\r\n    if (!parent) {\r\n      return false;\r\n    }\r\n\r\n    const name = path.getName();\r\n    const node = path.getNode(); // If the value of this path is some child of a Node and not a Node\r\n    // itself, then it doesn't need parentheses. Only Node objects (in\r\n    // fact, only Expression nodes) need parentheses.\r\n\r\n    if (path.getValue() !== node) {\r\n      return false;\r\n    } // to avoid unexpected `}}` in HTML interpolations\r\n\r\n\r\n    if (options.__isInHtmlInterpolation && !options.bracketSpacing && endsWithRightBracket(node) && isFollowedByRightBracket(path)) {\r\n      return true;\r\n    } // Only statements don't need parentheses.\r\n\r\n\r\n    if (isStatement(node)) {\r\n      return false;\r\n    }\r\n\r\n    if ( // Preserve parens if we have a Flow annotation comment, unless we're using the Flow\r\n    // parser. The Flow parser turns Flow comments into type annotation nodes in its\r\n    // AST, which we handle separately.\r\n    options.parser !== \"flow\" && hasFlowShorthandAnnotationComment$1(path.getValue())) {\r\n      return true;\r\n    } // Identifiers never need parentheses.\r\n\r\n\r\n    if (node.type === \"Identifier\") {\r\n      // ...unless those identifiers are embed placeholders. They might be substituted by complex\r\n      // expressions, so the parens around them should not be dropped. Example (JS-in-HTML-in-JS):\r\n      //     let tpl = html`<script> f((${expr}) / 2); </script>`;\r\n      // If the inner JS formatter removes the parens, the expression might change its meaning:\r\n      //     f((a + b) / 2)  vs  f(a + b / 2)\r\n      if (node.extra && node.extra.parenthesized && /^PRETTIER_HTML_PLACEHOLDER_\\d+_\\d+_IN_JS$/.test(node.name)) {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    }\r\n\r\n    if (parent.type === \"ParenthesizedExpression\") {\r\n      return false;\r\n    } // Add parens around the extends clause of a class. It is needed for almost\r\n    // all expressions.\r\n\r\n\r\n    if ((parent.type === \"ClassDeclaration\" || parent.type === \"ClassExpression\") && parent.superClass === node && (node.type === \"ArrowFunctionExpression\" || node.type === \"AssignmentExpression\" || node.type === \"AwaitExpression\" || node.type === \"BinaryExpression\" || node.type === \"ConditionalExpression\" || node.type === \"LogicalExpression\" || node.type === \"NewExpression\" || node.type === \"ObjectExpression\" || node.type === \"ParenthesizedExpression\" || node.type === \"SequenceExpression\" || node.type === \"TaggedTemplateExpression\" || node.type === \"UnaryExpression\" || node.type === \"UpdateExpression\" || node.type === \"YieldExpression\")) {\r\n      return true;\r\n    }\r\n\r\n    if (parent.type === \"ExportDefaultDeclaration\") {\r\n      return (// `export default function` or `export default class` can't be followed by\r\n        // anything after. So an expression like `export default (function(){}).toString()`\r\n        // needs to be followed by a parentheses\r\n        shouldWrapFunctionForExportDefault(path, options) || // `export default (foo, bar)` also needs parentheses\r\n        node.type === \"SequenceExpression\"\r\n      );\r\n    }\r\n\r\n    if (parent.type === \"Decorator\" && parent.expression === node) {\r\n      let hasCallExpression = false;\r\n      let hasMemberExpression = false;\r\n      let current = node;\r\n\r\n      while (current) {\r\n        switch (current.type) {\r\n          case \"MemberExpression\":\r\n            hasMemberExpression = true;\r\n            current = current.object;\r\n            break;\r\n\r\n          case \"CallExpression\":\r\n            if (\r\n            /** @(x().y) */\r\n            hasMemberExpression ||\r\n            /** @(x().y()) */\r\n            hasCallExpression) {\r\n              return true;\r\n            }\r\n\r\n            hasCallExpression = true;\r\n            current = current.callee;\r\n            break;\r\n\r\n          case \"Identifier\":\r\n            return false;\r\n\r\n          default:\r\n            return true;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    if (parent.type === \"ArrowFunctionExpression\" && parent.body === node && node.type !== \"SequenceExpression\" && // these have parens added anyway\r\n    util$1.startsWithNoLookaheadToken(node,\r\n    /* forbidFunctionClassAndDoExpr */\r\n    false) || parent.type === \"ExpressionStatement\" && util$1.startsWithNoLookaheadToken(node,\r\n    /* forbidFunctionClassAndDoExpr */\r\n    true)) {\r\n      return true;\r\n    }\r\n\r\n    switch (node.type) {\r\n      case \"SpreadElement\":\r\n      case \"SpreadProperty\":\r\n        return parent.type === \"MemberExpression\" && name === \"object\" && parent.object === node;\r\n\r\n      case \"UpdateExpression\":\r\n        if (parent.type === \"UnaryExpression\") {\r\n          return node.prefix && (node.operator === \"++\" && parent.operator === \"+\" || node.operator === \"--\" && parent.operator === \"-\");\r\n        }\r\n\r\n      // else fallthrough\r\n\r\n      case \"UnaryExpression\":\r\n        switch (parent.type) {\r\n          case \"UnaryExpression\":\r\n            return node.operator === parent.operator && (node.operator === \"+\" || node.operator === \"-\");\r\n\r\n          case \"BindExpression\":\r\n            return true;\r\n\r\n          case \"MemberExpression\":\r\n          case \"OptionalMemberExpression\":\r\n            return name === \"object\";\r\n\r\n          case \"TaggedTemplateExpression\":\r\n            return true;\r\n\r\n          case \"NewExpression\":\r\n          case \"CallExpression\":\r\n          case \"OptionalCallExpression\":\r\n            return name === \"callee\";\r\n\r\n          case \"BinaryExpression\":\r\n            return parent.operator === \"**\" && name === \"left\";\r\n\r\n          case \"TSNonNullExpression\":\r\n            return true;\r\n\r\n          default:\r\n            return false;\r\n        }\r\n\r\n      case \"BinaryExpression\":\r\n        {\r\n          if (parent.type === \"UpdateExpression\") {\r\n            return true;\r\n          }\r\n\r\n          const isLeftOfAForStatement = node => {\r\n            let i = 0;\r\n\r\n            while (node) {\r\n              const parent = path.getParentNode(i++);\r\n\r\n              if (!parent) {\r\n                return false;\r\n              }\r\n\r\n              if (parent.type === \"ForStatement\" && parent.init === node) {\r\n                return true;\r\n              }\r\n\r\n              node = parent;\r\n            }\r\n\r\n            return false;\r\n          };\r\n\r\n          if (node.operator === \"in\" && isLeftOfAForStatement(node)) {\r\n            return true;\r\n          }\r\n        }\r\n      // fallthrough\r\n\r\n      case \"TSTypeAssertion\":\r\n      case \"TSAsExpression\":\r\n      case \"LogicalExpression\":\r\n        switch (parent.type) {\r\n          case \"ConditionalExpression\":\r\n            return node.type === \"TSAsExpression\";\r\n\r\n          case \"CallExpression\":\r\n          case \"NewExpression\":\r\n          case \"OptionalCallExpression\":\r\n            return name === \"callee\";\r\n\r\n          case \"ClassExpression\":\r\n          case \"ClassDeclaration\":\r\n            return name === \"superClass\" && parent.superClass === node;\r\n\r\n          case \"TSTypeAssertion\":\r\n          case \"TaggedTemplateExpression\":\r\n          case \"UnaryExpression\":\r\n          case \"JSXSpreadAttribute\":\r\n          case \"SpreadElement\":\r\n          case \"SpreadProperty\":\r\n          case \"BindExpression\":\r\n          case \"AwaitExpression\":\r\n          case \"TSAsExpression\":\r\n          case \"TSNonNullExpression\":\r\n          case \"UpdateExpression\":\r\n            return true;\r\n\r\n          case \"MemberExpression\":\r\n          case \"OptionalMemberExpression\":\r\n            return name === \"object\";\r\n\r\n          case \"AssignmentExpression\":\r\n            return parent.left === node && (node.type === \"TSTypeAssertion\" || node.type === \"TSAsExpression\");\r\n\r\n          case \"LogicalExpression\":\r\n            if (node.type === \"LogicalExpression\") {\r\n              return parent.operator !== node.operator;\r\n            }\r\n\r\n          // else fallthrough\r\n\r\n          case \"BinaryExpression\":\r\n            {\r\n              if (!node.operator && node.type !== \"TSTypeAssertion\") {\r\n                return true;\r\n              }\r\n\r\n              const po = parent.operator;\r\n              const pp = util$1.getPrecedence(po);\r\n              const no = node.operator;\r\n              const np = util$1.getPrecedence(no);\r\n\r\n              if (pp > np) {\r\n                return true;\r\n              }\r\n\r\n              if (pp === np && name === \"right\") {\r\n                assert.strictEqual(parent.right, node);\r\n                return true;\r\n              }\r\n\r\n              if (pp === np && !util$1.shouldFlatten(po, no)) {\r\n                return true;\r\n              }\r\n\r\n              if (pp < np && no === \"%\") {\r\n                return po === \"+\" || po === \"-\";\r\n              } // Add parenthesis when working with bitwise operators\r\n              // It's not strictly needed but helps with code understanding\r\n\r\n\r\n              if (util$1.isBitwiseOperator(po)) {\r\n                return true;\r\n              }\r\n\r\n              return false;\r\n            }\r\n\r\n          default:\r\n            return false;\r\n        }\r\n\r\n      case \"SequenceExpression\":\r\n        switch (parent.type) {\r\n          case \"ReturnStatement\":\r\n            return false;\r\n\r\n          case \"ForStatement\":\r\n            // Although parentheses wouldn't hurt around sequence\r\n            // expressions in the head of for loops, traditional style\r\n            // dictates that e.g. i++, j++ should not be wrapped with\r\n            // parentheses.\r\n            return false;\r\n\r\n          case \"ExpressionStatement\":\r\n            return name !== \"expression\";\r\n\r\n          case \"ArrowFunctionExpression\":\r\n            // We do need parentheses, but SequenceExpressions are handled\r\n            // specially when printing bodies of arrow functions.\r\n            return name !== \"body\";\r\n\r\n          default:\r\n            // Otherwise err on the side of overparenthesization, adding\r\n            // explicit exceptions above if this proves overzealous.\r\n            return true;\r\n        }\r\n\r\n      case \"YieldExpression\":\r\n        if (parent.type === \"UnaryExpression\" || parent.type === \"AwaitExpression\" || parent.type === \"TSAsExpression\" || parent.type === \"TSNonNullExpression\") {\r\n          return true;\r\n        }\r\n\r\n      // else fallthrough\r\n\r\n      case \"AwaitExpression\":\r\n        switch (parent.type) {\r\n          case \"TaggedTemplateExpression\":\r\n          case \"UnaryExpression\":\r\n          case \"BinaryExpression\":\r\n          case \"LogicalExpression\":\r\n          case \"SpreadElement\":\r\n          case \"SpreadProperty\":\r\n          case \"TSAsExpression\":\r\n          case \"TSNonNullExpression\":\r\n          case \"BindExpression\":\r\n            return true;\r\n\r\n          case \"MemberExpression\":\r\n          case \"OptionalMemberExpression\":\r\n            return name === \"object\";\r\n\r\n          case \"NewExpression\":\r\n          case \"CallExpression\":\r\n          case \"OptionalCallExpression\":\r\n            return name === \"callee\";\r\n\r\n          case \"ConditionalExpression\":\r\n            return parent.test === node;\r\n\r\n          default:\r\n            return false;\r\n        }\r\n\r\n      case \"TSJSDocFunctionType\":\r\n      case \"TSConditionalType\":\r\n        if (parent.type === \"TSConditionalType\" && node === parent.extendsType) {\r\n          return true;\r\n        }\r\n\r\n      // fallthrough\r\n\r\n      case \"TSFunctionType\":\r\n      case \"TSConstructorType\":\r\n        if (parent.type === \"TSConditionalType\" && node === parent.checkType) {\r\n          return true;\r\n        }\r\n\r\n      // fallthrough\r\n\r\n      case \"TSUnionType\":\r\n      case \"TSIntersectionType\":\r\n        if (parent.type === \"TSUnionType\" || parent.type === \"TSIntersectionType\") {\r\n          return true;\r\n        }\r\n\r\n      // fallthrough\r\n\r\n      case \"TSTypeOperator\":\r\n      case \"TSInferType\":\r\n        return parent.type === \"TSArrayType\" || parent.type === \"TSOptionalType\" || parent.type === \"TSRestType\" || parent.type === \"TSIndexedAccessType\" && node === parent.objectType || parent.type === \"TSTypeOperator\" || parent.type === \"TSTypeAnnotation\" && /^TSJSDoc/.test(path.getParentNode(1).type);\r\n\r\n      case \"ArrayTypeAnnotation\":\r\n        return parent.type === \"NullableTypeAnnotation\";\r\n\r\n      case \"IntersectionTypeAnnotation\":\r\n      case \"UnionTypeAnnotation\":\r\n        return parent.type === \"ArrayTypeAnnotation\" || parent.type === \"NullableTypeAnnotation\" || parent.type === \"IntersectionTypeAnnotation\" || parent.type === \"UnionTypeAnnotation\";\r\n\r\n      case \"NullableTypeAnnotation\":\r\n        return parent.type === \"ArrayTypeAnnotation\";\r\n\r\n      case \"FunctionTypeAnnotation\":\r\n        {\r\n          const ancestor = parent.type === \"NullableTypeAnnotation\" ? path.getParentNode(1) : parent;\r\n          return ancestor.type === \"UnionTypeAnnotation\" || ancestor.type === \"IntersectionTypeAnnotation\" || ancestor.type === \"ArrayTypeAnnotation\" || // We should check ancestor's parent to know whether the parentheses\r\n          // are really needed, but since ??T doesn't make sense this check\r\n          // will almost never be true.\r\n          ancestor.type === \"NullableTypeAnnotation\";\r\n        }\r\n\r\n      case \"StringLiteral\":\r\n      case \"NumericLiteral\":\r\n      case \"Literal\":\r\n        if (typeof node.value === \"string\" && parent.type === \"ExpressionStatement\" && ( // TypeScript workaround for https://github.com/JamesHenry/typescript-estree/issues/2\r\n        // See corresponding workaround in printer.js case: \"Literal\"\r\n        options.parser !== \"typescript\" && !parent.directive || options.parser === \"typescript\" && options.originalText.charAt(options.locStart(node) - 1) === \"(\")) {\r\n          // To avoid becoming a directive\r\n          const grandParent = path.getParentNode(1);\r\n          return grandParent.type === \"Program\" || grandParent.type === \"BlockStatement\";\r\n        }\r\n\r\n        return parent.type === \"MemberExpression\" && typeof node.value === \"number\" && name === \"object\" && parent.object === node;\r\n\r\n      case \"AssignmentExpression\":\r\n        {\r\n          const grandParent = path.getParentNode(1);\r\n\r\n          if (parent.type === \"ArrowFunctionExpression\" && parent.body === node) {\r\n            return true;\r\n          } else if (parent.type === \"ClassProperty\" && parent.key === node && parent.computed) {\r\n            return false;\r\n          } else if (parent.type === \"TSPropertySignature\" && parent.name === node) {\r\n            return false;\r\n          } else if (parent.type === \"ForStatement\" && (parent.init === node || parent.update === node)) {\r\n            return false;\r\n          } else if (parent.type === \"ExpressionStatement\") {\r\n            return node.left.type === \"ObjectPattern\";\r\n          } else if (parent.type === \"TSPropertySignature\" && parent.key === node) {\r\n            return false;\r\n          } else if (parent.type === \"AssignmentExpression\") {\r\n            return false;\r\n          } else if (parent.type === \"SequenceExpression\" && grandParent && grandParent.type === \"ForStatement\" && (grandParent.init === parent || grandParent.update === parent)) {\r\n            return false;\r\n          } else if (parent.type === \"Property\" && parent.value === node) {\r\n            return false;\r\n          } else if (parent.type === \"NGChainedExpression\") {\r\n            return false;\r\n          }\r\n\r\n          return true;\r\n        }\r\n\r\n      case \"ConditionalExpression\":\r\n        switch (parent.type) {\r\n          case \"TaggedTemplateExpression\":\r\n          case \"UnaryExpression\":\r\n          case \"SpreadElement\":\r\n          case \"SpreadProperty\":\r\n          case \"BinaryExpression\":\r\n          case \"LogicalExpression\":\r\n          case \"NGPipeExpression\":\r\n          case \"ExportDefaultDeclaration\":\r\n          case \"AwaitExpression\":\r\n          case \"JSXSpreadAttribute\":\r\n          case \"TSTypeAssertion\":\r\n          case \"TypeCastExpression\":\r\n          case \"TSAsExpression\":\r\n          case \"TSNonNullExpression\":\r\n            return true;\r\n\r\n          case \"NewExpression\":\r\n          case \"CallExpression\":\r\n          case \"OptionalCallExpression\":\r\n            return name === \"callee\";\r\n\r\n          case \"ConditionalExpression\":\r\n            return name === \"test\" && parent.test === node;\r\n\r\n          case \"MemberExpression\":\r\n          case \"OptionalMemberExpression\":\r\n            return name === \"object\";\r\n\r\n          default:\r\n            return false;\r\n        }\r\n\r\n      case \"FunctionExpression\":\r\n        switch (parent.type) {\r\n          case \"NewExpression\":\r\n          case \"CallExpression\":\r\n          case \"OptionalCallExpression\":\r\n            // Not always necessary, but it's clearer to the reader if IIFEs are wrapped in parentheses.\r\n            // Is necessary if it is `expression` of `ExpressionStatement`.\r\n            return name === \"callee\";\r\n\r\n          case \"TaggedTemplateExpression\":\r\n            return true;\r\n          // This is basically a kind of IIFE.\r\n\r\n          default:\r\n            return false;\r\n        }\r\n\r\n      case \"ArrowFunctionExpression\":\r\n        switch (parent.type) {\r\n          case \"NewExpression\":\r\n          case \"CallExpression\":\r\n          case \"OptionalCallExpression\":\r\n            return name === \"callee\";\r\n\r\n          case \"MemberExpression\":\r\n          case \"OptionalMemberExpression\":\r\n            return name === \"object\";\r\n\r\n          case \"TSAsExpression\":\r\n          case \"BindExpression\":\r\n          case \"TaggedTemplateExpression\":\r\n          case \"UnaryExpression\":\r\n          case \"LogicalExpression\":\r\n          case \"BinaryExpression\":\r\n          case \"AwaitExpression\":\r\n          case \"TSTypeAssertion\":\r\n            return true;\r\n\r\n          case \"ConditionalExpression\":\r\n            return name === \"test\";\r\n\r\n          default:\r\n            return false;\r\n        }\r\n\r\n      case \"ClassExpression\":\r\n        switch (parent.type) {\r\n          case \"NewExpression\":\r\n            return name === \"callee\" && parent.callee === node;\r\n\r\n          default:\r\n            return false;\r\n        }\r\n\r\n      case \"OptionalMemberExpression\":\r\n      case \"OptionalCallExpression\":\r\n        if (parent.type === \"MemberExpression\" && name === \"object\" || (parent.type === \"CallExpression\" || parent.type === \"NewExpression\") && name === \"callee\") {\r\n          return true;\r\n        }\r\n\r\n      // fallthrough\r\n\r\n      case \"CallExpression\":\r\n      case \"MemberExpression\":\r\n      case \"TaggedTemplateExpression\":\r\n      case \"TSNonNullExpression\":\r\n        if ((parent.type === \"BindExpression\" || parent.type === \"NewExpression\") && name === \"callee\") {\r\n          let object = node;\r\n\r\n          while (object) {\r\n            switch (object.type) {\r\n              case \"CallExpression\":\r\n              case \"OptionalCallExpression\":\r\n                return true;\r\n\r\n              case \"MemberExpression\":\r\n              case \"OptionalMemberExpression\":\r\n              case \"BindExpression\":\r\n                object = object.object;\r\n                break;\r\n              // tagged templates are basically member expressions from a grammar perspective\r\n              // see https://tc39.github.io/ecma262/#prod-MemberExpression\r\n\r\n              case \"TaggedTemplateExpression\":\r\n                object = object.tag;\r\n                break;\r\n\r\n              case \"TSNonNullExpression\":\r\n                object = object.expression;\r\n                break;\r\n\r\n              default:\r\n                return false;\r\n            }\r\n          }\r\n        }\r\n\r\n        return false;\r\n\r\n      case \"BindExpression\":\r\n        return (parent.type === \"BindExpression\" || parent.type === \"NewExpression\") && name === \"callee\" || (parent.type === \"MemberExpression\" || parent.type === \"OptionalMemberExpression\") && name === \"object\";\r\n\r\n      case \"NGPipeExpression\":\r\n        if (parent.type === \"NGRoot\" || parent.type === \"NGMicrosyntaxExpression\" || parent.type === \"ObjectProperty\" || parent.type === \"ArrayExpression\" || (parent.type === \"CallExpression\" || parent.type === \"OptionalCallExpression\") && parent.arguments[name] === node || parent.type === \"NGPipeExpression\" && name === \"right\" || parent.type === \"MemberExpression\" && name === \"property\" || parent.type === \"AssignmentExpression\") {\r\n          return false;\r\n        }\r\n\r\n        return true;\r\n\r\n      case \"JSXFragment\":\r\n      case \"JSXElement\":\r\n        return name === \"callee\" || parent.type !== \"ArrayExpression\" && parent.type !== \"ArrowFunctionExpression\" && parent.type !== \"AssignmentExpression\" && parent.type !== \"AssignmentPattern\" && parent.type !== \"BinaryExpression\" && parent.type !== \"CallExpression\" && parent.type !== \"NewExpression\" && parent.type !== \"ConditionalExpression\" && parent.type !== \"ExpressionStatement\" && parent.type !== \"JsExpressionRoot\" && parent.type !== \"JSXAttribute\" && parent.type !== \"JSXElement\" && parent.type !== \"JSXExpressionContainer\" && parent.type !== \"JSXFragment\" && parent.type !== \"LogicalExpression\" && parent.type !== \"ObjectProperty\" && parent.type !== \"OptionalCallExpression\" && parent.type !== \"Property\" && parent.type !== \"ReturnStatement\" && parent.type !== \"ThrowStatement\" && parent.type !== \"TypeCastExpression\" && parent.type !== \"VariableDeclarator\" && parent.type !== \"YieldExpression\";\r\n\r\n      case \"TypeAnnotation\":\r\n        return name === \"returnType\" && parent.type === \"ArrowFunctionExpression\" && includesFunctionTypeInObjectType(node);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function isStatement(node) {\r\n    return node.type === \"BlockStatement\" || node.type === \"BreakStatement\" || node.type === \"ClassBody\" || node.type === \"ClassDeclaration\" || node.type === \"ClassMethod\" || node.type === \"ClassProperty\" || node.type === \"ClassPrivateProperty\" || node.type === \"ContinueStatement\" || node.type === \"DebuggerStatement\" || node.type === \"DeclareClass\" || node.type === \"DeclareExportAllDeclaration\" || node.type === \"DeclareExportDeclaration\" || node.type === \"DeclareFunction\" || node.type === \"DeclareInterface\" || node.type === \"DeclareModule\" || node.type === \"DeclareModuleExports\" || node.type === \"DeclareVariable\" || node.type === \"DoWhileStatement\" || node.type === \"EnumDeclaration\" || node.type === \"ExportAllDeclaration\" || node.type === \"ExportDefaultDeclaration\" || node.type === \"ExportNamedDeclaration\" || node.type === \"ExpressionStatement\" || node.type === \"ForInStatement\" || node.type === \"ForOfStatement\" || node.type === \"ForStatement\" || node.type === \"FunctionDeclaration\" || node.type === \"IfStatement\" || node.type === \"ImportDeclaration\" || node.type === \"InterfaceDeclaration\" || node.type === \"LabeledStatement\" || node.type === \"MethodDefinition\" || node.type === \"ReturnStatement\" || node.type === \"SwitchStatement\" || node.type === \"ThrowStatement\" || node.type === \"TryStatement\" || node.type === \"TSDeclareFunction\" || node.type === \"TSEnumDeclaration\" || node.type === \"TSImportEqualsDeclaration\" || node.type === \"TSInterfaceDeclaration\" || node.type === \"TSModuleDeclaration\" || node.type === \"TSNamespaceExportDeclaration\" || node.type === \"TypeAlias\" || node.type === \"VariableDeclaration\" || node.type === \"WhileStatement\" || node.type === \"WithStatement\";\r\n  }\r\n\r\n  function includesFunctionTypeInObjectType(node) {\r\n    return hasNode$1(node, n1 => n1.type === \"ObjectTypeAnnotation\" && hasNode$1(n1, n2 => n2.type === \"FunctionTypeAnnotation\" || undefined) || undefined);\r\n  }\r\n\r\n  function endsWithRightBracket(node) {\r\n    switch (node.type) {\r\n      case \"ObjectExpression\":\r\n        return true;\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  function isFollowedByRightBracket(path) {\r\n    const node = path.getValue();\r\n    const parent = path.getParentNode();\r\n    const name = path.getName();\r\n\r\n    switch (parent.type) {\r\n      case \"NGPipeExpression\":\r\n        if (typeof name === \"number\" && parent.arguments[name] === node && parent.arguments.length - 1 === name) {\r\n          return path.callParent(isFollowedByRightBracket);\r\n        }\r\n\r\n        break;\r\n\r\n      case \"ObjectProperty\":\r\n        if (name === \"value\") {\r\n          const parentParent = path.getParentNode(1);\r\n          return parentParent.properties[parentParent.properties.length - 1] === parent;\r\n        }\r\n\r\n        break;\r\n\r\n      case \"BinaryExpression\":\r\n      case \"LogicalExpression\":\r\n        if (name === \"right\") {\r\n          return path.callParent(isFollowedByRightBracket);\r\n        }\r\n\r\n        break;\r\n\r\n      case \"ConditionalExpression\":\r\n        if (name === \"alternate\") {\r\n          return path.callParent(isFollowedByRightBracket);\r\n        }\r\n\r\n        break;\r\n\r\n      case \"UnaryExpression\":\r\n        if (parent.prefix) {\r\n          return path.callParent(isFollowedByRightBracket);\r\n        }\r\n\r\n        break;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function shouldWrapFunctionForExportDefault(path, options) {\r\n    const node = path.getValue();\r\n    const parent = path.getParentNode();\r\n\r\n    if (node.type === \"FunctionExpression\" || node.type === \"ClassExpression\") {\r\n      return parent.type === \"ExportDefaultDeclaration\" || // in some cases the function is already wrapped\r\n      // (e.g. `export default (function() {})();`)\r\n      // in this case we don't need to add extra parens\r\n      !needsParens(path, options);\r\n    }\r\n\r\n    if (!hasNakedLeftSide$1(node) || parent.type !== \"ExportDefaultDeclaration\" && needsParens(path, options)) {\r\n      return false;\r\n    }\r\n\r\n    return path.call(childPath => shouldWrapFunctionForExportDefault(childPath, options), ...getLeftSidePathName$1(path, node));\r\n  }\r\n\r\n  var needsParens_1 = needsParens;\r\n\r\n  const {\r\n    builders: {\r\n      concat: concat$c,\r\n      join: join$8,\r\n      line: line$8\r\n    }\r\n  } = document;\r\n\r\n  function printHtmlBinding(path, options, print) {\r\n    const node = path.getValue();\r\n\r\n    if (options.__onHtmlBindingRoot && path.getName() === null) {\r\n      options.__onHtmlBindingRoot(node, options);\r\n    }\r\n\r\n    if (node.type !== \"File\") {\r\n      return;\r\n    }\r\n\r\n    if (options.__isVueForBindingLeft) {\r\n      return path.call(functionDeclarationPath => {\r\n        const {\r\n          params\r\n        } = functionDeclarationPath.getValue();\r\n        return concat$c([params.length > 1 ? \"(\" : \"\", join$8(concat$c([\",\", line$8]), functionDeclarationPath.map(print, \"params\")), params.length > 1 ? \")\" : \"\"]);\r\n      }, \"program\", \"body\", 0);\r\n    }\r\n\r\n    if (options.__isVueSlotScope) {\r\n      return path.call(functionDeclarationPath => join$8(concat$c([\",\", line$8]), functionDeclarationPath.map(print, \"params\")), \"program\", \"body\", 0);\r\n    }\r\n  } // based on https://github.com/prettier/prettier/blob/master/src/language-html/syntax-vue.js isVueEventBindingExpression()\r\n\r\n\r\n  function isVueEventBindingExpression$2(node) {\r\n    switch (node.type) {\r\n      case \"MemberExpression\":\r\n        switch (node.property.type) {\r\n          case \"Identifier\":\r\n          case \"NumericLiteral\":\r\n          case \"StringLiteral\":\r\n            return isVueEventBindingExpression$2(node.object);\r\n        }\r\n\r\n        return false;\r\n\r\n      case \"Identifier\":\r\n        return true;\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  var htmlBinding = {\r\n    isVueEventBindingExpression: isVueEventBindingExpression$2,\r\n    printHtmlBinding\r\n  };\r\n\r\n  function preprocess$1(ast, options) {\r\n    switch (options.parser) {\r\n      case \"json\":\r\n      case \"json5\":\r\n      case \"json-stringify\":\r\n      case \"__js_expression\":\r\n      case \"__vue_expression\":\r\n        return Object.assign({}, ast, {\r\n          type: options.parser.startsWith(\"__\") ? \"JsExpressionRoot\" : \"JsonRoot\",\r\n          node: ast,\r\n          comments: [],\r\n          rootMarker: options.rootMarker\r\n        });\r\n\r\n      default:\r\n        return ast;\r\n    }\r\n  }\r\n\r\n  var preprocess_1$1 = preprocess$1;\r\n\r\n  const {\r\n    shouldFlatten: shouldFlatten$1,\r\n    getNextNonSpaceNonCommentCharacter: getNextNonSpaceNonCommentCharacter$1,\r\n    hasNewline: hasNewline$5,\r\n    hasNewlineInRange: hasNewlineInRange$3,\r\n    getLast: getLast$3,\r\n    getStringWidth: getStringWidth$3,\r\n    printString: printString$2,\r\n    printNumber: printNumber$2,\r\n    hasIgnoreComment: hasIgnoreComment$4,\r\n    hasNodeIgnoreComment: hasNodeIgnoreComment$2,\r\n    getPenultimate: getPenultimate$1,\r\n    startsWithNoLookaheadToken: startsWithNoLookaheadToken$1,\r\n    getIndentSize: getIndentSize$2,\r\n    getPreferredQuote: getPreferredQuote$1\r\n  } = util$1;\r\n  const {\r\n    isNextLineEmpty: isNextLineEmpty$4,\r\n    isNextLineEmptyAfterIndex: isNextLineEmptyAfterIndex$2,\r\n    getNextNonSpaceNonCommentCharacterIndex: getNextNonSpaceNonCommentCharacterIndex$3\r\n  } = utilShared;\r\n  const {\r\n    insertPragma: insertPragma$7\r\n  } = pragma;\r\n  const {\r\n    printHtmlBinding: printHtmlBinding$1,\r\n    isVueEventBindingExpression: isVueEventBindingExpression$3\r\n  } = htmlBinding;\r\n  const {\r\n    classChildNeedsASIProtection: classChildNeedsASIProtection$1,\r\n    classPropMayCauseASIProblems: classPropMayCauseASIProblems$1,\r\n    conditionalExpressionChainContainsJSX: conditionalExpressionChainContainsJSX$1,\r\n    getFlowVariance: getFlowVariance$1,\r\n    getLeftSidePathName: getLeftSidePathName$2,\r\n    getParentExportDeclaration: getParentExportDeclaration$1,\r\n    getTypeScriptMappedTypeModifier: getTypeScriptMappedTypeModifier$1,\r\n    hasDanglingComments: hasDanglingComments$1,\r\n    hasFlowAnnotationComment: hasFlowAnnotationComment$1,\r\n    hasFlowShorthandAnnotationComment: hasFlowShorthandAnnotationComment$2,\r\n    hasLeadingComment: hasLeadingComment$3,\r\n    hasLeadingOwnLineComment: hasLeadingOwnLineComment$1,\r\n    hasNakedLeftSide: hasNakedLeftSide$2,\r\n    hasNewlineBetweenOrAfterDecorators: hasNewlineBetweenOrAfterDecorators$1,\r\n    hasNgSideEffect: hasNgSideEffect$1,\r\n    hasPrettierIgnore: hasPrettierIgnore$5,\r\n    hasTrailingComment: hasTrailingComment$1,\r\n    identity: identity$2,\r\n    isBinaryish: isBinaryish$1,\r\n    isCallOrOptionalCallExpression: isCallOrOptionalCallExpression$1,\r\n    isEmptyJSXElement: isEmptyJSXElement$1,\r\n    isExportDeclaration: isExportDeclaration$1,\r\n    isFlowAnnotationComment: isFlowAnnotationComment$1,\r\n    isFunctionCompositionArgs: isFunctionCompositionArgs$1,\r\n    isFunctionNotation: isFunctionNotation$1,\r\n    isFunctionOrArrowExpression: isFunctionOrArrowExpression$1,\r\n    isGetterOrSetter: isGetterOrSetter$1,\r\n    isJestEachTemplateLiteral: isJestEachTemplateLiteral$1,\r\n    isJSXNode: isJSXNode$1,\r\n    isJSXWhitespaceExpression: isJSXWhitespaceExpression$1,\r\n    isLastStatement: isLastStatement$1,\r\n    isLiteral: isLiteral$1,\r\n    isLongCurriedCallExpression: isLongCurriedCallExpression$1,\r\n    isMeaningfulJSXText: isMeaningfulJSXText$1,\r\n    isMemberExpressionChain: isMemberExpressionChain$1,\r\n    isMemberish: isMemberish$1,\r\n    isNgForOf: isNgForOf$1,\r\n    isNumericLiteral: isNumericLiteral$1,\r\n    isObjectType: isObjectType$1,\r\n    isObjectTypePropertyAFunction: isObjectTypePropertyAFunction$1,\r\n    isSimpleCallArgument: isSimpleCallArgument$1,\r\n    isSimpleFlowType: isSimpleFlowType$1,\r\n    isSimpleTemplateLiteral: isSimpleTemplateLiteral$1,\r\n    isStringLiteral: isStringLiteral$1,\r\n    isStringPropSafeToCoerceToIdentifier: isStringPropSafeToCoerceToIdentifier$1,\r\n    isTemplateOnItsOwnLine: isTemplateOnItsOwnLine$1,\r\n    isTestCall: isTestCall$1,\r\n    isTheOnlyJSXElementInMarkdown: isTheOnlyJSXElementInMarkdown$1,\r\n    isTSXFile: isTSXFile$1,\r\n    isTypeAnnotationAFunction: isTypeAnnotationAFunction$1,\r\n    matchJsxWhitespaceRegex: matchJsxWhitespaceRegex$1,\r\n    needsHardlineAfterDanglingComment: needsHardlineAfterDanglingComment$1,\r\n    rawText: rawText$1,\r\n    returnArgumentHasLeadingComment: returnArgumentHasLeadingComment$1\r\n  } = utils$5;\r\n  const needsQuoteProps = new WeakMap();\r\n  const {\r\n    builders: {\r\n      concat: concat$d,\r\n      join: join$9,\r\n      line: line$9,\r\n      hardline: hardline$9,\r\n      softline: softline$6,\r\n      literalline: literalline$4,\r\n      group: group$b,\r\n      indent: indent$7,\r\n      align: align$1,\r\n      conditionalGroup: conditionalGroup$1,\r\n      fill: fill$4,\r\n      ifBreak: ifBreak$6,\r\n      breakParent: breakParent$3,\r\n      lineSuffixBoundary: lineSuffixBoundary$1,\r\n      addAlignmentToDoc: addAlignmentToDoc$2,\r\n      dedent: dedent$2\r\n    },\r\n    utils: {\r\n      willBreak: willBreak$1,\r\n      isLineNext: isLineNext$1,\r\n      isEmpty: isEmpty$1,\r\n      removeLines: removeLines$2\r\n    },\r\n    printer: {\r\n      printDocToString: printDocToString$2\r\n    }\r\n  } = document;\r\n  let uid = 0;\r\n\r\n  function shouldPrintComma$1(options, level) {\r\n    level = level || \"es5\";\r\n\r\n    switch (options.trailingComma) {\r\n      case \"all\":\r\n        if (level === \"all\") {\r\n          return true;\r\n        }\r\n\r\n      // fallthrough\r\n\r\n      case \"es5\":\r\n        if (level === \"es5\") {\r\n          return true;\r\n        }\r\n\r\n      // fallthrough\r\n\r\n      case \"none\":\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  function genericPrint$3(path, options, printPath, args) {\r\n    const node = path.getValue();\r\n    let needsParens = false;\r\n    const linesWithoutParens = printPathNoParens(path, options, printPath, args);\r\n\r\n    if (!node || isEmpty$1(linesWithoutParens)) {\r\n      return linesWithoutParens;\r\n    }\r\n\r\n    const parentExportDecl = getParentExportDeclaration$1(path);\r\n    const decorators = [];\r\n\r\n    if (node.type === \"ClassMethod\" || node.type === \"ClassPrivateMethod\" || node.type === \"ClassProperty\" || node.type === \"TSAbstractClassProperty\" || node.type === \"ClassPrivateProperty\" || node.type === \"MethodDefinition\" || node.type === \"TSAbstractMethodDefinition\" || node.type === \"TSDeclareMethod\") ; else if (node.decorators && node.decorators.length > 0 && // If the parent node is an export declaration and the decorator\r\n    // was written before the export, the export will be responsible\r\n    // for printing the decorators.\r\n    !(parentExportDecl && options.locStart(parentExportDecl, {\r\n      ignoreDecorators: true\r\n    }) > options.locStart(node.decorators[0]))) {\r\n      const shouldBreak = node.type === \"ClassExpression\" || node.type === \"ClassDeclaration\" || hasNewlineBetweenOrAfterDecorators$1(node, options);\r\n      const separator = shouldBreak ? hardline$9 : line$9;\r\n      path.each(decoratorPath => {\r\n        let decorator = decoratorPath.getValue();\r\n\r\n        if (decorator.expression) {\r\n          decorator = decorator.expression;\r\n        } else {\r\n          decorator = decorator.callee;\r\n        }\r\n\r\n        decorators.push(printPath(decoratorPath), separator);\r\n      }, \"decorators\");\r\n\r\n      if (parentExportDecl) {\r\n        decorators.unshift(hardline$9);\r\n      }\r\n    } else if (isExportDeclaration$1(node) && node.declaration && node.declaration.decorators && node.declaration.decorators.length > 0 && // Only print decorators here if they were written before the export,\r\n    // otherwise they are printed by the node.declaration\r\n    options.locStart(node, {\r\n      ignoreDecorators: true\r\n    }) > options.locStart(node.declaration.decorators[0])) {\r\n      // Export declarations are responsible for printing any decorators\r\n      // that logically apply to node.declaration.\r\n      path.each(decoratorPath => {\r\n        const decorator = decoratorPath.getValue();\r\n        const prefix = decorator.type === \"Decorator\" ? \"\" : \"@\";\r\n        decorators.push(prefix, printPath(decoratorPath), hardline$9);\r\n      }, \"declaration\", \"decorators\");\r\n    } else {\r\n      // Nodes with decorators can't have parentheses, so we can avoid\r\n      // computing pathNeedsParens() except in this case.\r\n      needsParens = needsParens_1(path, options);\r\n    }\r\n\r\n    const parts = [];\r\n\r\n    if (needsParens) {\r\n      parts.unshift(\"(\");\r\n    }\r\n\r\n    parts.push(linesWithoutParens);\r\n\r\n    if (needsParens) {\r\n      const node = path.getValue();\r\n\r\n      if (hasFlowShorthandAnnotationComment$2(node)) {\r\n        parts.push(\" /*\");\r\n        parts.push(node.trailingComments[0].value.trimStart());\r\n        parts.push(\"*/\");\r\n        node.trailingComments[0].printed = true;\r\n      }\r\n\r\n      parts.push(\")\");\r\n    }\r\n\r\n    if (decorators.length > 0) {\r\n      return group$b(concat$d(decorators.concat(parts)));\r\n    }\r\n\r\n    return concat$d(parts);\r\n  }\r\n\r\n  function printDecorators(path, options, print) {\r\n    const node = path.getValue();\r\n    return group$b(concat$d([join$9(line$9, path.map(print, \"decorators\")), hasNewlineBetweenOrAfterDecorators$1(node, options) ? hardline$9 : line$9]));\r\n  }\r\n  /**\r\n   * The following is the shared logic for\r\n   * ternary operators, namely ConditionalExpression\r\n   * and TSConditionalType\r\n   * @typedef {Object} OperatorOptions\r\n   * @property {() => Array<string | Doc>} beforeParts - Parts to print before the `?`.\r\n   * @property {(breakClosingParen: boolean) => Array<string | Doc>} afterParts - Parts to print after the conditional expression.\r\n   * @property {boolean} shouldCheckJsx - Whether to check for and print in JSX mode.\r\n   * @property {string} conditionalNodeType - The type of the conditional expression node, ie \"ConditionalExpression\" or \"TSConditionalType\".\r\n   * @property {string} consequentNodePropertyName - The property at which the consequent node can be found on the main node, eg \"consequent\".\r\n   * @property {string} alternateNodePropertyName - The property at which the alternate node can be found on the main node, eg \"alternate\".\r\n   * @property {string[]} testNodePropertyNames - The properties at which the test nodes can be found on the main node, eg \"test\".\r\n   * @param {FastPath} path - The path to the ConditionalExpression/TSConditionalType node.\r\n   * @param {Options} options - Prettier options\r\n   * @param {Function} print - Print function to call recursively\r\n   * @param {OperatorOptions} operatorOptions\r\n   * @returns Doc\r\n   */\r\n\r\n\r\n  function printTernaryOperator(path, options, print, operatorOptions) {\r\n    const node = path.getValue();\r\n    const consequentNode = node[operatorOptions.consequentNodePropertyName];\r\n    const alternateNode = node[operatorOptions.alternateNodePropertyName];\r\n    const parts = []; // We print a ConditionalExpression in either \"JSX mode\" or \"normal mode\".\r\n    // See tests/jsx/conditional-expression.js for more info.\r\n\r\n    let jsxMode = false;\r\n    const parent = path.getParentNode();\r\n    const isParentTest = parent.type === operatorOptions.conditionalNodeType && operatorOptions.testNodePropertyNames.some(prop => parent[prop] === node);\r\n    let forceNoIndent = parent.type === operatorOptions.conditionalNodeType && !isParentTest; // Find the outermost non-ConditionalExpression parent, and the outermost\r\n    // ConditionalExpression parent. We'll use these to determine if we should\r\n    // print in JSX mode.\r\n\r\n    let currentParent;\r\n    let previousParent;\r\n    let i = 0;\r\n\r\n    do {\r\n      previousParent = currentParent || node;\r\n      currentParent = path.getParentNode(i);\r\n      i++;\r\n    } while (currentParent && currentParent.type === operatorOptions.conditionalNodeType && operatorOptions.testNodePropertyNames.every(prop => currentParent[prop] !== previousParent));\r\n\r\n    const firstNonConditionalParent = currentParent || parent;\r\n    const lastConditionalParent = previousParent;\r\n\r\n    if (operatorOptions.shouldCheckJsx && (isJSXNode$1(node[operatorOptions.testNodePropertyNames[0]]) || isJSXNode$1(consequentNode) || isJSXNode$1(alternateNode) || conditionalExpressionChainContainsJSX$1(lastConditionalParent))) {\r\n      jsxMode = true;\r\n      forceNoIndent = true; // Even though they don't need parens, we wrap (almost) everything in\r\n      // parens when using ?: within JSX, because the parens are analogous to\r\n      // curly braces in an if statement.\r\n\r\n      const wrap = doc => concat$d([ifBreak$6(\"(\", \"\"), indent$7(concat$d([softline$6, doc])), softline$6, ifBreak$6(\")\", \"\")]); // The only things we don't wrap are:\r\n      // * Nested conditional expressions in alternates\r\n      // * null\r\n      // * undefined\r\n\r\n\r\n      const isNil = node => node.type === \"NullLiteral\" || node.type === \"Literal\" && node.value === null || node.type === \"Identifier\" && node.name === \"undefined\";\r\n\r\n      parts.push(\" ? \", isNil(consequentNode) ? path.call(print, operatorOptions.consequentNodePropertyName) : wrap(path.call(print, operatorOptions.consequentNodePropertyName)), \" : \", alternateNode.type === operatorOptions.conditionalNodeType || isNil(alternateNode) ? path.call(print, operatorOptions.alternateNodePropertyName) : wrap(path.call(print, operatorOptions.alternateNodePropertyName)));\r\n    } else {\r\n      // normal mode\r\n      const part = concat$d([line$9, \"? \", consequentNode.type === operatorOptions.conditionalNodeType ? ifBreak$6(\"\", \"(\") : \"\", align$1(2, path.call(print, operatorOptions.consequentNodePropertyName)), consequentNode.type === operatorOptions.conditionalNodeType ? ifBreak$6(\"\", \")\") : \"\", line$9, \": \", alternateNode.type === operatorOptions.conditionalNodeType ? path.call(print, operatorOptions.alternateNodePropertyName) : align$1(2, path.call(print, operatorOptions.alternateNodePropertyName))]);\r\n      parts.push(parent.type !== operatorOptions.conditionalNodeType || parent[operatorOptions.alternateNodePropertyName] === node || isParentTest ? part : options.useTabs ? dedent$2(indent$7(part)) : align$1(Math.max(0, options.tabWidth - 2), part));\r\n    } // We want a whole chain of ConditionalExpressions to all\r\n    // break if any of them break. That means we should only group around the\r\n    // outer-most ConditionalExpression.\r\n\r\n\r\n    const maybeGroup = doc => parent === firstNonConditionalParent ? group$b(doc) : doc; // Break the closing paren to keep the chain right after it:\r\n    // (a\r\n    //   ? b\r\n    //   : c\r\n    // ).call()\r\n\r\n\r\n    const breakClosingParen = !jsxMode && (parent.type === \"MemberExpression\" || parent.type === \"OptionalMemberExpression\" || parent.type === \"NGPipeExpression\" && parent.left === node) && !parent.computed;\r\n    const result = maybeGroup(concat$d([].concat((testDoc =>\r\n    /**\r\n     *     a\r\n     *       ? b\r\n     *       : multiline\r\n     *         test\r\n     *         node\r\n     *       ^^ align(2)\r\n     *       ? d\r\n     *       : e\r\n     */\r\n    parent.type === operatorOptions.conditionalNodeType && parent[operatorOptions.alternateNodePropertyName] === node ? align$1(2, testDoc) : testDoc)(concat$d(operatorOptions.beforeParts())), forceNoIndent ? concat$d(parts) : indent$7(concat$d(parts)), operatorOptions.afterParts(breakClosingParen))));\r\n    return isParentTest ? group$b(concat$d([indent$7(concat$d([softline$6, result])), softline$6])) : result;\r\n  }\r\n\r\n  function printPathNoParens(path, options, print, args) {\r\n    const n = path.getValue();\r\n    const semi = options.semi ? \";\" : \"\";\r\n\r\n    if (!n) {\r\n      return \"\";\r\n    }\r\n\r\n    if (typeof n === \"string\") {\r\n      return n;\r\n    }\r\n\r\n    const htmlBinding = printHtmlBinding$1(path, options, print);\r\n\r\n    if (htmlBinding) {\r\n      return htmlBinding;\r\n    }\r\n\r\n    let parts = [];\r\n\r\n    switch (n.type) {\r\n      case \"JsExpressionRoot\":\r\n        return path.call(print, \"node\");\r\n\r\n      case \"JsonRoot\":\r\n        return concat$d([path.call(print, \"node\"), hardline$9]);\r\n\r\n      case \"File\":\r\n        // Print @babel/parser's InterpreterDirective here so that\r\n        // leading comments on the `Program` node get printed after the hashbang.\r\n        if (n.program && n.program.interpreter) {\r\n          parts.push(path.call(programPath => programPath.call(print, \"interpreter\"), \"program\"));\r\n        }\r\n\r\n        parts.push(path.call(print, \"program\"));\r\n        return concat$d(parts);\r\n\r\n      case \"Program\":\r\n        // Babel 6\r\n        if (n.directives) {\r\n          path.each(childPath => {\r\n            parts.push(print(childPath), semi, hardline$9);\r\n\r\n            if (isNextLineEmpty$4(options.originalText, childPath.getValue(), options.locEnd)) {\r\n              parts.push(hardline$9);\r\n            }\r\n          }, \"directives\");\r\n        }\r\n\r\n        parts.push(path.call(bodyPath => {\r\n          return printStatementSequence(bodyPath, options, print);\r\n        }, \"body\"));\r\n        parts.push(comments.printDanglingComments(path, options,\r\n        /* sameIndent */\r\n        true)); // Only force a trailing newline if there were any contents.\r\n\r\n        if (!n.body.every(({\r\n          type\r\n        }) => type === \"EmptyStatement\") || n.comments) {\r\n          parts.push(hardline$9);\r\n        }\r\n\r\n        return concat$d(parts);\r\n      // Babel extension.\r\n\r\n      case \"EmptyStatement\":\r\n        return \"\";\r\n\r\n      case \"ExpressionStatement\":\r\n        // Detect Flow-parsed directives\r\n        if (n.directive) {\r\n          return concat$d([nodeStr(n.expression, options, true), semi]);\r\n        }\r\n\r\n        if (options.parser === \"__vue_event_binding\") {\r\n          const parent = path.getParentNode();\r\n\r\n          if (parent.type === \"Program\" && parent.body.length === 1 && parent.body[0] === n) {\r\n            return concat$d([path.call(print, \"expression\"), isVueEventBindingExpression$3(n.expression) ? \";\" : \"\"]);\r\n          }\r\n        } // Do not append semicolon after the only JSX element in a program\r\n\r\n\r\n        return concat$d([path.call(print, \"expression\"), isTheOnlyJSXElementInMarkdown$1(options, path) ? \"\" : semi]);\r\n      // Babel non-standard node. Used for Closure-style type casts. See postprocess.js.\r\n\r\n      case \"ParenthesizedExpression\":\r\n        {\r\n          const shouldHug = !n.expression.comments;\r\n\r\n          if (shouldHug) {\r\n            return concat$d([\"(\", path.call(print, \"expression\"), \")\"]);\r\n          }\r\n\r\n          return group$b(concat$d([\"(\", indent$7(concat$d([softline$6, path.call(print, \"expression\")])), softline$6, \")\"]));\r\n        }\r\n\r\n      case \"AssignmentExpression\":\r\n        return printAssignment(n.left, path.call(print, \"left\"), concat$d([\" \", n.operator]), n.right, path.call(print, \"right\"), options);\r\n\r\n      case \"BinaryExpression\":\r\n      case \"LogicalExpression\":\r\n      case \"NGPipeExpression\":\r\n        {\r\n          const parent = path.getParentNode();\r\n          const parentParent = path.getParentNode(1);\r\n          const isInsideParenthesis = n !== parent.body && (parent.type === \"IfStatement\" || parent.type === \"WhileStatement\" || parent.type === \"SwitchStatement\" || parent.type === \"DoWhileStatement\");\r\n          const parts = printBinaryishExpressions(path, print, options,\r\n          /* isNested */\r\n          false, isInsideParenthesis); //   if (\r\n          //     this.hasPlugin(\"dynamicImports\") && this.lookahead().type === tt.parenLeft\r\n          //   ) {\r\n          //\r\n          // looks super weird, we want to break the children if the parent breaks\r\n          //\r\n          //   if (\r\n          //     this.hasPlugin(\"dynamicImports\") &&\r\n          //     this.lookahead().type === tt.parenLeft\r\n          //   ) {\r\n\r\n          if (isInsideParenthesis) {\r\n            return concat$d(parts);\r\n          } // Break between the parens in\r\n          // unaries or in a member or specific call expression, i.e.\r\n          //\r\n          //   (\r\n          //     a &&\r\n          //     b &&\r\n          //     c\r\n          //   ).call()\r\n\r\n\r\n          if ((parent.type === \"CallExpression\" || parent.type === \"OptionalCallExpression\") && parent.callee === n || parent.type === \"UnaryExpression\" || (parent.type === \"MemberExpression\" || parent.type === \"OptionalMemberExpression\") && !parent.computed) {\r\n            return group$b(concat$d([indent$7(concat$d([softline$6, concat$d(parts)])), softline$6]));\r\n          } // Avoid indenting sub-expressions in some cases where the first sub-expression is already\r\n          // indented accordingly. We should indent sub-expressions where the first case isn't indented.\r\n\r\n\r\n          const shouldNotIndent = parent.type === \"ReturnStatement\" || parent.type === \"ThrowStatement\" || parent.type === \"JSXExpressionContainer\" && parentParent.type === \"JSXAttribute\" || n.operator !== \"|\" && parent.type === \"JsExpressionRoot\" || n.type !== \"NGPipeExpression\" && (parent.type === \"NGRoot\" && options.parser === \"__ng_binding\" || parent.type === \"NGMicrosyntaxExpression\" && parentParent.type === \"NGMicrosyntax\" && parentParent.body.length === 1) || n === parent.body && parent.type === \"ArrowFunctionExpression\" || n !== parent.body && parent.type === \"ForStatement\" || parent.type === \"ConditionalExpression\" && parentParent.type !== \"ReturnStatement\" && parentParent.type !== \"ThrowStatement\" && parentParent.type !== \"CallExpression\" && parentParent.type !== \"OptionalCallExpression\" || parent.type === \"TemplateLiteral\";\r\n          const shouldIndentIfInlining = parent.type === \"AssignmentExpression\" || parent.type === \"VariableDeclarator\" || parent.type === \"ClassProperty\" || parent.type === \"TSAbstractClassProperty\" || parent.type === \"ClassPrivateProperty\" || parent.type === \"ObjectProperty\" || parent.type === \"Property\";\r\n          const samePrecedenceSubExpression = isBinaryish$1(n.left) && shouldFlatten$1(n.operator, n.left.operator);\r\n\r\n          if (shouldNotIndent || shouldInlineLogicalExpression(n) && !samePrecedenceSubExpression || !shouldInlineLogicalExpression(n) && shouldIndentIfInlining) {\r\n            return group$b(concat$d(parts));\r\n          }\r\n\r\n          if (parts.length === 0) {\r\n            return \"\";\r\n          } // If the right part is a JSX node, we include it in a separate group to\r\n          // prevent it breaking the whole chain, so we can print the expression like:\r\n          //\r\n          //   foo && bar && (\r\n          //     <Foo>\r\n          //       <Bar />\r\n          //     </Foo>\r\n          //   )\r\n\r\n\r\n          const hasJSX = isJSXNode$1(n.right);\r\n          const rest = concat$d(hasJSX ? parts.slice(1, -1) : parts.slice(1));\r\n          const groupId = Symbol(\"logicalChain-\" + ++uid);\r\n          const chain = group$b(concat$d([// Don't include the initial expression in the indentation\r\n          // level. The first item is guaranteed to be the first\r\n          // left-most expression.\r\n          parts.length > 0 ? parts[0] : \"\", indent$7(rest)]), {\r\n            id: groupId\r\n          });\r\n\r\n          if (!hasJSX) {\r\n            return chain;\r\n          }\r\n\r\n          const jsxPart = getLast$3(parts);\r\n          return group$b(concat$d([chain, ifBreak$6(indent$7(jsxPart), jsxPart, {\r\n            groupId\r\n          })]));\r\n        }\r\n\r\n      case \"AssignmentPattern\":\r\n        return concat$d([path.call(print, \"left\"), \" = \", path.call(print, \"right\")]);\r\n\r\n      case \"TSTypeAssertion\":\r\n        {\r\n          const shouldBreakAfterCast = !(n.expression.type === \"ArrayExpression\" || n.expression.type === \"ObjectExpression\");\r\n          const castGroup = group$b(concat$d([\"<\", indent$7(concat$d([softline$6, path.call(print, \"typeAnnotation\")])), softline$6, \">\"]));\r\n          const exprContents = concat$d([ifBreak$6(\"(\"), indent$7(concat$d([softline$6, path.call(print, \"expression\")])), softline$6, ifBreak$6(\")\")]);\r\n\r\n          if (shouldBreakAfterCast) {\r\n            return conditionalGroup$1([concat$d([castGroup, path.call(print, \"expression\")]), concat$d([castGroup, group$b(exprContents, {\r\n              shouldBreak: true\r\n            })]), concat$d([castGroup, path.call(print, \"expression\")])]);\r\n          }\r\n\r\n          return group$b(concat$d([castGroup, path.call(print, \"expression\")]));\r\n        }\r\n\r\n      case \"OptionalMemberExpression\":\r\n      case \"MemberExpression\":\r\n        {\r\n          const parent = path.getParentNode();\r\n          let firstNonMemberParent;\r\n          let i = 0;\r\n\r\n          do {\r\n            firstNonMemberParent = path.getParentNode(i);\r\n            i++;\r\n          } while (firstNonMemberParent && (firstNonMemberParent.type === \"MemberExpression\" || firstNonMemberParent.type === \"OptionalMemberExpression\" || firstNonMemberParent.type === \"TSNonNullExpression\"));\r\n\r\n          const shouldInline = firstNonMemberParent && (firstNonMemberParent.type === \"NewExpression\" || firstNonMemberParent.type === \"BindExpression\" || firstNonMemberParent.type === \"VariableDeclarator\" && firstNonMemberParent.id.type !== \"Identifier\" || firstNonMemberParent.type === \"AssignmentExpression\" && firstNonMemberParent.left.type !== \"Identifier\") || n.computed || n.object.type === \"Identifier\" && n.property.type === \"Identifier\" && parent.type !== \"MemberExpression\" && parent.type !== \"OptionalMemberExpression\";\r\n          return concat$d([path.call(print, \"object\"), shouldInline ? printMemberLookup(path, options, print) : group$b(indent$7(concat$d([softline$6, printMemberLookup(path, options, print)])))]);\r\n        }\r\n\r\n      case \"MetaProperty\":\r\n        return concat$d([path.call(print, \"meta\"), \".\", path.call(print, \"property\")]);\r\n\r\n      case \"BindExpression\":\r\n        if (n.object) {\r\n          parts.push(path.call(print, \"object\"));\r\n        }\r\n\r\n        parts.push(group$b(indent$7(concat$d([softline$6, printBindExpressionCallee(path, options, print)]))));\r\n        return concat$d(parts);\r\n\r\n      case \"Identifier\":\r\n        {\r\n          return concat$d([n.name, printOptionalToken(path), printTypeAnnotation(path, options, print)]);\r\n        }\r\n\r\n      case \"V8IntrinsicIdentifier\":\r\n        return concat$d([\"%\", n.name]);\r\n\r\n      case \"SpreadElement\":\r\n      case \"SpreadElementPattern\":\r\n      case \"SpreadProperty\":\r\n      case \"SpreadPropertyPattern\":\r\n      case \"RestElement\":\r\n      case \"ObjectTypeSpreadProperty\":\r\n        return concat$d([\"...\", path.call(print, \"argument\"), printTypeAnnotation(path, options, print)]);\r\n\r\n      case \"FunctionDeclaration\":\r\n      case \"FunctionExpression\":\r\n        parts.push(printFunctionDeclaration(path, print, options));\r\n\r\n        if (!n.body) {\r\n          parts.push(semi);\r\n        }\r\n\r\n        return concat$d(parts);\r\n\r\n      case \"ArrowFunctionExpression\":\r\n        {\r\n          if (n.async) {\r\n            parts.push(\"async \");\r\n          }\r\n\r\n          if (shouldPrintParamsWithoutParens(path, options)) {\r\n            parts.push(path.call(print, \"params\", 0));\r\n          } else {\r\n            parts.push(group$b(concat$d([printFunctionParams(path, print, options,\r\n            /* expandLast */\r\n            args && (args.expandLastArg || args.expandFirstArg),\r\n            /* printTypeParams */\r\n            true), printReturnType(path, print, options)])));\r\n          }\r\n\r\n          const dangling = comments.printDanglingComments(path, options,\r\n          /* sameIndent */\r\n          true, comment => {\r\n            const nextCharacter = getNextNonSpaceNonCommentCharacterIndex$3(options.originalText, comment, options.locEnd);\r\n            return options.originalText.slice(nextCharacter, nextCharacter + 2) === \"=>\";\r\n          });\r\n\r\n          if (dangling) {\r\n            parts.push(\" \", dangling);\r\n          }\r\n\r\n          parts.push(\" =>\");\r\n          const body = path.call(bodyPath => print(bodyPath, args), \"body\"); // We want to always keep these types of nodes on the same line\r\n          // as the arrow.\r\n\r\n          if (!hasLeadingOwnLineComment$1(options.originalText, n.body, options) && (n.body.type === \"ArrayExpression\" || n.body.type === \"ObjectExpression\" || n.body.type === \"BlockStatement\" || isJSXNode$1(n.body) || isTemplateOnItsOwnLine$1(n.body, options.originalText, options) || n.body.type === \"ArrowFunctionExpression\" || n.body.type === \"DoExpression\")) {\r\n            return group$b(concat$d([concat$d(parts), \" \", body]));\r\n          } // We handle sequence expressions as the body of arrows specially,\r\n          // so that the required parentheses end up on their own lines.\r\n\r\n\r\n          if (n.body.type === \"SequenceExpression\") {\r\n            return group$b(concat$d([concat$d(parts), group$b(concat$d([\" (\", indent$7(concat$d([softline$6, body])), softline$6, \")\"]))]));\r\n          } // if the arrow function is expanded as last argument, we are adding a\r\n          // level of indentation and need to add a softline to align the closing )\r\n          // with the opening (, or if it's inside a JSXExpression (e.g. an attribute)\r\n          // we should align the expression's closing } with the line with the opening {.\r\n\r\n\r\n          const shouldAddSoftLine = (args && args.expandLastArg || path.getParentNode().type === \"JSXExpressionContainer\") && !(n.comments && n.comments.length);\r\n          const printTrailingComma = args && args.expandLastArg && shouldPrintComma$1(options, \"all\"); // In order to avoid confusion between\r\n          // a => a ? a : a\r\n          // a <= a ? a : a\r\n\r\n          const shouldAddParens = n.body.type === \"ConditionalExpression\" && !startsWithNoLookaheadToken$1(n.body,\r\n          /* forbidFunctionAndClass */\r\n          false);\r\n          return group$b(concat$d([concat$d(parts), group$b(concat$d([indent$7(concat$d([line$9, shouldAddParens ? ifBreak$6(\"\", \"(\") : \"\", body, shouldAddParens ? ifBreak$6(\"\", \")\") : \"\"])), shouldAddSoftLine ? concat$d([ifBreak$6(printTrailingComma ? \",\" : \"\"), softline$6]) : \"\"]))]));\r\n        }\r\n\r\n      case \"YieldExpression\":\r\n        parts.push(\"yield\");\r\n\r\n        if (n.delegate) {\r\n          parts.push(\"*\");\r\n        }\r\n\r\n        if (n.argument) {\r\n          parts.push(\" \", path.call(print, \"argument\"));\r\n        }\r\n\r\n        return concat$d(parts);\r\n\r\n      case \"AwaitExpression\":\r\n        {\r\n          parts.push(\"await \", path.call(print, \"argument\"));\r\n          const parent = path.getParentNode();\r\n\r\n          if ((parent.type === \"CallExpression\" || parent.type === \"OptionalCallExpression\") && parent.callee === n || (parent.type === \"MemberExpression\" || parent.type === \"OptionalMemberExpression\") && parent.object === n) {\r\n            return group$b(concat$d([indent$7(concat$d([softline$6, concat$d(parts)])), softline$6]));\r\n          }\r\n\r\n          return concat$d(parts);\r\n        }\r\n\r\n      case \"ImportSpecifier\":\r\n        if (n.importKind) {\r\n          parts.push(path.call(print, \"importKind\"), \" \");\r\n        }\r\n\r\n        parts.push(path.call(print, \"imported\"));\r\n\r\n        if (n.local && n.local.name !== n.imported.name) {\r\n          parts.push(\" as \", path.call(print, \"local\"));\r\n        }\r\n\r\n        return concat$d(parts);\r\n\r\n      case \"ExportSpecifier\":\r\n        parts.push(path.call(print, \"local\"));\r\n\r\n        if (n.exported && n.exported.name !== n.local.name) {\r\n          parts.push(\" as \", path.call(print, \"exported\"));\r\n        }\r\n\r\n        return concat$d(parts);\r\n\r\n      case \"ImportNamespaceSpecifier\":\r\n        parts.push(\"* as \");\r\n        parts.push(path.call(print, \"local\"));\r\n        return concat$d(parts);\r\n\r\n      case \"ImportDefaultSpecifier\":\r\n        return path.call(print, \"local\");\r\n\r\n      case \"TSExportAssignment\":\r\n        return concat$d([\"export = \", path.call(print, \"expression\"), semi]);\r\n\r\n      case \"ExportDefaultDeclaration\":\r\n      case \"ExportNamedDeclaration\":\r\n        return printExportDeclaration(path, options, print);\r\n\r\n      case \"ExportAllDeclaration\":\r\n        parts.push(\"export \");\r\n\r\n        if (n.exportKind === \"type\") {\r\n          parts.push(\"type \");\r\n        }\r\n\r\n        parts.push(\"* \");\r\n\r\n        if (n.exported) {\r\n          parts.push(\"as \", path.call(print, \"exported\"), \" \");\r\n        }\r\n\r\n        parts.push(\"from \", path.call(print, \"source\"), semi);\r\n        return concat$d(parts);\r\n\r\n      case \"ExportNamespaceSpecifier\":\r\n      case \"ExportDefaultSpecifier\":\r\n        return path.call(print, \"exported\");\r\n\r\n      case \"ImportDeclaration\":\r\n        {\r\n          parts.push(\"import \");\r\n\r\n          if (n.importKind && n.importKind !== \"value\") {\r\n            parts.push(n.importKind + \" \");\r\n          }\r\n\r\n          const standalones = [];\r\n          const grouped = [];\r\n\r\n          if (n.specifiers && n.specifiers.length > 0) {\r\n            path.each(specifierPath => {\r\n              const value = specifierPath.getValue();\r\n\r\n              if (value.type === \"ImportDefaultSpecifier\" || value.type === \"ImportNamespaceSpecifier\") {\r\n                standalones.push(print(specifierPath));\r\n              } else {\r\n                grouped.push(print(specifierPath));\r\n              }\r\n            }, \"specifiers\");\r\n\r\n            if (standalones.length > 0) {\r\n              parts.push(join$9(\", \", standalones));\r\n            }\r\n\r\n            if (standalones.length > 0 && grouped.length > 0) {\r\n              parts.push(\", \");\r\n            }\r\n\r\n            if (grouped.length === 1 && standalones.length === 0 && n.specifiers && !n.specifiers.some(node => node.comments)) {\r\n              parts.push(concat$d([\"{\", options.bracketSpacing ? \" \" : \"\", concat$d(grouped), options.bracketSpacing ? \" \" : \"\", \"}\"]));\r\n            } else if (grouped.length >= 1) {\r\n              parts.push(group$b(concat$d([\"{\", indent$7(concat$d([options.bracketSpacing ? line$9 : softline$6, join$9(concat$d([\",\", line$9]), grouped)])), ifBreak$6(shouldPrintComma$1(options) ? \",\" : \"\"), options.bracketSpacing ? line$9 : softline$6, \"}\"])));\r\n            }\r\n\r\n            parts.push(\" from \");\r\n          } else if (n.importKind && n.importKind === \"type\" || // import {} from 'x'\r\n          /{\\s*}/.test(options.originalText.slice(options.locStart(n), options.locStart(n.source)))) {\r\n            parts.push(\"{} from \");\r\n          }\r\n\r\n          parts.push(path.call(print, \"source\"), semi);\r\n          return concat$d(parts);\r\n        }\r\n\r\n      case \"Import\":\r\n        return \"import\";\r\n\r\n      case \"TSModuleBlock\":\r\n      case \"BlockStatement\":\r\n        {\r\n          const naked = path.call(bodyPath => {\r\n            return printStatementSequence(bodyPath, options, print);\r\n          }, \"body\");\r\n          const hasContent = n.body.find(node => node.type !== \"EmptyStatement\");\r\n          const hasDirectives = n.directives && n.directives.length > 0;\r\n          const parent = path.getParentNode();\r\n          const parentParent = path.getParentNode(1);\r\n\r\n          if (!hasContent && !hasDirectives && !hasDanglingComments$1(n) && (parent.type === \"ArrowFunctionExpression\" || parent.type === \"FunctionExpression\" || parent.type === \"FunctionDeclaration\" || parent.type === \"ObjectMethod\" || parent.type === \"ClassMethod\" || parent.type === \"ClassPrivateMethod\" || parent.type === \"ForStatement\" || parent.type === \"WhileStatement\" || parent.type === \"DoWhileStatement\" || parent.type === \"DoExpression\" || parent.type === \"CatchClause\" && !parentParent.finalizer || parent.type === \"TSModuleDeclaration\")) {\r\n            return \"{}\";\r\n          }\r\n\r\n          parts.push(\"{\"); // Babel 6\r\n\r\n          if (hasDirectives) {\r\n            path.each(childPath => {\r\n              parts.push(indent$7(concat$d([hardline$9, print(childPath), semi])));\r\n\r\n              if (isNextLineEmpty$4(options.originalText, childPath.getValue(), options.locEnd)) {\r\n                parts.push(hardline$9);\r\n              }\r\n            }, \"directives\");\r\n          }\r\n\r\n          if (hasContent) {\r\n            parts.push(indent$7(concat$d([hardline$9, naked])));\r\n          }\r\n\r\n          parts.push(comments.printDanglingComments(path, options));\r\n          parts.push(hardline$9, \"}\");\r\n          return concat$d(parts);\r\n        }\r\n\r\n      case \"ReturnStatement\":\r\n        return concat$d([\"return\", printReturnAndThrowArgument(path, options, print)]);\r\n\r\n      case \"NewExpression\":\r\n      case \"OptionalCallExpression\":\r\n      case \"CallExpression\":\r\n        {\r\n          const isNew = n.type === \"NewExpression\";\r\n          const optional = printOptionalToken(path);\r\n\r\n          if ( // We want to keep CommonJS- and AMD-style require calls, and AMD-style\r\n          // define calls, as a unit.\r\n          // e.g. `define([\"some/lib\", (lib) => {`\r\n          !isNew && n.callee.type === \"Identifier\" && (n.callee.name === \"require\" || n.callee.name === \"define\") || // Template literals as single arguments\r\n          n.arguments.length === 1 && isTemplateOnItsOwnLine$1(n.arguments[0], options.originalText, options) || // Keep test declarations on a single line\r\n          // e.g. `it('long name', () => {`\r\n          !isNew && isTestCall$1(n, path.getParentNode())) {\r\n            return concat$d([isNew ? \"new \" : \"\", path.call(print, \"callee\"), optional, printFunctionTypeParameters(path, options, print), concat$d([\"(\", join$9(\", \", path.map(print, \"arguments\")), \")\"])]);\r\n          } // Inline Flow annotation comments following Identifiers in Call nodes need to\r\n          // stay with the Identifier. For example:\r\n          //\r\n          // foo /*:: <SomeGeneric> */(bar);\r\n          //\r\n          // Here, we ensure that such comments stay between the Identifier and the Callee.\r\n\r\n\r\n          const isIdentifierWithFlowAnnotation = n.callee.type === \"Identifier\" && hasFlowAnnotationComment$1(n.callee.trailingComments);\r\n\r\n          if (isIdentifierWithFlowAnnotation) {\r\n            n.callee.trailingComments[0].printed = true;\r\n          } // We detect calls on member lookups and possibly print them in a\r\n          // special chain format. See `printMemberChain` for more info.\r\n\r\n\r\n          if (!isNew && isMemberish$1(n.callee) && !path.call(path => needsParens_1(path, options), \"callee\")) {\r\n            return printMemberChain(path, options, print);\r\n          }\r\n\r\n          const contents = concat$d([isNew ? \"new \" : \"\", path.call(print, \"callee\"), optional, isIdentifierWithFlowAnnotation ? \"/*:: \".concat(n.callee.trailingComments[0].value.slice(2).trim(), \" */\") : \"\", printFunctionTypeParameters(path, options, print), printArgumentsList(path, options, print)]); // We group here when the callee is itself a call expression.\r\n          // See `isLongCurriedCallExpression` for more info.\r\n\r\n          if (isCallOrOptionalCallExpression$1(n.callee)) {\r\n            return group$b(contents);\r\n          }\r\n\r\n          return contents;\r\n        }\r\n\r\n      case \"TSInterfaceDeclaration\":\r\n        if (n.declare) {\r\n          parts.push(\"declare \");\r\n        }\r\n\r\n        parts.push(n.abstract ? \"abstract \" : \"\", printTypeScriptModifiers(path, options, print), \"interface \", path.call(print, \"id\"), n.typeParameters ? path.call(print, \"typeParameters\") : \"\", \" \");\r\n\r\n        if (n.extends && n.extends.length) {\r\n          parts.push(group$b(indent$7(concat$d([softline$6, \"extends \", (n.extends.length === 1 ? identity$2 : indent$7)(join$9(concat$d([\",\", line$9]), path.map(print, \"extends\"))), \" \"]))));\r\n        }\r\n\r\n        parts.push(path.call(print, \"body\"));\r\n        return concat$d(parts);\r\n\r\n      case \"ObjectTypeInternalSlot\":\r\n        return concat$d([n.static ? \"static \" : \"\", \"[[\", path.call(print, \"id\"), \"]]\", printOptionalToken(path), n.method ? \"\" : \": \", path.call(print, \"value\")]);\r\n\r\n      case \"ObjectExpression\":\r\n      case \"ObjectPattern\":\r\n      case \"ObjectTypeAnnotation\":\r\n      case \"TSInterfaceBody\":\r\n      case \"TSTypeLiteral\":\r\n        {\r\n          let propertiesField;\r\n\r\n          if (n.type === \"TSTypeLiteral\") {\r\n            propertiesField = \"members\";\r\n          } else if (n.type === \"TSInterfaceBody\") {\r\n            propertiesField = \"body\";\r\n          } else {\r\n            propertiesField = \"properties\";\r\n          }\r\n\r\n          const isTypeAnnotation = n.type === \"ObjectTypeAnnotation\";\r\n          const fields = [];\r\n\r\n          if (isTypeAnnotation) {\r\n            fields.push(\"indexers\", \"callProperties\", \"internalSlots\");\r\n          }\r\n\r\n          fields.push(propertiesField);\r\n          const firstProperty = fields.map(field => n[field][0]).sort((a, b) => options.locStart(a) - options.locStart(b))[0];\r\n          const parent = path.getParentNode(0);\r\n          const isFlowInterfaceLikeBody = isTypeAnnotation && parent && (parent.type === \"InterfaceDeclaration\" || parent.type === \"DeclareInterface\" || parent.type === \"DeclareClass\") && path.getName() === \"body\";\r\n          const shouldBreak = n.type === \"TSInterfaceBody\" || isFlowInterfaceLikeBody || n.type === \"ObjectPattern\" && parent.type !== \"FunctionDeclaration\" && parent.type !== \"FunctionExpression\" && parent.type !== \"ArrowFunctionExpression\" && parent.type !== \"ObjectMethod\" && parent.type !== \"ClassMethod\" && parent.type !== \"ClassPrivateMethod\" && parent.type !== \"AssignmentPattern\" && parent.type !== \"CatchClause\" && n.properties.some(property => property.value && (property.value.type === \"ObjectPattern\" || property.value.type === \"ArrayPattern\")) || n.type !== \"ObjectPattern\" && firstProperty && hasNewlineInRange$3(options.originalText, options.locStart(n), options.locStart(firstProperty));\r\n          const separator = isFlowInterfaceLikeBody ? \";\" : n.type === \"TSInterfaceBody\" || n.type === \"TSTypeLiteral\" ? ifBreak$6(semi, \";\") : \",\";\r\n          const leftBrace = n.exact ? \"{|\" : \"{\";\r\n          const rightBrace = n.exact ? \"|}\" : \"}\"; // Unfortunately, things are grouped together in the ast can be\r\n          // interleaved in the source code. So we need to reorder them before\r\n          // printing them.\r\n\r\n          const propsAndLoc = [];\r\n          fields.forEach(field => {\r\n            path.each(childPath => {\r\n              const node = childPath.getValue();\r\n              propsAndLoc.push({\r\n                node,\r\n                printed: print(childPath),\r\n                loc: options.locStart(node)\r\n              });\r\n            }, field);\r\n          });\r\n          let separatorParts = [];\r\n          const props = propsAndLoc.sort((a, b) => a.loc - b.loc).map(prop => {\r\n            const result = concat$d(separatorParts.concat(group$b(prop.printed)));\r\n            separatorParts = [separator, line$9];\r\n\r\n            if ((prop.node.type === \"TSPropertySignature\" || prop.node.type === \"TSMethodSignature\" || prop.node.type === \"TSConstructSignatureDeclaration\") && hasNodeIgnoreComment$2(prop.node)) {\r\n              separatorParts.shift();\r\n            }\r\n\r\n            if (isNextLineEmpty$4(options.originalText, prop.node, options.locEnd)) {\r\n              separatorParts.push(hardline$9);\r\n            }\r\n\r\n            return result;\r\n          });\r\n\r\n          if (n.inexact) {\r\n            let printed;\r\n\r\n            if (hasDanglingComments$1(n)) {\r\n              const hasLineComments = !n.comments.every(comments$1.isBlockComment);\r\n              const printedDanglingComments = comments.printDanglingComments(path, options,\r\n              /* sameIndent */\r\n              true);\r\n              printed = concat$d([printedDanglingComments, hasLineComments || hasNewline$5(options.originalText, options.locEnd(n.comments[n.comments.length - 1])) ? hardline$9 : line$9, \"...\"]);\r\n            } else {\r\n              printed = \"...\";\r\n            }\r\n\r\n            props.push(concat$d(separatorParts.concat(printed)));\r\n          }\r\n\r\n          const lastElem = getLast$3(n[propertiesField]);\r\n          const canHaveTrailingSeparator = !(n.inexact || lastElem && (lastElem.type === \"RestElement\" || hasNodeIgnoreComment$2(lastElem)));\r\n          let content;\r\n\r\n          if (props.length === 0) {\r\n            if (!hasDanglingComments$1(n)) {\r\n              return concat$d([leftBrace, rightBrace, printTypeAnnotation(path, options, print)]);\r\n            }\r\n\r\n            content = group$b(concat$d([leftBrace, comments.printDanglingComments(path, options), softline$6, rightBrace, printOptionalToken(path), printTypeAnnotation(path, options, print)]));\r\n          } else {\r\n            content = concat$d([leftBrace, indent$7(concat$d([options.bracketSpacing ? line$9 : softline$6, concat$d(props)])), ifBreak$6(canHaveTrailingSeparator && (separator !== \",\" || shouldPrintComma$1(options)) ? separator : \"\"), concat$d([options.bracketSpacing ? line$9 : softline$6, rightBrace]), printOptionalToken(path), printTypeAnnotation(path, options, print)]);\r\n          } // If we inline the object as first argument of the parent, we don't want\r\n          // to create another group so that the object breaks before the return\r\n          // type\r\n\r\n\r\n          if (path.match(node => node.type === \"ObjectPattern\" && !node.decorators, (node, name, number) => shouldHugArguments(node) && (name === \"params\" || name === \"parameters\") && number === 0) || path.match(shouldHugType, (node, name) => name === \"typeAnnotation\", (node, name) => name === \"typeAnnotation\", (node, name, number) => shouldHugArguments(node) && (name === \"params\" || name === \"parameters\") && number === 0)) {\r\n            return content;\r\n          }\r\n\r\n          return group$b(content, {\r\n            shouldBreak\r\n          });\r\n        }\r\n      // Babel 6\r\n\r\n      case \"ObjectProperty\": // Non-standard AST node type.\r\n\r\n      case \"Property\":\r\n        if (n.method || n.kind === \"get\" || n.kind === \"set\") {\r\n          return printMethod(path, options, print);\r\n        }\r\n\r\n        if (n.shorthand) {\r\n          parts.push(path.call(print, \"value\"));\r\n        } else {\r\n          parts.push(printAssignment(n.key, printPropertyKey(path, options, print), \":\", n.value, path.call(print, \"value\"), options));\r\n        }\r\n\r\n        return concat$d(parts);\r\n      // Babel 6\r\n\r\n      case \"ClassMethod\":\r\n      case \"ClassPrivateMethod\":\r\n      case \"MethodDefinition\":\r\n      case \"TSAbstractMethodDefinition\":\r\n      case \"TSDeclareMethod\":\r\n        if (n.decorators && n.decorators.length !== 0) {\r\n          parts.push(printDecorators(path, options, print));\r\n        }\r\n\r\n        if (n.accessibility) {\r\n          parts.push(n.accessibility + \" \");\r\n        }\r\n\r\n        if (n.static) {\r\n          parts.push(\"static \");\r\n        }\r\n\r\n        if (n.type === \"TSAbstractMethodDefinition\" || n.abstract) {\r\n          parts.push(\"abstract \");\r\n        }\r\n\r\n        parts.push(printMethod(path, options, print));\r\n        return concat$d(parts);\r\n\r\n      case \"ObjectMethod\":\r\n        return printMethod(path, options, print);\r\n\r\n      case \"Decorator\":\r\n        return concat$d([\"@\", path.call(print, \"expression\"), path.call(print, \"callee\")]);\r\n\r\n      case \"ArrayExpression\":\r\n      case \"ArrayPattern\":\r\n        if (n.elements.length === 0) {\r\n          if (!hasDanglingComments$1(n)) {\r\n            parts.push(\"[]\");\r\n          } else {\r\n            parts.push(group$b(concat$d([\"[\", comments.printDanglingComments(path, options), softline$6, \"]\"])));\r\n          }\r\n        } else {\r\n          const lastElem = getLast$3(n.elements);\r\n          const canHaveTrailingComma = !(lastElem && lastElem.type === \"RestElement\"); // JavaScript allows you to have empty elements in an array which\r\n          // changes its length based on the number of commas. The algorithm\r\n          // is that if the last argument is null, we need to force insert\r\n          // a comma to ensure JavaScript recognizes it.\r\n          //   [,].length === 1\r\n          //   [1,].length === 1\r\n          //   [1,,].length === 2\r\n          //\r\n          // Note that getLast returns null if the array is empty, but\r\n          // we already check for an empty array just above so we are safe\r\n\r\n          const needsForcedTrailingComma = canHaveTrailingComma && lastElem === null;\r\n          const shouldBreak = n.elements.length > 1 && n.elements.every((element, i, elements) => {\r\n            const elementType = element && element.type;\r\n\r\n            if (elementType !== \"ArrayExpression\" && elementType !== \"ObjectExpression\") {\r\n              return false;\r\n            }\r\n\r\n            const nextElement = elements[i + 1];\r\n\r\n            if (nextElement && elementType !== nextElement.type) {\r\n              return false;\r\n            }\r\n\r\n            const itemsKey = elementType === \"ArrayExpression\" ? \"elements\" : \"properties\";\r\n            return element[itemsKey] && element[itemsKey].length > 1;\r\n          });\r\n          parts.push(group$b(concat$d([\"[\", indent$7(concat$d([softline$6, printArrayItems(path, options, \"elements\", print)])), needsForcedTrailingComma ? \",\" : \"\", ifBreak$6(canHaveTrailingComma && !needsForcedTrailingComma && shouldPrintComma$1(options) ? \",\" : \"\"), comments.printDanglingComments(path, options,\r\n          /* sameIndent */\r\n          true), softline$6, \"]\"]), {\r\n            shouldBreak\r\n          }));\r\n        }\r\n\r\n        parts.push(printOptionalToken(path), printTypeAnnotation(path, options, print));\r\n        return concat$d(parts);\r\n\r\n      case \"SequenceExpression\":\r\n        {\r\n          const parent = path.getParentNode(0);\r\n\r\n          if (parent.type === \"ExpressionStatement\" || parent.type === \"ForStatement\") {\r\n            // For ExpressionStatements and for-loop heads, which are among\r\n            // the few places a SequenceExpression appears unparenthesized, we want\r\n            // to indent expressions after the first.\r\n            const parts = [];\r\n            path.each(p => {\r\n              if (p.getName() === 0) {\r\n                parts.push(print(p));\r\n              } else {\r\n                parts.push(\",\", indent$7(concat$d([line$9, print(p)])));\r\n              }\r\n            }, \"expressions\");\r\n            return group$b(concat$d(parts));\r\n          }\r\n\r\n          return group$b(concat$d([join$9(concat$d([\",\", line$9]), path.map(print, \"expressions\"))]));\r\n        }\r\n\r\n      case \"ThisExpression\":\r\n        return \"this\";\r\n\r\n      case \"Super\":\r\n        return \"super\";\r\n\r\n      case \"NullLiteral\":\r\n        // Babel 6 Literal split\r\n        return \"null\";\r\n\r\n      case \"RegExpLiteral\":\r\n        // Babel 6 Literal split\r\n        return printRegex(n);\r\n\r\n      case \"NumericLiteral\":\r\n        // Babel 6 Literal split\r\n        return printNumber$2(n.extra.raw);\r\n\r\n      case \"BigIntLiteral\":\r\n        // babel: n.extra.raw, typescript: n.raw, flow: n.bigint\r\n        return (n.bigint || (n.extra ? n.extra.raw : n.raw)).toLowerCase();\r\n\r\n      case \"BooleanLiteral\": // Babel 6 Literal split\r\n\r\n      case \"StringLiteral\": // Babel 6 Literal split\r\n\r\n      case \"Literal\":\r\n        {\r\n          if (n.regex) {\r\n            return printRegex(n.regex);\r\n          }\r\n\r\n          if (typeof n.value === \"number\") {\r\n            return printNumber$2(n.raw);\r\n          }\r\n\r\n          if (typeof n.value !== \"string\") {\r\n            return \"\" + n.value;\r\n          } // TypeScript workaround for https://github.com/JamesHenry/typescript-estree/issues/2\r\n          // See corresponding workaround in needs-parens.js\r\n\r\n\r\n          const grandParent = path.getParentNode(1);\r\n          const isTypeScriptDirective = options.parser === \"typescript\" && typeof n.value === \"string\" && grandParent && (grandParent.type === \"Program\" || grandParent.type === \"BlockStatement\");\r\n          return nodeStr(n, options, isTypeScriptDirective);\r\n        }\r\n\r\n      case \"Directive\":\r\n        return path.call(print, \"value\");\r\n      // Babel 6\r\n\r\n      case \"DirectiveLiteral\":\r\n        return nodeStr(n, options);\r\n\r\n      case \"UnaryExpression\":\r\n        parts.push(n.operator);\r\n\r\n        if (/[a-z]$/.test(n.operator)) {\r\n          parts.push(\" \");\r\n        }\r\n\r\n        if (n.argument.comments && n.argument.comments.length > 0) {\r\n          parts.push(group$b(concat$d([\"(\", indent$7(concat$d([softline$6, path.call(print, \"argument\")])), softline$6, \")\"])));\r\n        } else {\r\n          parts.push(path.call(print, \"argument\"));\r\n        }\r\n\r\n        return concat$d(parts);\r\n\r\n      case \"UpdateExpression\":\r\n        parts.push(path.call(print, \"argument\"), n.operator);\r\n\r\n        if (n.prefix) {\r\n          parts.reverse();\r\n        }\r\n\r\n        return concat$d(parts);\r\n\r\n      case \"ConditionalExpression\":\r\n        return printTernaryOperator(path, options, print, {\r\n          beforeParts: () => [path.call(print, \"test\")],\r\n          afterParts: breakClosingParen => [breakClosingParen ? softline$6 : \"\"],\r\n          shouldCheckJsx: true,\r\n          conditionalNodeType: \"ConditionalExpression\",\r\n          consequentNodePropertyName: \"consequent\",\r\n          alternateNodePropertyName: \"alternate\",\r\n          testNodePropertyNames: [\"test\"]\r\n        });\r\n\r\n      case \"VariableDeclaration\":\r\n        {\r\n          const printed = path.map(childPath => {\r\n            return print(childPath);\r\n          }, \"declarations\"); // We generally want to terminate all variable declarations with a\r\n          // semicolon, except when they in the () part of for loops.\r\n\r\n          const parentNode = path.getParentNode();\r\n          const isParentForLoop = parentNode.type === \"ForStatement\" || parentNode.type === \"ForInStatement\" || parentNode.type === \"ForOfStatement\";\r\n          const hasValue = n.declarations.some(decl => decl.init);\r\n          let firstVariable;\r\n\r\n          if (printed.length === 1 && !n.declarations[0].comments) {\r\n            firstVariable = printed[0];\r\n          } else if (printed.length > 0) {\r\n            // Indent first var to comply with eslint one-var rule\r\n            firstVariable = indent$7(printed[0]);\r\n          }\r\n\r\n          parts = [n.declare ? \"declare \" : \"\", n.kind, firstVariable ? concat$d([\" \", firstVariable]) : \"\", indent$7(concat$d(printed.slice(1).map(p => concat$d([\",\", hasValue && !isParentForLoop ? hardline$9 : line$9, p]))))];\r\n\r\n          if (!(isParentForLoop && parentNode.body !== n)) {\r\n            parts.push(semi);\r\n          }\r\n\r\n          return group$b(concat$d(parts));\r\n        }\r\n\r\n      case \"TSTypeAliasDeclaration\":\r\n        {\r\n          if (n.declare) {\r\n            parts.push(\"declare \");\r\n          }\r\n\r\n          const printed = printAssignmentRight(n.id, n.typeAnnotation, n.typeAnnotation && path.call(print, \"typeAnnotation\"), options);\r\n          parts.push(\"type \", path.call(print, \"id\"), path.call(print, \"typeParameters\"), \" =\", printed, semi);\r\n          return group$b(concat$d(parts));\r\n        }\r\n\r\n      case \"VariableDeclarator\":\r\n        return printAssignment(n.id, path.call(print, \"id\"), \" =\", n.init, n.init && path.call(print, \"init\"), options);\r\n\r\n      case \"WithStatement\":\r\n        return group$b(concat$d([\"with (\", path.call(print, \"object\"), \")\", adjustClause(n.body, path.call(print, \"body\"))]));\r\n\r\n      case \"IfStatement\":\r\n        {\r\n          const con = adjustClause(n.consequent, path.call(print, \"consequent\"));\r\n          const opening = group$b(concat$d([\"if (\", group$b(concat$d([indent$7(concat$d([softline$6, path.call(print, \"test\")])), softline$6])), \")\", con]));\r\n          parts.push(opening);\r\n\r\n          if (n.alternate) {\r\n            const commentOnOwnLine = hasTrailingComment$1(n.consequent) && n.consequent.comments.some(comment => comment.trailing && !comments$1.isBlockComment(comment)) || needsHardlineAfterDanglingComment$1(n);\r\n            const elseOnSameLine = n.consequent.type === \"BlockStatement\" && !commentOnOwnLine;\r\n            parts.push(elseOnSameLine ? \" \" : hardline$9);\r\n\r\n            if (hasDanglingComments$1(n)) {\r\n              parts.push(comments.printDanglingComments(path, options, true), commentOnOwnLine ? hardline$9 : \" \");\r\n            }\r\n\r\n            parts.push(\"else\", group$b(adjustClause(n.alternate, path.call(print, \"alternate\"), n.alternate.type === \"IfStatement\")));\r\n          }\r\n\r\n          return concat$d(parts);\r\n        }\r\n\r\n      case \"ForStatement\":\r\n        {\r\n          const body = adjustClause(n.body, path.call(print, \"body\")); // We want to keep dangling comments above the loop to stay consistent.\r\n          // Any comment positioned between the for statement and the parentheses\r\n          // is going to be printed before the statement.\r\n\r\n          const dangling = comments.printDanglingComments(path, options,\r\n          /* sameLine */\r\n          true);\r\n          const printedComments = dangling ? concat$d([dangling, softline$6]) : \"\";\r\n\r\n          if (!n.init && !n.test && !n.update) {\r\n            return concat$d([printedComments, group$b(concat$d([\"for (;;)\", body]))]);\r\n          }\r\n\r\n          return concat$d([printedComments, group$b(concat$d([\"for (\", group$b(concat$d([indent$7(concat$d([softline$6, path.call(print, \"init\"), \";\", line$9, path.call(print, \"test\"), \";\", line$9, path.call(print, \"update\")])), softline$6])), \")\", body]))]);\r\n        }\r\n\r\n      case \"WhileStatement\":\r\n        return group$b(concat$d([\"while (\", group$b(concat$d([indent$7(concat$d([softline$6, path.call(print, \"test\")])), softline$6])), \")\", adjustClause(n.body, path.call(print, \"body\"))]));\r\n\r\n      case \"ForInStatement\":\r\n        // Note: esprima can't actually parse \"for each (\".\r\n        return group$b(concat$d([n.each ? \"for each (\" : \"for (\", path.call(print, \"left\"), \" in \", path.call(print, \"right\"), \")\", adjustClause(n.body, path.call(print, \"body\"))]));\r\n\r\n      case \"ForOfStatement\":\r\n        return group$b(concat$d([\"for\", n.await ? \" await\" : \"\", \" (\", path.call(print, \"left\"), \" of \", path.call(print, \"right\"), \")\", adjustClause(n.body, path.call(print, \"body\"))]));\r\n\r\n      case \"DoWhileStatement\":\r\n        {\r\n          const clause = adjustClause(n.body, path.call(print, \"body\"));\r\n          const doBody = group$b(concat$d([\"do\", clause]));\r\n          parts = [doBody];\r\n\r\n          if (n.body.type === \"BlockStatement\") {\r\n            parts.push(\" \");\r\n          } else {\r\n            parts.push(hardline$9);\r\n          }\r\n\r\n          parts.push(\"while (\");\r\n          parts.push(group$b(concat$d([indent$7(concat$d([softline$6, path.call(print, \"test\")])), softline$6])), \")\", semi);\r\n          return concat$d(parts);\r\n        }\r\n\r\n      case \"DoExpression\":\r\n        return concat$d([\"do \", path.call(print, \"body\")]);\r\n\r\n      case \"BreakStatement\":\r\n        parts.push(\"break\");\r\n\r\n        if (n.label) {\r\n          parts.push(\" \", path.call(print, \"label\"));\r\n        }\r\n\r\n        parts.push(semi);\r\n        return concat$d(parts);\r\n\r\n      case \"ContinueStatement\":\r\n        parts.push(\"continue\");\r\n\r\n        if (n.label) {\r\n          parts.push(\" \", path.call(print, \"label\"));\r\n        }\r\n\r\n        parts.push(semi);\r\n        return concat$d(parts);\r\n\r\n      case \"LabeledStatement\":\r\n        if (n.body.type === \"EmptyStatement\") {\r\n          return concat$d([path.call(print, \"label\"), \":;\"]);\r\n        }\r\n\r\n        return concat$d([path.call(print, \"label\"), \": \", path.call(print, \"body\")]);\r\n\r\n      case \"TryStatement\":\r\n        return concat$d([\"try \", path.call(print, \"block\"), n.handler ? concat$d([\" \", path.call(print, \"handler\")]) : \"\", n.finalizer ? concat$d([\" finally \", path.call(print, \"finalizer\")]) : \"\"]);\r\n\r\n      case \"CatchClause\":\r\n        if (n.param) {\r\n          const hasComments = n.param.comments && n.param.comments.some(comment => !comments$1.isBlockComment(comment) || comment.leading && hasNewline$5(options.originalText, options.locEnd(comment)) || comment.trailing && hasNewline$5(options.originalText, options.locStart(comment), {\r\n            backwards: true\r\n          }));\r\n          const param = path.call(print, \"param\");\r\n          return concat$d([\"catch \", hasComments ? concat$d([\"(\", indent$7(concat$d([softline$6, param])), softline$6, \") \"]) : concat$d([\"(\", param, \") \"]), path.call(print, \"body\")]);\r\n        }\r\n\r\n        return concat$d([\"catch \", path.call(print, \"body\")]);\r\n\r\n      case \"ThrowStatement\":\r\n        return concat$d([\"throw\", printReturnAndThrowArgument(path, options, print)]);\r\n      // Note: ignoring n.lexical because it has no printing consequences.\r\n\r\n      case \"SwitchStatement\":\r\n        return concat$d([group$b(concat$d([\"switch (\", indent$7(concat$d([softline$6, path.call(print, \"discriminant\")])), softline$6, \")\"])), \" {\", n.cases.length > 0 ? indent$7(concat$d([hardline$9, join$9(hardline$9, path.map(casePath => {\r\n          const caseNode = casePath.getValue();\r\n          return concat$d([casePath.call(print), n.cases.indexOf(caseNode) !== n.cases.length - 1 && isNextLineEmpty$4(options.originalText, caseNode, options.locEnd) ? hardline$9 : \"\"]);\r\n        }, \"cases\"))])) : \"\", hardline$9, \"}\"]);\r\n\r\n      case \"SwitchCase\":\r\n        {\r\n          if (n.test) {\r\n            parts.push(\"case \", path.call(print, \"test\"), \":\");\r\n          } else {\r\n            parts.push(\"default:\");\r\n          }\r\n\r\n          const consequent = n.consequent.filter(node => node.type !== \"EmptyStatement\");\r\n\r\n          if (consequent.length > 0) {\r\n            const cons = path.call(consequentPath => {\r\n              return printStatementSequence(consequentPath, options, print);\r\n            }, \"consequent\");\r\n            parts.push(consequent.length === 1 && consequent[0].type === \"BlockStatement\" ? concat$d([\" \", cons]) : indent$7(concat$d([hardline$9, cons])));\r\n          }\r\n\r\n          return concat$d(parts);\r\n        }\r\n      // JSX extensions below.\r\n\r\n      case \"DebuggerStatement\":\r\n        return concat$d([\"debugger\", semi]);\r\n\r\n      case \"JSXAttribute\":\r\n        parts.push(path.call(print, \"name\"));\r\n\r\n        if (n.value) {\r\n          let res;\r\n\r\n          if (isStringLiteral$1(n.value)) {\r\n            const raw = rawText$1(n.value); // Unescape all quotes so we get an accurate preferred quote\r\n\r\n            let final = raw.replace(/&apos;/g, \"'\").replace(/&quot;/g, '\"');\r\n            const quote = getPreferredQuote$1(final, options.jsxSingleQuote ? \"'\" : '\"');\r\n            const escape = quote === \"'\" ? \"&apos;\" : \"&quot;\";\r\n            final = final.slice(1, -1).replace(new RegExp(quote, \"g\"), escape);\r\n            res = concat$d([quote, final, quote]);\r\n          } else {\r\n            res = path.call(print, \"value\");\r\n          }\r\n\r\n          parts.push(\"=\", res);\r\n        }\r\n\r\n        return concat$d(parts);\r\n\r\n      case \"JSXIdentifier\":\r\n        return \"\" + n.name;\r\n\r\n      case \"JSXNamespacedName\":\r\n        return join$9(\":\", [path.call(print, \"namespace\"), path.call(print, \"name\")]);\r\n\r\n      case \"JSXMemberExpression\":\r\n        return join$9(\".\", [path.call(print, \"object\"), path.call(print, \"property\")]);\r\n\r\n      case \"TSQualifiedName\":\r\n        return join$9(\".\", [path.call(print, \"left\"), path.call(print, \"right\")]);\r\n\r\n      case \"JSXSpreadAttribute\":\r\n      case \"JSXSpreadChild\":\r\n        {\r\n          return concat$d([\"{\", path.call(p => {\r\n            const printed = concat$d([\"...\", print(p)]);\r\n            const n = p.getValue();\r\n\r\n            if (!n.comments || !n.comments.length) {\r\n              return printed;\r\n            }\r\n\r\n            return concat$d([indent$7(concat$d([softline$6, comments.printComments(p, () => printed, options)])), softline$6]);\r\n          }, n.type === \"JSXSpreadAttribute\" ? \"argument\" : \"expression\"), \"}\"]);\r\n        }\r\n\r\n      case \"JSXExpressionContainer\":\r\n        {\r\n          const parent = path.getParentNode(0);\r\n          const hasComments = n.expression.comments && n.expression.comments.length > 0;\r\n          const shouldInline = n.expression.type === \"JSXEmptyExpression\" || !hasComments && (n.expression.type === \"ArrayExpression\" || n.expression.type === \"ObjectExpression\" || n.expression.type === \"ArrowFunctionExpression\" || n.expression.type === \"CallExpression\" || n.expression.type === \"OptionalCallExpression\" || n.expression.type === \"FunctionExpression\" || n.expression.type === \"TemplateLiteral\" || n.expression.type === \"TaggedTemplateExpression\" || n.expression.type === \"DoExpression\" || isJSXNode$1(parent) && (n.expression.type === \"ConditionalExpression\" || isBinaryish$1(n.expression)));\r\n\r\n          if (shouldInline) {\r\n            return group$b(concat$d([\"{\", path.call(print, \"expression\"), lineSuffixBoundary$1, \"}\"]));\r\n          }\r\n\r\n          return group$b(concat$d([\"{\", indent$7(concat$d([softline$6, path.call(print, \"expression\")])), softline$6, lineSuffixBoundary$1, \"}\"]));\r\n        }\r\n\r\n      case \"JSXFragment\":\r\n      case \"JSXElement\":\r\n        {\r\n          const elem = comments.printComments(path, () => printJSXElement(path, options, print), options);\r\n          return maybeWrapJSXElementInParens(path, elem, options);\r\n        }\r\n\r\n      case \"JSXOpeningElement\":\r\n        {\r\n          const n = path.getValue();\r\n          const nameHasComments = n.name && n.name.comments && n.name.comments.length > 0 || n.typeParameters && n.typeParameters.comments && n.typeParameters.comments.length > 0; // Don't break self-closing elements with no attributes and no comments\r\n\r\n          if (n.selfClosing && !n.attributes.length && !nameHasComments) {\r\n            return concat$d([\"<\", path.call(print, \"name\"), path.call(print, \"typeParameters\"), \" />\"]);\r\n          } // don't break up opening elements with a single long text attribute\r\n\r\n\r\n          if (n.attributes && n.attributes.length === 1 && n.attributes[0].value && isStringLiteral$1(n.attributes[0].value) && !n.attributes[0].value.value.includes(\"\\n\") && // We should break for the following cases:\r\n          // <div\r\n          //   // comment\r\n          //   attr=\"value\"\r\n          // >\r\n          // <div\r\n          //   attr=\"value\"\r\n          //   // comment\r\n          // >\r\n          !nameHasComments && (!n.attributes[0].comments || !n.attributes[0].comments.length)) {\r\n            return group$b(concat$d([\"<\", path.call(print, \"name\"), path.call(print, \"typeParameters\"), \" \", concat$d(path.map(print, \"attributes\")), n.selfClosing ? \" />\" : \">\"]));\r\n          }\r\n\r\n          const lastAttrHasTrailingComments = n.attributes.length && hasTrailingComment$1(getLast$3(n.attributes));\r\n          const bracketSameLine = // Simple tags (no attributes and no comment in tag name) should be\r\n          // kept unbroken regardless of `jsxBracketSameLine`\r\n          !n.attributes.length && !nameHasComments || options.jsxBracketSameLine && ( // We should print the bracket in a new line for the following cases:\r\n          // <div\r\n          //   // comment\r\n          // >\r\n          // <div\r\n          //   attr // comment\r\n          // >\r\n          !nameHasComments || n.attributes.length) && !lastAttrHasTrailingComments; // We should print the opening element expanded if any prop value is a\r\n          // string literal with newlines\r\n\r\n          const shouldBreak = n.attributes && n.attributes.some(attr => attr.value && isStringLiteral$1(attr.value) && attr.value.value.includes(\"\\n\"));\r\n          return group$b(concat$d([\"<\", path.call(print, \"name\"), path.call(print, \"typeParameters\"), concat$d([indent$7(concat$d(path.map(attr => concat$d([line$9, print(attr)]), \"attributes\"))), n.selfClosing ? line$9 : bracketSameLine ? \">\" : softline$6]), n.selfClosing ? \"/>\" : bracketSameLine ? \"\" : \">\"]), {\r\n            shouldBreak\r\n          });\r\n        }\r\n\r\n      case \"JSXClosingElement\":\r\n        return concat$d([\"</\", path.call(print, \"name\"), \">\"]);\r\n\r\n      case \"JSXOpeningFragment\":\r\n      case \"JSXClosingFragment\":\r\n        {\r\n          const hasComment = n.comments && n.comments.length;\r\n          const hasOwnLineComment = hasComment && !n.comments.every(comments$1.isBlockComment);\r\n          const isOpeningFragment = n.type === \"JSXOpeningFragment\";\r\n          return concat$d([isOpeningFragment ? \"<\" : \"</\", indent$7(concat$d([hasOwnLineComment ? hardline$9 : hasComment && !isOpeningFragment ? \" \" : \"\", comments.printDanglingComments(path, options, true)])), hasOwnLineComment ? hardline$9 : \"\", \">\"]);\r\n        }\r\n\r\n      case \"JSXText\":\r\n        /* istanbul ignore next */\r\n        throw new Error(\"JSXTest should be handled by JSXElement\");\r\n\r\n      case \"JSXEmptyExpression\":\r\n        {\r\n          const requiresHardline = n.comments && !n.comments.every(comments$1.isBlockComment);\r\n          return concat$d([comments.printDanglingComments(path, options,\r\n          /* sameIndent */\r\n          !requiresHardline), requiresHardline ? hardline$9 : \"\"]);\r\n        }\r\n\r\n      case \"ClassBody\":\r\n        if (!n.comments && n.body.length === 0) {\r\n          return \"{}\";\r\n        }\r\n\r\n        return concat$d([\"{\", n.body.length > 0 ? indent$7(concat$d([hardline$9, path.call(bodyPath => {\r\n          return printStatementSequence(bodyPath, options, print);\r\n        }, \"body\")])) : comments.printDanglingComments(path, options), hardline$9, \"}\"]);\r\n\r\n      case \"ClassProperty\":\r\n      case \"TSAbstractClassProperty\":\r\n      case \"ClassPrivateProperty\":\r\n        {\r\n          if (n.decorators && n.decorators.length !== 0) {\r\n            parts.push(printDecorators(path, options, print));\r\n          }\r\n\r\n          if (n.accessibility) {\r\n            parts.push(n.accessibility + \" \");\r\n          }\r\n\r\n          if (n.declare) {\r\n            parts.push(\"declare \");\r\n          }\r\n\r\n          if (n.static) {\r\n            parts.push(\"static \");\r\n          }\r\n\r\n          if (n.type === \"TSAbstractClassProperty\" || n.abstract) {\r\n            parts.push(\"abstract \");\r\n          }\r\n\r\n          if (n.readonly) {\r\n            parts.push(\"readonly \");\r\n          }\r\n\r\n          const variance = getFlowVariance$1(n);\r\n\r\n          if (variance) {\r\n            parts.push(variance);\r\n          }\r\n\r\n          parts.push(printPropertyKey(path, options, print), printOptionalToken(path), printTypeAnnotation(path, options, print));\r\n\r\n          if (n.value) {\r\n            parts.push(\" =\", printAssignmentRight(n.key, n.value, path.call(print, \"value\"), options));\r\n          }\r\n\r\n          parts.push(semi);\r\n          return group$b(concat$d(parts));\r\n        }\r\n\r\n      case \"ClassDeclaration\":\r\n      case \"ClassExpression\":\r\n        if (n.declare) {\r\n          parts.push(\"declare \");\r\n        }\r\n\r\n        parts.push(concat$d(printClass(path, options, print)));\r\n        return concat$d(parts);\r\n\r\n      case \"TSInterfaceHeritage\":\r\n      case \"TSExpressionWithTypeArguments\":\r\n        // Babel AST\r\n        parts.push(path.call(print, \"expression\"));\r\n\r\n        if (n.typeParameters) {\r\n          parts.push(path.call(print, \"typeParameters\"));\r\n        }\r\n\r\n        return concat$d(parts);\r\n\r\n      case \"TemplateElement\":\r\n        return join$9(literalline$4, n.value.raw.split(/\\r?\\n/g));\r\n\r\n      case \"TemplateLiteral\":\r\n        {\r\n          let expressions = path.map(print, \"expressions\");\r\n          const parentNode = path.getParentNode();\r\n\r\n          if (isJestEachTemplateLiteral$1(n, parentNode)) {\r\n            const printed = printJestEachTemplateLiteral(n, expressions, options);\r\n\r\n            if (printed) {\r\n              return printed;\r\n            }\r\n          }\r\n\r\n          const isSimple = isSimpleTemplateLiteral$1(n);\r\n\r\n          if (isSimple) {\r\n            expressions = expressions.map(doc => printDocToString$2(doc, Object.assign({}, options, {\r\n              printWidth: Infinity\r\n            })).formatted);\r\n          }\r\n\r\n          parts.push(lineSuffixBoundary$1, \"`\");\r\n          path.each(childPath => {\r\n            const i = childPath.getName();\r\n            parts.push(print(childPath));\r\n\r\n            if (i < expressions.length) {\r\n              // For a template literal of the following form:\r\n              //   `someQuery {\r\n              //     ${call({\r\n              //       a,\r\n              //       b,\r\n              //     })}\r\n              //   }`\r\n              // the expression is on its own line (there is a \\n in the previous\r\n              // quasi literal), therefore we want to indent the JavaScript\r\n              // expression inside at the beginning of ${ instead of the beginning\r\n              // of the `.\r\n              const {\r\n                tabWidth\r\n              } = options;\r\n              const quasi = childPath.getValue();\r\n              const indentSize = getIndentSize$2(quasi.value.raw, tabWidth);\r\n              let printed = expressions[i];\r\n\r\n              if (!isSimple) {\r\n                // Breaks at the template element boundaries (${ and }) are preferred to breaking\r\n                // in the middle of a MemberExpression\r\n                if (n.expressions[i].comments && n.expressions[i].comments.length || n.expressions[i].type === \"MemberExpression\" || n.expressions[i].type === \"OptionalMemberExpression\" || n.expressions[i].type === \"ConditionalExpression\" || n.expressions[i].type === \"SequenceExpression\" || n.expressions[i].type === \"TSAsExpression\" || isBinaryish$1(n.expressions[i])) {\r\n                  printed = concat$d([indent$7(concat$d([softline$6, printed])), softline$6]);\r\n                }\r\n              }\r\n\r\n              const aligned = indentSize === 0 && quasi.value.raw.endsWith(\"\\n\") ? align$1(-Infinity, printed) : addAlignmentToDoc$2(printed, indentSize, tabWidth);\r\n              parts.push(group$b(concat$d([\"${\", aligned, lineSuffixBoundary$1, \"}\"])));\r\n            }\r\n          }, \"quasis\");\r\n          parts.push(\"`\");\r\n          return concat$d(parts);\r\n        }\r\n      // These types are unprintable because they serve as abstract\r\n      // supertypes for other (printable) types.\r\n\r\n      case \"TaggedTemplateExpression\":\r\n        return concat$d([path.call(print, \"tag\"), path.call(print, \"typeParameters\"), path.call(print, \"quasi\")]);\r\n\r\n      case \"Node\":\r\n      case \"Printable\":\r\n      case \"SourceLocation\":\r\n      case \"Position\":\r\n      case \"Statement\":\r\n      case \"Function\":\r\n      case \"Pattern\":\r\n      case \"Expression\":\r\n      case \"Declaration\":\r\n      case \"Specifier\":\r\n      case \"NamedSpecifier\":\r\n      case \"Comment\":\r\n      case \"MemberTypeAnnotation\": // Flow\r\n\r\n      case \"Type\":\r\n        /* istanbul ignore next */\r\n        throw new Error(\"unprintable type: \" + JSON.stringify(n.type));\r\n      // Type Annotations for Facebook Flow, typically stripped out or\r\n      // transformed away before printing.\r\n\r\n      case \"TypeAnnotation\":\r\n      case \"TSTypeAnnotation\":\r\n        if (n.typeAnnotation) {\r\n          return path.call(print, \"typeAnnotation\");\r\n        }\r\n        /* istanbul ignore next */\r\n\r\n\r\n        return \"\";\r\n\r\n      case \"TSTupleType\":\r\n      case \"TupleTypeAnnotation\":\r\n        {\r\n          const typesField = n.type === \"TSTupleType\" ? \"elementTypes\" : \"types\";\r\n          const hasRest = n[typesField].length > 0 && getLast$3(n[typesField]).type === \"TSRestType\";\r\n          return group$b(concat$d([\"[\", indent$7(concat$d([softline$6, printArrayItems(path, options, typesField, print)])), ifBreak$6(shouldPrintComma$1(options, \"all\") && !hasRest ? \",\" : \"\"), comments.printDanglingComments(path, options,\r\n          /* sameIndent */\r\n          true), softline$6, \"]\"]));\r\n        }\r\n\r\n      case \"ExistsTypeAnnotation\":\r\n        return \"*\";\r\n\r\n      case \"EmptyTypeAnnotation\":\r\n        return \"empty\";\r\n\r\n      case \"AnyTypeAnnotation\":\r\n        return \"any\";\r\n\r\n      case \"MixedTypeAnnotation\":\r\n        return \"mixed\";\r\n\r\n      case \"ArrayTypeAnnotation\":\r\n        return concat$d([path.call(print, \"elementType\"), \"[]\"]);\r\n\r\n      case \"BooleanTypeAnnotation\":\r\n        return \"boolean\";\r\n\r\n      case \"BooleanLiteralTypeAnnotation\":\r\n        return \"\" + n.value;\r\n\r\n      case \"DeclareClass\":\r\n        return printFlowDeclaration(path, printClass(path, options, print));\r\n\r\n      case \"TSDeclareFunction\":\r\n        // For TypeScript the TSDeclareFunction node shares the AST\r\n        // structure with FunctionDeclaration\r\n        return concat$d([n.declare ? \"declare \" : \"\", printFunctionDeclaration(path, print, options), semi]);\r\n\r\n      case \"DeclareFunction\":\r\n        return printFlowDeclaration(path, [\"function \", path.call(print, \"id\"), n.predicate ? \" \" : \"\", path.call(print, \"predicate\"), semi]);\r\n\r\n      case \"DeclareModule\":\r\n        return printFlowDeclaration(path, [\"module \", path.call(print, \"id\"), \" \", path.call(print, \"body\")]);\r\n\r\n      case \"DeclareModuleExports\":\r\n        return printFlowDeclaration(path, [\"module.exports\", \": \", path.call(print, \"typeAnnotation\"), semi]);\r\n\r\n      case \"DeclareVariable\":\r\n        return printFlowDeclaration(path, [\"var \", path.call(print, \"id\"), semi]);\r\n\r\n      case \"DeclareExportAllDeclaration\":\r\n        return concat$d([\"declare export * from \", path.call(print, \"source\")]);\r\n\r\n      case \"DeclareExportDeclaration\":\r\n        return concat$d([\"declare \", printExportDeclaration(path, options, print)]);\r\n\r\n      case \"DeclareOpaqueType\":\r\n      case \"OpaqueType\":\r\n        {\r\n          parts.push(\"opaque type \", path.call(print, \"id\"), path.call(print, \"typeParameters\"));\r\n\r\n          if (n.supertype) {\r\n            parts.push(\": \", path.call(print, \"supertype\"));\r\n          }\r\n\r\n          if (n.impltype) {\r\n            parts.push(\" = \", path.call(print, \"impltype\"));\r\n          }\r\n\r\n          parts.push(semi);\r\n\r\n          if (n.type === \"DeclareOpaqueType\") {\r\n            return printFlowDeclaration(path, parts);\r\n          }\r\n\r\n          return concat$d(parts);\r\n        }\r\n\r\n      case \"EnumDeclaration\":\r\n        return concat$d([\"enum \", path.call(print, \"id\"), \" \", path.call(print, \"body\")]);\r\n\r\n      case \"EnumBooleanBody\":\r\n      case \"EnumNumberBody\":\r\n      case \"EnumStringBody\":\r\n      case \"EnumSymbolBody\":\r\n        {\r\n          if (n.type === \"EnumSymbolBody\" || n.explicitType) {\r\n            let type = null;\r\n\r\n            switch (n.type) {\r\n              case \"EnumBooleanBody\":\r\n                type = \"boolean\";\r\n                break;\r\n\r\n              case \"EnumNumberBody\":\r\n                type = \"number\";\r\n                break;\r\n\r\n              case \"EnumStringBody\":\r\n                type = \"string\";\r\n                break;\r\n\r\n              case \"EnumSymbolBody\":\r\n                type = \"symbol\";\r\n                break;\r\n            }\r\n\r\n            parts.push(\"of \", type, \" \");\r\n          }\r\n\r\n          if (n.members.length === 0) {\r\n            parts.push(group$b(concat$d([\"{\", comments.printDanglingComments(path, options), softline$6, \"}\"])));\r\n          } else {\r\n            parts.push(group$b(concat$d([\"{\", indent$7(concat$d([hardline$9, printArrayItems(path, options, \"members\", print), shouldPrintComma$1(options) ? \",\" : \"\"])), comments.printDanglingComments(path, options,\r\n            /* sameIndent */\r\n            true), hardline$9, \"}\"])));\r\n          }\r\n\r\n          return concat$d(parts);\r\n        }\r\n\r\n      case \"EnumBooleanMember\":\r\n      case \"EnumNumberMember\":\r\n      case \"EnumStringMember\":\r\n        return concat$d([path.call(print, \"id\"), \" = \", typeof n.init === \"object\" ? path.call(print, \"init\") : String(n.init)]);\r\n\r\n      case \"EnumDefaultedMember\":\r\n        return path.call(print, \"id\");\r\n\r\n      case \"FunctionTypeAnnotation\":\r\n      case \"TSFunctionType\":\r\n        {\r\n          // FunctionTypeAnnotation is ambiguous:\r\n          // declare function foo(a: B): void; OR\r\n          // var A: (a: B) => void;\r\n          const parent = path.getParentNode(0);\r\n          const parentParent = path.getParentNode(1);\r\n          const parentParentParent = path.getParentNode(2);\r\n          let isArrowFunctionTypeAnnotation = n.type === \"TSFunctionType\" || !((parent.type === \"ObjectTypeProperty\" || parent.type === \"ObjectTypeInternalSlot\") && !getFlowVariance$1(parent) && !parent.optional && options.locStart(parent) === options.locStart(n) || parent.type === \"ObjectTypeCallProperty\" || parentParentParent && parentParentParent.type === \"DeclareFunction\");\r\n          let needsColon = isArrowFunctionTypeAnnotation && (parent.type === \"TypeAnnotation\" || parent.type === \"TSTypeAnnotation\"); // Sadly we can't put it inside of FastPath::needsColon because we are\r\n          // printing \":\" as part of the expression and it would put parenthesis\r\n          // around :(\r\n\r\n          const needsParens = needsColon && isArrowFunctionTypeAnnotation && (parent.type === \"TypeAnnotation\" || parent.type === \"TSTypeAnnotation\") && parentParent.type === \"ArrowFunctionExpression\";\r\n\r\n          if (isObjectTypePropertyAFunction$1(parent, options)) {\r\n            isArrowFunctionTypeAnnotation = true;\r\n            needsColon = true;\r\n          }\r\n\r\n          if (needsParens) {\r\n            parts.push(\"(\");\r\n          }\r\n\r\n          parts.push(printFunctionParams(path, print, options,\r\n          /* expandArg */\r\n          false,\r\n          /* printTypeParams */\r\n          true)); // The returnType is not wrapped in a TypeAnnotation, so the colon\r\n          // needs to be added separately.\r\n\r\n          if (n.returnType || n.predicate || n.typeAnnotation) {\r\n            parts.push(isArrowFunctionTypeAnnotation ? \" => \" : \": \", path.call(print, \"returnType\"), path.call(print, \"predicate\"), path.call(print, \"typeAnnotation\"));\r\n          }\r\n\r\n          if (needsParens) {\r\n            parts.push(\")\");\r\n          }\r\n\r\n          return group$b(concat$d(parts));\r\n        }\r\n\r\n      case \"TSRestType\":\r\n        return concat$d([\"...\", path.call(print, \"typeAnnotation\")]);\r\n\r\n      case \"TSOptionalType\":\r\n        return concat$d([path.call(print, \"typeAnnotation\"), \"?\"]);\r\n\r\n      case \"FunctionTypeParam\":\r\n        return concat$d([path.call(print, \"name\"), printOptionalToken(path), n.name ? \": \" : \"\", path.call(print, \"typeAnnotation\")]);\r\n\r\n      case \"GenericTypeAnnotation\":\r\n        return concat$d([path.call(print, \"id\"), path.call(print, \"typeParameters\")]);\r\n\r\n      case \"DeclareInterface\":\r\n      case \"InterfaceDeclaration\":\r\n      case \"InterfaceTypeAnnotation\":\r\n        {\r\n          if (n.type === \"DeclareInterface\" || n.declare) {\r\n            parts.push(\"declare \");\r\n          }\r\n\r\n          parts.push(\"interface\");\r\n\r\n          if (n.type === \"DeclareInterface\" || n.type === \"InterfaceDeclaration\") {\r\n            parts.push(\" \", path.call(print, \"id\"), path.call(print, \"typeParameters\"));\r\n          }\r\n\r\n          if (n.extends.length > 0) {\r\n            parts.push(group$b(indent$7(concat$d([line$9, \"extends \", (n.extends.length === 1 ? identity$2 : indent$7)(join$9(concat$d([\",\", line$9]), path.map(print, \"extends\")))]))));\r\n          }\r\n\r\n          parts.push(\" \", path.call(print, \"body\"));\r\n          return group$b(concat$d(parts));\r\n        }\r\n\r\n      case \"ClassImplements\":\r\n      case \"InterfaceExtends\":\r\n        return concat$d([path.call(print, \"id\"), path.call(print, \"typeParameters\")]);\r\n\r\n      case \"TSClassImplements\":\r\n        return concat$d([path.call(print, \"expression\"), path.call(print, \"typeParameters\")]);\r\n\r\n      case \"TSIntersectionType\":\r\n      case \"IntersectionTypeAnnotation\":\r\n        {\r\n          const types = path.map(print, \"types\");\r\n          const result = [];\r\n          let wasIndented = false;\r\n\r\n          for (let i = 0; i < types.length; ++i) {\r\n            if (i === 0) {\r\n              result.push(types[i]);\r\n            } else if (isObjectType$1(n.types[i - 1]) && isObjectType$1(n.types[i])) {\r\n              // If both are objects, don't indent\r\n              result.push(concat$d([\" & \", wasIndented ? indent$7(types[i]) : types[i]]));\r\n            } else if (!isObjectType$1(n.types[i - 1]) && !isObjectType$1(n.types[i])) {\r\n              // If no object is involved, go to the next line if it breaks\r\n              result.push(indent$7(concat$d([\" &\", line$9, types[i]])));\r\n            } else {\r\n              // If you go from object to non-object or vis-versa, then inline it\r\n              if (i > 1) {\r\n                wasIndented = true;\r\n              }\r\n\r\n              result.push(\" & \", i > 1 ? indent$7(types[i]) : types[i]);\r\n            }\r\n          }\r\n\r\n          return group$b(concat$d(result));\r\n        }\r\n\r\n      case \"TSUnionType\":\r\n      case \"UnionTypeAnnotation\":\r\n        {\r\n          // single-line variation\r\n          // A | B | C\r\n          // multi-line variation\r\n          // | A\r\n          // | B\r\n          // | C\r\n          const parent = path.getParentNode(); // If there's a leading comment, the parent is doing the indentation\r\n\r\n          const shouldIndent = parent.type !== \"TypeParameterInstantiation\" && parent.type !== \"TSTypeParameterInstantiation\" && parent.type !== \"GenericTypeAnnotation\" && parent.type !== \"TSTypeReference\" && parent.type !== \"TSTypeAssertion\" && parent.type !== \"TupleTypeAnnotation\" && parent.type !== \"TSTupleType\" && !(parent.type === \"FunctionTypeParam\" && !parent.name) && !((parent.type === \"TypeAlias\" || parent.type === \"VariableDeclarator\" || parent.type === \"TSTypeAliasDeclaration\") && hasLeadingOwnLineComment$1(options.originalText, n, options)); // {\r\n          //   a: string\r\n          // } | null | void\r\n          // should be inlined and not be printed in the multi-line variant\r\n\r\n          const shouldHug = shouldHugType(n); // We want to align the children but without its comment, so it looks like\r\n          // | child1\r\n          // // comment\r\n          // | child2\r\n\r\n          const printed = path.map(typePath => {\r\n            let printedType = typePath.call(print);\r\n\r\n            if (!shouldHug) {\r\n              printedType = align$1(2, printedType);\r\n            }\r\n\r\n            return comments.printComments(typePath, () => printedType, options);\r\n          }, \"types\");\r\n\r\n          if (shouldHug) {\r\n            return join$9(\" | \", printed);\r\n          }\r\n\r\n          const shouldAddStartLine = shouldIndent && !hasLeadingOwnLineComment$1(options.originalText, n, options);\r\n          const code = concat$d([ifBreak$6(concat$d([shouldAddStartLine ? line$9 : \"\", \"| \"])), join$9(concat$d([line$9, \"| \"]), printed)]);\r\n\r\n          if (needsParens_1(path, options)) {\r\n            return group$b(concat$d([indent$7(code), softline$6]));\r\n          }\r\n\r\n          if (parent.type === \"TupleTypeAnnotation\" && parent.types.length > 1 || parent.type === \"TSTupleType\" && parent.elementTypes.length > 1) {\r\n            return group$b(concat$d([indent$7(concat$d([ifBreak$6(concat$d([\"(\", softline$6])), code])), softline$6, ifBreak$6(\")\")]));\r\n          }\r\n\r\n          return group$b(shouldIndent ? indent$7(code) : code);\r\n        }\r\n\r\n      case \"NullableTypeAnnotation\":\r\n        return concat$d([\"?\", path.call(print, \"typeAnnotation\")]);\r\n\r\n      case \"TSNullKeyword\":\r\n      case \"NullLiteralTypeAnnotation\":\r\n        return \"null\";\r\n\r\n      case \"ThisTypeAnnotation\":\r\n        return \"this\";\r\n\r\n      case \"NumberTypeAnnotation\":\r\n        return \"number\";\r\n\r\n      case \"SymbolTypeAnnotation\":\r\n        return \"symbol\";\r\n\r\n      case \"ObjectTypeCallProperty\":\r\n        if (n.static) {\r\n          parts.push(\"static \");\r\n        }\r\n\r\n        parts.push(path.call(print, \"value\"));\r\n        return concat$d(parts);\r\n\r\n      case \"ObjectTypeIndexer\":\r\n        {\r\n          const variance = getFlowVariance$1(n);\r\n          return concat$d([variance || \"\", \"[\", path.call(print, \"id\"), n.id ? \": \" : \"\", path.call(print, \"key\"), \"]: \", path.call(print, \"value\")]);\r\n        }\r\n\r\n      case \"ObjectTypeProperty\":\r\n        {\r\n          const variance = getFlowVariance$1(n);\r\n          let modifier = \"\";\r\n\r\n          if (n.proto) {\r\n            modifier = \"proto \";\r\n          } else if (n.static) {\r\n            modifier = \"static \";\r\n          }\r\n\r\n          return concat$d([modifier, isGetterOrSetter$1(n) ? n.kind + \" \" : \"\", variance || \"\", printPropertyKey(path, options, print), printOptionalToken(path), isFunctionNotation$1(n, options) ? \"\" : \": \", path.call(print, \"value\")]);\r\n        }\r\n\r\n      case \"QualifiedTypeIdentifier\":\r\n        return concat$d([path.call(print, \"qualification\"), \".\", path.call(print, \"id\")]);\r\n\r\n      case \"StringLiteralTypeAnnotation\":\r\n        return nodeStr(n, options);\r\n\r\n      case \"NumberLiteralTypeAnnotation\":\r\n        assert.strictEqual(typeof n.value, \"number\");\r\n\r\n        if (n.extra != null) {\r\n          return printNumber$2(n.extra.raw);\r\n        }\r\n\r\n        return printNumber$2(n.raw);\r\n\r\n      case \"StringTypeAnnotation\":\r\n        return \"string\";\r\n\r\n      case \"DeclareTypeAlias\":\r\n      case \"TypeAlias\":\r\n        {\r\n          if (n.type === \"DeclareTypeAlias\" || n.declare) {\r\n            parts.push(\"declare \");\r\n          }\r\n\r\n          const printed = printAssignmentRight(n.id, n.right, path.call(print, \"right\"), options);\r\n          parts.push(\"type \", path.call(print, \"id\"), path.call(print, \"typeParameters\"), \" =\", printed, semi);\r\n          return group$b(concat$d(parts));\r\n        }\r\n\r\n      case \"TypeCastExpression\":\r\n        {\r\n          return concat$d([\"(\", path.call(print, \"expression\"), printTypeAnnotation(path, options, print), \")\"]);\r\n        }\r\n\r\n      case \"TypeParameterDeclaration\":\r\n      case \"TypeParameterInstantiation\":\r\n        {\r\n          const value = path.getValue();\r\n          const commentStart = value.range ? options.originalText.slice(0, value.range[0]).lastIndexOf(\"/*\") : -1; // As noted in the TypeCastExpression comments above, we're able to use a normal whitespace regex here\r\n          // because we know for sure that this is a type definition.\r\n\r\n          const commentSyntax = commentStart >= 0 && options.originalText.slice(commentStart).match(/^\\/\\*\\s*::/);\r\n\r\n          if (commentSyntax) {\r\n            return concat$d([\"/*:: \", printTypeParameters(path, options, print, \"params\"), \" */\"]);\r\n          }\r\n\r\n          return printTypeParameters(path, options, print, \"params\");\r\n        }\r\n\r\n      case \"TSTypeParameterDeclaration\":\r\n      case \"TSTypeParameterInstantiation\":\r\n        return printTypeParameters(path, options, print, \"params\");\r\n\r\n      case \"TSTypeParameter\":\r\n      case \"TypeParameter\":\r\n        {\r\n          const parent = path.getParentNode();\r\n\r\n          if (parent.type === \"TSMappedType\") {\r\n            parts.push(\"[\", path.call(print, \"name\"));\r\n\r\n            if (n.constraint) {\r\n              parts.push(\" in \", path.call(print, \"constraint\"));\r\n            }\r\n\r\n            parts.push(\"]\");\r\n            return concat$d(parts);\r\n          }\r\n\r\n          const variance = getFlowVariance$1(n);\r\n\r\n          if (variance) {\r\n            parts.push(variance);\r\n          }\r\n\r\n          parts.push(path.call(print, \"name\"));\r\n\r\n          if (n.bound) {\r\n            parts.push(\": \");\r\n            parts.push(path.call(print, \"bound\"));\r\n          }\r\n\r\n          if (n.constraint) {\r\n            parts.push(\" extends \", path.call(print, \"constraint\"));\r\n          }\r\n\r\n          if (n.default) {\r\n            parts.push(\" = \", path.call(print, \"default\"));\r\n          } // Keep comma if the file extension is .tsx and\r\n          // has one type parameter that isn't extend with any types.\r\n          // Because, otherwise formatted result will be invalid as tsx.\r\n\r\n\r\n          const grandParent = path.getNode(2);\r\n\r\n          if (parent.params && parent.params.length === 1 && isTSXFile$1(options) && !n.constraint && grandParent.type === \"ArrowFunctionExpression\") {\r\n            parts.push(\",\");\r\n          }\r\n\r\n          return concat$d(parts);\r\n        }\r\n\r\n      case \"TypeofTypeAnnotation\":\r\n        return concat$d([\"typeof \", path.call(print, \"argument\")]);\r\n\r\n      case \"VoidTypeAnnotation\":\r\n        return \"void\";\r\n\r\n      case \"InferredPredicate\":\r\n        return \"%checks\";\r\n      // Unhandled types below. If encountered, nodes of these types should\r\n      // be either left alone or desugared into AST types that are fully\r\n      // supported by the pretty-printer.\r\n\r\n      case \"DeclaredPredicate\":\r\n        return concat$d([\"%checks(\", path.call(print, \"value\"), \")\"]);\r\n\r\n      case \"TSAbstractKeyword\":\r\n        return \"abstract\";\r\n\r\n      case \"TSAnyKeyword\":\r\n        return \"any\";\r\n\r\n      case \"TSAsyncKeyword\":\r\n        return \"async\";\r\n\r\n      case \"TSBooleanKeyword\":\r\n        return \"boolean\";\r\n\r\n      case \"TSBigIntKeyword\":\r\n        return \"bigint\";\r\n\r\n      case \"TSConstKeyword\":\r\n        return \"const\";\r\n\r\n      case \"TSDeclareKeyword\":\r\n        return \"declare\";\r\n\r\n      case \"TSExportKeyword\":\r\n        return \"export\";\r\n\r\n      case \"TSNeverKeyword\":\r\n        return \"never\";\r\n\r\n      case \"TSNumberKeyword\":\r\n        return \"number\";\r\n\r\n      case \"TSObjectKeyword\":\r\n        return \"object\";\r\n\r\n      case \"TSProtectedKeyword\":\r\n        return \"protected\";\r\n\r\n      case \"TSPrivateKeyword\":\r\n        return \"private\";\r\n\r\n      case \"TSPublicKeyword\":\r\n        return \"public\";\r\n\r\n      case \"TSReadonlyKeyword\":\r\n        return \"readonly\";\r\n\r\n      case \"TSSymbolKeyword\":\r\n        return \"symbol\";\r\n\r\n      case \"TSStaticKeyword\":\r\n        return \"static\";\r\n\r\n      case \"TSStringKeyword\":\r\n        return \"string\";\r\n\r\n      case \"TSUndefinedKeyword\":\r\n        return \"undefined\";\r\n\r\n      case \"TSUnknownKeyword\":\r\n        return \"unknown\";\r\n\r\n      case \"TSVoidKeyword\":\r\n        return \"void\";\r\n\r\n      case \"TSAsExpression\":\r\n        return concat$d([path.call(print, \"expression\"), \" as \", path.call(print, \"typeAnnotation\")]);\r\n\r\n      case \"TSArrayType\":\r\n        return concat$d([path.call(print, \"elementType\"), \"[]\"]);\r\n\r\n      case \"TSPropertySignature\":\r\n        {\r\n          if (n.export) {\r\n            parts.push(\"export \");\r\n          }\r\n\r\n          if (n.accessibility) {\r\n            parts.push(n.accessibility + \" \");\r\n          }\r\n\r\n          if (n.static) {\r\n            parts.push(\"static \");\r\n          }\r\n\r\n          if (n.readonly) {\r\n            parts.push(\"readonly \");\r\n          }\r\n\r\n          parts.push(printPropertyKey(path, options, print), printOptionalToken(path));\r\n\r\n          if (n.typeAnnotation) {\r\n            parts.push(\": \");\r\n            parts.push(path.call(print, \"typeAnnotation\"));\r\n          } // This isn't valid semantically, but it's in the AST so we can print it.\r\n\r\n\r\n          if (n.initializer) {\r\n            parts.push(\" = \", path.call(print, \"initializer\"));\r\n          }\r\n\r\n          return concat$d(parts);\r\n        }\r\n\r\n      case \"TSParameterProperty\":\r\n        if (n.accessibility) {\r\n          parts.push(n.accessibility + \" \");\r\n        }\r\n\r\n        if (n.export) {\r\n          parts.push(\"export \");\r\n        }\r\n\r\n        if (n.static) {\r\n          parts.push(\"static \");\r\n        }\r\n\r\n        if (n.readonly) {\r\n          parts.push(\"readonly \");\r\n        }\r\n\r\n        parts.push(path.call(print, \"parameter\"));\r\n        return concat$d(parts);\r\n\r\n      case \"TSTypeReference\":\r\n        return concat$d([path.call(print, \"typeName\"), printTypeParameters(path, options, print, \"typeParameters\")]);\r\n\r\n      case \"TSTypeQuery\":\r\n        return concat$d([\"typeof \", path.call(print, \"exprName\")]);\r\n\r\n      case \"TSIndexSignature\":\r\n        {\r\n          const parent = path.getParentNode(); // The typescript parser accepts multiple parameters here. If you're\r\n          // using them, it makes sense to have a trailing comma. But if you\r\n          // aren't, this is more like a computed property name than an array.\r\n          // So we leave off the trailing comma when there's just one parameter.\r\n\r\n          const trailingComma = n.parameters.length > 1 ? ifBreak$6(shouldPrintComma$1(options) ? \",\" : \"\") : \"\";\r\n          const parametersGroup = group$b(concat$d([indent$7(concat$d([softline$6, join$9(concat$d([\", \", softline$6]), path.map(print, \"parameters\"))])), trailingComma, softline$6]));\r\n          return concat$d([n.export ? \"export \" : \"\", n.accessibility ? concat$d([n.accessibility, \" \"]) : \"\", n.static ? \"static \" : \"\", n.readonly ? \"readonly \" : \"\", \"[\", n.parameters ? parametersGroup : \"\", n.typeAnnotation ? \"]: \" : \"]\", n.typeAnnotation ? path.call(print, \"typeAnnotation\") : \"\", parent.type === \"ClassBody\" ? semi : \"\"]);\r\n        }\r\n\r\n      case \"TSTypePredicate\":\r\n        return concat$d([n.asserts ? \"asserts \" : \"\", path.call(print, \"parameterName\"), n.typeAnnotation ? concat$d([\" is \", path.call(print, \"typeAnnotation\")]) : \"\"]);\r\n\r\n      case \"TSNonNullExpression\":\r\n        return concat$d([path.call(print, \"expression\"), \"!\"]);\r\n\r\n      case \"TSThisType\":\r\n        return \"this\";\r\n\r\n      case \"TSImportType\":\r\n        return concat$d([!n.isTypeOf ? \"\" : \"typeof \", \"import(\", path.call(print, n.parameter ? \"parameter\" : \"argument\"), \")\", !n.qualifier ? \"\" : concat$d([\".\", path.call(print, \"qualifier\")]), printTypeParameters(path, options, print, \"typeParameters\")]);\r\n\r\n      case \"TSLiteralType\":\r\n        return path.call(print, \"literal\");\r\n\r\n      case \"TSIndexedAccessType\":\r\n        return concat$d([path.call(print, \"objectType\"), \"[\", path.call(print, \"indexType\"), \"]\"]);\r\n\r\n      case \"TSConstructSignatureDeclaration\":\r\n      case \"TSCallSignatureDeclaration\":\r\n      case \"TSConstructorType\":\r\n        {\r\n          if (n.type !== \"TSCallSignatureDeclaration\") {\r\n            parts.push(\"new \");\r\n          }\r\n\r\n          parts.push(group$b(printFunctionParams(path, print, options,\r\n          /* expandArg */\r\n          false,\r\n          /* printTypeParams */\r\n          true)));\r\n\r\n          if (n.returnType || n.typeAnnotation) {\r\n            const isType = n.type === \"TSConstructorType\";\r\n            parts.push(isType ? \" => \" : \": \", path.call(print, \"returnType\"), path.call(print, \"typeAnnotation\"));\r\n          }\r\n\r\n          return concat$d(parts);\r\n        }\r\n\r\n      case \"TSTypeOperator\":\r\n        return concat$d([n.operator, \" \", path.call(print, \"typeAnnotation\")]);\r\n\r\n      case \"TSMappedType\":\r\n        {\r\n          const shouldBreak = hasNewlineInRange$3(options.originalText, options.locStart(n), options.locEnd(n));\r\n          return group$b(concat$d([\"{\", indent$7(concat$d([options.bracketSpacing ? line$9 : softline$6, n.readonly ? concat$d([getTypeScriptMappedTypeModifier$1(n.readonly, \"readonly\"), \" \"]) : \"\", printTypeScriptModifiers(path, options, print), path.call(print, \"typeParameter\"), n.optional ? getTypeScriptMappedTypeModifier$1(n.optional, \"?\") : \"\", n.typeAnnotation ? \": \" : \"\", path.call(print, \"typeAnnotation\"), ifBreak$6(semi, \"\")])), comments.printDanglingComments(path, options,\r\n          /* sameIndent */\r\n          true), options.bracketSpacing ? line$9 : softline$6, \"}\"]), {\r\n            shouldBreak\r\n          });\r\n        }\r\n\r\n      case \"TSMethodSignature\":\r\n        parts.push(n.accessibility ? concat$d([n.accessibility, \" \"]) : \"\", n.export ? \"export \" : \"\", n.static ? \"static \" : \"\", n.readonly ? \"readonly \" : \"\", n.computed ? \"[\" : \"\", path.call(print, \"key\"), n.computed ? \"]\" : \"\", printOptionalToken(path), printFunctionParams(path, print, options,\r\n        /* expandArg */\r\n        false,\r\n        /* printTypeParams */\r\n        true));\r\n\r\n        if (n.returnType || n.typeAnnotation) {\r\n          parts.push(\": \", path.call(print, \"returnType\"), path.call(print, \"typeAnnotation\"));\r\n        }\r\n\r\n        return group$b(concat$d(parts));\r\n\r\n      case \"TSNamespaceExportDeclaration\":\r\n        parts.push(\"export as namespace \", path.call(print, \"id\"));\r\n\r\n        if (options.semi) {\r\n          parts.push(\";\");\r\n        }\r\n\r\n        return group$b(concat$d(parts));\r\n\r\n      case \"TSEnumDeclaration\":\r\n        if (n.declare) {\r\n          parts.push(\"declare \");\r\n        }\r\n\r\n        if (n.modifiers) {\r\n          parts.push(printTypeScriptModifiers(path, options, print));\r\n        }\r\n\r\n        if (n.const) {\r\n          parts.push(\"const \");\r\n        }\r\n\r\n        parts.push(\"enum \", path.call(print, \"id\"), \" \");\r\n\r\n        if (n.members.length === 0) {\r\n          parts.push(group$b(concat$d([\"{\", comments.printDanglingComments(path, options), softline$6, \"}\"])));\r\n        } else {\r\n          parts.push(group$b(concat$d([\"{\", indent$7(concat$d([hardline$9, printArrayItems(path, options, \"members\", print), shouldPrintComma$1(options, \"es5\") ? \",\" : \"\"])), comments.printDanglingComments(path, options,\r\n          /* sameIndent */\r\n          true), hardline$9, \"}\"])));\r\n        }\r\n\r\n        return concat$d(parts);\r\n\r\n      case \"TSEnumMember\":\r\n        parts.push(path.call(print, \"id\"));\r\n\r\n        if (n.initializer) {\r\n          parts.push(\" = \", path.call(print, \"initializer\"));\r\n        }\r\n\r\n        return concat$d(parts);\r\n\r\n      case \"TSImportEqualsDeclaration\":\r\n        if (n.isExport) {\r\n          parts.push(\"export \");\r\n        }\r\n\r\n        parts.push(\"import \", path.call(print, \"id\"), \" = \", path.call(print, \"moduleReference\"));\r\n\r\n        if (options.semi) {\r\n          parts.push(\";\");\r\n        }\r\n\r\n        return group$b(concat$d(parts));\r\n\r\n      case \"TSExternalModuleReference\":\r\n        return concat$d([\"require(\", path.call(print, \"expression\"), \")\"]);\r\n\r\n      case \"TSModuleDeclaration\":\r\n        {\r\n          const parent = path.getParentNode();\r\n          const isExternalModule = isLiteral$1(n.id);\r\n          const parentIsDeclaration = parent.type === \"TSModuleDeclaration\";\r\n          const bodyIsDeclaration = n.body && n.body.type === \"TSModuleDeclaration\";\r\n\r\n          if (parentIsDeclaration) {\r\n            parts.push(\".\");\r\n          } else {\r\n            if (n.declare) {\r\n              parts.push(\"declare \");\r\n            }\r\n\r\n            parts.push(printTypeScriptModifiers(path, options, print));\r\n            const textBetweenNodeAndItsId = options.originalText.slice(options.locStart(n), options.locStart(n.id)); // Global declaration looks like this:\r\n            // (declare)? global { ... }\r\n\r\n            const isGlobalDeclaration = n.id.type === \"Identifier\" && n.id.name === \"global\" && !/namespace|module/.test(textBetweenNodeAndItsId);\r\n\r\n            if (!isGlobalDeclaration) {\r\n              parts.push(isExternalModule || /(^|\\s)module(\\s|$)/.test(textBetweenNodeAndItsId) ? \"module \" : \"namespace \");\r\n            }\r\n          }\r\n\r\n          parts.push(path.call(print, \"id\"));\r\n\r\n          if (bodyIsDeclaration) {\r\n            parts.push(path.call(print, \"body\"));\r\n          } else if (n.body) {\r\n            parts.push(\" \", group$b(path.call(print, \"body\")));\r\n          } else {\r\n            parts.push(semi);\r\n          }\r\n\r\n          return concat$d(parts);\r\n        }\r\n\r\n      case \"PrivateName\":\r\n        return concat$d([\"#\", path.call(print, \"id\")]);\r\n      // TODO: Temporary auto-generated node type. To remove when typescript-estree has proper support for private fields.\r\n\r\n      case \"TSPrivateIdentifier\":\r\n        return n.escapedText;\r\n\r\n      case \"TSConditionalType\":\r\n        return printTernaryOperator(path, options, print, {\r\n          beforeParts: () => [path.call(print, \"checkType\"), \" \", \"extends\", \" \", path.call(print, \"extendsType\")],\r\n          afterParts: () => [],\r\n          shouldCheckJsx: false,\r\n          conditionalNodeType: \"TSConditionalType\",\r\n          consequentNodePropertyName: \"trueType\",\r\n          alternateNodePropertyName: \"falseType\",\r\n          testNodePropertyNames: [\"checkType\", \"extendsType\"]\r\n        });\r\n\r\n      case \"TSInferType\":\r\n        return concat$d([\"infer\", \" \", path.call(print, \"typeParameter\")]);\r\n\r\n      case \"InterpreterDirective\":\r\n        parts.push(\"#!\", n.value, hardline$9);\r\n\r\n        if (isNextLineEmpty$4(options.originalText, n, options.locEnd)) {\r\n          parts.push(hardline$9);\r\n        }\r\n\r\n        return concat$d(parts);\r\n\r\n      case \"NGRoot\":\r\n        return concat$d([].concat(path.call(print, \"node\"), !n.node.comments || n.node.comments.length === 0 ? [] : concat$d([\" //\", n.node.comments[0].value.trimEnd()])));\r\n\r\n      case \"NGChainedExpression\":\r\n        return group$b(join$9(concat$d([\";\", line$9]), path.map(childPath => hasNgSideEffect$1(childPath) ? print(childPath) : concat$d([\"(\", print(childPath), \")\"]), \"expressions\")));\r\n\r\n      case \"NGEmptyExpression\":\r\n        return \"\";\r\n\r\n      case \"NGQuotedExpression\":\r\n        return concat$d([n.prefix, \": \", n.value.trim()]);\r\n\r\n      case \"NGMicrosyntax\":\r\n        return concat$d(path.map((childPath, index) => concat$d([index === 0 ? \"\" : isNgForOf$1(childPath.getValue(), index, n) ? \" \" : concat$d([\";\", line$9]), print(childPath)]), \"body\"));\r\n\r\n      case \"NGMicrosyntaxKey\":\r\n        return /^[a-z_$][a-z0-9_$]*(-[a-z_$][a-z0-9_$])*$/i.test(n.name) ? n.name : JSON.stringify(n.name);\r\n\r\n      case \"NGMicrosyntaxExpression\":\r\n        return concat$d([path.call(print, \"expression\"), n.alias === null ? \"\" : concat$d([\" as \", path.call(print, \"alias\")])]);\r\n\r\n      case \"NGMicrosyntaxKeyedExpression\":\r\n        {\r\n          const index = path.getName();\r\n          const parentNode = path.getParentNode();\r\n          const shouldNotPrintColon = isNgForOf$1(n, index, parentNode) || (index === 1 && (n.key.name === \"then\" || n.key.name === \"else\") || index === 2 && n.key.name === \"else\" && parentNode.body[index - 1].type === \"NGMicrosyntaxKeyedExpression\" && parentNode.body[index - 1].key.name === \"then\") && parentNode.body[0].type === \"NGMicrosyntaxExpression\";\r\n          return concat$d([path.call(print, \"key\"), shouldNotPrintColon ? \" \" : \": \", path.call(print, \"expression\")]);\r\n        }\r\n\r\n      case \"NGMicrosyntaxLet\":\r\n        return concat$d([\"let \", path.call(print, \"key\"), n.value === null ? \"\" : concat$d([\" = \", path.call(print, \"value\")])]);\r\n\r\n      case \"NGMicrosyntaxAs\":\r\n        return concat$d([path.call(print, \"key\"), \" as \", path.call(print, \"alias\")]);\r\n\r\n      case \"ArgumentPlaceholder\":\r\n        return \"?\";\r\n      // These are not valid TypeScript. Printing them just for the sake of error recovery.\r\n\r\n      case \"TSJSDocAllType\":\r\n        return \"*\";\r\n\r\n      case \"TSJSDocUnknownType\":\r\n        return \"?\";\r\n\r\n      case \"TSJSDocNullableType\":\r\n        return concat$d([\"?\", path.call(print, \"typeAnnotation\")]);\r\n\r\n      case \"TSJSDocNonNullableType\":\r\n        return concat$d([\"!\", path.call(print, \"typeAnnotation\")]);\r\n\r\n      case \"TSJSDocFunctionType\":\r\n        return concat$d([\"function(\", // The parameters could be here, but typescript-estree doesn't convert them anyway (throws an error).\r\n        \"): \", path.call(print, \"typeAnnotation\")]);\r\n\r\n      default:\r\n        /* istanbul ignore next */\r\n        throw new Error(\"unknown type: \" + JSON.stringify(n.type));\r\n    }\r\n  }\r\n\r\n  function printStatementSequence(path, options, print) {\r\n    const printed = [];\r\n    const bodyNode = path.getNode();\r\n    const isClass = bodyNode.type === \"ClassBody\";\r\n    path.map((stmtPath, i) => {\r\n      const stmt = stmtPath.getValue(); // Just in case the AST has been modified to contain falsy\r\n      // \"statements,\" it's safer simply to skip them.\r\n\r\n      /* istanbul ignore if */\r\n\r\n      if (!stmt) {\r\n        return;\r\n      } // Skip printing EmptyStatement nodes to avoid leaving stray\r\n      // semicolons lying around.\r\n\r\n\r\n      if (stmt.type === \"EmptyStatement\") {\r\n        return;\r\n      }\r\n\r\n      const stmtPrinted = print(stmtPath);\r\n      const text = options.originalText;\r\n      const parts = []; // in no-semi mode, prepend statement with semicolon if it might break ASI\r\n      // don't prepend the only JSX element in a program with semicolon\r\n\r\n      if (!options.semi && !isClass && !isTheOnlyJSXElementInMarkdown$1(options, stmtPath) && stmtNeedsASIProtection(stmtPath, options)) {\r\n        if (stmt.comments && stmt.comments.some(comment => comment.leading)) {\r\n          parts.push(print(stmtPath, {\r\n            needsSemi: true\r\n          }));\r\n        } else {\r\n          parts.push(\";\", stmtPrinted);\r\n        }\r\n      } else {\r\n        parts.push(stmtPrinted);\r\n      }\r\n\r\n      if (!options.semi && isClass) {\r\n        if (classPropMayCauseASIProblems$1(stmtPath)) {\r\n          parts.push(\";\");\r\n        } else if (stmt.type === \"ClassProperty\") {\r\n          const nextChild = bodyNode.body[i + 1];\r\n\r\n          if (classChildNeedsASIProtection$1(nextChild)) {\r\n            parts.push(\";\");\r\n          }\r\n        }\r\n      }\r\n\r\n      if (isNextLineEmpty$4(text, stmt, options.locEnd) && !isLastStatement$1(stmtPath)) {\r\n        parts.push(hardline$9);\r\n      }\r\n\r\n      printed.push(concat$d(parts));\r\n    });\r\n    return join$9(hardline$9, printed);\r\n  }\r\n\r\n  function printPropertyKey(path, options, print) {\r\n    const node = path.getNode();\r\n\r\n    if (node.computed) {\r\n      return concat$d([\"[\", path.call(print, \"key\"), \"]\"]);\r\n    }\r\n\r\n    const parent = path.getParentNode();\r\n    const {\r\n      key\r\n    } = node;\r\n\r\n    if (node.type === \"ClassPrivateProperty\" && // flow has `Identifier` key, and babel has `PrivateName` key\r\n    key.type === \"Identifier\") {\r\n      return concat$d([\"#\", path.call(print, \"key\")]);\r\n    }\r\n\r\n    if (options.quoteProps === \"consistent\" && !needsQuoteProps.has(parent)) {\r\n      const objectHasStringProp = (parent.properties || parent.body || parent.members).some(prop => !prop.computed && prop.key && isStringLiteral$1(prop.key) && !isStringPropSafeToCoerceToIdentifier$1(prop, options));\r\n      needsQuoteProps.set(parent, objectHasStringProp);\r\n    }\r\n\r\n    if (key.type === \"Identifier\" && (options.parser === \"json\" || options.quoteProps === \"consistent\" && needsQuoteProps.get(parent))) {\r\n      // a -> \"a\"\r\n      const prop = printString$2(JSON.stringify(key.name), options);\r\n      return path.call(keyPath => comments.printComments(keyPath, () => prop, options), \"key\");\r\n    }\r\n\r\n    if (isStringPropSafeToCoerceToIdentifier$1(node, options) && (options.quoteProps === \"as-needed\" || options.quoteProps === \"consistent\" && !needsQuoteProps.get(parent))) {\r\n      // 'a' -> a\r\n      return path.call(keyPath => comments.printComments(keyPath, () => key.value, options), \"key\");\r\n    }\r\n\r\n    return path.call(print, \"key\");\r\n  }\r\n\r\n  function printMethod(path, options, print) {\r\n    const node = path.getNode();\r\n    const {\r\n      kind\r\n    } = node;\r\n    const value = node.value || node;\r\n    const parts = [];\r\n\r\n    if (!kind || kind === \"init\" || kind === \"method\" || kind === \"constructor\") {\r\n      if (value.async) {\r\n        parts.push(\"async \");\r\n      }\r\n\r\n      if (value.generator) {\r\n        parts.push(\"*\");\r\n      }\r\n    } else {\r\n      assert.ok(kind === \"get\" || kind === \"set\");\r\n      parts.push(kind, \" \");\r\n    }\r\n\r\n    parts.push(printPropertyKey(path, options, print), node.optional || node.key.optional ? \"?\" : \"\", node === value ? printMethodInternal(path, options, print) : path.call(path => printMethodInternal(path, options, print), \"value\"));\r\n    return concat$d(parts);\r\n  }\r\n\r\n  function printMethodInternal(path, options, print) {\r\n    const parts = [printFunctionTypeParameters(path, options, print), group$b(concat$d([printFunctionParams(path, print, options), printReturnType(path, print, options)]))];\r\n\r\n    if (path.getNode().body) {\r\n      parts.push(\" \", path.call(print, \"body\"));\r\n    } else {\r\n      parts.push(options.semi ? \";\" : \"\");\r\n    }\r\n\r\n    return concat$d(parts);\r\n  }\r\n\r\n  function couldGroupArg(arg) {\r\n    return arg.type === \"ObjectExpression\" && (arg.properties.length > 0 || arg.comments) || arg.type === \"ArrayExpression\" && (arg.elements.length > 0 || arg.comments) || arg.type === \"TSTypeAssertion\" && couldGroupArg(arg.expression) || arg.type === \"TSAsExpression\" && couldGroupArg(arg.expression) || arg.type === \"FunctionExpression\" || arg.type === \"ArrowFunctionExpression\" && ( // we want to avoid breaking inside composite return types but not simple keywords\r\n    // https://github.com/prettier/prettier/issues/4070\r\n    // export class Thing implements OtherThing {\r\n    //   do: (type: Type) => Provider<Prop> = memoize(\r\n    //     (type: ObjectType): Provider<Opts> => {}\r\n    //   );\r\n    // }\r\n    // https://github.com/prettier/prettier/issues/6099\r\n    // app.get(\"/\", (req, res): void => {\r\n    //   res.send(\"Hello World!\");\r\n    // });\r\n    !arg.returnType || !arg.returnType.typeAnnotation || arg.returnType.typeAnnotation.type !== \"TSTypeReference\") && (arg.body.type === \"BlockStatement\" || arg.body.type === \"ArrowFunctionExpression\" || arg.body.type === \"ObjectExpression\" || arg.body.type === \"ArrayExpression\" || arg.body.type === \"CallExpression\" || arg.body.type === \"OptionalCallExpression\" || arg.body.type === \"ConditionalExpression\" || isJSXNode$1(arg.body));\r\n  }\r\n\r\n  function shouldGroupLastArg(args) {\r\n    const lastArg = getLast$3(args);\r\n    const penultimateArg = getPenultimate$1(args);\r\n    return !hasLeadingComment$3(lastArg) && !hasTrailingComment$1(lastArg) && couldGroupArg(lastArg) && ( // If the last two arguments are of the same type,\r\n    // disable last element expansion.\r\n    !penultimateArg || penultimateArg.type !== lastArg.type);\r\n  }\r\n\r\n  function shouldGroupFirstArg(args) {\r\n    if (args.length !== 2) {\r\n      return false;\r\n    }\r\n\r\n    const [firstArg, secondArg] = args;\r\n    return (!firstArg.comments || !firstArg.comments.length) && (firstArg.type === \"FunctionExpression\" || firstArg.type === \"ArrowFunctionExpression\" && firstArg.body.type === \"BlockStatement\") && secondArg.type !== \"FunctionExpression\" && secondArg.type !== \"ArrowFunctionExpression\" && secondArg.type !== \"ConditionalExpression\" && !couldGroupArg(secondArg);\r\n  }\r\n\r\n  function printJestEachTemplateLiteral(node, expressions, options) {\r\n    /**\r\n     * a    | b    | expected\r\n     * ${1} | ${1} | ${2}\r\n     * ${1} | ${2} | ${3}\r\n     * ${2} | ${1} | ${3}\r\n     */\r\n    const headerNames = node.quasis[0].value.raw.trim().split(/\\s*\\|\\s*/);\r\n\r\n    if (headerNames.length > 1 || headerNames.some(headerName => headerName.length !== 0)) {\r\n      const parts = [];\r\n      const stringifiedExpressions = expressions.map(doc => \"${\" + printDocToString$2(doc, Object.assign({}, options, {\r\n        printWidth: Infinity,\r\n        endOfLine: \"lf\"\r\n      })).formatted + \"}\");\r\n      const tableBody = [{\r\n        hasLineBreak: false,\r\n        cells: []\r\n      }];\r\n\r\n      for (let i = 1; i < node.quasis.length; i++) {\r\n        const row = tableBody[tableBody.length - 1];\r\n        const correspondingExpression = stringifiedExpressions[i - 1];\r\n        row.cells.push(correspondingExpression);\r\n\r\n        if (correspondingExpression.includes(\"\\n\")) {\r\n          row.hasLineBreak = true;\r\n        }\r\n\r\n        if (node.quasis[i].value.raw.includes(\"\\n\")) {\r\n          tableBody.push({\r\n            hasLineBreak: false,\r\n            cells: []\r\n          });\r\n        }\r\n      }\r\n\r\n      const maxColumnCount = Math.max(headerNames.length, ...tableBody.map(row => row.cells.length));\r\n      const maxColumnWidths = Array.from({\r\n        length: maxColumnCount\r\n      }).fill(0);\r\n      const table = [{\r\n        cells: headerNames\r\n      }, ...tableBody.filter(row => row.cells.length !== 0)];\r\n\r\n      for (const {\r\n        cells\r\n      } of table.filter(row => !row.hasLineBreak)) {\r\n        cells.forEach((cell, index) => {\r\n          maxColumnWidths[index] = Math.max(maxColumnWidths[index], getStringWidth$3(cell));\r\n        });\r\n      }\r\n\r\n      parts.push(lineSuffixBoundary$1, \"`\", indent$7(concat$d([hardline$9, join$9(hardline$9, table.map(row => join$9(\" | \", row.cells.map((cell, index) => row.hasLineBreak ? cell : cell + \" \".repeat(maxColumnWidths[index] - getStringWidth$3(cell))))))])), hardline$9, \"`\");\r\n      return concat$d(parts);\r\n    }\r\n  }\r\n\r\n  function printArgumentsList(path, options, print) {\r\n    const node = path.getValue();\r\n    const args = node.arguments;\r\n\r\n    if (args.length === 0) {\r\n      return concat$d([\"(\", comments.printDanglingComments(path, options,\r\n      /* sameIndent */\r\n      true), \")\"]);\r\n    } // useEffect(() => { ... }, [foo, bar, baz])\r\n\r\n\r\n    if (args.length === 2 && args[0].type === \"ArrowFunctionExpression\" && args[0].params.length === 0 && args[0].body.type === \"BlockStatement\" && args[1].type === \"ArrayExpression\" && !args.find(arg => arg.comments)) {\r\n      return concat$d([\"(\", path.call(print, \"arguments\", 0), \", \", path.call(print, \"arguments\", 1), \")\"]);\r\n    } // func(\r\n    //   ({\r\n    //     a,\r\n    //     b\r\n    //   }) => {}\r\n    // );\r\n\r\n\r\n    function shouldBreakForArrowFunctionInArguments(arg, argPath) {\r\n      if (!arg || arg.type !== \"ArrowFunctionExpression\" || !arg.body || arg.body.type !== \"BlockStatement\" || !arg.params || arg.params.length < 1) {\r\n        return false;\r\n      }\r\n\r\n      let shouldBreak = false;\r\n      argPath.each(paramPath => {\r\n        const printed = concat$d([print(paramPath)]);\r\n        shouldBreak = shouldBreak || willBreak$1(printed);\r\n      }, \"params\");\r\n      return shouldBreak;\r\n    }\r\n\r\n    let anyArgEmptyLine = false;\r\n    let shouldBreakForArrowFunction = false;\r\n    let hasEmptyLineFollowingFirstArg = false;\r\n    const lastArgIndex = args.length - 1;\r\n    const printedArguments = path.map((argPath, index) => {\r\n      const arg = argPath.getNode();\r\n      const parts = [print(argPath)];\r\n\r\n      if (index === lastArgIndex) ; else if (isNextLineEmpty$4(options.originalText, arg, options.locEnd)) {\r\n        if (index === 0) {\r\n          hasEmptyLineFollowingFirstArg = true;\r\n        }\r\n\r\n        anyArgEmptyLine = true;\r\n        parts.push(\",\", hardline$9, hardline$9);\r\n      } else {\r\n        parts.push(\",\", line$9);\r\n      }\r\n\r\n      shouldBreakForArrowFunction = shouldBreakForArrowFunctionInArguments(arg, argPath);\r\n      return concat$d(parts);\r\n    }, \"arguments\");\r\n    const maybeTrailingComma = // Dynamic imports cannot have trailing commas\r\n    !(node.callee && node.callee.type === \"Import\") && shouldPrintComma$1(options, \"all\") ? \",\" : \"\";\r\n\r\n    function allArgsBrokenOut() {\r\n      return group$b(concat$d([\"(\", indent$7(concat$d([line$9, concat$d(printedArguments)])), maybeTrailingComma, line$9, \")\"]), {\r\n        shouldBreak: true\r\n      });\r\n    }\r\n\r\n    if (path.getParentNode().type !== \"Decorator\" && isFunctionCompositionArgs$1(args)) {\r\n      return allArgsBrokenOut();\r\n    }\r\n\r\n    const shouldGroupFirst = shouldGroupFirstArg(args);\r\n    const shouldGroupLast = shouldGroupLastArg(args);\r\n\r\n    if (shouldGroupFirst || shouldGroupLast) {\r\n      const shouldBreak = (shouldGroupFirst ? printedArguments.slice(1).some(willBreak$1) : printedArguments.slice(0, -1).some(willBreak$1)) || anyArgEmptyLine || shouldBreakForArrowFunction; // We want to print the last argument with a special flag\r\n\r\n      let printedExpanded;\r\n      let i = 0;\r\n      path.each(argPath => {\r\n        if (shouldGroupFirst && i === 0) {\r\n          printedExpanded = [concat$d([argPath.call(p => print(p, {\r\n            expandFirstArg: true\r\n          })), printedArguments.length > 1 ? \",\" : \"\", hasEmptyLineFollowingFirstArg ? hardline$9 : line$9, hasEmptyLineFollowingFirstArg ? hardline$9 : \"\"])].concat(printedArguments.slice(1));\r\n        }\r\n\r\n        if (shouldGroupLast && i === args.length - 1) {\r\n          printedExpanded = printedArguments.slice(0, -1).concat(argPath.call(p => print(p, {\r\n            expandLastArg: true\r\n          })));\r\n        }\r\n\r\n        i++;\r\n      }, \"arguments\");\r\n      const somePrintedArgumentsWillBreak = printedArguments.some(willBreak$1);\r\n      const simpleConcat = concat$d([\"(\", concat$d(printedExpanded), \")\"]);\r\n      return concat$d([somePrintedArgumentsWillBreak ? breakParent$3 : \"\", conditionalGroup$1([!somePrintedArgumentsWillBreak && !node.typeArguments && !node.typeParameters ? simpleConcat : ifBreak$6(allArgsBrokenOut(), simpleConcat), shouldGroupFirst ? concat$d([\"(\", group$b(printedExpanded[0], {\r\n        shouldBreak: true\r\n      }), concat$d(printedExpanded.slice(1)), \")\"]) : concat$d([\"(\", concat$d(printedArguments.slice(0, -1)), group$b(getLast$3(printedExpanded), {\r\n        shouldBreak: true\r\n      }), \")\"]), allArgsBrokenOut()], {\r\n        shouldBreak\r\n      })]);\r\n    }\r\n\r\n    const contents = concat$d([\"(\", indent$7(concat$d([softline$6, concat$d(printedArguments)])), ifBreak$6(maybeTrailingComma), softline$6, \")\"]);\r\n\r\n    if (isLongCurriedCallExpression$1(path)) {\r\n      // By not wrapping the arguments in a group, the printer prioritizes\r\n      // breaking up these arguments rather than the args of the parent call.\r\n      return contents;\r\n    }\r\n\r\n    return group$b(contents, {\r\n      shouldBreak: printedArguments.some(willBreak$1) || anyArgEmptyLine\r\n    });\r\n  }\r\n\r\n  function printTypeAnnotation(path, options, print) {\r\n    const node = path.getValue();\r\n\r\n    if (!node.typeAnnotation) {\r\n      return \"\";\r\n    }\r\n\r\n    const parentNode = path.getParentNode();\r\n    const isDefinite = node.definite || parentNode && parentNode.type === \"VariableDeclarator\" && parentNode.definite;\r\n    const isFunctionDeclarationIdentifier = parentNode.type === \"DeclareFunction\" && parentNode.id === node;\r\n\r\n    if (isFlowAnnotationComment$1(options.originalText, node.typeAnnotation, options)) {\r\n      return concat$d([\" /*: \", path.call(print, \"typeAnnotation\"), \" */\"]);\r\n    }\r\n\r\n    return concat$d([isFunctionDeclarationIdentifier ? \"\" : isDefinite ? \"!: \" : \": \", path.call(print, \"typeAnnotation\")]);\r\n  }\r\n\r\n  function printFunctionTypeParameters(path, options, print) {\r\n    const fun = path.getValue();\r\n\r\n    if (fun.typeArguments) {\r\n      return path.call(print, \"typeArguments\");\r\n    }\r\n\r\n    if (fun.typeParameters) {\r\n      return path.call(print, \"typeParameters\");\r\n    }\r\n\r\n    return \"\";\r\n  }\r\n\r\n  function printFunctionParams(path, print, options, expandArg, printTypeParams) {\r\n    const fun = path.getValue();\r\n    const parent = path.getParentNode();\r\n    const paramsField = fun.parameters ? \"parameters\" : \"params\";\r\n    const isParametersInTestCall = isTestCall$1(parent);\r\n    const shouldHugParameters = shouldHugArguments(fun);\r\n    const shouldExpandParameters = expandArg && !(fun[paramsField] && fun[paramsField].some(n => n.comments));\r\n    const typeParams = printTypeParams ? printFunctionTypeParameters(path, options, print) : \"\";\r\n    let printed = [];\r\n\r\n    if (fun[paramsField]) {\r\n      const lastArgIndex = fun[paramsField].length - 1;\r\n      printed = path.map((childPath, index) => {\r\n        const parts = [];\r\n        const param = childPath.getValue();\r\n        parts.push(print(childPath));\r\n\r\n        if (index === lastArgIndex) {\r\n          if (fun.rest) {\r\n            parts.push(\",\", line$9);\r\n          }\r\n        } else if (isParametersInTestCall || shouldHugParameters || shouldExpandParameters) {\r\n          parts.push(\", \");\r\n        } else if (isNextLineEmpty$4(options.originalText, param, options.locEnd)) {\r\n          parts.push(\",\", hardline$9, hardline$9);\r\n        } else {\r\n          parts.push(\",\", line$9);\r\n        }\r\n\r\n        return concat$d(parts);\r\n      }, paramsField);\r\n    }\r\n\r\n    if (fun.rest) {\r\n      printed.push(concat$d([\"...\", path.call(print, \"rest\")]));\r\n    }\r\n\r\n    if (printed.length === 0) {\r\n      return concat$d([typeParams, \"(\", comments.printDanglingComments(path, options,\r\n      /* sameIndent */\r\n      true, comment => getNextNonSpaceNonCommentCharacter$1(options.originalText, comment, options.locEnd) === \")\"), \")\"]);\r\n    }\r\n\r\n    const lastParam = getLast$3(fun[paramsField]); // If the parent is a call with the first/last argument expansion and this is the\r\n    // params of the first/last argument, we don't want the arguments to break and instead\r\n    // want the whole expression to be on a new line.\r\n    //\r\n    // Good:                 Bad:\r\n    //   verylongcall(         verylongcall((\r\n    //     (a, b) => {           a,\r\n    //     }                     b,\r\n    //   })                    ) => {\r\n    //                         })\r\n\r\n    if (shouldExpandParameters) {\r\n      return group$b(concat$d([removeLines$2(typeParams), \"(\", concat$d(printed.map(removeLines$2)), \")\"]));\r\n    } // Single object destructuring should hug\r\n    //\r\n    // function({\r\n    //   a,\r\n    //   b,\r\n    //   c\r\n    // }) {}\r\n\r\n\r\n    const hasNotParameterDecorator = fun[paramsField].every(param => !param.decorators);\r\n\r\n    if (shouldHugParameters && hasNotParameterDecorator) {\r\n      return concat$d([typeParams, \"(\", concat$d(printed), \")\"]);\r\n    } // don't break in specs, eg; `it(\"should maintain parens around done even when long\", (done) => {})`\r\n\r\n\r\n    if (isParametersInTestCall) {\r\n      return concat$d([typeParams, \"(\", concat$d(printed), \")\"]);\r\n    }\r\n\r\n    const isFlowShorthandWithOneArg = (isObjectTypePropertyAFunction$1(parent, options) || isTypeAnnotationAFunction$1(parent, options) || parent.type === \"TypeAlias\" || parent.type === \"UnionTypeAnnotation\" || parent.type === \"TSUnionType\" || parent.type === \"IntersectionTypeAnnotation\" || parent.type === \"FunctionTypeAnnotation\" && parent.returnType === fun) && fun[paramsField].length === 1 && fun[paramsField][0].name === null && fun[paramsField][0].typeAnnotation && fun.typeParameters === null && isSimpleFlowType$1(fun[paramsField][0].typeAnnotation) && !fun.rest;\r\n\r\n    if (isFlowShorthandWithOneArg) {\r\n      if (options.arrowParens === \"always\") {\r\n        return concat$d([\"(\", concat$d(printed), \")\"]);\r\n      }\r\n\r\n      return concat$d(printed);\r\n    }\r\n\r\n    const canHaveTrailingComma = !(lastParam && lastParam.type === \"RestElement\") && !fun.rest;\r\n    return concat$d([typeParams, \"(\", indent$7(concat$d([softline$6, concat$d(printed)])), ifBreak$6(canHaveTrailingComma && shouldPrintComma$1(options, \"all\") ? \",\" : \"\"), softline$6, \")\"]);\r\n  }\r\n\r\n  function shouldPrintParamsWithoutParens(path, options) {\r\n    if (options.arrowParens === \"always\") {\r\n      return false;\r\n    }\r\n\r\n    if (options.arrowParens === \"avoid\") {\r\n      const node = path.getValue();\r\n      return canPrintParamsWithoutParens(node);\r\n    } // Fallback default; should be unreachable\r\n\r\n\r\n    return false;\r\n  }\r\n\r\n  function canPrintParamsWithoutParens(node) {\r\n    return node.params.length === 1 && !node.rest && !node.typeParameters && !hasDanglingComments$1(node) && node.params[0].type === \"Identifier\" && !node.params[0].typeAnnotation && !node.params[0].comments && !node.params[0].optional && !node.predicate && !node.returnType;\r\n  }\r\n\r\n  function printFunctionDeclaration(path, print, options) {\r\n    const n = path.getValue();\r\n    const parts = [];\r\n\r\n    if (n.async) {\r\n      parts.push(\"async \");\r\n    }\r\n\r\n    if (n.generator) {\r\n      parts.push(\"function* \");\r\n    } else {\r\n      parts.push(\"function \");\r\n    }\r\n\r\n    if (n.id) {\r\n      parts.push(path.call(print, \"id\"));\r\n    }\r\n\r\n    parts.push(printFunctionTypeParameters(path, options, print), group$b(concat$d([printFunctionParams(path, print, options), printReturnType(path, print, options)])), n.body ? \" \" : \"\", path.call(print, \"body\"));\r\n    return concat$d(parts);\r\n  }\r\n\r\n  function printReturnType(path, print, options) {\r\n    const n = path.getValue();\r\n    const returnType = path.call(print, \"returnType\");\r\n\r\n    if (n.returnType && isFlowAnnotationComment$1(options.originalText, n.returnType, options)) {\r\n      return concat$d([\" /*: \", returnType, \" */\"]);\r\n    }\r\n\r\n    const parts = [returnType]; // prepend colon to TypeScript type annotation\r\n\r\n    if (n.returnType && n.returnType.typeAnnotation) {\r\n      parts.unshift(\": \");\r\n    }\r\n\r\n    if (n.predicate) {\r\n      // The return type will already add the colon, but otherwise we\r\n      // need to do it ourselves\r\n      parts.push(n.returnType ? \" \" : \": \", path.call(print, \"predicate\"));\r\n    }\r\n\r\n    return concat$d(parts);\r\n  }\r\n\r\n  function printExportDeclaration(path, options, print) {\r\n    const decl = path.getValue();\r\n    const semi = options.semi ? \";\" : \"\";\r\n    const parts = [\"export \"];\r\n    const isDefault = decl.default || decl.type === \"ExportDefaultDeclaration\";\r\n\r\n    if (isDefault) {\r\n      parts.push(\"default \");\r\n    }\r\n\r\n    parts.push(comments.printDanglingComments(path, options,\r\n    /* sameIndent */\r\n    true));\r\n\r\n    if (needsHardlineAfterDanglingComment$1(decl)) {\r\n      parts.push(hardline$9);\r\n    }\r\n\r\n    if (decl.declaration) {\r\n      parts.push(path.call(print, \"declaration\"));\r\n\r\n      if (isDefault && decl.declaration.type !== \"ClassDeclaration\" && decl.declaration.type !== \"FunctionDeclaration\" && decl.declaration.type !== \"TSInterfaceDeclaration\" && decl.declaration.type !== \"DeclareClass\" && decl.declaration.type !== \"DeclareFunction\" && decl.declaration.type !== \"TSDeclareFunction\") {\r\n        parts.push(semi);\r\n      }\r\n    } else {\r\n      if (decl.specifiers && decl.specifiers.length > 0) {\r\n        const specifiers = [];\r\n        const defaultSpecifiers = [];\r\n        const namespaceSpecifiers = [];\r\n        path.each(specifierPath => {\r\n          const specifierType = path.getValue().type;\r\n\r\n          if (specifierType === \"ExportSpecifier\") {\r\n            specifiers.push(print(specifierPath));\r\n          } else if (specifierType === \"ExportDefaultSpecifier\") {\r\n            defaultSpecifiers.push(print(specifierPath));\r\n          } else if (specifierType === \"ExportNamespaceSpecifier\") {\r\n            namespaceSpecifiers.push(concat$d([\"* as \", print(specifierPath)]));\r\n          }\r\n        }, \"specifiers\");\r\n        const isNamespaceFollowed = namespaceSpecifiers.length !== 0 && specifiers.length !== 0;\r\n        const isDefaultFollowed = defaultSpecifiers.length !== 0 && (namespaceSpecifiers.length !== 0 || specifiers.length !== 0);\r\n        const canBreak = specifiers.length > 1 || defaultSpecifiers.length > 0 || decl.specifiers && decl.specifiers.some(node => node.comments);\r\n        let printed = \"\";\r\n\r\n        if (specifiers.length !== 0) {\r\n          if (canBreak) {\r\n            printed = group$b(concat$d([\"{\", indent$7(concat$d([options.bracketSpacing ? line$9 : softline$6, join$9(concat$d([\",\", line$9]), specifiers)])), ifBreak$6(shouldPrintComma$1(options) ? \",\" : \"\"), options.bracketSpacing ? line$9 : softline$6, \"}\"]));\r\n          } else {\r\n            printed = concat$d([\"{\", options.bracketSpacing ? \" \" : \"\", concat$d(specifiers), options.bracketSpacing ? \" \" : \"\", \"}\"]);\r\n          }\r\n        }\r\n\r\n        parts.push(decl.exportKind === \"type\" ? \"type \" : \"\", concat$d(defaultSpecifiers), concat$d([isDefaultFollowed ? \", \" : \"\"]), concat$d(namespaceSpecifiers), concat$d([isNamespaceFollowed ? \", \" : \"\"]), printed);\r\n      } else {\r\n        parts.push(\"{}\");\r\n      }\r\n\r\n      if (decl.source) {\r\n        parts.push(\" from \", path.call(print, \"source\"));\r\n      }\r\n\r\n      parts.push(semi);\r\n    }\r\n\r\n    return concat$d(parts);\r\n  }\r\n\r\n  function printFlowDeclaration(path, parts) {\r\n    const parentExportDecl = getParentExportDeclaration$1(path);\r\n\r\n    if (parentExportDecl) {\r\n      assert.strictEqual(parentExportDecl.type, \"DeclareExportDeclaration\");\r\n    } else {\r\n      // If the parent node has type DeclareExportDeclaration, then it\r\n      // will be responsible for printing the \"declare\" token. Otherwise\r\n      // it needs to be printed with this non-exported declaration node.\r\n      parts.unshift(\"declare \");\r\n    }\r\n\r\n    return concat$d(parts);\r\n  }\r\n\r\n  function printTypeScriptModifiers(path, options, print) {\r\n    const n = path.getValue();\r\n\r\n    if (!n.modifiers || !n.modifiers.length) {\r\n      return \"\";\r\n    }\r\n\r\n    return concat$d([join$9(\" \", path.map(print, \"modifiers\")), \" \"]);\r\n  }\r\n\r\n  function printTypeParameters(path, options, print, paramsKey) {\r\n    const n = path.getValue();\r\n\r\n    if (!n[paramsKey]) {\r\n      return \"\";\r\n    } // for TypeParameterDeclaration typeParameters is a single node\r\n\r\n\r\n    if (!Array.isArray(n[paramsKey])) {\r\n      return path.call(print, paramsKey);\r\n    }\r\n\r\n    const grandparent = path.getNode(2);\r\n    const greatGrandParent = path.getNode(3);\r\n    const greatGreatGrandParent = path.getNode(4);\r\n    const isParameterInTestCall = grandparent != null && isTestCall$1(grandparent);\r\n    const shouldInline = isParameterInTestCall || n[paramsKey].length === 0 || n[paramsKey].length === 1 && (shouldHugType(n[paramsKey][0]) || n[paramsKey][0].type === \"GenericTypeAnnotation\" && shouldHugType(n[paramsKey][0].id) || n[paramsKey][0].type === \"TSTypeReference\" && shouldHugType(n[paramsKey][0].typeName) || n[paramsKey][0].type === \"NullableTypeAnnotation\" || // See https://github.com/prettier/prettier/pull/6467 for the context.\r\n    greatGreatGrandParent && greatGreatGrandParent.type === \"VariableDeclarator\" && grandparent.type === \"TSTypeAnnotation\" && greatGrandParent.type !== \"ArrowFunctionExpression\" && n[paramsKey][0].type !== \"TSUnionType\" && n[paramsKey][0].type !== \"UnionTypeAnnotation\" && n[paramsKey][0].type !== \"TSIntersectionType\" && n[paramsKey][0].type !== \"IntersectionTypeAnnotation\" && n[paramsKey][0].type !== \"TSConditionalType\" && n[paramsKey][0].type !== \"TSMappedType\" && n[paramsKey][0].type !== \"TSTypeOperator\" && n[paramsKey][0].type !== \"TSIndexedAccessType\" && n[paramsKey][0].type !== \"TSArrayType\");\r\n\r\n    function printDanglingCommentsForInline(n) {\r\n      if (!hasDanglingComments$1(n)) {\r\n        return \"\";\r\n      }\r\n\r\n      const hasOnlyBlockComments = n.comments.every(comments$1.isBlockComment);\r\n      const printed = comments.printDanglingComments(path, options,\r\n      /* sameIndent */\r\n      hasOnlyBlockComments);\r\n\r\n      if (hasOnlyBlockComments) {\r\n        return printed;\r\n      }\r\n\r\n      return concat$d([printed, hardline$9]);\r\n    }\r\n\r\n    if (shouldInline) {\r\n      return concat$d([\"<\", join$9(\", \", path.map(print, paramsKey)), printDanglingCommentsForInline(n), \">\"]);\r\n    }\r\n\r\n    return group$b(concat$d([\"<\", indent$7(concat$d([softline$6, join$9(concat$d([\",\", line$9]), path.map(print, paramsKey))])), ifBreak$6(options.parser !== \"typescript\" && options.parser !== \"babel-ts\" && shouldPrintComma$1(options, \"all\") ? \",\" : \"\"), softline$6, \">\"]));\r\n  }\r\n\r\n  function printClass(path, options, print) {\r\n    const n = path.getValue();\r\n    const parts = [];\r\n\r\n    if (n.abstract) {\r\n      parts.push(\"abstract \");\r\n    }\r\n\r\n    parts.push(\"class\");\r\n\r\n    if (n.id) {\r\n      parts.push(\" \", path.call(print, \"id\"));\r\n    }\r\n\r\n    parts.push(path.call(print, \"typeParameters\"));\r\n    const partsGroup = [];\r\n\r\n    if (n.superClass) {\r\n      const printed = concat$d([\"extends \", path.call(print, \"superClass\"), path.call(print, \"superTypeParameters\")]); // Keep old behaviour of extends in same line\r\n      // If there is only on extends and there are not comments\r\n\r\n      if ((!n.implements || n.implements.length === 0) && (!n.superClass.comments || n.superClass.comments.length === 0)) {\r\n        parts.push(concat$d([\" \", path.call(superClass => comments.printComments(superClass, () => printed, options), \"superClass\")]));\r\n      } else {\r\n        partsGroup.push(group$b(concat$d([line$9, path.call(superClass => comments.printComments(superClass, () => printed, options), \"superClass\")])));\r\n      }\r\n    } else if (n.extends && n.extends.length > 0) {\r\n      parts.push(\" extends \", join$9(\", \", path.map(print, \"extends\")));\r\n    }\r\n\r\n    if (n.mixins && n.mixins.length > 0) {\r\n      partsGroup.push(line$9, \"mixins \", group$b(indent$7(join$9(concat$d([\",\", line$9]), path.map(print, \"mixins\")))));\r\n    }\r\n\r\n    if (n.implements && n.implements.length > 0) {\r\n      partsGroup.push(line$9, \"implements\", group$b(indent$7(concat$d([line$9, join$9(concat$d([\",\", line$9]), path.map(print, \"implements\"))]))));\r\n    }\r\n\r\n    if (partsGroup.length > 0) {\r\n      parts.push(group$b(indent$7(concat$d(partsGroup))));\r\n    }\r\n\r\n    if (n.body && n.body.comments && hasLeadingOwnLineComment$1(options.originalText, n.body, options)) {\r\n      parts.push(hardline$9);\r\n    } else {\r\n      parts.push(\" \");\r\n    }\r\n\r\n    parts.push(path.call(print, \"body\"));\r\n    return parts;\r\n  }\r\n\r\n  function printOptionalToken(path) {\r\n    const node = path.getValue();\r\n\r\n    if (!node.optional || // It's an optional computed method parsed by typescript-estree.\r\n    // \"?\" is printed in `printMethod`.\r\n    node.type === \"Identifier\" && node === path.getParentNode().key) {\r\n      return \"\";\r\n    }\r\n\r\n    if (node.type === \"OptionalCallExpression\" || node.type === \"OptionalMemberExpression\" && node.computed) {\r\n      return \"?.\";\r\n    }\r\n\r\n    return \"?\";\r\n  }\r\n\r\n  function printMemberLookup(path, options, print) {\r\n    const property = path.call(print, \"property\");\r\n    const n = path.getValue();\r\n    const optional = printOptionalToken(path);\r\n\r\n    if (!n.computed) {\r\n      return concat$d([optional, \".\", property]);\r\n    }\r\n\r\n    if (!n.property || isNumericLiteral$1(n.property)) {\r\n      return concat$d([optional, \"[\", property, \"]\"]);\r\n    }\r\n\r\n    return group$b(concat$d([optional, \"[\", indent$7(concat$d([softline$6, property])), softline$6, \"]\"]));\r\n  }\r\n\r\n  function printBindExpressionCallee(path, options, print) {\r\n    return concat$d([\"::\", path.call(print, \"callee\")]);\r\n  } // We detect calls on member expressions specially to format a\r\n  // common pattern better. The pattern we are looking for is this:\r\n  //\r\n  // arr\r\n  //   .map(x => x + 1)\r\n  //   .filter(x => x > 10)\r\n  //   .some(x => x % 2)\r\n  //\r\n  // The way it is structured in the AST is via a nested sequence of\r\n  // MemberExpression and CallExpression. We need to traverse the AST\r\n  // and make groups out of it to print it in the desired way.\r\n\r\n\r\n  function printMemberChain(path, options, print) {\r\n    // The first phase is to linearize the AST by traversing it down.\r\n    //\r\n    //   a().b()\r\n    // has the following AST structure:\r\n    //   CallExpression(MemberExpression(CallExpression(Identifier)))\r\n    // and we transform it into\r\n    //   [Identifier, CallExpression, MemberExpression, CallExpression]\r\n    const printedNodes = []; // Here we try to retain one typed empty line after each call expression or\r\n    // the first group whether it is in parentheses or not\r\n\r\n    function shouldInsertEmptyLineAfter(node) {\r\n      const {\r\n        originalText\r\n      } = options;\r\n      const nextCharIndex = getNextNonSpaceNonCommentCharacterIndex$3(originalText, node, options.locEnd);\r\n      const nextChar = originalText.charAt(nextCharIndex); // if it is cut off by a parenthesis, we only account for one typed empty\r\n      // line after that parenthesis\r\n\r\n      if (nextChar === \")\") {\r\n        return isNextLineEmptyAfterIndex$2(originalText, nextCharIndex + 1, options.locEnd);\r\n      }\r\n\r\n      return isNextLineEmpty$4(originalText, node, options.locEnd);\r\n    }\r\n\r\n    function rec(path) {\r\n      const node = path.getValue();\r\n\r\n      if ((node.type === \"CallExpression\" || node.type === \"OptionalCallExpression\") && (isMemberish$1(node.callee) || node.callee.type === \"CallExpression\" || node.callee.type === \"OptionalCallExpression\")) {\r\n        printedNodes.unshift({\r\n          node,\r\n          printed: concat$d([comments.printComments(path, () => concat$d([printOptionalToken(path), printFunctionTypeParameters(path, options, print), printArgumentsList(path, options, print)]), options), shouldInsertEmptyLineAfter(node) ? hardline$9 : \"\"])\r\n        });\r\n        path.call(callee => rec(callee), \"callee\");\r\n      } else if (isMemberish$1(node)) {\r\n        printedNodes.unshift({\r\n          node,\r\n          needsParens: needsParens_1(path, options),\r\n          printed: comments.printComments(path, () => node.type === \"OptionalMemberExpression\" || node.type === \"MemberExpression\" ? printMemberLookup(path, options, print) : printBindExpressionCallee(path, options, print), options)\r\n        });\r\n        path.call(object => rec(object), \"object\");\r\n      } else if (node.type === \"TSNonNullExpression\") {\r\n        printedNodes.unshift({\r\n          node,\r\n          printed: comments.printComments(path, () => \"!\", options)\r\n        });\r\n        path.call(expression => rec(expression), \"expression\");\r\n      } else {\r\n        printedNodes.unshift({\r\n          node,\r\n          printed: path.call(print)\r\n        });\r\n      }\r\n    } // Note: the comments of the root node have already been printed, so we\r\n    // need to extract this first call without printing them as they would\r\n    // if handled inside of the recursive call.\r\n\r\n\r\n    const node = path.getValue();\r\n    printedNodes.unshift({\r\n      node,\r\n      printed: concat$d([printOptionalToken(path), printFunctionTypeParameters(path, options, print), printArgumentsList(path, options, print)])\r\n    });\r\n    path.call(callee => rec(callee), \"callee\"); // Once we have a linear list of printed nodes, we want to create groups out\r\n    // of it.\r\n    //\r\n    //   a().b.c().d().e\r\n    // will be grouped as\r\n    //   [\r\n    //     [Identifier, CallExpression],\r\n    //     [MemberExpression, MemberExpression, CallExpression],\r\n    //     [MemberExpression, CallExpression],\r\n    //     [MemberExpression],\r\n    //   ]\r\n    // so that we can print it as\r\n    //   a()\r\n    //     .b.c()\r\n    //     .d()\r\n    //     .e\r\n    // The first group is the first node followed by\r\n    //   - as many CallExpression as possible\r\n    //       < fn()()() >.something()\r\n    //   - as many array accessors as possible\r\n    //       < fn()[0][1][2] >.something()\r\n    //   - then, as many MemberExpression as possible but the last one\r\n    //       < this.items >.something()\r\n\r\n    const groups = [];\r\n    let currentGroup = [printedNodes[0]];\r\n    let i = 1;\r\n\r\n    for (; i < printedNodes.length; ++i) {\r\n      if (printedNodes[i].node.type === \"TSNonNullExpression\" || printedNodes[i].node.type === \"OptionalCallExpression\" || printedNodes[i].node.type === \"CallExpression\" || (printedNodes[i].node.type === \"MemberExpression\" || printedNodes[i].node.type === \"OptionalMemberExpression\") && printedNodes[i].node.computed && isNumericLiteral$1(printedNodes[i].node.property)) {\r\n        currentGroup.push(printedNodes[i]);\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (printedNodes[0].node.type !== \"CallExpression\" && printedNodes[0].node.type !== \"OptionalCallExpression\") {\r\n      for (; i + 1 < printedNodes.length; ++i) {\r\n        if (isMemberish$1(printedNodes[i].node) && isMemberish$1(printedNodes[i + 1].node)) {\r\n          currentGroup.push(printedNodes[i]);\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    groups.push(currentGroup);\r\n    currentGroup = []; // Then, each following group is a sequence of MemberExpression followed by\r\n    // a sequence of CallExpression. To compute it, we keep adding things to the\r\n    // group until we has seen a CallExpression in the past and reach a\r\n    // MemberExpression\r\n\r\n    let hasSeenCallExpression = false;\r\n\r\n    for (; i < printedNodes.length; ++i) {\r\n      if (hasSeenCallExpression && isMemberish$1(printedNodes[i].node)) {\r\n        // [0] should be appended at the end of the group instead of the\r\n        // beginning of the next one\r\n        if (printedNodes[i].node.computed && isNumericLiteral$1(printedNodes[i].node.property)) {\r\n          currentGroup.push(printedNodes[i]);\r\n          continue;\r\n        }\r\n\r\n        groups.push(currentGroup);\r\n        currentGroup = [];\r\n        hasSeenCallExpression = false;\r\n      }\r\n\r\n      if (printedNodes[i].node.type === \"CallExpression\" || printedNodes[i].node.type === \"OptionalCallExpression\") {\r\n        hasSeenCallExpression = true;\r\n      }\r\n\r\n      currentGroup.push(printedNodes[i]);\r\n\r\n      if (printedNodes[i].node.comments && printedNodes[i].node.comments.some(comment => comment.trailing)) {\r\n        groups.push(currentGroup);\r\n        currentGroup = [];\r\n        hasSeenCallExpression = false;\r\n      }\r\n    }\r\n\r\n    if (currentGroup.length > 0) {\r\n      groups.push(currentGroup);\r\n    } // There are cases like Object.keys(), Observable.of(), _.values() where\r\n    // they are the subject of all the chained calls and therefore should\r\n    // be kept on the same line:\r\n    //\r\n    //   Object.keys(items)\r\n    //     .filter(x => x)\r\n    //     .map(x => x)\r\n    //\r\n    // In order to detect those cases, we use an heuristic: if the first\r\n    // node is an identifier with the name starting with a capital\r\n    // letter or just a sequence of _$. The rationale is that they are\r\n    // likely to be factories.\r\n\r\n\r\n    function isFactory(name) {\r\n      return /^[A-Z]|^[_$]+$/.test(name);\r\n    } // In case the Identifier is shorter than tab width, we can keep the\r\n    // first call in a single line, if it's an ExpressionStatement.\r\n    //\r\n    //   d3.scaleLinear()\r\n    //     .domain([0, 100])\r\n    //     .range([0, width]);\r\n    //\r\n\r\n\r\n    function isShort(name) {\r\n      return name.length <= options.tabWidth;\r\n    }\r\n\r\n    function shouldNotWrap(groups) {\r\n      const parent = path.getParentNode();\r\n      const isExpression = parent && parent.type === \"ExpressionStatement\";\r\n      const hasComputed = groups[1].length && groups[1][0].node.computed;\r\n\r\n      if (groups[0].length === 1) {\r\n        const firstNode = groups[0][0].node;\r\n        return firstNode.type === \"ThisExpression\" || firstNode.type === \"Identifier\" && (isFactory(firstNode.name) || isExpression && isShort(firstNode.name) || hasComputed);\r\n      }\r\n\r\n      const lastNode = getLast$3(groups[0]).node;\r\n      return (lastNode.type === \"MemberExpression\" || lastNode.type === \"OptionalMemberExpression\") && lastNode.property.type === \"Identifier\" && (isFactory(lastNode.property.name) || hasComputed);\r\n    }\r\n\r\n    const shouldMerge = groups.length >= 2 && !groups[1][0].node.comments && shouldNotWrap(groups);\r\n\r\n    function printGroup(printedGroup) {\r\n      const printed = printedGroup.map(tuple => tuple.printed); // Checks if the last node (i.e. the parent node) needs parens and print\r\n      // accordingly\r\n\r\n      if (printedGroup.length > 0 && printedGroup[printedGroup.length - 1].needsParens) {\r\n        return concat$d([\"(\", ...printed, \")\"]);\r\n      }\r\n\r\n      return concat$d(printed);\r\n    }\r\n\r\n    function printIndentedGroup(groups) {\r\n      if (groups.length === 0) {\r\n        return \"\";\r\n      }\r\n\r\n      return indent$7(group$b(concat$d([hardline$9, join$9(hardline$9, groups.map(printGroup))])));\r\n    }\r\n\r\n    const printedGroups = groups.map(printGroup);\r\n    const oneLine = concat$d(printedGroups);\r\n    const cutoff = shouldMerge ? 3 : 2;\r\n    const flatGroups = groups.reduce((res, group) => res.concat(group), []);\r\n    const hasComment = flatGroups.slice(1, -1).some(node => hasLeadingComment$3(node.node)) || flatGroups.slice(0, -1).some(node => hasTrailingComment$1(node.node)) || groups[cutoff] && hasLeadingComment$3(groups[cutoff][0].node); // If we only have a single `.`, we shouldn't do anything fancy and just\r\n    // render everything concatenated together.\r\n\r\n    if (groups.length <= cutoff && !hasComment) {\r\n      if (isLongCurriedCallExpression$1(path)) {\r\n        return oneLine;\r\n      }\r\n\r\n      return group$b(oneLine);\r\n    } // Find out the last node in the first group and check if it has an\r\n    // empty line after\r\n\r\n\r\n    const lastNodeBeforeIndent = getLast$3(shouldMerge ? groups.slice(1, 2)[0] : groups[0]).node;\r\n    const shouldHaveEmptyLineBeforeIndent = lastNodeBeforeIndent.type !== \"CallExpression\" && lastNodeBeforeIndent.type !== \"OptionalCallExpression\" && shouldInsertEmptyLineAfter(lastNodeBeforeIndent);\r\n    const expanded = concat$d([printGroup(groups[0]), shouldMerge ? concat$d(groups.slice(1, 2).map(printGroup)) : \"\", shouldHaveEmptyLineBeforeIndent ? hardline$9 : \"\", printIndentedGroup(groups.slice(shouldMerge ? 2 : 1))]);\r\n    const callExpressions = printedNodes.map(({\r\n      node\r\n    }) => node).filter(isCallOrOptionalCallExpression$1); // We don't want to print in one line if the chain has:\r\n    //  * A comment.\r\n    //  * Non-trivial arguments.\r\n    //  * Any group but the last one has a hard line.\r\n    // If the last group is a function it's okay to inline if it fits.\r\n\r\n    if (hasComment || callExpressions.length > 2 && callExpressions.some(expr => !expr.arguments.every(arg => isSimpleCallArgument$1(arg, 0))) || printedGroups.slice(0, -1).some(willBreak$1) ||\r\n    /**\r\n     *     scopes.filter(scope => scope.value !== '').map((scope, i) => {\r\n     *       // multi line content\r\n     *     })\r\n     */\r\n    ((lastGroupDoc, lastGroupNode) => isCallOrOptionalCallExpression$1(lastGroupNode) && willBreak$1(lastGroupDoc))(getLast$3(printedGroups), getLast$3(getLast$3(groups)).node) && callExpressions.slice(0, -1).some(n => n.arguments.some(isFunctionOrArrowExpression$1))) {\r\n      return group$b(expanded);\r\n    }\r\n\r\n    return concat$d([// We only need to check `oneLine` because if `expanded` is chosen\r\n    // that means that the parent group has already been broken\r\n    // naturally\r\n    willBreak$1(oneLine) || shouldHaveEmptyLineBeforeIndent ? breakParent$3 : \"\", conditionalGroup$1([oneLine, expanded])]);\r\n  }\r\n\r\n  function separatorNoWhitespace(isFacebookTranslationTag, child, childNode, nextNode) {\r\n    if (isFacebookTranslationTag) {\r\n      return \"\";\r\n    }\r\n\r\n    if (childNode.type === \"JSXElement\" && !childNode.closingElement || nextNode && nextNode.type === \"JSXElement\" && !nextNode.closingElement) {\r\n      return child.length === 1 ? softline$6 : hardline$9;\r\n    }\r\n\r\n    return softline$6;\r\n  }\r\n\r\n  function separatorWithWhitespace(isFacebookTranslationTag, child, childNode, nextNode) {\r\n    if (isFacebookTranslationTag) {\r\n      return hardline$9;\r\n    }\r\n\r\n    if (child.length === 1) {\r\n      return childNode.type === \"JSXElement\" && !childNode.closingElement || nextNode && nextNode.type === \"JSXElement\" && !nextNode.closingElement ? hardline$9 : softline$6;\r\n    }\r\n\r\n    return hardline$9;\r\n  } // JSX Children are strange, mostly for two reasons:\r\n  // 1. JSX reads newlines into string values, instead of skipping them like JS\r\n  // 2. up to one whitespace between elements within a line is significant,\r\n  //    but not between lines.\r\n  //\r\n  // Leading, trailing, and lone whitespace all need to\r\n  // turn themselves into the rather ugly `{' '}` when breaking.\r\n  //\r\n  // We print JSX using the `fill` doc primitive.\r\n  // This requires that we give it an array of alternating\r\n  // content and whitespace elements.\r\n  // To ensure this we add dummy `\"\"` content elements as needed.\r\n\r\n\r\n  function printJSXChildren(path, options, print, jsxWhitespace, isFacebookTranslationTag) {\r\n    const n = path.getValue();\r\n    const children = []; // using `map` instead of `each` because it provides `i`\r\n\r\n    path.map((childPath, i) => {\r\n      const child = childPath.getValue();\r\n\r\n      if (isLiteral$1(child)) {\r\n        const text = rawText$1(child); // Contains a non-whitespace character\r\n\r\n        if (isMeaningfulJSXText$1(child)) {\r\n          const words = text.split(matchJsxWhitespaceRegex$1); // Starts with whitespace\r\n\r\n          if (words[0] === \"\") {\r\n            children.push(\"\");\r\n            words.shift();\r\n\r\n            if (/\\n/.test(words[0])) {\r\n              const next = n.children[i + 1];\r\n              children.push(separatorWithWhitespace(isFacebookTranslationTag, words[1], child, next));\r\n            } else {\r\n              children.push(jsxWhitespace);\r\n            }\r\n\r\n            words.shift();\r\n          }\r\n\r\n          let endWhitespace; // Ends with whitespace\r\n\r\n          if (getLast$3(words) === \"\") {\r\n            words.pop();\r\n            endWhitespace = words.pop();\r\n          } // This was whitespace only without a new line.\r\n\r\n\r\n          if (words.length === 0) {\r\n            return;\r\n          }\r\n\r\n          words.forEach((word, i) => {\r\n            if (i % 2 === 1) {\r\n              children.push(line$9);\r\n            } else {\r\n              children.push(word);\r\n            }\r\n          });\r\n\r\n          if (endWhitespace !== undefined) {\r\n            if (/\\n/.test(endWhitespace)) {\r\n              const next = n.children[i + 1];\r\n              children.push(separatorWithWhitespace(isFacebookTranslationTag, getLast$3(children), child, next));\r\n            } else {\r\n              children.push(jsxWhitespace);\r\n            }\r\n          } else {\r\n            const next = n.children[i + 1];\r\n            children.push(separatorNoWhitespace(isFacebookTranslationTag, getLast$3(children), child, next));\r\n          }\r\n        } else if (/\\n/.test(text)) {\r\n          // Keep (up to one) blank line between tags/expressions/text.\r\n          // Note: We don't keep blank lines between text elements.\r\n          if (text.match(/\\n/g).length > 1) {\r\n            children.push(\"\");\r\n            children.push(hardline$9);\r\n          }\r\n        } else {\r\n          children.push(\"\");\r\n          children.push(jsxWhitespace);\r\n        }\r\n      } else {\r\n        const printedChild = print(childPath);\r\n        children.push(printedChild);\r\n        const next = n.children[i + 1];\r\n        const directlyFollowedByMeaningfulText = next && isMeaningfulJSXText$1(next);\r\n\r\n        if (directlyFollowedByMeaningfulText) {\r\n          const firstWord = rawText$1(next).trim().split(matchJsxWhitespaceRegex$1)[0];\r\n          children.push(separatorNoWhitespace(isFacebookTranslationTag, firstWord, child, next));\r\n        } else {\r\n          children.push(hardline$9);\r\n        }\r\n      }\r\n    }, \"children\");\r\n    return children;\r\n  } // JSX expands children from the inside-out, instead of the outside-in.\r\n  // This is both to break children before attributes,\r\n  // and to ensure that when children break, their parents do as well.\r\n  //\r\n  // Any element that is written without any newlines and fits on a single line\r\n  // is left that way.\r\n  // Not only that, any user-written-line containing multiple JSX siblings\r\n  // should also be kept on one line if possible,\r\n  // so each user-written-line is wrapped in its own group.\r\n  //\r\n  // Elements that contain newlines or don't fit on a single line (recursively)\r\n  // are fully-split, using hardline and shouldBreak: true.\r\n  //\r\n  // To support that case properly, all leading and trailing spaces\r\n  // are stripped from the list of children, and replaced with a single hardline.\r\n\r\n\r\n  function printJSXElement(path, options, print) {\r\n    const n = path.getValue();\r\n\r\n    if (n.type === \"JSXElement\" && isEmptyJSXElement$1(n)) {\r\n      return concat$d([path.call(print, \"openingElement\"), path.call(print, \"closingElement\")]);\r\n    }\r\n\r\n    const openingLines = n.type === \"JSXElement\" ? path.call(print, \"openingElement\") : path.call(print, \"openingFragment\");\r\n    const closingLines = n.type === \"JSXElement\" ? path.call(print, \"closingElement\") : path.call(print, \"closingFragment\");\r\n\r\n    if (n.children.length === 1 && n.children[0].type === \"JSXExpressionContainer\" && (n.children[0].expression.type === \"TemplateLiteral\" || n.children[0].expression.type === \"TaggedTemplateExpression\")) {\r\n      return concat$d([openingLines, concat$d(path.map(print, \"children\")), closingLines]);\r\n    } // Convert `{\" \"}` to text nodes containing a space.\r\n    // This makes it easy to turn them into `jsxWhitespace` which\r\n    // can then print as either a space or `{\" \"}` when breaking.\r\n\r\n\r\n    n.children = n.children.map(child => {\r\n      if (isJSXWhitespaceExpression$1(child)) {\r\n        return {\r\n          type: \"JSXText\",\r\n          value: \" \",\r\n          raw: \" \"\r\n        };\r\n      }\r\n\r\n      return child;\r\n    });\r\n    const containsTag = n.children.filter(isJSXNode$1).length > 0;\r\n    const containsMultipleExpressions = n.children.filter(child => child.type === \"JSXExpressionContainer\").length > 1;\r\n    const containsMultipleAttributes = n.type === \"JSXElement\" && n.openingElement.attributes.length > 1; // Record any breaks. Should never go from true to false, only false to true.\r\n\r\n    let forcedBreak = willBreak$1(openingLines) || containsTag || containsMultipleAttributes || containsMultipleExpressions;\r\n    const isMdxBlock = path.getParentNode().rootMarker === \"mdx\";\r\n    const rawJsxWhitespace = options.singleQuote ? \"{' '}\" : '{\" \"}';\r\n    const jsxWhitespace = isMdxBlock ? concat$d([\" \"]) : ifBreak$6(concat$d([rawJsxWhitespace, softline$6]), \" \");\r\n    const isFacebookTranslationTag = n.openingElement && n.openingElement.name && n.openingElement.name.name === \"fbt\";\r\n    const children = printJSXChildren(path, options, print, jsxWhitespace, isFacebookTranslationTag);\r\n    const containsText = n.children.some(child => isMeaningfulJSXText$1(child)); // We can end up we multiple whitespace elements with empty string\r\n    // content between them.\r\n    // We need to remove empty whitespace and softlines before JSX whitespace\r\n    // to get the correct output.\r\n\r\n    for (let i = children.length - 2; i >= 0; i--) {\r\n      const isPairOfEmptyStrings = children[i] === \"\" && children[i + 1] === \"\";\r\n      const isPairOfHardlines = children[i] === hardline$9 && children[i + 1] === \"\" && children[i + 2] === hardline$9;\r\n      const isLineFollowedByJSXWhitespace = (children[i] === softline$6 || children[i] === hardline$9) && children[i + 1] === \"\" && children[i + 2] === jsxWhitespace;\r\n      const isJSXWhitespaceFollowedByLine = children[i] === jsxWhitespace && children[i + 1] === \"\" && (children[i + 2] === softline$6 || children[i + 2] === hardline$9);\r\n      const isDoubleJSXWhitespace = children[i] === jsxWhitespace && children[i + 1] === \"\" && children[i + 2] === jsxWhitespace;\r\n      const isPairOfHardOrSoftLines = children[i] === softline$6 && children[i + 1] === \"\" && children[i + 2] === hardline$9 || children[i] === hardline$9 && children[i + 1] === \"\" && children[i + 2] === softline$6;\r\n\r\n      if (isPairOfHardlines && containsText || isPairOfEmptyStrings || isLineFollowedByJSXWhitespace || isDoubleJSXWhitespace || isPairOfHardOrSoftLines) {\r\n        children.splice(i, 2);\r\n      } else if (isJSXWhitespaceFollowedByLine) {\r\n        children.splice(i + 1, 2);\r\n      }\r\n    } // Trim trailing lines (or empty strings)\r\n\r\n\r\n    while (children.length && (isLineNext$1(getLast$3(children)) || isEmpty$1(getLast$3(children)))) {\r\n      children.pop();\r\n    } // Trim leading lines (or empty strings)\r\n\r\n\r\n    while (children.length && (isLineNext$1(children[0]) || isEmpty$1(children[0])) && (isLineNext$1(children[1]) || isEmpty$1(children[1]))) {\r\n      children.shift();\r\n      children.shift();\r\n    } // Tweak how we format children if outputting this element over multiple lines.\r\n    // Also detect whether we will force this element to output over multiple lines.\r\n\r\n\r\n    const multilineChildren = [];\r\n    children.forEach((child, i) => {\r\n      // There are a number of situations where we need to ensure we display\r\n      // whitespace as `{\" \"}` when outputting this element over multiple lines.\r\n      if (child === jsxWhitespace) {\r\n        if (i === 1 && children[i - 1] === \"\") {\r\n          if (children.length === 2) {\r\n            // Solitary whitespace\r\n            multilineChildren.push(rawJsxWhitespace);\r\n            return;\r\n          } // Leading whitespace\r\n\r\n\r\n          multilineChildren.push(concat$d([rawJsxWhitespace, hardline$9]));\r\n          return;\r\n        } else if (i === children.length - 1) {\r\n          // Trailing whitespace\r\n          multilineChildren.push(rawJsxWhitespace);\r\n          return;\r\n        } else if (children[i - 1] === \"\" && children[i - 2] === hardline$9) {\r\n          // Whitespace after line break\r\n          multilineChildren.push(rawJsxWhitespace);\r\n          return;\r\n        }\r\n      }\r\n\r\n      multilineChildren.push(child);\r\n\r\n      if (willBreak$1(child)) {\r\n        forcedBreak = true;\r\n      }\r\n    }); // If there is text we use `fill` to fit as much onto each line as possible.\r\n    // When there is no text (just tags and expressions) we use `group`\r\n    // to output each on a separate line.\r\n\r\n    const content = containsText ? fill$4(multilineChildren) : group$b(concat$d(multilineChildren), {\r\n      shouldBreak: true\r\n    });\r\n\r\n    if (isMdxBlock) {\r\n      return content;\r\n    }\r\n\r\n    const multiLineElem = group$b(concat$d([openingLines, indent$7(concat$d([hardline$9, content])), hardline$9, closingLines]));\r\n\r\n    if (forcedBreak) {\r\n      return multiLineElem;\r\n    }\r\n\r\n    return conditionalGroup$1([group$b(concat$d([openingLines, concat$d(children), closingLines])), multiLineElem]);\r\n  }\r\n\r\n  function maybeWrapJSXElementInParens(path, elem, options) {\r\n    const parent = path.getParentNode();\r\n\r\n    if (!parent) {\r\n      return elem;\r\n    }\r\n\r\n    const NO_WRAP_PARENTS = {\r\n      ArrayExpression: true,\r\n      JSXAttribute: true,\r\n      JSXElement: true,\r\n      JSXExpressionContainer: true,\r\n      JSXFragment: true,\r\n      ExpressionStatement: true,\r\n      CallExpression: true,\r\n      OptionalCallExpression: true,\r\n      ConditionalExpression: true,\r\n      JsExpressionRoot: true\r\n    };\r\n\r\n    if (NO_WRAP_PARENTS[parent.type]) {\r\n      return elem;\r\n    }\r\n\r\n    const shouldBreak = path.match(undefined, node => node.type === \"ArrowFunctionExpression\", isCallOrOptionalCallExpression$1, node => node.type === \"JSXExpressionContainer\");\r\n    const needsParens = needsParens_1(path, options);\r\n    return group$b(concat$d([needsParens ? \"\" : ifBreak$6(\"(\"), indent$7(concat$d([softline$6, elem])), softline$6, needsParens ? \"\" : ifBreak$6(\")\")]), {\r\n      shouldBreak\r\n    });\r\n  }\r\n\r\n  function shouldInlineLogicalExpression(node) {\r\n    if (node.type !== \"LogicalExpression\") {\r\n      return false;\r\n    }\r\n\r\n    if (node.right.type === \"ObjectExpression\" && node.right.properties.length !== 0) {\r\n      return true;\r\n    }\r\n\r\n    if (node.right.type === \"ArrayExpression\" && node.right.elements.length !== 0) {\r\n      return true;\r\n    }\r\n\r\n    if (isJSXNode$1(node.right)) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  } // For binary expressions to be consistent, we need to group\r\n  // subsequent operators with the same precedence level under a single\r\n  // group. Otherwise they will be nested such that some of them break\r\n  // onto new lines but not all. Operators with the same precedence\r\n  // level should either all break or not. Because we group them by\r\n  // precedence level and the AST is structured based on precedence\r\n  // level, things are naturally broken up correctly, i.e. `&&` is\r\n  // broken before `+`.\r\n\r\n\r\n  function printBinaryishExpressions(path, print, options, isNested, isInsideParenthesis) {\r\n    let parts = [];\r\n    const node = path.getValue(); // We treat BinaryExpression and LogicalExpression nodes the same.\r\n\r\n    if (isBinaryish$1(node)) {\r\n      // Put all operators with the same precedence level in the same\r\n      // group. The reason we only need to do this with the `left`\r\n      // expression is because given an expression like `1 + 2 - 3`, it\r\n      // is always parsed like `((1 + 2) - 3)`, meaning the `left` side\r\n      // is where the rest of the expression will exist. Binary\r\n      // expressions on the right side mean they have a difference\r\n      // precedence level and should be treated as a separate group, so\r\n      // print them normally. (This doesn't hold for the `**` operator,\r\n      // which is unique in that it is right-associative.)\r\n      if (shouldFlatten$1(node.operator, node.left.operator)) {\r\n        // Flatten them out by recursively calling this function.\r\n        parts = parts.concat(path.call(left => printBinaryishExpressions(left, print, options,\r\n        /* isNested */\r\n        true, isInsideParenthesis), \"left\"));\r\n      } else {\r\n        parts.push(path.call(print, \"left\"));\r\n      }\r\n\r\n      const shouldInline = shouldInlineLogicalExpression(node);\r\n      const lineBeforeOperator = (node.operator === \"|>\" || node.type === \"NGPipeExpression\" || node.operator === \"|\" && options.parser === \"__vue_expression\") && !hasLeadingOwnLineComment$1(options.originalText, node.right, options);\r\n      const operator = node.type === \"NGPipeExpression\" ? \"|\" : node.operator;\r\n      const rightSuffix = node.type === \"NGPipeExpression\" && node.arguments.length !== 0 ? group$b(indent$7(concat$d([softline$6, \": \", join$9(concat$d([softline$6, \":\", ifBreak$6(\" \")]), path.map(print, \"arguments\").map(arg => align$1(2, group$b(arg))))]))) : \"\";\r\n      const right = shouldInline ? concat$d([operator, \" \", path.call(print, \"right\"), rightSuffix]) : concat$d([lineBeforeOperator ? softline$6 : \"\", operator, lineBeforeOperator ? \" \" : line$9, path.call(print, \"right\"), rightSuffix]); // If there's only a single binary expression, we want to create a group\r\n      // in order to avoid having a small right part like -1 be on its own line.\r\n\r\n      const parent = path.getParentNode();\r\n      const shouldGroup = !(isInsideParenthesis && node.type === \"LogicalExpression\") && parent.type !== node.type && node.left.type !== node.type && node.right.type !== node.type;\r\n      parts.push(\" \", shouldGroup ? group$b(right) : right); // The root comments are already printed, but we need to manually print\r\n      // the other ones since we don't call the normal print on BinaryExpression,\r\n      // only for the left and right parts\r\n\r\n      if (isNested && node.comments) {\r\n        parts = comments.printComments(path, () => concat$d(parts), options);\r\n      }\r\n    } else {\r\n      // Our stopping case. Simply print the node normally.\r\n      parts.push(path.call(print));\r\n    }\r\n\r\n    return parts;\r\n  }\r\n\r\n  function printAssignmentRight(leftNode, rightNode, printedRight, options) {\r\n    if (hasLeadingOwnLineComment$1(options.originalText, rightNode, options)) {\r\n      return indent$7(concat$d([line$9, printedRight]));\r\n    }\r\n\r\n    const canBreak = isBinaryish$1(rightNode) && !shouldInlineLogicalExpression(rightNode) || rightNode.type === \"ConditionalExpression\" && isBinaryish$1(rightNode.test) && !shouldInlineLogicalExpression(rightNode.test) || rightNode.type === \"StringLiteralTypeAnnotation\" || rightNode.type === \"ClassExpression\" && rightNode.decorators && rightNode.decorators.length || (leftNode.type === \"Identifier\" || isStringLiteral$1(leftNode) || leftNode.type === \"MemberExpression\") && (isStringLiteral$1(rightNode) || isMemberExpressionChain$1(rightNode)) && // do not put values on a separate line from the key in json\r\n    options.parser !== \"json\" && options.parser !== \"json5\" || rightNode.type === \"SequenceExpression\";\r\n\r\n    if (canBreak) {\r\n      return group$b(indent$7(concat$d([line$9, printedRight])));\r\n    }\r\n\r\n    return concat$d([\" \", printedRight]);\r\n  }\r\n\r\n  function printAssignment(leftNode, printedLeft, operator, rightNode, printedRight, options) {\r\n    if (!rightNode) {\r\n      return printedLeft;\r\n    }\r\n\r\n    const printed = printAssignmentRight(leftNode, rightNode, printedRight, options);\r\n    return group$b(concat$d([printedLeft, operator, printed]));\r\n  }\r\n\r\n  function adjustClause(node, clause, forceSpace) {\r\n    if (node.type === \"EmptyStatement\") {\r\n      return \";\";\r\n    }\r\n\r\n    if (node.type === \"BlockStatement\" || forceSpace) {\r\n      return concat$d([\" \", clause]);\r\n    }\r\n\r\n    return indent$7(concat$d([line$9, clause]));\r\n  }\r\n\r\n  function nodeStr(node, options, isFlowOrTypeScriptDirectiveLiteral) {\r\n    const raw = rawText$1(node);\r\n    const isDirectiveLiteral = isFlowOrTypeScriptDirectiveLiteral || node.type === \"DirectiveLiteral\";\r\n    return printString$2(raw, options, isDirectiveLiteral);\r\n  }\r\n\r\n  function printRegex(node) {\r\n    const flags = node.flags.split(\"\").sort().join(\"\");\r\n    return \"/\".concat(node.pattern, \"/\").concat(flags);\r\n  }\r\n\r\n  function exprNeedsASIProtection(path, options) {\r\n    const node = path.getValue();\r\n    const maybeASIProblem = needsParens_1(path, options) || node.type === \"ParenthesizedExpression\" || node.type === \"TypeCastExpression\" || node.type === \"ArrowFunctionExpression\" && !shouldPrintParamsWithoutParens(path, options) || node.type === \"ArrayExpression\" || node.type === \"ArrayPattern\" || node.type === \"UnaryExpression\" && node.prefix && (node.operator === \"+\" || node.operator === \"-\") || node.type === \"TemplateLiteral\" || node.type === \"TemplateElement\" || isJSXNode$1(node) || node.type === \"BindExpression\" && !node.object || node.type === \"RegExpLiteral\" || node.type === \"Literal\" && node.pattern || node.type === \"Literal\" && node.regex;\r\n\r\n    if (maybeASIProblem) {\r\n      return true;\r\n    }\r\n\r\n    if (!hasNakedLeftSide$2(node)) {\r\n      return false;\r\n    }\r\n\r\n    return path.call(childPath => exprNeedsASIProtection(childPath, options), ...getLeftSidePathName$2(path, node));\r\n  }\r\n\r\n  function stmtNeedsASIProtection(path, options) {\r\n    const node = path.getNode();\r\n\r\n    if (node.type !== \"ExpressionStatement\") {\r\n      return false;\r\n    }\r\n\r\n    return path.call(childPath => exprNeedsASIProtection(childPath, options), \"expression\");\r\n  }\r\n\r\n  function shouldHugType(node) {\r\n    if (isSimpleFlowType$1(node) || isObjectType$1(node)) {\r\n      return true;\r\n    }\r\n\r\n    if (node.type === \"UnionTypeAnnotation\" || node.type === \"TSUnionType\") {\r\n      const voidCount = node.types.filter(n => n.type === \"VoidTypeAnnotation\" || n.type === \"TSVoidKeyword\" || n.type === \"NullLiteralTypeAnnotation\" || n.type === \"TSNullKeyword\").length;\r\n      const hasObject = node.types.some(n => n.type === \"ObjectTypeAnnotation\" || n.type === \"TSTypeLiteral\" || // This is a bit aggressive but captures Array<{x}>\r\n      n.type === \"GenericTypeAnnotation\" || n.type === \"TSTypeReference\");\r\n\r\n      if (node.types.length - 1 === voidCount && hasObject) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function shouldHugArguments(fun) {\r\n    if (!fun || fun.rest) {\r\n      return false;\r\n    }\r\n\r\n    const params = fun.params || fun.parameters;\r\n\r\n    if (!params || params.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    const param = params[0];\r\n    return !param.comments && (param.type === \"ObjectPattern\" || param.type === \"ArrayPattern\" || param.type === \"Identifier\" && param.typeAnnotation && (param.typeAnnotation.type === \"TypeAnnotation\" || param.typeAnnotation.type === \"TSTypeAnnotation\") && isObjectType$1(param.typeAnnotation.typeAnnotation) || param.type === \"FunctionTypeParam\" && isObjectType$1(param.typeAnnotation) || param.type === \"AssignmentPattern\" && (param.left.type === \"ObjectPattern\" || param.left.type === \"ArrayPattern\") && (param.right.type === \"Identifier\" || param.right.type === \"ObjectExpression\" && param.right.properties.length === 0 || param.right.type === \"ArrayExpression\" && param.right.elements.length === 0));\r\n  }\r\n\r\n  function printArrayItems(path, options, printPath, print) {\r\n    const printedElements = [];\r\n    let separatorParts = [];\r\n    path.each(childPath => {\r\n      printedElements.push(concat$d(separatorParts));\r\n      printedElements.push(group$b(print(childPath)));\r\n      separatorParts = [\",\", line$9];\r\n\r\n      if (childPath.getValue() && isNextLineEmpty$4(options.originalText, childPath.getValue(), options.locEnd)) {\r\n        separatorParts.push(softline$6);\r\n      }\r\n    }, printPath);\r\n    return concat$d(printedElements);\r\n  }\r\n\r\n  function printReturnAndThrowArgument(path, options, print) {\r\n    const node = path.getValue();\r\n    const semi = options.semi ? \";\" : \"\";\r\n    const parts = [];\r\n\r\n    if (node.argument) {\r\n      if (returnArgumentHasLeadingComment$1(options, node.argument)) {\r\n        parts.push(concat$d([\" (\", indent$7(concat$d([hardline$9, path.call(print, \"argument\")])), hardline$9, \")\"]));\r\n      } else if (isBinaryish$1(node.argument) || node.argument.type === \"SequenceExpression\") {\r\n        parts.push(group$b(concat$d([ifBreak$6(\" (\", \" \"), indent$7(concat$d([softline$6, path.call(print, \"argument\")])), softline$6, ifBreak$6(\")\")])));\r\n      } else {\r\n        parts.push(\" \", path.call(print, \"argument\"));\r\n      }\r\n    }\r\n\r\n    const lastComment = Array.isArray(node.comments) && node.comments[node.comments.length - 1];\r\n    const isLastCommentLine = lastComment && (lastComment.type === \"CommentLine\" || lastComment.type === \"Line\");\r\n\r\n    if (isLastCommentLine) {\r\n      parts.push(semi);\r\n    }\r\n\r\n    if (hasDanglingComments$1(node)) {\r\n      parts.push(\" \", comments.printDanglingComments(path, options,\r\n      /* sameIndent */\r\n      true));\r\n    }\r\n\r\n    if (!isLastCommentLine) {\r\n      parts.push(semi);\r\n    }\r\n\r\n    return concat$d(parts);\r\n  }\r\n\r\n  function willPrintOwnComments(path\r\n  /*, options */\r\n  ) {\r\n    const node = path.getValue();\r\n    const parent = path.getParentNode();\r\n    return (node && (isJSXNode$1(node) || hasFlowShorthandAnnotationComment$2(node) || parent && (parent.type === \"CallExpression\" || parent.type === \"OptionalCallExpression\") && (hasFlowAnnotationComment$1(node.leadingComments) || hasFlowAnnotationComment$1(node.trailingComments))) || parent && (parent.type === \"JSXSpreadAttribute\" || parent.type === \"JSXSpreadChild\" || parent.type === \"UnionTypeAnnotation\" || parent.type === \"TSUnionType\" || (parent.type === \"ClassDeclaration\" || parent.type === \"ClassExpression\") && parent.superClass === node)) && (!hasIgnoreComment$4(path) || parent.type === \"UnionTypeAnnotation\" || parent.type === \"TSUnionType\");\r\n  }\r\n\r\n  function canAttachComment$1(node) {\r\n    return node.type && node.type !== \"CommentBlock\" && node.type !== \"CommentLine\" && node.type !== \"Line\" && node.type !== \"Block\" && node.type !== \"EmptyStatement\" && node.type !== \"TemplateElement\" && node.type !== \"Import\";\r\n  }\r\n\r\n  function printComment$2(commentPath, options) {\r\n    const comment = commentPath.getValue();\r\n\r\n    switch (comment.type) {\r\n      case \"CommentBlock\":\r\n      case \"Block\":\r\n        {\r\n          if (isIndentableBlockComment(comment)) {\r\n            const printed = printIndentableBlockComment(comment); // We need to prevent an edge case of a previous trailing comment\r\n            // printed as a `lineSuffix` which causes the comments to be\r\n            // interleaved. See https://github.com/prettier/prettier/issues/4412\r\n\r\n            if (comment.trailing && !hasNewline$5(options.originalText, options.locStart(comment), {\r\n              backwards: true\r\n            })) {\r\n              return concat$d([hardline$9, printed]);\r\n            }\r\n\r\n            return printed;\r\n          }\r\n\r\n          const commentEnd = options.locEnd(comment);\r\n          const isInsideFlowComment = options.originalText.slice(commentEnd - 3, commentEnd) === \"*-/\";\r\n          return \"/*\" + comment.value + (isInsideFlowComment ? \"*-/\" : \"*/\");\r\n        }\r\n\r\n      case \"CommentLine\":\r\n      case \"Line\":\r\n        // Print shebangs with the proper comment characters\r\n        if (options.originalText.slice(options.locStart(comment)).startsWith(\"#!\")) {\r\n          return \"#!\" + comment.value.trimEnd();\r\n        }\r\n\r\n        return \"//\" + comment.value.trimEnd();\r\n\r\n      default:\r\n        throw new Error(\"Not a comment: \" + JSON.stringify(comment));\r\n    }\r\n  }\r\n\r\n  function isIndentableBlockComment(comment) {\r\n    // If the comment has multiple lines and every line starts with a star\r\n    // we can fix the indentation of each line. The stars in the `/*` and\r\n    // `*/` delimiters are not included in the comment value, so add them\r\n    // back first.\r\n    const lines = \"*\".concat(comment.value, \"*\").split(\"\\n\");\r\n    return lines.length > 1 && lines.every(line => line.trim()[0] === \"*\");\r\n  }\r\n\r\n  function printIndentableBlockComment(comment) {\r\n    const lines = comment.value.split(\"\\n\");\r\n    return concat$d([\"/*\", join$9(hardline$9, lines.map((line, index) => index === 0 ? line.trimEnd() : \" \" + (index < lines.length - 1 ? line.trim() : line.trimStart()))), \"*/\"]);\r\n  }\r\n\r\n  var printerEstree = {\r\n    preprocess: preprocess_1$1,\r\n    print: genericPrint$3,\r\n    embed: embed_1$1,\r\n    insertPragma: insertPragma$7,\r\n    massageAstNode: clean_1$1,\r\n    hasPrettierIgnore: hasPrettierIgnore$5,\r\n    willPrintOwnComments,\r\n    canAttachComment: canAttachComment$1,\r\n    printComment: printComment$2,\r\n    isBlockComment: comments$1.isBlockComment,\r\n    handleComments: {\r\n      ownLine: comments$1.handleOwnLineComment,\r\n      endOfLine: comments$1.handleEndOfLineComment,\r\n      remaining: comments$1.handleRemainingComment\r\n    },\r\n    getGapRegex: comments$1.getGapRegex,\r\n    getCommentChildNodes: comments$1.getCommentChildNodes\r\n  };\r\n\r\n  const {\r\n    concat: concat$e,\r\n    hardline: hardline$a,\r\n    indent: indent$8,\r\n    join: join$a\r\n  } = document.builders;\r\n\r\n  function genericPrint$4(path, options, print) {\r\n    const node = path.getValue();\r\n\r\n    switch (node.type) {\r\n      case \"JsonRoot\":\r\n        return concat$e([path.call(print, \"node\"), hardline$a]);\r\n\r\n      case \"ArrayExpression\":\r\n        return node.elements.length === 0 ? \"[]\" : concat$e([\"[\", indent$8(concat$e([hardline$a, join$a(concat$e([\",\", hardline$a]), path.map(print, \"elements\"))])), hardline$a, \"]\"]);\r\n\r\n      case \"ObjectExpression\":\r\n        return node.properties.length === 0 ? \"{}\" : concat$e([\"{\", indent$8(concat$e([hardline$a, join$a(concat$e([\",\", hardline$a]), path.map(print, \"properties\"))])), hardline$a, \"}\"]);\r\n\r\n      case \"ObjectProperty\":\r\n        return concat$e([path.call(print, \"key\"), \": \", path.call(print, \"value\")]);\r\n\r\n      case \"UnaryExpression\":\r\n        return concat$e([node.operator === \"+\" ? \"\" : node.operator, path.call(print, \"argument\")]);\r\n\r\n      case \"NullLiteral\":\r\n        return \"null\";\r\n\r\n      case \"BooleanLiteral\":\r\n        return node.value ? \"true\" : \"false\";\r\n\r\n      case \"StringLiteral\":\r\n      case \"NumericLiteral\":\r\n        return JSON.stringify(node.value);\r\n\r\n      case \"Identifier\":\r\n        return JSON.stringify(node.name);\r\n\r\n      default:\r\n        /* istanbul ignore next */\r\n        throw new Error(\"unknown type: \" + JSON.stringify(node.type));\r\n    }\r\n  }\r\n\r\n  function clean$5(node, newNode\r\n  /*, parent*/\r\n  ) {\r\n    delete newNode.start;\r\n    delete newNode.end;\r\n    delete newNode.extra;\r\n    delete newNode.loc;\r\n    delete newNode.comments;\r\n    delete newNode.errors;\r\n\r\n    if (node.type === \"Identifier\") {\r\n      return {\r\n        type: \"StringLiteral\",\r\n        value: node.name\r\n      };\r\n    }\r\n\r\n    if (node.type === \"UnaryExpression\" && node.operator === \"+\") {\r\n      return newNode.argument;\r\n    }\r\n  }\r\n\r\n  var printerEstreeJson = {\r\n    preprocess: preprocess_1$1,\r\n    print: genericPrint$4,\r\n    massageAstNode: clean$5\r\n  };\r\n\r\n  const CATEGORY_JAVASCRIPT = \"JavaScript\"; // format based on https://github.com/prettier/prettier/blob/master/src/main/core-options.js\r\n\r\n  var options$5 = {\r\n    arrowParens: {\r\n      since: \"1.9.0\",\r\n      category: CATEGORY_JAVASCRIPT,\r\n      type: \"choice\",\r\n      default: [{\r\n        since: \"1.9.0\",\r\n        value: \"avoid\"\r\n      }, {\r\n        since: \"2.0.0\",\r\n        value: \"always\"\r\n      }],\r\n      description: \"Include parentheses around a sole arrow function parameter.\",\r\n      choices: [{\r\n        value: \"always\",\r\n        description: \"Always include parens. Example: `(x) => x`\"\r\n      }, {\r\n        value: \"avoid\",\r\n        description: \"Omit parens when possible. Example: `x => x`\"\r\n      }]\r\n    },\r\n    bracketSpacing: commonOptions.bracketSpacing,\r\n    jsxBracketSameLine: {\r\n      since: \"0.17.0\",\r\n      category: CATEGORY_JAVASCRIPT,\r\n      type: \"boolean\",\r\n      default: false,\r\n      description: \"Put > on the last line instead of at a new line.\"\r\n    },\r\n    semi: {\r\n      since: \"1.0.0\",\r\n      category: CATEGORY_JAVASCRIPT,\r\n      type: \"boolean\",\r\n      default: true,\r\n      description: \"Print semicolons.\",\r\n      oppositeDescription: \"Do not print semicolons, except at the beginning of lines which may need them.\"\r\n    },\r\n    singleQuote: commonOptions.singleQuote,\r\n    jsxSingleQuote: {\r\n      since: \"1.15.0\",\r\n      category: CATEGORY_JAVASCRIPT,\r\n      type: \"boolean\",\r\n      default: false,\r\n      description: \"Use single quotes in JSX.\"\r\n    },\r\n    quoteProps: {\r\n      since: \"1.17.0\",\r\n      category: CATEGORY_JAVASCRIPT,\r\n      type: \"choice\",\r\n      default: \"as-needed\",\r\n      description: \"Change when properties in objects are quoted.\",\r\n      choices: [{\r\n        value: \"as-needed\",\r\n        description: \"Only add quotes around object properties where required.\"\r\n      }, {\r\n        value: \"consistent\",\r\n        description: \"If at least one property in an object requires quotes, quote all properties.\"\r\n      }, {\r\n        value: \"preserve\",\r\n        description: \"Respect the input use of quotes in object properties.\"\r\n      }]\r\n    },\r\n    trailingComma: {\r\n      since: \"0.0.0\",\r\n      category: CATEGORY_JAVASCRIPT,\r\n      type: \"choice\",\r\n      default: [{\r\n        since: \"0.0.0\",\r\n        value: false\r\n      }, {\r\n        since: \"0.19.0\",\r\n        value: \"none\"\r\n      }, {\r\n        since: \"2.0.0\",\r\n        value: \"es5\"\r\n      }],\r\n      description: \"Print trailing commas wherever possible when multi-line.\",\r\n      choices: [{\r\n        value: \"es5\",\r\n        description: \"Trailing commas where valid in ES5 (objects, arrays, etc.)\"\r\n      }, {\r\n        value: \"none\",\r\n        description: \"No trailing commas.\"\r\n      }, {\r\n        value: \"all\",\r\n        description: \"Trailing commas wherever possible (including function arguments).\"\r\n      }]\r\n    }\r\n  };\r\n\r\n  var name$9 = \"JavaScript\";\r\n  var type$8 = \"programming\";\r\n  var tmScope$8 = \"source.js\";\r\n  var aceMode$8 = \"javascript\";\r\n  var codemirrorMode$4 = \"javascript\";\r\n  var codemirrorMimeType$4 = \"text/javascript\";\r\n  var color$3 = \"#f1e05a\";\r\n  var aliases$2 = [\r\n  \t\"js\",\r\n  \t\"node\"\r\n  ];\r\n  var extensions$8 = [\r\n  \t\".js\",\r\n  \t\"._js\",\r\n  \t\".bones\",\r\n  \t\".cjs\",\r\n  \t\".es\",\r\n  \t\".es6\",\r\n  \t\".frag\",\r\n  \t\".gs\",\r\n  \t\".jake\",\r\n  \t\".jsb\",\r\n  \t\".jscad\",\r\n  \t\".jsfl\",\r\n  \t\".jsm\",\r\n  \t\".jss\",\r\n  \t\".mjs\",\r\n  \t\".njs\",\r\n  \t\".pac\",\r\n  \t\".sjs\",\r\n  \t\".ssjs\",\r\n  \t\".xsjs\",\r\n  \t\".xsjslib\"\r\n  ];\r\n  var filenames = [\r\n  \t\"Jakefile\"\r\n  ];\r\n  var interpreters = [\r\n  \t\"chakra\",\r\n  \t\"d8\",\r\n  \t\"gjs\",\r\n  \t\"js\",\r\n  \t\"node\",\r\n  \t\"qjs\",\r\n  \t\"rhino\",\r\n  \t\"v8\",\r\n  \t\"v8-shell\"\r\n  ];\r\n  var languageId$8 = 183;\r\n  var JavaScript = {\r\n  \tname: name$9,\r\n  \ttype: type$8,\r\n  \ttmScope: tmScope$8,\r\n  \taceMode: aceMode$8,\r\n  \tcodemirrorMode: codemirrorMode$4,\r\n  \tcodemirrorMimeType: codemirrorMimeType$4,\r\n  \tcolor: color$3,\r\n  \taliases: aliases$2,\r\n  \textensions: extensions$8,\r\n  \tfilenames: filenames,\r\n  \tinterpreters: interpreters,\r\n  \tlanguageId: languageId$8\r\n  };\r\n\r\n  var JavaScript$1 = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    name: name$9,\r\n    type: type$8,\r\n    tmScope: tmScope$8,\r\n    aceMode: aceMode$8,\r\n    codemirrorMode: codemirrorMode$4,\r\n    codemirrorMimeType: codemirrorMimeType$4,\r\n    color: color$3,\r\n    aliases: aliases$2,\r\n    extensions: extensions$8,\r\n    filenames: filenames,\r\n    interpreters: interpreters,\r\n    languageId: languageId$8,\r\n    'default': JavaScript\r\n  });\r\n\r\n  var name$a = \"JSX\";\r\n  var type$9 = \"programming\";\r\n  var group$c = \"JavaScript\";\r\n  var extensions$9 = [\r\n  \t\".jsx\"\r\n  ];\r\n  var tmScope$9 = \"source.js.jsx\";\r\n  var aceMode$9 = \"javascript\";\r\n  var codemirrorMode$5 = \"jsx\";\r\n  var codemirrorMimeType$5 = \"text/jsx\";\r\n  var languageId$9 = 178;\r\n  var JSX = {\r\n  \tname: name$a,\r\n  \ttype: type$9,\r\n  \tgroup: group$c,\r\n  \textensions: extensions$9,\r\n  \ttmScope: tmScope$9,\r\n  \taceMode: aceMode$9,\r\n  \tcodemirrorMode: codemirrorMode$5,\r\n  \tcodemirrorMimeType: codemirrorMimeType$5,\r\n  \tlanguageId: languageId$9\r\n  };\r\n\r\n  var JSX$1 = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    name: name$a,\r\n    type: type$9,\r\n    group: group$c,\r\n    extensions: extensions$9,\r\n    tmScope: tmScope$9,\r\n    aceMode: aceMode$9,\r\n    codemirrorMode: codemirrorMode$5,\r\n    codemirrorMimeType: codemirrorMimeType$5,\r\n    languageId: languageId$9,\r\n    'default': JSX\r\n  });\r\n\r\n  var name$b = \"TypeScript\";\r\n  var type$a = \"programming\";\r\n  var color$4 = \"#2b7489\";\r\n  var aliases$3 = [\r\n  \t\"ts\"\r\n  ];\r\n  var interpreters$1 = [\r\n  \t\"deno\",\r\n  \t\"ts-node\"\r\n  ];\r\n  var extensions$a = [\r\n  \t\".ts\"\r\n  ];\r\n  var tmScope$a = \"source.ts\";\r\n  var aceMode$a = \"typescript\";\r\n  var codemirrorMode$6 = \"javascript\";\r\n  var codemirrorMimeType$6 = \"application/typescript\";\r\n  var languageId$a = 378;\r\n  var TypeScript = {\r\n  \tname: name$b,\r\n  \ttype: type$a,\r\n  \tcolor: color$4,\r\n  \taliases: aliases$3,\r\n  \tinterpreters: interpreters$1,\r\n  \textensions: extensions$a,\r\n  \ttmScope: tmScope$a,\r\n  \taceMode: aceMode$a,\r\n  \tcodemirrorMode: codemirrorMode$6,\r\n  \tcodemirrorMimeType: codemirrorMimeType$6,\r\n  \tlanguageId: languageId$a\r\n  };\r\n\r\n  var TypeScript$1 = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    name: name$b,\r\n    type: type$a,\r\n    color: color$4,\r\n    aliases: aliases$3,\r\n    interpreters: interpreters$1,\r\n    extensions: extensions$a,\r\n    tmScope: tmScope$a,\r\n    aceMode: aceMode$a,\r\n    codemirrorMode: codemirrorMode$6,\r\n    codemirrorMimeType: codemirrorMimeType$6,\r\n    languageId: languageId$a,\r\n    'default': TypeScript\r\n  });\r\n\r\n  var name$c = \"TSX\";\r\n  var type$b = \"programming\";\r\n  var group$d = \"TypeScript\";\r\n  var extensions$b = [\r\n  \t\".tsx\"\r\n  ];\r\n  var tmScope$b = \"source.tsx\";\r\n  var aceMode$b = \"javascript\";\r\n  var codemirrorMode$7 = \"jsx\";\r\n  var codemirrorMimeType$7 = \"text/jsx\";\r\n  var languageId$b = 94901924;\r\n  var TSX = {\r\n  \tname: name$c,\r\n  \ttype: type$b,\r\n  \tgroup: group$d,\r\n  \textensions: extensions$b,\r\n  \ttmScope: tmScope$b,\r\n  \taceMode: aceMode$b,\r\n  \tcodemirrorMode: codemirrorMode$7,\r\n  \tcodemirrorMimeType: codemirrorMimeType$7,\r\n  \tlanguageId: languageId$b\r\n  };\r\n\r\n  var TSX$1 = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    name: name$c,\r\n    type: type$b,\r\n    group: group$d,\r\n    extensions: extensions$b,\r\n    tmScope: tmScope$b,\r\n    aceMode: aceMode$b,\r\n    codemirrorMode: codemirrorMode$7,\r\n    codemirrorMimeType: codemirrorMimeType$7,\r\n    languageId: languageId$b,\r\n    'default': TSX\r\n  });\r\n\r\n  var name$d = \"JSON\";\r\n  var type$c = \"data\";\r\n  var tmScope$c = \"source.json\";\r\n  var aceMode$c = \"json\";\r\n  var codemirrorMode$8 = \"javascript\";\r\n  var codemirrorMimeType$8 = \"application/json\";\r\n  var searchable = false;\r\n  var extensions$c = [\r\n  \t\".json\",\r\n  \t\".avsc\",\r\n  \t\".geojson\",\r\n  \t\".gltf\",\r\n  \t\".har\",\r\n  \t\".ice\",\r\n  \t\".JSON-tmLanguage\",\r\n  \t\".jsonl\",\r\n  \t\".mcmeta\",\r\n  \t\".tfstate\",\r\n  \t\".tfstate.backup\",\r\n  \t\".topojson\",\r\n  \t\".webapp\",\r\n  \t\".webmanifest\",\r\n  \t\".yy\",\r\n  \t\".yyp\"\r\n  ];\r\n  var filenames$1 = [\r\n  \t\".arcconfig\",\r\n  \t\".htmlhintrc\",\r\n  \t\".tern-config\",\r\n  \t\".tern-project\",\r\n  \t\".watchmanconfig\",\r\n  \t\"composer.lock\",\r\n  \t\"mcmod.info\"\r\n  ];\r\n  var languageId$c = 174;\r\n  var _JSON = {\r\n  \tname: name$d,\r\n  \ttype: type$c,\r\n  \ttmScope: tmScope$c,\r\n  \taceMode: aceMode$c,\r\n  \tcodemirrorMode: codemirrorMode$8,\r\n  \tcodemirrorMimeType: codemirrorMimeType$8,\r\n  \tsearchable: searchable,\r\n  \textensions: extensions$c,\r\n  \tfilenames: filenames$1,\r\n  \tlanguageId: languageId$c\r\n  };\r\n\r\n  var _JSON$1 = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    name: name$d,\r\n    type: type$c,\r\n    tmScope: tmScope$c,\r\n    aceMode: aceMode$c,\r\n    codemirrorMode: codemirrorMode$8,\r\n    codemirrorMimeType: codemirrorMimeType$8,\r\n    searchable: searchable,\r\n    extensions: extensions$c,\r\n    filenames: filenames$1,\r\n    languageId: languageId$c,\r\n    'default': _JSON\r\n  });\r\n\r\n  var name$e = \"JSON with Comments\";\r\n  var type$d = \"data\";\r\n  var group$e = \"JSON\";\r\n  var tmScope$d = \"source.js\";\r\n  var aceMode$d = \"javascript\";\r\n  var codemirrorMode$9 = \"javascript\";\r\n  var codemirrorMimeType$9 = \"text/javascript\";\r\n  var aliases$4 = [\r\n  \t\"jsonc\"\r\n  ];\r\n  var extensions$d = [\r\n  \t\".jsonc\",\r\n  \t\".sublime-build\",\r\n  \t\".sublime-commands\",\r\n  \t\".sublime-completions\",\r\n  \t\".sublime-keymap\",\r\n  \t\".sublime-macro\",\r\n  \t\".sublime-menu\",\r\n  \t\".sublime-mousemap\",\r\n  \t\".sublime-project\",\r\n  \t\".sublime-settings\",\r\n  \t\".sublime-theme\",\r\n  \t\".sublime-workspace\",\r\n  \t\".sublime_metrics\",\r\n  \t\".sublime_session\"\r\n  ];\r\n  var filenames$2 = [\r\n  \t\".babelrc\",\r\n  \t\".eslintrc.json\",\r\n  \t\".jscsrc\",\r\n  \t\".jshintrc\",\r\n  \t\".jslintrc\",\r\n  \t\"jsconfig.json\",\r\n  \t\"language-configuration.json\",\r\n  \t\"tsconfig.json\"\r\n  ];\r\n  var languageId$d = 423;\r\n  var JSON_with_Comments = {\r\n  \tname: name$e,\r\n  \ttype: type$d,\r\n  \tgroup: group$e,\r\n  \ttmScope: tmScope$d,\r\n  \taceMode: aceMode$d,\r\n  \tcodemirrorMode: codemirrorMode$9,\r\n  \tcodemirrorMimeType: codemirrorMimeType$9,\r\n  \taliases: aliases$4,\r\n  \textensions: extensions$d,\r\n  \tfilenames: filenames$2,\r\n  \tlanguageId: languageId$d\r\n  };\r\n\r\n  var JSON_with_Comments$1 = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    name: name$e,\r\n    type: type$d,\r\n    group: group$e,\r\n    tmScope: tmScope$d,\r\n    aceMode: aceMode$d,\r\n    codemirrorMode: codemirrorMode$9,\r\n    codemirrorMimeType: codemirrorMimeType$9,\r\n    aliases: aliases$4,\r\n    extensions: extensions$d,\r\n    filenames: filenames$2,\r\n    languageId: languageId$d,\r\n    'default': JSON_with_Comments\r\n  });\r\n\r\n  var name$f = \"JSON5\";\r\n  var type$e = \"data\";\r\n  var extensions$e = [\r\n  \t\".json5\"\r\n  ];\r\n  var tmScope$e = \"source.js\";\r\n  var aceMode$e = \"javascript\";\r\n  var codemirrorMode$a = \"javascript\";\r\n  var codemirrorMimeType$a = \"application/json\";\r\n  var languageId$e = 175;\r\n  var JSON5 = {\r\n  \tname: name$f,\r\n  \ttype: type$e,\r\n  \textensions: extensions$e,\r\n  \ttmScope: tmScope$e,\r\n  \taceMode: aceMode$e,\r\n  \tcodemirrorMode: codemirrorMode$a,\r\n  \tcodemirrorMimeType: codemirrorMimeType$a,\r\n  \tlanguageId: languageId$e\r\n  };\r\n\r\n  var JSON5$1 = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    name: name$f,\r\n    type: type$e,\r\n    extensions: extensions$e,\r\n    tmScope: tmScope$e,\r\n    aceMode: aceMode$e,\r\n    codemirrorMode: codemirrorMode$a,\r\n    codemirrorMimeType: codemirrorMimeType$a,\r\n    languageId: languageId$e,\r\n    'default': JSON5\r\n  });\r\n\r\n  var require$$0$6 = getCjsExportFromNamespace(JavaScript$1);\r\n\r\n  var require$$1$2 = getCjsExportFromNamespace(JSX$1);\r\n\r\n  var require$$2$1 = getCjsExportFromNamespace(TypeScript$1);\r\n\r\n  var require$$3$1 = getCjsExportFromNamespace(TSX$1);\r\n\r\n  var require$$4 = getCjsExportFromNamespace(_JSON$1);\r\n\r\n  var require$$5 = getCjsExportFromNamespace(JSON_with_Comments$1);\r\n\r\n  var require$$6 = getCjsExportFromNamespace(JSON5$1);\r\n\r\n  const languages$4 = [createLanguage(require$$0$6, data => ({\r\n    since: \"0.0.0\",\r\n    parsers: [\"babel\", \"flow\"],\r\n    vscodeLanguageIds: [\"javascript\", \"mongo\"],\r\n    interpreters: data.interpreters.concat([\"nodejs\"])\r\n  })), createLanguage(require$$0$6, () => ({\r\n    name: \"Flow\",\r\n    since: \"0.0.0\",\r\n    parsers: [\"babel\", \"flow\"],\r\n    vscodeLanguageIds: [\"javascript\"],\r\n    aliases: [],\r\n    filenames: [],\r\n    extensions: [\".js.flow\"]\r\n  })), createLanguage(require$$1$2, () => ({\r\n    since: \"0.0.0\",\r\n    parsers: [\"babel\", \"flow\"],\r\n    vscodeLanguageIds: [\"javascriptreact\"]\r\n  })), createLanguage(require$$2$1, () => ({\r\n    since: \"1.4.0\",\r\n    parsers: [\"typescript\", \"babel-ts\"],\r\n    vscodeLanguageIds: [\"typescript\"]\r\n  })), createLanguage(require$$3$1, () => ({\r\n    since: \"1.4.0\",\r\n    parsers: [\"typescript\", \"babel-ts\"],\r\n    vscodeLanguageIds: [\"typescriptreact\"]\r\n  })), createLanguage(require$$4, () => ({\r\n    name: \"JSON.stringify\",\r\n    since: \"1.13.0\",\r\n    parsers: [\"json-stringify\"],\r\n    vscodeLanguageIds: [\"json\"],\r\n    extensions: [],\r\n    // .json file defaults to json instead of json-stringify\r\n    filenames: [\"package.json\", \"package-lock.json\", \"composer.json\"]\r\n  })), createLanguage(require$$4, data => ({\r\n    since: \"1.5.0\",\r\n    parsers: [\"json\"],\r\n    vscodeLanguageIds: [\"json\"],\r\n    filenames: data.filenames.concat([\".prettierrc\"])\r\n  })), createLanguage(require$$5, data => ({\r\n    since: \"1.5.0\",\r\n    parsers: [\"json\"],\r\n    vscodeLanguageIds: [\"jsonc\"],\r\n    filenames: data.filenames.concat([\".eslintrc\"])\r\n  })), createLanguage(require$$6, () => ({\r\n    since: \"1.13.0\",\r\n    parsers: [\"json5\"],\r\n    vscodeLanguageIds: [\"json5\"]\r\n  }))];\r\n  const printers$4 = {\r\n    estree: printerEstree,\r\n    \"estree-json\": printerEstreeJson\r\n  };\r\n  var languageJs = {\r\n    languages: languages$4,\r\n    options: options$5,\r\n    printers: printers$4\r\n  };\r\n\r\n  var json$1 = {\r\n    \"cjkPattern\": \"[\\\\u02ea-\\\\u02eb\\\\u1100-\\\\u11ff\\\\u2e80-\\\\u2e99\\\\u2e9b-\\\\u2ef3\\\\u2f00-\\\\u2fd5\\\\u3000-\\\\u303f\\\\u3041-\\\\u3096\\\\u3099-\\\\u309f\\\\u30a1-\\\\u30fa\\\\u30fc-\\\\u30ff\\\\u3105-\\\\u312f\\\\u3131-\\\\u318e\\\\u3190-\\\\u3191\\\\u3196-\\\\u31ba\\\\u31c0-\\\\u31e3\\\\u31f0-\\\\u321e\\\\u322a-\\\\u3247\\\\u3260-\\\\u327e\\\\u328a-\\\\u32b0\\\\u32c0-\\\\u32cb\\\\u32d0-\\\\u3370\\\\u337b-\\\\u337f\\\\u33e0-\\\\u33fe\\\\u3400-\\\\u4db5\\\\u4e00-\\\\u9fef\\\\ua960-\\\\ua97c\\\\uac00-\\\\ud7a3\\\\ud7b0-\\\\ud7c6\\\\ud7cb-\\\\ud7fb\\\\uf900-\\\\ufa6d\\\\ufa70-\\\\ufad9\\\\ufe10-\\\\ufe1f\\\\ufe30-\\\\ufe6f\\\\uff00-\\\\uffef]|[\\\\ud840-\\\\ud868\\\\ud86a-\\\\ud86c\\\\ud86f-\\\\ud872\\\\ud874-\\\\ud879][\\\\udc00-\\\\udfff]|\\\\ud82c[\\\\udc00-\\\\udd1e\\\\udd50-\\\\udd52\\\\udd64-\\\\udd67]|\\\\ud83c[\\\\ude00\\\\ude50-\\\\ude51]|\\\\ud869[\\\\udc00-\\\\uded6\\\\udf00-\\\\udfff]|\\\\ud86d[\\\\udc00-\\\\udf34\\\\udf40-\\\\udfff]|\\\\ud86e[\\\\udc00-\\\\udc1d\\\\udc20-\\\\udfff]|\\\\ud873[\\\\udc00-\\\\udea1\\\\udeb0-\\\\udfff]|\\\\ud87a[\\\\udc00-\\\\udfe0]|\\\\ud87e[\\\\udc00-\\\\ude1d]\",\r\n    \"kPattern\": \"[\\\\u1100-\\\\u11ff\\\\u3001-\\\\u3003\\\\u3008-\\\\u3011\\\\u3013-\\\\u301f\\\\u302e-\\\\u3030\\\\u3037\\\\u30fb\\\\u3131-\\\\u318e\\\\u3200-\\\\u321e\\\\u3260-\\\\u327e\\\\ua960-\\\\ua97c\\\\uac00-\\\\ud7a3\\\\ud7b0-\\\\ud7c6\\\\ud7cb-\\\\ud7fb\\\\ufe45-\\\\ufe46\\\\uff61-\\\\uff65\\\\uffa0-\\\\uffbe\\\\uffc2-\\\\uffc7\\\\uffca-\\\\uffcf\\\\uffd2-\\\\uffd7\\\\uffda-\\\\uffdc]\",\r\n    \"punctuationPattern\": \"[\\\\u0021-\\\\u002f\\\\u003a-\\\\u0040\\\\u005b-\\\\u0060\\\\u007b-\\\\u007e\\\\u00a1\\\\u00a7\\\\u00ab\\\\u00b6-\\\\u00b7\\\\u00bb\\\\u00bf\\\\u037e\\\\u0387\\\\u055a-\\\\u055f\\\\u0589-\\\\u058a\\\\u05be\\\\u05c0\\\\u05c3\\\\u05c6\\\\u05f3-\\\\u05f4\\\\u0609-\\\\u060a\\\\u060c-\\\\u060d\\\\u061b\\\\u061e-\\\\u061f\\\\u066a-\\\\u066d\\\\u06d4\\\\u0700-\\\\u070d\\\\u07f7-\\\\u07f9\\\\u0830-\\\\u083e\\\\u085e\\\\u0964-\\\\u0965\\\\u0970\\\\u09fd\\\\u0a76\\\\u0af0\\\\u0c77\\\\u0c84\\\\u0df4\\\\u0e4f\\\\u0e5a-\\\\u0e5b\\\\u0f04-\\\\u0f12\\\\u0f14\\\\u0f3a-\\\\u0f3d\\\\u0f85\\\\u0fd0-\\\\u0fd4\\\\u0fd9-\\\\u0fda\\\\u104a-\\\\u104f\\\\u10fb\\\\u1360-\\\\u1368\\\\u1400\\\\u166e\\\\u169b-\\\\u169c\\\\u16eb-\\\\u16ed\\\\u1735-\\\\u1736\\\\u17d4-\\\\u17d6\\\\u17d8-\\\\u17da\\\\u1800-\\\\u180a\\\\u1944-\\\\u1945\\\\u1a1e-\\\\u1a1f\\\\u1aa0-\\\\u1aa6\\\\u1aa8-\\\\u1aad\\\\u1b5a-\\\\u1b60\\\\u1bfc-\\\\u1bff\\\\u1c3b-\\\\u1c3f\\\\u1c7e-\\\\u1c7f\\\\u1cc0-\\\\u1cc7\\\\u1cd3\\\\u2010-\\\\u2027\\\\u2030-\\\\u2043\\\\u2045-\\\\u2051\\\\u2053-\\\\u205e\\\\u207d-\\\\u207e\\\\u208d-\\\\u208e\\\\u2308-\\\\u230b\\\\u2329-\\\\u232a\\\\u2768-\\\\u2775\\\\u27c5-\\\\u27c6\\\\u27e6-\\\\u27ef\\\\u2983-\\\\u2998\\\\u29d8-\\\\u29db\\\\u29fc-\\\\u29fd\\\\u2cf9-\\\\u2cfc\\\\u2cfe-\\\\u2cff\\\\u2d70\\\\u2e00-\\\\u2e2e\\\\u2e30-\\\\u2e4f\\\\u3001-\\\\u3003\\\\u3008-\\\\u3011\\\\u3014-\\\\u301f\\\\u3030\\\\u303d\\\\u30a0\\\\u30fb\\\\ua4fe-\\\\ua4ff\\\\ua60d-\\\\ua60f\\\\ua673\\\\ua67e\\\\ua6f2-\\\\ua6f7\\\\ua874-\\\\ua877\\\\ua8ce-\\\\ua8cf\\\\ua8f8-\\\\ua8fa\\\\ua8fc\\\\ua92e-\\\\ua92f\\\\ua95f\\\\ua9c1-\\\\ua9cd\\\\ua9de-\\\\ua9df\\\\uaa5c-\\\\uaa5f\\\\uaade-\\\\uaadf\\\\uaaf0-\\\\uaaf1\\\\uabeb\\\\ufd3e-\\\\ufd3f\\\\ufe10-\\\\ufe19\\\\ufe30-\\\\ufe52\\\\ufe54-\\\\ufe61\\\\ufe63\\\\ufe68\\\\ufe6a-\\\\ufe6b\\\\uff01-\\\\uff03\\\\uff05-\\\\uff0a\\\\uff0c-\\\\uff0f\\\\uff1a-\\\\uff1b\\\\uff1f-\\\\uff20\\\\uff3b-\\\\uff3d\\\\uff3f\\\\uff5b\\\\uff5d\\\\uff5f-\\\\uff65]|\\\\ud800[\\\\udd00-\\\\udd02\\\\udf9f\\\\udfd0]|\\\\ud801[\\\\udd6f]|\\\\ud802[\\\\udc57\\\\udd1f\\\\udd3f\\\\ude50-\\\\ude58\\\\ude7f\\\\udef0-\\\\udef6\\\\udf39-\\\\udf3f\\\\udf99-\\\\udf9c]|\\\\ud803[\\\\udf55-\\\\udf59]|\\\\ud804[\\\\udc47-\\\\udc4d\\\\udcbb-\\\\udcbc\\\\udcbe-\\\\udcc1\\\\udd40-\\\\udd43\\\\udd74-\\\\udd75\\\\uddc5-\\\\uddc8\\\\uddcd\\\\udddb\\\\udddd-\\\\udddf\\\\ude38-\\\\ude3d\\\\udea9]|\\\\ud805[\\\\udc4b-\\\\udc4f\\\\udc5b\\\\udc5d\\\\udcc6\\\\uddc1-\\\\uddd7\\\\ude41-\\\\ude43\\\\ude60-\\\\ude6c\\\\udf3c-\\\\udf3e]|\\\\ud806[\\\\udc3b\\\\udde2\\\\ude3f-\\\\ude46\\\\ude9a-\\\\ude9c\\\\ude9e-\\\\udea2]|\\\\ud807[\\\\udc41-\\\\udc45\\\\udc70-\\\\udc71\\\\udef7-\\\\udef8\\\\udfff]|\\\\ud809[\\\\udc70-\\\\udc74]|\\\\ud81a[\\\\ude6e-\\\\ude6f\\\\udef5\\\\udf37-\\\\udf3b\\\\udf44]|\\\\ud81b[\\\\ude97-\\\\ude9a\\\\udfe2]|\\\\ud82f[\\\\udc9f]|\\\\ud836[\\\\ude87-\\\\ude8b]|\\\\ud83a[\\\\udd5e-\\\\udd5f]\"\r\n  };\r\n\r\n  const {\r\n    cjkPattern,\r\n    kPattern,\r\n    punctuationPattern\r\n  } = json$1;\r\n  const {\r\n    getLast: getLast$4\r\n  } = util$1;\r\n  const INLINE_NODE_TYPES = [\"liquidNode\", \"inlineCode\", \"emphasis\", \"strong\", \"delete\", \"link\", \"linkReference\", \"image\", \"imageReference\", \"footnote\", \"footnoteReference\", \"sentence\", \"whitespace\", \"word\", \"break\", \"inlineMath\"];\r\n  const INLINE_NODE_WRAPPER_TYPES = INLINE_NODE_TYPES.concat([\"tableCell\", \"paragraph\", \"heading\"]);\r\n  const kRegex = new RegExp(kPattern);\r\n  const punctuationRegex = new RegExp(punctuationPattern);\r\n  /**\r\n   * split text into whitespaces and words\r\n   * @param {string} text\r\n   * @return {Array<{ type: \"whitespace\", value: \" \" | \"\\n\" | \"\" } | { type: \"word\", value: string }>}\r\n   */\r\n\r\n  function splitText(text, options) {\r\n    const KIND_NON_CJK = \"non-cjk\";\r\n    const KIND_CJ_LETTER = \"cj-letter\";\r\n    const KIND_K_LETTER = \"k-letter\";\r\n    const KIND_CJK_PUNCTUATION = \"cjk-punctuation\";\r\n    const nodes = [];\r\n    (options.proseWrap === \"preserve\" ? text : text.replace(new RegExp(\"(\".concat(cjkPattern, \")\\n(\").concat(cjkPattern, \")\"), \"g\"), \"$1$2\")).split(/([ \\t\\n]+)/).forEach((token, index, tokens) => {\r\n      // whitespace\r\n      if (index % 2 === 1) {\r\n        nodes.push({\r\n          type: \"whitespace\",\r\n          value: /\\n/.test(token) ? \"\\n\" : \" \"\r\n        });\r\n        return;\r\n      } // word separated by whitespace\r\n\r\n\r\n      if ((index === 0 || index === tokens.length - 1) && token === \"\") {\r\n        return;\r\n      }\r\n\r\n      token.split(new RegExp(\"(\".concat(cjkPattern, \")\"))).forEach((innerToken, innerIndex, innerTokens) => {\r\n        if ((innerIndex === 0 || innerIndex === innerTokens.length - 1) && innerToken === \"\") {\r\n          return;\r\n        } // non-CJK word\r\n\r\n\r\n        if (innerIndex % 2 === 0) {\r\n          if (innerToken !== \"\") {\r\n            appendNode({\r\n              type: \"word\",\r\n              value: innerToken,\r\n              kind: KIND_NON_CJK,\r\n              hasLeadingPunctuation: punctuationRegex.test(innerToken[0]),\r\n              hasTrailingPunctuation: punctuationRegex.test(getLast$4(innerToken))\r\n            });\r\n          }\r\n\r\n          return;\r\n        } // CJK character\r\n\r\n\r\n        appendNode(punctuationRegex.test(innerToken) ? {\r\n          type: \"word\",\r\n          value: innerToken,\r\n          kind: KIND_CJK_PUNCTUATION,\r\n          hasLeadingPunctuation: true,\r\n          hasTrailingPunctuation: true\r\n        } : {\r\n          type: \"word\",\r\n          value: innerToken,\r\n          kind: kRegex.test(innerToken) ? KIND_K_LETTER : KIND_CJ_LETTER,\r\n          hasLeadingPunctuation: false,\r\n          hasTrailingPunctuation: false\r\n        });\r\n      });\r\n    });\r\n    return nodes;\r\n\r\n    function appendNode(node) {\r\n      const lastNode = getLast$4(nodes);\r\n\r\n      if (lastNode && lastNode.type === \"word\") {\r\n        if (lastNode.kind === KIND_NON_CJK && node.kind === KIND_CJ_LETTER && !lastNode.hasTrailingPunctuation || lastNode.kind === KIND_CJ_LETTER && node.kind === KIND_NON_CJK && !node.hasLeadingPunctuation) {\r\n          nodes.push({\r\n            type: \"whitespace\",\r\n            value: \" \"\r\n          });\r\n        } else if (!isBetween(KIND_NON_CJK, KIND_CJK_PUNCTUATION) && // disallow leading/trailing full-width whitespace\r\n        ![lastNode.value, node.value].some(value => /\\u3000/.test(value))) {\r\n          nodes.push({\r\n            type: \"whitespace\",\r\n            value: \"\"\r\n          });\r\n        }\r\n      }\r\n\r\n      nodes.push(node);\r\n\r\n      function isBetween(kind1, kind2) {\r\n        return lastNode.kind === kind1 && node.kind === kind2 || lastNode.kind === kind2 && node.kind === kind1;\r\n      }\r\n    }\r\n  }\r\n\r\n  function getOrderedListItemInfo(orderListItem, originalText) {\r\n    const [, numberText, marker, leadingSpaces] = originalText.slice(orderListItem.position.start.offset, orderListItem.position.end.offset).match(/^\\s*(\\d+)(\\.|\\))(\\s*)/);\r\n    return {\r\n      numberText,\r\n      marker,\r\n      leadingSpaces\r\n    };\r\n  }\r\n\r\n  function hasGitDiffFriendlyOrderedList(node, options) {\r\n    if (!node.ordered) {\r\n      return false;\r\n    }\r\n\r\n    if (node.children.length < 2) {\r\n      return false;\r\n    }\r\n\r\n    const firstNumber = Number(getOrderedListItemInfo(node.children[0], options.originalText).numberText);\r\n    const secondNumber = Number(getOrderedListItemInfo(node.children[1], options.originalText).numberText);\r\n\r\n    if (firstNumber === 0 && node.children.length > 2) {\r\n      const thirdNumber = Number(getOrderedListItemInfo(node.children[2], options.originalText).numberText);\r\n      return secondNumber === 1 && thirdNumber === 1;\r\n    }\r\n\r\n    return secondNumber === 1;\r\n  } // workaround for https://github.com/remarkjs/remark/issues/351\r\n  // leading and trailing newlines are stripped by remark\r\n\r\n\r\n  function getFencedCodeBlockValue(node, originalText) {\r\n    const text = originalText.slice(node.position.start.offset, node.position.end.offset);\r\n    const leadingSpaceCount = text.match(/^\\s*/)[0].length;\r\n    const replaceRegex = new RegExp(\"^\\\\s{0,\".concat(leadingSpaceCount, \"}\"));\r\n    const lineContents = text.split(\"\\n\");\r\n    const markerStyle = text[leadingSpaceCount]; // ` or ~\r\n\r\n    const marker = text.slice(leadingSpaceCount).match(new RegExp(\"^[\".concat(markerStyle, \"]+\")))[0]; // https://spec.commonmark.org/0.28/#example-104: Closing fences may be indented by 0-3 spaces\r\n    // https://spec.commonmark.org/0.28/#example-93: The closing code fence must be at least as long as the opening fence\r\n\r\n    const hasEndMarker = new RegExp(\"^\\\\s{0,3}\".concat(marker)).test(lineContents[lineContents.length - 1].slice(getIndent(lineContents.length - 1)));\r\n    return lineContents.slice(1, hasEndMarker ? -1 : undefined).map((x, i) => x.slice(getIndent(i + 1)).replace(replaceRegex, \"\")).join(\"\\n\");\r\n\r\n    function getIndent(lineIndex) {\r\n      return node.position.indent[lineIndex - 1] - 1;\r\n    }\r\n  }\r\n\r\n  function mapAst(ast, handler) {\r\n    return function preorder(node, index, parentStack) {\r\n      parentStack = parentStack || [];\r\n      const newNode = Object.assign({}, handler(node, index, parentStack));\r\n\r\n      if (newNode.children) {\r\n        newNode.children = newNode.children.map((child, index) => {\r\n          return preorder(child, index, [newNode].concat(parentStack));\r\n        });\r\n      }\r\n\r\n      return newNode;\r\n    }(ast, null, null);\r\n  }\r\n\r\n  var utils$6 = {\r\n    mapAst,\r\n    splitText,\r\n    punctuationPattern,\r\n    getFencedCodeBlockValue,\r\n    getOrderedListItemInfo,\r\n    hasGitDiffFriendlyOrderedList,\r\n    INLINE_NODE_TYPES,\r\n    INLINE_NODE_WRAPPER_TYPES\r\n  };\r\n\r\n  const {\r\n    builders: {\r\n      hardline: hardline$b,\r\n      literalline: literalline$5,\r\n      concat: concat$f,\r\n      markAsRoot: markAsRoot$3\r\n    },\r\n    utils: {\r\n      mapDoc: mapDoc$4\r\n    }\r\n  } = document;\r\n  const {\r\n    getFencedCodeBlockValue: getFencedCodeBlockValue$1\r\n  } = utils$6;\r\n\r\n  function embed$4(path, print, textToDoc, options) {\r\n    const node = path.getValue();\r\n\r\n    if (node.type === \"code\" && node.lang !== null) {\r\n      // only look for the first string so as to support [markdown-preview-enhanced](https://shd101wyy.github.io/markdown-preview-enhanced/#/code-chunk)\r\n      const langMatch = node.lang.match(/^[A-Za-z0-9_-]+/);\r\n      const lang = langMatch ? langMatch[0] : \"\";\r\n      const parser = getParserName(lang);\r\n\r\n      if (parser) {\r\n        const styleUnit = options.__inJsTemplate ? \"~\" : \"`\";\r\n        const style = styleUnit.repeat(Math.max(3, util$1.getMaxContinuousCount(node.value, styleUnit) + 1));\r\n        const doc = textToDoc(getFencedCodeBlockValue$1(node, options.originalText), {\r\n          parser\r\n        });\r\n        return markAsRoot$3(concat$f([style, node.lang, hardline$b, replaceNewlinesWithLiterallines(doc), style]));\r\n      }\r\n    }\r\n\r\n    if (node.type === \"yaml\") {\r\n      return markAsRoot$3(concat$f([\"---\", hardline$b, node.value && node.value.trim() ? replaceNewlinesWithLiterallines(textToDoc(node.value, {\r\n        parser: \"yaml\"\r\n      })) : \"\", \"---\"]));\r\n    } // MDX\r\n\r\n\r\n    switch (node.type) {\r\n      case \"importExport\":\r\n        return textToDoc(node.value, {\r\n          parser: \"babel\"\r\n        });\r\n\r\n      case \"jsx\":\r\n        return textToDoc(\"<$>\".concat(node.value, \"</$>\"), {\r\n          parser: \"__js_expression\",\r\n          rootMarker: \"mdx\"\r\n        });\r\n    }\r\n\r\n    return null;\r\n\r\n    function getParserName(lang) {\r\n      const supportInfo = support.getSupportInfo({\r\n        plugins: options.plugins\r\n      });\r\n      const language = supportInfo.languages.find(language => language.name.toLowerCase() === lang || language.aliases && language.aliases.includes(lang) || language.extensions && language.extensions.find(ext => ext === \".\".concat(lang)));\r\n\r\n      if (language) {\r\n        return language.parsers[0];\r\n      }\r\n\r\n      return null;\r\n    }\r\n\r\n    function replaceNewlinesWithLiterallines(doc) {\r\n      return mapDoc$4(doc, currentDoc => typeof currentDoc === \"string\" && currentDoc.includes(\"\\n\") ? concat$f(currentDoc.split(/(\\n)/g).map((v, i) => i % 2 === 0 ? v : literalline$5)) : currentDoc);\r\n    }\r\n  }\r\n\r\n  var embed_1$2 = embed$4;\r\n\r\n  const pragmas = [\"format\", \"prettier\"];\r\n\r\n  function startWithPragma(text) {\r\n    const pragma = \"@(\".concat(pragmas.join(\"|\"), \")\");\r\n    const regex = new RegExp([\"<!--\\\\s*\".concat(pragma, \"\\\\s*-->\"), \"<!--.*\\r?\\n[\\\\s\\\\S]*(^|\\n)[^\\\\S\\n]*\".concat(pragma, \"[^\\\\S\\n]*($|\\n)[\\\\s\\\\S]*\\n.*-->\")].join(\"|\"), \"m\");\r\n    const matched = text.match(regex);\r\n    return matched && matched.index === 0;\r\n  }\r\n\r\n  var pragma$4 = {\r\n    startWithPragma,\r\n    hasPragma: text => startWithPragma(frontMatter(text).content.trimStart()),\r\n    insertPragma: text => {\r\n      const extracted = frontMatter(text);\r\n      const pragma = \"<!-- @\".concat(pragmas[0], \" -->\");\r\n      return extracted.frontMatter ? \"\".concat(extracted.frontMatter.raw, \"\\n\\n\").concat(pragma, \"\\n\\n\").concat(extracted.content) : \"\".concat(pragma, \"\\n\\n\").concat(extracted.content);\r\n    }\r\n  };\r\n\r\n  const {\r\n    getOrderedListItemInfo: getOrderedListItemInfo$1,\r\n    mapAst: mapAst$1,\r\n    splitText: splitText$1\r\n  } = utils$6; // 0x0 ~ 0x10ffff\r\n  // eslint-disable-next-line no-control-regex\r\n\r\n  const isSingleCharRegex = /^([\\u0000-\\uffff]|[\\ud800-\\udbff][\\udc00-\\udfff])$/;\r\n\r\n  function preprocess$2(ast, options) {\r\n    ast = restoreUnescapedCharacter(ast, options);\r\n    ast = mergeContinuousTexts(ast);\r\n    ast = transformInlineCode(ast);\r\n    ast = transformIndentedCodeblockAndMarkItsParentList(ast, options);\r\n    ast = markAlignedList(ast, options);\r\n    ast = splitTextIntoSentences(ast, options);\r\n    ast = transformImportExport(ast);\r\n    ast = mergeContinuousImportExport(ast);\r\n    return ast;\r\n  }\r\n\r\n  function transformImportExport(ast) {\r\n    return mapAst$1(ast, node => {\r\n      if (node.type !== \"import\" && node.type !== \"export\") {\r\n        return node;\r\n      }\r\n\r\n      return Object.assign({}, node, {\r\n        type: \"importExport\"\r\n      });\r\n    });\r\n  }\r\n\r\n  function transformInlineCode(ast) {\r\n    return mapAst$1(ast, node => {\r\n      if (node.type !== \"inlineCode\") {\r\n        return node;\r\n      }\r\n\r\n      return Object.assign({}, node, {\r\n        value: node.value.replace(/\\s+/g, \" \")\r\n      });\r\n    });\r\n  }\r\n\r\n  function restoreUnescapedCharacter(ast, options) {\r\n    return mapAst$1(ast, node => {\r\n      return node.type !== \"text\" ? node : Object.assign({}, node, {\r\n        value: node.value !== \"*\" && node.value !== \"_\" && node.value !== \"$\" && // handle these cases in printer\r\n        isSingleCharRegex.test(node.value) && node.position.end.offset - node.position.start.offset !== node.value.length ? options.originalText.slice(node.position.start.offset, node.position.end.offset) : node.value\r\n      });\r\n    });\r\n  }\r\n\r\n  function mergeContinuousImportExport(ast) {\r\n    return mergeChildren(ast, (prevNode, node) => prevNode.type === \"importExport\" && node.type === \"importExport\", (prevNode, node) => ({\r\n      type: \"importExport\",\r\n      value: prevNode.value + \"\\n\\n\" + node.value,\r\n      position: {\r\n        start: prevNode.position.start,\r\n        end: node.position.end\r\n      }\r\n    }));\r\n  }\r\n\r\n  function mergeChildren(ast, shouldMerge, mergeNode) {\r\n    return mapAst$1(ast, node => {\r\n      if (!node.children) {\r\n        return node;\r\n      }\r\n\r\n      const children = node.children.reduce((current, child) => {\r\n        const lastChild = current[current.length - 1];\r\n\r\n        if (lastChild && shouldMerge(lastChild, child)) {\r\n          current.splice(-1, 1, mergeNode(lastChild, child));\r\n        } else {\r\n          current.push(child);\r\n        }\r\n\r\n        return current;\r\n      }, []);\r\n      return Object.assign({}, node, {\r\n        children\r\n      });\r\n    });\r\n  }\r\n\r\n  function mergeContinuousTexts(ast) {\r\n    return mergeChildren(ast, (prevNode, node) => prevNode.type === \"text\" && node.type === \"text\", (prevNode, node) => ({\r\n      type: \"text\",\r\n      value: prevNode.value + node.value,\r\n      position: {\r\n        start: prevNode.position.start,\r\n        end: node.position.end\r\n      }\r\n    }));\r\n  }\r\n\r\n  function splitTextIntoSentences(ast, options) {\r\n    return mapAst$1(ast, (node, index, [parentNode]) => {\r\n      if (node.type !== \"text\") {\r\n        return node;\r\n      }\r\n\r\n      let {\r\n        value\r\n      } = node;\r\n\r\n      if (parentNode.type === \"paragraph\") {\r\n        if (index === 0) {\r\n          value = value.trimStart();\r\n        }\r\n\r\n        if (index === parentNode.children.length - 1) {\r\n          value = value.trimEnd();\r\n        }\r\n      }\r\n\r\n      return {\r\n        type: \"sentence\",\r\n        position: node.position,\r\n        children: splitText$1(value, options)\r\n      };\r\n    });\r\n  }\r\n\r\n  function transformIndentedCodeblockAndMarkItsParentList(ast, options) {\r\n    return mapAst$1(ast, (node, index, parentStack) => {\r\n      if (node.type === \"code\") {\r\n        // the first char may point to `\\n`, e.g. `\\n\\t\\tbar`, just ignore it\r\n        const isIndented = /^\\n?( {4,}|\\t)/.test(options.originalText.slice(node.position.start.offset, node.position.end.offset));\r\n        node.isIndented = isIndented;\r\n\r\n        if (isIndented) {\r\n          for (let i = 0; i < parentStack.length; i++) {\r\n            const parent = parentStack[i]; // no need to check checked items\r\n\r\n            if (parent.hasIndentedCodeblock) {\r\n              break;\r\n            }\r\n\r\n            if (parent.type === \"list\") {\r\n              parent.hasIndentedCodeblock = true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return node;\r\n    });\r\n  }\r\n\r\n  function markAlignedList(ast, options) {\r\n    return mapAst$1(ast, (node, index, parentStack) => {\r\n      if (node.type === \"list\" && node.children.length !== 0) {\r\n        // if one of its parents is not aligned, it's not possible to be aligned in sub-lists\r\n        for (let i = 0; i < parentStack.length; i++) {\r\n          const parent = parentStack[i];\r\n\r\n          if (parent.type === \"list\" && !parent.isAligned) {\r\n            node.isAligned = false;\r\n            return node;\r\n          }\r\n        }\r\n\r\n        node.isAligned = isAligned(node);\r\n      }\r\n\r\n      return node;\r\n    });\r\n\r\n    function getListItemStart(listItem) {\r\n      return listItem.children.length === 0 ? -1 : listItem.children[0].position.start.column - 1;\r\n    }\r\n\r\n    function isAligned(list) {\r\n      if (!list.ordered) {\r\n        /**\r\n         * - 123\r\n         * - 123\r\n         */\r\n        return true;\r\n      }\r\n\r\n      const [firstItem, secondItem] = list.children;\r\n      const firstInfo = getOrderedListItemInfo$1(firstItem, options.originalText);\r\n\r\n      if (firstInfo.leadingSpaces.length > 1) {\r\n        /**\r\n         * 1.   123\r\n         *\r\n         * 1.   123\r\n         * 1. 123\r\n         */\r\n        return true;\r\n      }\r\n\r\n      const firstStart = getListItemStart(firstItem);\r\n\r\n      if (firstStart === -1) {\r\n        /**\r\n         * 1.\r\n         *\r\n         * 1.\r\n         * 1.\r\n         */\r\n        return false;\r\n      }\r\n\r\n      if (list.children.length === 1) {\r\n        /**\r\n         * aligned:\r\n         *\r\n         * 11. 123\r\n         *\r\n         * not aligned:\r\n         *\r\n         * 1. 123\r\n         */\r\n        return firstStart % options.tabWidth === 0;\r\n      }\r\n\r\n      const secondStart = getListItemStart(secondItem);\r\n\r\n      if (firstStart !== secondStart) {\r\n        /**\r\n         * 11. 123\r\n         * 1. 123\r\n         *\r\n         * 1. 123\r\n         * 11. 123\r\n         */\r\n        return false;\r\n      }\r\n\r\n      if (firstStart % options.tabWidth === 0) {\r\n        /**\r\n         * 11. 123\r\n         * 12. 123\r\n         */\r\n        return true;\r\n      }\r\n      /**\r\n       * aligned:\r\n       *\r\n       * 11. 123\r\n       * 1.  123\r\n       *\r\n       * not aligned:\r\n       *\r\n       * 1. 123\r\n       * 2. 123\r\n       */\r\n\r\n\r\n      const secondInfo = getOrderedListItemInfo$1(secondItem, options.originalText);\r\n      return secondInfo.leadingSpaces.length > 1;\r\n    }\r\n  }\r\n\r\n  var preprocess_1$2 = preprocess$2;\r\n\r\n  const {\r\n    builders: {\r\n      breakParent: breakParent$4,\r\n      concat: concat$g,\r\n      join: join$b,\r\n      line: line$a,\r\n      literalline: literalline$6,\r\n      markAsRoot: markAsRoot$4,\r\n      hardline: hardline$c,\r\n      softline: softline$7,\r\n      ifBreak: ifBreak$7,\r\n      fill: fill$5,\r\n      align: align$2,\r\n      indent: indent$9,\r\n      group: group$f\r\n    },\r\n    utils: {\r\n      mapDoc: mapDoc$5\r\n    },\r\n    printer: {\r\n      printDocToString: printDocToString$3\r\n    }\r\n  } = document;\r\n  const {\r\n    getFencedCodeBlockValue: getFencedCodeBlockValue$2,\r\n    hasGitDiffFriendlyOrderedList: hasGitDiffFriendlyOrderedList$1,\r\n    splitText: splitText$2,\r\n    punctuationPattern: punctuationPattern$1,\r\n    INLINE_NODE_TYPES: INLINE_NODE_TYPES$1,\r\n    INLINE_NODE_WRAPPER_TYPES: INLINE_NODE_WRAPPER_TYPES$1\r\n  } = utils$6;\r\n  const {\r\n    replaceEndOfLineWith: replaceEndOfLineWith$2\r\n  } = util$1;\r\n  const TRAILING_HARDLINE_NODES = [\"importExport\"];\r\n  const SINGLE_LINE_NODE_TYPES = [\"heading\", \"tableCell\", \"link\"];\r\n  const SIBLING_NODE_TYPES = [\"listItem\", \"definition\", \"footnoteDefinition\"];\r\n\r\n  function genericPrint$5(path, options, print) {\r\n    const node = path.getValue();\r\n\r\n    if (shouldRemainTheSameContent(path)) {\r\n      return concat$g(splitText$2(options.originalText.slice(node.position.start.offset, node.position.end.offset), options).map(node => node.type === \"word\" ? node.value : node.value === \"\" ? \"\" : printLine(path, node.value, options)));\r\n    }\r\n\r\n    switch (node.type) {\r\n      case \"root\":\r\n        if (node.children.length === 0) {\r\n          return \"\";\r\n        }\r\n\r\n        return concat$g([normalizeDoc(printRoot(path, options, print)), !TRAILING_HARDLINE_NODES.includes(getLastDescendantNode(node).type) ? hardline$c : \"\"]);\r\n\r\n      case \"paragraph\":\r\n        return printChildren$2(path, options, print, {\r\n          postprocessor: fill$5\r\n        });\r\n\r\n      case \"sentence\":\r\n        return printChildren$2(path, options, print);\r\n\r\n      case \"word\":\r\n        return node.value.replace(/[*$]/g, \"\\\\$&\") // escape all `*` and `$` (math)\r\n        .replace(new RegExp([\"(^|\".concat(punctuationPattern$1, \")(_+)\"), \"(_+)(\".concat(punctuationPattern$1, \"|$)\")].join(\"|\"), \"g\"), (_, text1, underscore1, underscore2, text2) => (underscore1 ? \"\".concat(text1).concat(underscore1) : \"\".concat(underscore2).concat(text2)).replace(/_/g, \"\\\\_\"));\r\n      // escape all `_` except concating with non-punctuation, e.g. `1_2_3` is not considered emphasis\r\n\r\n      case \"whitespace\":\r\n        {\r\n          const parentNode = path.getParentNode();\r\n          const index = parentNode.children.indexOf(node);\r\n          const nextNode = parentNode.children[index + 1];\r\n          const proseWrap = // leading char that may cause different syntax\r\n          nextNode && /^>|^([-+*]|#{1,6}|[0-9]+[.)])$/.test(nextNode.value) ? \"never\" : options.proseWrap;\r\n          return printLine(path, node.value, {\r\n            proseWrap\r\n          });\r\n        }\r\n\r\n      case \"emphasis\":\r\n        {\r\n          const parentNode = path.getParentNode();\r\n          const index = parentNode.children.indexOf(node);\r\n          const prevNode = parentNode.children[index - 1];\r\n          const nextNode = parentNode.children[index + 1];\r\n          const hasPrevOrNextWord = // `1*2*3` is considered emphasis but `1_2_3` is not\r\n          prevNode && prevNode.type === \"sentence\" && prevNode.children.length > 0 && util$1.getLast(prevNode.children).type === \"word\" && !util$1.getLast(prevNode.children).hasTrailingPunctuation || nextNode && nextNode.type === \"sentence\" && nextNode.children.length > 0 && nextNode.children[0].type === \"word\" && !nextNode.children[0].hasLeadingPunctuation;\r\n          const style = hasPrevOrNextWord || getAncestorNode$2(path, \"emphasis\") ? \"*\" : \"_\";\r\n          return concat$g([style, printChildren$2(path, options, print), style]);\r\n        }\r\n\r\n      case \"strong\":\r\n        return concat$g([\"**\", printChildren$2(path, options, print), \"**\"]);\r\n\r\n      case \"delete\":\r\n        return concat$g([\"~~\", printChildren$2(path, options, print), \"~~\"]);\r\n\r\n      case \"inlineCode\":\r\n        {\r\n          const backtickCount = util$1.getMinNotPresentContinuousCount(node.value, \"`\");\r\n          const style = \"`\".repeat(backtickCount || 1);\r\n          const gap = backtickCount ? \" \" : \"\";\r\n          return concat$g([style, gap, node.value, gap, style]);\r\n        }\r\n\r\n      case \"link\":\r\n        switch (options.originalText[node.position.start.offset]) {\r\n          case \"<\":\r\n            {\r\n              const mailto = \"mailto:\";\r\n              const url = // <hello@example.com> is parsed as { url: \"mailto:hello@example.com\" }\r\n              node.url.startsWith(mailto) && options.originalText.slice(node.position.start.offset + 1, node.position.start.offset + 1 + mailto.length) !== mailto ? node.url.slice(mailto.length) : node.url;\r\n              return concat$g([\"<\", url, \">\"]);\r\n            }\r\n\r\n          case \"[\":\r\n            return concat$g([\"[\", printChildren$2(path, options, print), \"](\", printUrl(node.url, \")\"), printTitle(node.title, options), \")\"]);\r\n\r\n          default:\r\n            return options.originalText.slice(node.position.start.offset, node.position.end.offset);\r\n        }\r\n\r\n      case \"image\":\r\n        return concat$g([\"![\", node.alt || \"\", \"](\", printUrl(node.url, \")\"), printTitle(node.title, options), \")\"]);\r\n\r\n      case \"blockquote\":\r\n        return concat$g([\"> \", align$2(\"> \", printChildren$2(path, options, print))]);\r\n\r\n      case \"heading\":\r\n        return concat$g([\"#\".repeat(node.depth) + \" \", printChildren$2(path, options, print)]);\r\n\r\n      case \"code\":\r\n        {\r\n          if (node.isIndented) {\r\n            // indented code block\r\n            const alignment = \" \".repeat(4);\r\n            return align$2(alignment, concat$g([alignment, concat$g(replaceEndOfLineWith$2(node.value, hardline$c))]));\r\n          } // fenced code block\r\n\r\n\r\n          const styleUnit = options.__inJsTemplate ? \"~\" : \"`\";\r\n          const style = styleUnit.repeat(Math.max(3, util$1.getMaxContinuousCount(node.value, styleUnit) + 1));\r\n          return concat$g([style, node.lang || \"\", hardline$c, concat$g(replaceEndOfLineWith$2(getFencedCodeBlockValue$2(node, options.originalText), hardline$c)), hardline$c, style]);\r\n        }\r\n\r\n      case \"yaml\":\r\n      case \"toml\":\r\n        return options.originalText.slice(node.position.start.offset, node.position.end.offset);\r\n\r\n      case \"html\":\r\n        {\r\n          const parentNode = path.getParentNode();\r\n          const value = parentNode.type === \"root\" && util$1.getLast(parentNode.children) === node ? node.value.trimEnd() : node.value;\r\n          const isHtmlComment = /^<!--[\\s\\S]*-->$/.test(value);\r\n          return concat$g(replaceEndOfLineWith$2(value, isHtmlComment ? hardline$c : markAsRoot$4(literalline$6)));\r\n        }\r\n\r\n      case \"list\":\r\n        {\r\n          const nthSiblingIndex = getNthListSiblingIndex(node, path.getParentNode());\r\n          const isGitDiffFriendlyOrderedList = hasGitDiffFriendlyOrderedList$1(node, options);\r\n          return printChildren$2(path, options, print, {\r\n            processor: (childPath, index) => {\r\n              const prefix = getPrefix();\r\n              const childNode = childPath.getValue();\r\n\r\n              if (childNode.children.length === 2 && childNode.children[1].type === \"html\" && childNode.children[0].position.start.column !== childNode.children[1].position.start.column) {\r\n                return concat$g([prefix, printListItem(childPath, options, print, prefix)]);\r\n              }\r\n\r\n              return concat$g([prefix, align$2(\" \".repeat(prefix.length), printListItem(childPath, options, print, prefix))]);\r\n\r\n              function getPrefix() {\r\n                const rawPrefix = node.ordered ? (index === 0 ? node.start : isGitDiffFriendlyOrderedList ? 1 : node.start + index) + (nthSiblingIndex % 2 === 0 ? \". \" : \") \") : nthSiblingIndex % 2 === 0 ? \"- \" : \"* \";\r\n                return node.isAligned ||\r\n                /* workaround for https://github.com/remarkjs/remark/issues/315 */\r\n                node.hasIndentedCodeblock ? alignListPrefix(rawPrefix, options) : rawPrefix;\r\n              }\r\n            }\r\n          });\r\n        }\r\n\r\n      case \"thematicBreak\":\r\n        {\r\n          const counter = getAncestorCounter$1(path, \"list\");\r\n\r\n          if (counter === -1) {\r\n            return \"---\";\r\n          }\r\n\r\n          const nthSiblingIndex = getNthListSiblingIndex(path.getParentNode(counter), path.getParentNode(counter + 1));\r\n          return nthSiblingIndex % 2 === 0 ? \"***\" : \"---\";\r\n        }\r\n\r\n      case \"linkReference\":\r\n        return concat$g([\"[\", printChildren$2(path, options, print), \"]\", node.referenceType === \"full\" ? concat$g([\"[\", node.identifier, \"]\"]) : node.referenceType === \"collapsed\" ? \"[]\" : \"\"]);\r\n\r\n      case \"imageReference\":\r\n        switch (node.referenceType) {\r\n          case \"full\":\r\n            return concat$g([\"![\", node.alt || \"\", \"][\", node.identifier, \"]\"]);\r\n\r\n          default:\r\n            return concat$g([\"![\", node.alt, \"]\", node.referenceType === \"collapsed\" ? \"[]\" : \"\"]);\r\n        }\r\n\r\n      case \"definition\":\r\n        {\r\n          const lineOrSpace = options.proseWrap === \"always\" ? line$a : \" \";\r\n          return group$f(concat$g([concat$g([\"[\", node.identifier, \"]:\"]), indent$9(concat$g([lineOrSpace, printUrl(node.url), node.title === null ? \"\" : concat$g([lineOrSpace, printTitle(node.title, options, false)])]))]));\r\n        }\r\n\r\n      case \"footnote\":\r\n        return concat$g([\"[^\", printChildren$2(path, options, print), \"]\"]);\r\n\r\n      case \"footnoteReference\":\r\n        return concat$g([\"[^\", node.identifier, \"]\"]);\r\n\r\n      case \"footnoteDefinition\":\r\n        {\r\n          const nextNode = path.getParentNode().children[path.getName() + 1];\r\n          const shouldInlineFootnote = node.children.length === 1 && node.children[0].type === \"paragraph\" && (options.proseWrap === \"never\" || options.proseWrap === \"preserve\" && node.children[0].position.start.line === node.children[0].position.end.line);\r\n          return concat$g([\"[^\", node.identifier, \"]: \", shouldInlineFootnote ? printChildren$2(path, options, print) : group$f(concat$g([align$2(\" \".repeat(options.tabWidth), printChildren$2(path, options, print, {\r\n            processor: (childPath, index) => {\r\n              return index === 0 ? group$f(concat$g([softline$7, childPath.call(print)])) : childPath.call(print);\r\n            }\r\n          })), nextNode && nextNode.type === \"footnoteDefinition\" ? softline$7 : \"\"]))]);\r\n        }\r\n\r\n      case \"table\":\r\n        return printTable(path, options, print);\r\n\r\n      case \"tableCell\":\r\n        return printChildren$2(path, options, print);\r\n\r\n      case \"break\":\r\n        return /\\s/.test(options.originalText[node.position.start.offset]) ? concat$g([\"  \", markAsRoot$4(literalline$6)]) : concat$g([\"\\\\\", hardline$c]);\r\n\r\n      case \"liquidNode\":\r\n        return concat$g(replaceEndOfLineWith$2(node.value, hardline$c));\r\n      // MDX\r\n\r\n      case \"importExport\":\r\n      case \"jsx\":\r\n        return node.value;\r\n      // fallback to the original text if multiparser failed\r\n\r\n      case \"math\":\r\n        return concat$g([\"$$\", hardline$c, node.value ? concat$g([concat$g(replaceEndOfLineWith$2(node.value, hardline$c)), hardline$c]) : \"\", \"$$\"]);\r\n\r\n      case \"inlineMath\":\r\n        {\r\n          // remark-math trims content but we don't want to remove whitespaces\r\n          // since it's very possible that it's recognized as math accidentally\r\n          return options.originalText.slice(options.locStart(node), options.locEnd(node));\r\n        }\r\n\r\n      case \"tableRow\": // handled in \"table\"\r\n\r\n      case \"listItem\": // handled in \"list\"\r\n\r\n      default:\r\n        throw new Error(\"Unknown markdown type \".concat(JSON.stringify(node.type)));\r\n    }\r\n  }\r\n\r\n  function printListItem(path, options, print, listPrefix) {\r\n    const node = path.getValue();\r\n    const prefix = node.checked === null ? \"\" : node.checked ? \"[x] \" : \"[ ] \";\r\n    return concat$g([prefix, printChildren$2(path, options, print, {\r\n      processor: (childPath, index) => {\r\n        if (index === 0 && childPath.getValue().type !== \"list\") {\r\n          return align$2(\" \".repeat(prefix.length), childPath.call(print));\r\n        }\r\n\r\n        const alignment = \" \".repeat(clamp(options.tabWidth - listPrefix.length, 0, 3) // 4+ will cause indented code block\r\n        );\r\n        return concat$g([alignment, align$2(alignment, childPath.call(print))]);\r\n      }\r\n    })]);\r\n  }\r\n\r\n  function alignListPrefix(prefix, options) {\r\n    const additionalSpaces = getAdditionalSpaces();\r\n    return prefix + \" \".repeat(additionalSpaces >= 4 ? 0 : additionalSpaces // 4+ will cause indented code block\r\n    );\r\n\r\n    function getAdditionalSpaces() {\r\n      const restSpaces = prefix.length % options.tabWidth;\r\n      return restSpaces === 0 ? 0 : options.tabWidth - restSpaces;\r\n    }\r\n  }\r\n\r\n  function getNthListSiblingIndex(node, parentNode) {\r\n    return getNthSiblingIndex(node, parentNode, siblingNode => siblingNode.ordered === node.ordered);\r\n  }\r\n\r\n  function getNthSiblingIndex(node, parentNode, condition) {\r\n    condition = condition || (() => true);\r\n\r\n    let index = -1;\r\n\r\n    for (const childNode of parentNode.children) {\r\n      if (childNode.type === node.type && condition(childNode)) {\r\n        index++;\r\n      } else {\r\n        index = -1;\r\n      }\r\n\r\n      if (childNode === node) {\r\n        return index;\r\n      }\r\n    }\r\n  }\r\n\r\n  function getAncestorCounter$1(path, typeOrTypes) {\r\n    const types = [].concat(typeOrTypes);\r\n    let counter = -1;\r\n    let ancestorNode;\r\n\r\n    while (ancestorNode = path.getParentNode(++counter)) {\r\n      if (types.includes(ancestorNode.type)) {\r\n        return counter;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  function getAncestorNode$2(path, typeOrTypes) {\r\n    const counter = getAncestorCounter$1(path, typeOrTypes);\r\n    return counter === -1 ? null : path.getParentNode(counter);\r\n  }\r\n\r\n  function printLine(path, value, options) {\r\n    if (options.proseWrap === \"preserve\" && value === \"\\n\") {\r\n      return hardline$c;\r\n    }\r\n\r\n    const isBreakable = options.proseWrap === \"always\" && !getAncestorNode$2(path, SINGLE_LINE_NODE_TYPES);\r\n    return value !== \"\" ? isBreakable ? line$a : \" \" : isBreakable ? softline$7 : \"\";\r\n  }\r\n\r\n  function printTable(path, options, print) {\r\n    const hardlineWithoutBreakParent = hardline$c.parts[0];\r\n    const node = path.getValue();\r\n    const contents = []; // { [rowIndex: number]: { [columnIndex: number]: string } }\r\n\r\n    path.map(rowPath => {\r\n      const rowContents = [];\r\n      rowPath.map(cellPath => {\r\n        rowContents.push(printDocToString$3(cellPath.call(print), options).formatted);\r\n      }, \"children\");\r\n      contents.push(rowContents);\r\n    }, \"children\"); // Get the width of each column\r\n\r\n    const columnMaxWidths = contents.reduce((currentWidths, rowContents) => currentWidths.map((width, columnIndex) => Math.max(width, util$1.getStringWidth(rowContents[columnIndex]))), contents[0].map(() => 3) // minimum width = 3 (---, :--, :-:, --:)\r\n    );\r\n    const alignedTable = join$b(hardlineWithoutBreakParent, [printRow(contents[0]), printSeparator(), join$b(hardlineWithoutBreakParent, contents.slice(1).map(rowContents => printRow(rowContents)))]);\r\n\r\n    if (options.proseWrap !== \"never\") {\r\n      return concat$g([breakParent$4, alignedTable]);\r\n    } // Only if the --prose-wrap never is set and it exceeds the print width.\r\n\r\n\r\n    const compactTable = join$b(hardlineWithoutBreakParent, [printRow(contents[0],\r\n    /* isCompact */\r\n    true), printSeparator(\r\n    /* isCompact */\r\n    true), join$b(hardlineWithoutBreakParent, contents.slice(1).map(rowContents => printRow(rowContents,\r\n    /* isCompact */\r\n    true)))]);\r\n    return concat$g([breakParent$4, group$f(ifBreak$7(compactTable, alignedTable))]);\r\n\r\n    function printSeparator(isCompact) {\r\n      return concat$g([\"| \", join$b(\" | \", columnMaxWidths.map((width, index) => {\r\n        const spaces = isCompact ? 3 : width;\r\n\r\n        switch (node.align[index]) {\r\n          case \"left\":\r\n            return \":\" + \"-\".repeat(spaces - 1);\r\n\r\n          case \"right\":\r\n            return \"-\".repeat(spaces - 1) + \":\";\r\n\r\n          case \"center\":\r\n            return \":\" + \"-\".repeat(spaces - 2) + \":\";\r\n\r\n          default:\r\n            return \"-\".repeat(spaces);\r\n        }\r\n      })), \" |\"]);\r\n    }\r\n\r\n    function printRow(rowContents, isCompact) {\r\n      return concat$g([\"| \", join$b(\" | \", isCompact ? rowContents : rowContents.map((rowContent, columnIndex) => {\r\n        switch (node.align[columnIndex]) {\r\n          case \"right\":\r\n            return alignRight(rowContent, columnMaxWidths[columnIndex]);\r\n\r\n          case \"center\":\r\n            return alignCenter(rowContent, columnMaxWidths[columnIndex]);\r\n\r\n          default:\r\n            return alignLeft(rowContent, columnMaxWidths[columnIndex]);\r\n        }\r\n      })), \" |\"]);\r\n    }\r\n\r\n    function alignLeft(text, width) {\r\n      const spaces = width - util$1.getStringWidth(text);\r\n      return concat$g([text, \" \".repeat(spaces)]);\r\n    }\r\n\r\n    function alignRight(text, width) {\r\n      const spaces = width - util$1.getStringWidth(text);\r\n      return concat$g([\" \".repeat(spaces), text]);\r\n    }\r\n\r\n    function alignCenter(text, width) {\r\n      const spaces = width - util$1.getStringWidth(text);\r\n      const left = Math.floor(spaces / 2);\r\n      const right = spaces - left;\r\n      return concat$g([\" \".repeat(left), text, \" \".repeat(right)]);\r\n    }\r\n  }\r\n\r\n  function printRoot(path, options, print) {\r\n    /** @typedef {{ index: number, offset: number }} IgnorePosition */\r\n\r\n    /** @type {Array<{start: IgnorePosition, end: IgnorePosition}>} */\r\n    const ignoreRanges = [];\r\n    /** @type {IgnorePosition | null} */\r\n\r\n    let ignoreStart = null;\r\n    const {\r\n      children\r\n    } = path.getValue();\r\n    children.forEach((childNode, index) => {\r\n      switch (isPrettierIgnore$1(childNode)) {\r\n        case \"start\":\r\n          if (ignoreStart === null) {\r\n            ignoreStart = {\r\n              index,\r\n              offset: childNode.position.end.offset\r\n            };\r\n          }\r\n\r\n          break;\r\n\r\n        case \"end\":\r\n          if (ignoreStart !== null) {\r\n            ignoreRanges.push({\r\n              start: ignoreStart,\r\n              end: {\r\n                index,\r\n                offset: childNode.position.start.offset\r\n              }\r\n            });\r\n            ignoreStart = null;\r\n          }\r\n\r\n          break;\r\n      }\r\n    });\r\n    return printChildren$2(path, options, print, {\r\n      processor: (childPath, index) => {\r\n        if (ignoreRanges.length !== 0) {\r\n          const ignoreRange = ignoreRanges[0];\r\n\r\n          if (index === ignoreRange.start.index) {\r\n            return concat$g([children[ignoreRange.start.index].value, options.originalText.slice(ignoreRange.start.offset, ignoreRange.end.offset), children[ignoreRange.end.index].value]);\r\n          }\r\n\r\n          if (ignoreRange.start.index < index && index < ignoreRange.end.index) {\r\n            return false;\r\n          }\r\n\r\n          if (index === ignoreRange.end.index) {\r\n            ignoreRanges.shift();\r\n            return false;\r\n          }\r\n        }\r\n\r\n        return childPath.call(print);\r\n      }\r\n    });\r\n  }\r\n\r\n  function printChildren$2(path, options, print, events) {\r\n    events = events || {};\r\n    const postprocessor = events.postprocessor || concat$g;\r\n\r\n    const processor = events.processor || (childPath => childPath.call(print));\r\n\r\n    const node = path.getValue();\r\n    const parts = [];\r\n    let lastChildNode;\r\n    path.map((childPath, index) => {\r\n      const childNode = childPath.getValue();\r\n      const result = processor(childPath, index);\r\n\r\n      if (result !== false) {\r\n        const data = {\r\n          parts,\r\n          prevNode: lastChildNode,\r\n          parentNode: node,\r\n          options\r\n        };\r\n\r\n        if (!shouldNotPrePrintHardline(childNode, data)) {\r\n          parts.push(hardline$c);\r\n\r\n          if (lastChildNode && TRAILING_HARDLINE_NODES.includes(lastChildNode.type)) {\r\n            if (shouldPrePrintTripleHardline(childNode, data)) {\r\n              parts.push(hardline$c);\r\n            }\r\n          } else {\r\n            if (shouldPrePrintDoubleHardline(childNode, data) || shouldPrePrintTripleHardline(childNode, data)) {\r\n              parts.push(hardline$c);\r\n            }\r\n\r\n            if (shouldPrePrintTripleHardline(childNode, data)) {\r\n              parts.push(hardline$c);\r\n            }\r\n          }\r\n        }\r\n\r\n        parts.push(result);\r\n        lastChildNode = childNode;\r\n      }\r\n    }, \"children\");\r\n    return postprocessor(parts);\r\n  }\r\n\r\n  function getLastDescendantNode(node) {\r\n    let current = node;\r\n\r\n    while (current.children && current.children.length !== 0) {\r\n      current = current.children[current.children.length - 1];\r\n    }\r\n\r\n    return current;\r\n  }\r\n  /** @return {false | 'next' | 'start' | 'end'} */\r\n\r\n\r\n  function isPrettierIgnore$1(node) {\r\n    if (node.type !== \"html\") {\r\n      return false;\r\n    }\r\n\r\n    const match = node.value.match(/^<!--\\s*prettier-ignore(?:-(start|end))?\\s*-->$/);\r\n    return match === null ? false : match[1] ? match[1] : \"next\";\r\n  }\r\n\r\n  function shouldNotPrePrintHardline(node, data) {\r\n    const isFirstNode = data.parts.length === 0;\r\n    const isInlineNode = INLINE_NODE_TYPES$1.includes(node.type);\r\n    const isInlineHTML = node.type === \"html\" && INLINE_NODE_WRAPPER_TYPES$1.includes(data.parentNode.type);\r\n    return isFirstNode || isInlineNode || isInlineHTML;\r\n  }\r\n\r\n  function shouldPrePrintDoubleHardline(node, data) {\r\n    const isSequence = (data.prevNode && data.prevNode.type) === node.type;\r\n    const isSiblingNode = isSequence && SIBLING_NODE_TYPES.includes(node.type);\r\n    const isInTightListItem = data.parentNode.type === \"listItem\" && !data.parentNode.loose;\r\n    const isPrevNodeLooseListItem = data.prevNode && data.prevNode.type === \"listItem\" && data.prevNode.loose;\r\n    const isPrevNodePrettierIgnore = isPrettierIgnore$1(data.prevNode) === \"next\";\r\n    const isBlockHtmlWithoutBlankLineBetweenPrevHtml = node.type === \"html\" && data.prevNode && data.prevNode.type === \"html\" && data.prevNode.position.end.line + 1 === node.position.start.line;\r\n    const isHtmlDirectAfterListItem = node.type === \"html\" && data.parentNode.type === \"listItem\" && data.prevNode && data.prevNode.type === \"paragraph\" && data.prevNode.position.end.line + 1 === node.position.start.line;\r\n    return isPrevNodeLooseListItem || !(isSiblingNode || isInTightListItem || isPrevNodePrettierIgnore || isBlockHtmlWithoutBlankLineBetweenPrevHtml || isHtmlDirectAfterListItem);\r\n  }\r\n\r\n  function shouldPrePrintTripleHardline(node, data) {\r\n    const isPrevNodeList = data.prevNode && data.prevNode.type === \"list\";\r\n    const isIndentedCode = node.type === \"code\" && node.isIndented;\r\n    return isPrevNodeList && isIndentedCode;\r\n  }\r\n\r\n  function shouldRemainTheSameContent(path) {\r\n    const ancestorNode = getAncestorNode$2(path, [\"linkReference\", \"imageReference\"]);\r\n    return ancestorNode && (ancestorNode.type !== \"linkReference\" || ancestorNode.referenceType !== \"full\");\r\n  }\r\n\r\n  function normalizeDoc(doc) {\r\n    return mapDoc$5(doc, currentDoc => {\r\n      if (!currentDoc.parts) {\r\n        return currentDoc;\r\n      }\r\n\r\n      if (currentDoc.type === \"concat\" && currentDoc.parts.length === 1) {\r\n        return currentDoc.parts[0];\r\n      }\r\n\r\n      const parts = currentDoc.parts.reduce((parts, part) => {\r\n        if (part.type === \"concat\") {\r\n          parts.push(...part.parts);\r\n        } else if (part !== \"\") {\r\n          parts.push(part);\r\n        }\r\n\r\n        return parts;\r\n      }, []);\r\n      return Object.assign({}, currentDoc, {\r\n        parts: normalizeParts$2(parts)\r\n      });\r\n    });\r\n  }\r\n\r\n  function printUrl(url, dangerousCharOrChars) {\r\n    const dangerousChars = [\" \"].concat(dangerousCharOrChars || []);\r\n    return new RegExp(dangerousChars.map(x => \"\\\\\".concat(x)).join(\"|\")).test(url) ? \"<\".concat(url, \">\") : url;\r\n  }\r\n\r\n  function printTitle(title, options, printSpace) {\r\n    if (printSpace == null) {\r\n      printSpace = true;\r\n    }\r\n\r\n    if (!title) {\r\n      return \"\";\r\n    }\r\n\r\n    if (printSpace) {\r\n      return \" \" + printTitle(title, options, false);\r\n    }\r\n\r\n    if (title.includes('\"') && title.includes(\"'\") && !title.includes(\")\")) {\r\n      return \"(\".concat(title, \")\"); // avoid escaped quotes\r\n    } // faster than using RegExps: https://jsperf.com/performance-of-match-vs-split\r\n\r\n\r\n    const singleCount = title.split(\"'\").length - 1;\r\n    const doubleCount = title.split('\"').length - 1;\r\n    const quote = singleCount > doubleCount ? '\"' : doubleCount > singleCount ? \"'\" : options.singleQuote ? \"'\" : '\"';\r\n    title = title.replace(new RegExp(\"(\".concat(quote, \")\"), \"g\"), \"\\\\$1\");\r\n    return \"\".concat(quote).concat(title).concat(quote);\r\n  }\r\n\r\n  function normalizeParts$2(parts) {\r\n    return parts.reduce((current, part) => {\r\n      const lastPart = util$1.getLast(current);\r\n\r\n      if (typeof lastPart === \"string\" && typeof part === \"string\") {\r\n        current.splice(-1, 1, lastPart + part);\r\n      } else {\r\n        current.push(part);\r\n      }\r\n\r\n      return current;\r\n    }, []);\r\n  }\r\n\r\n  function clamp(value, min, max) {\r\n    return value < min ? min : value > max ? max : value;\r\n  }\r\n\r\n  function clean$6(ast, newObj, parent) {\r\n    delete newObj.position;\r\n    delete newObj.raw; // front-matter\r\n    // for codeblock\r\n\r\n    if (ast.type === \"code\" || ast.type === \"yaml\" || ast.type === \"import\" || ast.type === \"export\" || ast.type === \"jsx\") {\r\n      delete newObj.value;\r\n    }\r\n\r\n    if (ast.type === \"list\") {\r\n      delete newObj.isAligned;\r\n    } // texts can be splitted or merged\r\n\r\n\r\n    if (ast.type === \"text\") {\r\n      return null;\r\n    }\r\n\r\n    if (ast.type === \"inlineCode\") {\r\n      newObj.value = ast.value.replace(/[ \\t\\n]+/g, \" \");\r\n    } // for insert pragma\r\n\r\n\r\n    if (parent && parent.type === \"root\" && parent.children.length > 0 && (parent.children[0] === ast || (parent.children[0].type === \"yaml\" || parent.children[0].type === \"toml\") && parent.children[1] === ast) && ast.type === \"html\" && pragma$4.startWithPragma(ast.value)) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  function hasPrettierIgnore$6(path) {\r\n    const index = +path.getName();\r\n\r\n    if (index === 0) {\r\n      return false;\r\n    }\r\n\r\n    const prevNode = path.getParentNode().children[index - 1];\r\n    return isPrettierIgnore$1(prevNode) === \"next\";\r\n  }\r\n\r\n  var printerMarkdown = {\r\n    preprocess: preprocess_1$2,\r\n    print: genericPrint$5,\r\n    embed: embed_1$2,\r\n    massageAstNode: clean$6,\r\n    hasPrettierIgnore: hasPrettierIgnore$6,\r\n    insertPragma: pragma$4.insertPragma\r\n  };\r\n\r\n  var options$6 = {\r\n    proseWrap: commonOptions.proseWrap,\r\n    singleQuote: commonOptions.singleQuote\r\n  };\r\n\r\n  var name$g = \"Markdown\";\r\n  var type$f = \"prose\";\r\n  var aliases$5 = [\r\n  \t\"pandoc\"\r\n  ];\r\n  var aceMode$f = \"markdown\";\r\n  var codemirrorMode$b = \"gfm\";\r\n  var codemirrorMimeType$b = \"text/x-gfm\";\r\n  var wrap = true;\r\n  var extensions$f = [\r\n  \t\".md\",\r\n  \t\".markdown\",\r\n  \t\".mdown\",\r\n  \t\".mdwn\",\r\n  \t\".mdx\",\r\n  \t\".mkd\",\r\n  \t\".mkdn\",\r\n  \t\".mkdown\",\r\n  \t\".ronn\",\r\n  \t\".workbook\"\r\n  ];\r\n  var filenames$3 = [\r\n  \t\"contents.lr\"\r\n  ];\r\n  var tmScope$f = \"source.gfm\";\r\n  var languageId$f = 222;\r\n  var Markdown = {\r\n  \tname: name$g,\r\n  \ttype: type$f,\r\n  \taliases: aliases$5,\r\n  \taceMode: aceMode$f,\r\n  \tcodemirrorMode: codemirrorMode$b,\r\n  \tcodemirrorMimeType: codemirrorMimeType$b,\r\n  \twrap: wrap,\r\n  \textensions: extensions$f,\r\n  \tfilenames: filenames$3,\r\n  \ttmScope: tmScope$f,\r\n  \tlanguageId: languageId$f\r\n  };\r\n\r\n  var Markdown$1 = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    name: name$g,\r\n    type: type$f,\r\n    aliases: aliases$5,\r\n    aceMode: aceMode$f,\r\n    codemirrorMode: codemirrorMode$b,\r\n    codemirrorMimeType: codemirrorMimeType$b,\r\n    wrap: wrap,\r\n    extensions: extensions$f,\r\n    filenames: filenames$3,\r\n    tmScope: tmScope$f,\r\n    languageId: languageId$f,\r\n    'default': Markdown\r\n  });\r\n\r\n  var require$$0$7 = getCjsExportFromNamespace(Markdown$1);\r\n\r\n  const languages$5 = [createLanguage(require$$0$7, data => ({\r\n    since: \"1.8.0\",\r\n    parsers: [\"markdown\"],\r\n    vscodeLanguageIds: [\"markdown\"],\r\n    filenames: data.filenames.concat([\"README\"]),\r\n    extensions: data.extensions.filter(extension => extension !== \".mdx\")\r\n  })), createLanguage(require$$0$7, () => ({\r\n    name: \"MDX\",\r\n    since: \"1.15.0\",\r\n    parsers: [\"mdx\"],\r\n    vscodeLanguageIds: [\"mdx\"],\r\n    filenames: [],\r\n    extensions: [\".mdx\"]\r\n  }))];\r\n  const printers$5 = {\r\n    mdast: printerMarkdown\r\n  };\r\n  var languageMarkdown = {\r\n    languages: languages$5,\r\n    options: options$6,\r\n    printers: printers$5\r\n  };\r\n\r\n  function isPragma(text) {\r\n    return /^\\s*@(prettier|format)\\s*$/.test(text);\r\n  }\r\n\r\n  function hasPragma$4(text) {\r\n    return /^\\s*#[^\\n\\S]*@(prettier|format)\\s*?(\\n|$)/.test(text);\r\n  }\r\n\r\n  function insertPragma$8(text) {\r\n    return \"# @format\\n\\n\".concat(text);\r\n  }\r\n\r\n  var pragma$5 = {\r\n    isPragma,\r\n    hasPragma: hasPragma$4,\r\n    insertPragma: insertPragma$8\r\n  };\r\n\r\n  const {\r\n    getLast: getLast$5\r\n  } = util$1;\r\n\r\n  function getAncestorCount(path, filter) {\r\n    let counter = 0;\r\n    const pathStackLength = path.stack.length - 1;\r\n\r\n    for (let i = 0; i < pathStackLength; i++) {\r\n      const value = path.stack[i];\r\n\r\n      if (isNode(value) && filter(value)) {\r\n        counter++;\r\n      }\r\n    }\r\n\r\n    return counter;\r\n  }\r\n  /**\r\n   * @param {any} value\r\n   * @param {string[]=} types\r\n   */\r\n\r\n\r\n  function isNode(value, types) {\r\n    return value && typeof value.type === \"string\" && (!types || types.includes(value.type));\r\n  }\r\n\r\n  function mapNode(node, callback, parent) {\r\n    return callback(\"children\" in node ? Object.assign({}, node, {\r\n      children: node.children.map(childNode => mapNode(childNode, callback, node))\r\n    }) : node, parent);\r\n  }\r\n\r\n  function defineShortcut(x, key, getter) {\r\n    Object.defineProperty(x, key, {\r\n      get: getter,\r\n      enumerable: false\r\n    });\r\n  }\r\n\r\n  function isNextLineEmpty$5(node, text) {\r\n    let newlineCount = 0;\r\n    const textLength = text.length;\r\n\r\n    for (let i = node.position.end.offset - 1; i < textLength; i++) {\r\n      const char = text[i];\r\n\r\n      if (char === \"\\n\") {\r\n        newlineCount++;\r\n      }\r\n\r\n      if (newlineCount === 1 && /\\S/.test(char)) {\r\n        return false;\r\n      }\r\n\r\n      if (newlineCount === 2) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function isLastDescendantNode(path) {\r\n    const node = path.getValue();\r\n\r\n    switch (node.type) {\r\n      case \"tag\":\r\n      case \"anchor\":\r\n      case \"comment\":\r\n        return false;\r\n    }\r\n\r\n    const pathStackLength = path.stack.length;\r\n\r\n    for (let i = 1; i < pathStackLength; i++) {\r\n      const item = path.stack[i];\r\n      const parentItem = path.stack[i - 1];\r\n\r\n      if (Array.isArray(parentItem) && typeof item === \"number\" && item !== parentItem.length - 1) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function getLastDescendantNode$1(node) {\r\n    return \"children\" in node && node.children.length !== 0 ? getLastDescendantNode$1(getLast$5(node.children)) : node;\r\n  }\r\n\r\n  function isPrettierIgnore$2(comment) {\r\n    return comment.value.trim() === \"prettier-ignore\";\r\n  }\r\n\r\n  function hasPrettierIgnore$7(path) {\r\n    const node = path.getValue();\r\n\r\n    if (node.type === \"documentBody\") {\r\n      const document = path.getParentNode();\r\n      return hasEndComments(document.head) && isPrettierIgnore$2(getLast$5(document.head.endComments));\r\n    }\r\n\r\n    return hasLeadingComments(node) && isPrettierIgnore$2(getLast$5(node.leadingComments));\r\n  }\r\n\r\n  function isEmptyNode(node) {\r\n    return (!node.children || node.children.length === 0) && !hasComments(node);\r\n  }\r\n\r\n  function hasComments(node) {\r\n    return hasLeadingComments(node) || hasMiddleComments(node) || hasIndicatorComment(node) || hasTrailingComment$2(node) || hasEndComments(node);\r\n  }\r\n\r\n  function hasLeadingComments(node) {\r\n    return node && node.leadingComments && node.leadingComments.length !== 0;\r\n  }\r\n\r\n  function hasMiddleComments(node) {\r\n    return node && node.middleComments && node.middleComments.length !== 0;\r\n  }\r\n\r\n  function hasIndicatorComment(node) {\r\n    return node && node.indicatorComment;\r\n  }\r\n\r\n  function hasTrailingComment$2(node) {\r\n    return node && node.trailingComment;\r\n  }\r\n\r\n  function hasEndComments(node) {\r\n    return node && node.endComments && node.endComments.length !== 0;\r\n  }\r\n  /**\r\n   * \" a   b c   d e   f \" -> [\" a   b\", \"c   d\", \"e   f \"]\r\n   */\r\n\r\n\r\n  function splitWithSingleSpace(text) {\r\n    const parts = [];\r\n    let lastPart = undefined;\r\n\r\n    for (const part of text.split(/( +)/g)) {\r\n      if (part !== \" \") {\r\n        if (lastPart === \" \") {\r\n          parts.push(part);\r\n        } else {\r\n          parts.push((parts.pop() || \"\") + part);\r\n        }\r\n      } else if (lastPart === undefined) {\r\n        parts.unshift(\"\");\r\n      }\r\n\r\n      lastPart = part;\r\n    }\r\n\r\n    if (lastPart === \" \") {\r\n      parts.push((parts.pop() || \"\") + \" \");\r\n    }\r\n\r\n    if (parts[0] === \"\") {\r\n      parts.shift();\r\n      parts.unshift(\" \" + (parts.shift() || \"\"));\r\n    }\r\n\r\n    return parts;\r\n  }\r\n\r\n  function getFlowScalarLineContents(nodeType, content, options) {\r\n    const rawLineContents = content.split(\"\\n\").map((lineContent, index, lineContents) => index === 0 && index === lineContents.length - 1 ? lineContent : index !== 0 && index !== lineContents.length - 1 ? lineContent.trim() : index === 0 ? lineContent.trimEnd() : lineContent.trimStart());\r\n\r\n    if (options.proseWrap === \"preserve\") {\r\n      return rawLineContents.map(lineContent => lineContent.length === 0 ? [] : [lineContent]);\r\n    }\r\n\r\n    return rawLineContents.map(lineContent => lineContent.length === 0 ? [] : splitWithSingleSpace(lineContent)).reduce((reduced, lineContentWords, index) => index !== 0 && rawLineContents[index - 1].length !== 0 && lineContentWords.length !== 0 && !( // trailing backslash in quoteDouble should be preserved\r\n    nodeType === \"quoteDouble\" && getLast$5(getLast$5(reduced)).endsWith(\"\\\\\")) ? reduced.concat([reduced.pop().concat(lineContentWords)]) : reduced.concat([lineContentWords]), []).map(lineContentWords => options.proseWrap === \"never\" ? [lineContentWords.join(\" \")] : lineContentWords);\r\n  }\r\n\r\n  function getBlockValueLineContents(node, {\r\n    parentIndent,\r\n    isLastDescendant,\r\n    options\r\n  }) {\r\n    const content = node.position.start.line === node.position.end.line ? \"\" : options.originalText.slice(node.position.start.offset, node.position.end.offset) // exclude open line `>` or `|`\r\n    .match(/^[^\\n]*?\\n([\\s\\S]*)$/)[1];\r\n    const leadingSpaceCount = node.indent === null ? (match => match ? match[1].length : Infinity)(content.match(/^( *)\\S/m)) : node.indent - 1 + parentIndent;\r\n    const rawLineContents = content.split(\"\\n\").map(lineContent => lineContent.slice(leadingSpaceCount));\r\n\r\n    if (options.proseWrap === \"preserve\" || node.type === \"blockLiteral\") {\r\n      return removeUnnecessaryTrailingNewlines(rawLineContents.map(lineContent => lineContent.length === 0 ? [] : [lineContent]));\r\n    }\r\n\r\n    return removeUnnecessaryTrailingNewlines(rawLineContents.map(lineContent => lineContent.length === 0 ? [] : splitWithSingleSpace(lineContent)).reduce((reduced, lineContentWords, index) => index !== 0 && rawLineContents[index - 1].length !== 0 && lineContentWords.length !== 0 && !/^\\s/.test(lineContentWords[0]) && !/^\\s|\\s$/.test(getLast$5(reduced)) ? reduced.concat([reduced.pop().concat(lineContentWords)]) : reduced.concat([lineContentWords]), []).map(lineContentWords => lineContentWords.reduce((reduced, word) => // disallow trailing spaces\r\n    reduced.length !== 0 && /\\s$/.test(getLast$5(reduced)) ? reduced.concat(reduced.pop() + \" \" + word) : reduced.concat(word), [])).map(lineContentWords => options.proseWrap === \"never\" ? [lineContentWords.join(\" \")] : lineContentWords));\r\n\r\n    function removeUnnecessaryTrailingNewlines(lineContents) {\r\n      if (node.chomping === \"keep\") {\r\n        return getLast$5(lineContents).length === 0 ? lineContents.slice(0, -1) : lineContents;\r\n      }\r\n\r\n      let trailingNewlineCount = 0;\r\n\r\n      for (let i = lineContents.length - 1; i >= 0; i--) {\r\n        if (lineContents[i].length === 0) {\r\n          trailingNewlineCount++;\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n\r\n      return trailingNewlineCount === 0 ? lineContents : trailingNewlineCount >= 2 && !isLastDescendant ? // next empty line\r\n      lineContents.slice(0, -(trailingNewlineCount - 1)) : lineContents.slice(0, -trailingNewlineCount);\r\n    }\r\n  }\r\n\r\n  var utils$7 = {\r\n    getLast: getLast$5,\r\n    getAncestorCount,\r\n    isNode,\r\n    isEmptyNode,\r\n    mapNode,\r\n    defineShortcut,\r\n    isNextLineEmpty: isNextLineEmpty$5,\r\n    isLastDescendantNode,\r\n    getBlockValueLineContents,\r\n    getFlowScalarLineContents,\r\n    getLastDescendantNode: getLastDescendantNode$1,\r\n    hasPrettierIgnore: hasPrettierIgnore$7,\r\n    hasLeadingComments,\r\n    hasMiddleComments,\r\n    hasIndicatorComment,\r\n    hasTrailingComment: hasTrailingComment$2,\r\n    hasEndComments\r\n  };\r\n\r\n  const {\r\n    insertPragma: insertPragma$9,\r\n    isPragma: isPragma$1\r\n  } = pragma$5;\r\n  const {\r\n    getAncestorCount: getAncestorCount$1,\r\n    getBlockValueLineContents: getBlockValueLineContents$1,\r\n    getFlowScalarLineContents: getFlowScalarLineContents$1,\r\n    getLast: getLast$6,\r\n    getLastDescendantNode: getLastDescendantNode$2,\r\n    hasLeadingComments: hasLeadingComments$1,\r\n    hasMiddleComments: hasMiddleComments$1,\r\n    hasIndicatorComment: hasIndicatorComment$1,\r\n    hasTrailingComment: hasTrailingComment$3,\r\n    hasEndComments: hasEndComments$1,\r\n    hasPrettierIgnore: hasPrettierIgnore$8,\r\n    isLastDescendantNode: isLastDescendantNode$1,\r\n    isNextLineEmpty: isNextLineEmpty$6,\r\n    isNode: isNode$1,\r\n    isEmptyNode: isEmptyNode$1,\r\n    defineShortcut: defineShortcut$1,\r\n    mapNode: mapNode$1\r\n  } = utils$7;\r\n  const docBuilders$2 = document.builders;\r\n  const {\r\n    conditionalGroup: conditionalGroup$2,\r\n    breakParent: breakParent$5,\r\n    concat: concat$h,\r\n    dedent: dedent$3,\r\n    dedentToRoot: dedentToRoot$3,\r\n    fill: fill$6,\r\n    group: group$g,\r\n    hardline: hardline$d,\r\n    ifBreak: ifBreak$8,\r\n    join: join$c,\r\n    line: line$b,\r\n    lineSuffix: lineSuffix$2,\r\n    literalline: literalline$7,\r\n    markAsRoot: markAsRoot$5,\r\n    softline: softline$8\r\n  } = docBuilders$2;\r\n  const {\r\n    replaceEndOfLineWith: replaceEndOfLineWith$3\r\n  } = util$1;\r\n\r\n  function preprocess$3(ast) {\r\n    return mapNode$1(ast, defineShortcuts);\r\n  }\r\n\r\n  function defineShortcuts(node) {\r\n    switch (node.type) {\r\n      case \"document\":\r\n        defineShortcut$1(node, \"head\", () => node.children[0]);\r\n        defineShortcut$1(node, \"body\", () => node.children[1]);\r\n        break;\r\n\r\n      case \"documentBody\":\r\n      case \"sequenceItem\":\r\n      case \"flowSequenceItem\":\r\n      case \"mappingKey\":\r\n      case \"mappingValue\":\r\n        defineShortcut$1(node, \"content\", () => node.children[0]);\r\n        break;\r\n\r\n      case \"mappingItem\":\r\n      case \"flowMappingItem\":\r\n        defineShortcut$1(node, \"key\", () => node.children[0]);\r\n        defineShortcut$1(node, \"value\", () => node.children[1]);\r\n        break;\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  function genericPrint$6(path, options, print) {\r\n    const node = path.getValue();\r\n    const parentNode = path.getParentNode();\r\n    const tag = !node.tag ? \"\" : path.call(print, \"tag\");\r\n    const anchor = !node.anchor ? \"\" : path.call(print, \"anchor\");\r\n    const nextEmptyLine = isNode$1(node, [\"mapping\", \"sequence\", \"comment\", \"directive\", \"mappingItem\", \"sequenceItem\"]) && !isLastDescendantNode$1(path) ? printNextEmptyLine(path, options.originalText) : \"\";\r\n    return concat$h([node.type !== \"mappingValue\" && hasLeadingComments$1(node) ? concat$h([join$c(hardline$d, path.map(print, \"leadingComments\")), hardline$d]) : \"\", tag, tag && anchor ? \" \" : \"\", anchor, tag || anchor ? isNode$1(node, [\"sequence\", \"mapping\"]) && !hasMiddleComments$1(node) ? hardline$d : \" \" : \"\", hasMiddleComments$1(node) ? concat$h([node.middleComments.length === 1 ? \"\" : hardline$d, join$c(hardline$d, path.map(print, \"middleComments\")), hardline$d]) : \"\", hasPrettierIgnore$8(path) ? concat$h(replaceEndOfLineWith$3(options.originalText.slice(node.position.start.offset, node.position.end.offset), literalline$7)) : group$g(_print(node, parentNode, path, options, print)), hasTrailingComment$3(node) && !isNode$1(node, [\"document\", \"documentHead\"]) ? lineSuffix$2(concat$h([node.type === \"mappingValue\" && !node.content ? \"\" : \" \", parentNode.type === \"mappingKey\" && path.getParentNode(2).type === \"mapping\" && isInlineNode(node) ? \"\" : breakParent$5, path.call(print, \"trailingComment\")])) : \"\", nextEmptyLine, hasEndComments$1(node) && !isNode$1(node, [\"documentHead\", \"documentBody\"]) ? align$3(node.type === \"sequenceItem\" ? 2 : 0, concat$h([hardline$d, join$c(hardline$d, path.map(print, \"endComments\"))])) : \"\"]);\r\n  }\r\n\r\n  function _print(node, parentNode, path, options, print) {\r\n    switch (node.type) {\r\n      case \"root\":\r\n        return concat$h([join$c(hardline$d, path.map((childPath, index) => {\r\n          const document = node.children[index];\r\n          const nextDocument = node.children[index + 1];\r\n          return concat$h([print(childPath), shouldPrintDocumentEndMarker(document, nextDocument) ? concat$h([hardline$d, \"...\", hasTrailingComment$3(document) ? concat$h([\" \", path.call(print, \"trailingComment\")]) : \"\"]) : !nextDocument || hasTrailingComment$3(nextDocument.head) ? \"\" : concat$h([hardline$d, \"---\"])]);\r\n        }, \"children\")), node.children.length === 0 || (lastDescendantNode => isNode$1(lastDescendantNode, [\"blockLiteral\", \"blockFolded\"]) && lastDescendantNode.chomping === \"keep\")(getLastDescendantNode$2(node)) ? \"\" : hardline$d]);\r\n\r\n      case \"document\":\r\n        {\r\n          const nextDocument = parentNode.children[path.getName() + 1];\r\n          return join$c(hardline$d, [shouldPrintDocumentHeadEndMarker(node, nextDocument, parentNode, options) === \"head\" ? join$c(hardline$d, [node.head.children.length === 0 && node.head.endComments.length === 0 ? \"\" : path.call(print, \"head\"), concat$h([\"---\", hasTrailingComment$3(node.head) ? concat$h([\" \", path.call(print, \"head\", \"trailingComment\")]) : \"\"])].filter(Boolean)) : \"\", shouldPrintDocumentBody(node) ? path.call(print, \"body\") : \"\"].filter(Boolean));\r\n        }\r\n\r\n      case \"documentHead\":\r\n        return join$c(hardline$d, [].concat(path.map(print, \"children\"), path.map(print, \"endComments\")));\r\n\r\n      case \"documentBody\":\r\n        {\r\n          const children = join$c(hardline$d, path.map(print, \"children\")).parts;\r\n          const endComments = join$c(hardline$d, path.map(print, \"endComments\")).parts;\r\n          const separator = children.length === 0 || endComments.length === 0 ? \"\" : (lastDescendantNode => isNode$1(lastDescendantNode, [\"blockFolded\", \"blockLiteral\"]) ? lastDescendantNode.chomping === \"keep\" ? // there's already a newline printed at the end of blockValue (chomping=keep, lastDescendant=true)\r\n          \"\" : // an extra newline for better readability\r\n          concat$h([hardline$d, hardline$d]) : hardline$d)(getLastDescendantNode$2(node));\r\n          return concat$h([].concat(children, separator, endComments));\r\n        }\r\n\r\n      case \"directive\":\r\n        return concat$h([\"%\", join$c(\" \", [node.name].concat(node.parameters))]);\r\n\r\n      case \"comment\":\r\n        return concat$h([\"#\", node.value]);\r\n\r\n      case \"alias\":\r\n        return concat$h([\"*\", node.value]);\r\n\r\n      case \"tag\":\r\n        return options.originalText.slice(node.position.start.offset, node.position.end.offset);\r\n\r\n      case \"anchor\":\r\n        return concat$h([\"&\", node.value]);\r\n\r\n      case \"plain\":\r\n        return printFlowScalarContent(node.type, options.originalText.slice(node.position.start.offset, node.position.end.offset), options);\r\n\r\n      case \"quoteDouble\":\r\n      case \"quoteSingle\":\r\n        {\r\n          const singleQuote = \"'\";\r\n          const doubleQuote = '\"';\r\n          const raw = options.originalText.slice(node.position.start.offset + 1, node.position.end.offset - 1);\r\n\r\n          if (node.type === \"quoteSingle\" && raw.includes(\"\\\\\") || node.type === \"quoteDouble\" && /\\\\[^\"]/.test(raw)) {\r\n            // only quoteDouble can use escape chars\r\n            // and quoteSingle do not need to escape backslashes\r\n            const originalQuote = node.type === \"quoteDouble\" ? doubleQuote : singleQuote;\r\n            return concat$h([originalQuote, printFlowScalarContent(node.type, raw, options), originalQuote]);\r\n          } else if (raw.includes(doubleQuote)) {\r\n            return concat$h([singleQuote, printFlowScalarContent(node.type, node.type === \"quoteDouble\" ? raw // double quote needs to be escaped by backslash in quoteDouble\r\n            .replace(/\\\\\"/g, doubleQuote).replace(/'/g, singleQuote.repeat(2)) : raw, options), singleQuote]);\r\n          }\r\n\r\n          if (raw.includes(singleQuote)) {\r\n            return concat$h([doubleQuote, printFlowScalarContent(node.type, node.type === \"quoteSingle\" ? // single quote needs to be escaped by 2 single quotes in quoteSingle\r\n            raw.replace(/''/g, singleQuote) : raw, options), doubleQuote]);\r\n          }\r\n\r\n          const quote = options.singleQuote ? singleQuote : doubleQuote;\r\n          return concat$h([quote, printFlowScalarContent(node.type, raw, options), quote]);\r\n        }\r\n\r\n      case \"blockFolded\":\r\n      case \"blockLiteral\":\r\n        {\r\n          const parentIndent = getAncestorCount$1(path, ancestorNode => isNode$1(ancestorNode, [\"sequence\", \"mapping\"]));\r\n          const isLastDescendant = isLastDescendantNode$1(path);\r\n          return concat$h([node.type === \"blockFolded\" ? \">\" : \"|\", node.indent === null ? \"\" : node.indent.toString(), node.chomping === \"clip\" ? \"\" : node.chomping === \"keep\" ? \"+\" : \"-\", hasIndicatorComment$1(node) ? concat$h([\" \", path.call(print, \"indicatorComment\")]) : \"\", (node.indent === null ? dedent$3 : dedentToRoot$3)(align$3(node.indent === null ? options.tabWidth : node.indent - 1 + parentIndent, concat$h(getBlockValueLineContents$1(node, {\r\n            parentIndent,\r\n            isLastDescendant,\r\n            options\r\n          }).reduce((reduced, lineWords, index, lineContents) => reduced.concat(index === 0 ? hardline$d : \"\", fill$6(join$c(line$b, lineWords).parts), index !== lineContents.length - 1 ? lineWords.length === 0 ? hardline$d : markAsRoot$5(literalline$7) : node.chomping === \"keep\" && isLastDescendant ? lineWords.length === 0 ? dedentToRoot$3(hardline$d) : dedentToRoot$3(literalline$7) : \"\"), []))))]);\r\n        }\r\n\r\n      case \"sequence\":\r\n        return join$c(hardline$d, path.map(print, \"children\"));\r\n\r\n      case \"sequenceItem\":\r\n        return concat$h([\"- \", align$3(2, !node.content ? \"\" : path.call(print, \"content\"))]);\r\n\r\n      case \"mappingKey\":\r\n        return !node.content ? \"\" : path.call(print, \"content\");\r\n\r\n      case \"mappingValue\":\r\n        return !node.content ? \"\" : path.call(print, \"content\");\r\n\r\n      case \"mapping\":\r\n        return join$c(hardline$d, path.map(print, \"children\"));\r\n\r\n      case \"mappingItem\":\r\n      case \"flowMappingItem\":\r\n        {\r\n          const isEmptyMappingKey = isEmptyNode$1(node.key);\r\n          const isEmptyMappingValue = isEmptyNode$1(node.value);\r\n\r\n          if (isEmptyMappingKey && isEmptyMappingValue) {\r\n            return concat$h([\": \"]);\r\n          }\r\n\r\n          const key = path.call(print, \"key\");\r\n          const value = path.call(print, \"value\");\r\n\r\n          if (isEmptyMappingValue) {\r\n            return node.type === \"flowMappingItem\" && parentNode.type === \"flowMapping\" ? key : node.type === \"mappingItem\" && isAbsolutelyPrintedAsSingleLineNode(node.key.content, options) && !hasTrailingComment$3(node.key.content) && (!parentNode.tag || parentNode.tag.value !== \"tag:yaml.org,2002:set\") ? concat$h([key, needsSpaceInFrontOfMappingValue(node) ? \" \" : \"\", \":\"]) : concat$h([\"? \", align$3(2, key)]);\r\n          }\r\n\r\n          if (isEmptyMappingKey) {\r\n            return concat$h([\": \", align$3(2, value)]);\r\n          }\r\n\r\n          const groupId = Symbol(\"mappingKey\");\r\n          const forceExplicitKey = hasLeadingComments$1(node.value) || !isInlineNode(node.key.content);\r\n          return forceExplicitKey ? concat$h([\"? \", align$3(2, key), hardline$d, join$c(\"\", path.map(print, \"value\", \"leadingComments\").map(comment => concat$h([comment, hardline$d]))), \": \", align$3(2, value)]) : // force singleline\r\n          isSingleLineNode(node.key.content) && !hasLeadingComments$1(node.key.content) && !hasMiddleComments$1(node.key.content) && !hasTrailingComment$3(node.key.content) && !hasEndComments$1(node.key) && !hasLeadingComments$1(node.value.content) && !hasMiddleComments$1(node.value.content) && !hasEndComments$1(node.value) && isAbsolutelyPrintedAsSingleLineNode(node.value.content, options) ? concat$h([key, needsSpaceInFrontOfMappingValue(node) ? \" \" : \"\", \": \", value]) : conditionalGroup$2([concat$h([group$g(concat$h([ifBreak$8(\"? \"), group$g(align$3(2, key), {\r\n            id: groupId\r\n          })])), ifBreak$8(concat$h([hardline$d, \": \", align$3(2, value)]), indent(concat$h([needsSpaceInFrontOfMappingValue(node) ? \" \" : \"\", \":\", hasLeadingComments$1(node.value.content) || hasEndComments$1(node.value) && node.value.content && !isNode$1(node.value.content, [\"mapping\", \"sequence\"]) || parentNode.type === \"mapping\" && hasTrailingComment$3(node.key.content) && isInlineNode(node.value.content) || isNode$1(node.value.content, [\"mapping\", \"sequence\"]) && node.value.content.tag === null && node.value.content.anchor === null ? hardline$d : !node.value.content ? \"\" : line$b, value])), {\r\n            groupId\r\n          })])]);\r\n        }\r\n\r\n      case \"flowMapping\":\r\n      case \"flowSequence\":\r\n        {\r\n          const openMarker = node.type === \"flowMapping\" ? \"{\" : \"[\";\r\n          const closeMarker = node.type === \"flowMapping\" ? \"}\" : \"]\";\r\n          const bracketSpacing = node.type === \"flowMapping\" && node.children.length !== 0 && options.bracketSpacing ? line$b : softline$8;\r\n\r\n          const isLastItemEmptyMappingItem = node.children.length !== 0 && (lastItem => lastItem.type === \"flowMappingItem\" && isEmptyNode$1(lastItem.key) && isEmptyNode$1(lastItem.value))(getLast$6(node.children));\r\n\r\n          return concat$h([openMarker, indent(concat$h([bracketSpacing, concat$h(path.map((childPath, index) => concat$h([print(childPath), index === node.children.length - 1 ? \"\" : concat$h([\",\", line$b, node.children[index].position.start.line !== node.children[index + 1].position.start.line ? printNextEmptyLine(childPath, options.originalText) : \"\"])]), \"children\")), ifBreak$8(\",\", \"\")])), isLastItemEmptyMappingItem ? \"\" : bracketSpacing, closeMarker]);\r\n        }\r\n\r\n      case \"flowSequenceItem\":\r\n        return path.call(print, \"content\");\r\n      // istanbul ignore next\r\n\r\n      default:\r\n        throw new Error(\"Unexpected node type \".concat(node.type));\r\n    }\r\n\r\n    function indent(doc) {\r\n      return docBuilders$2.align(\" \".repeat(options.tabWidth), doc);\r\n    }\r\n  }\r\n\r\n  function align$3(n, doc) {\r\n    return typeof n === \"number\" && n > 0 ? docBuilders$2.align(\" \".repeat(n), doc) : docBuilders$2.align(n, doc);\r\n  }\r\n\r\n  function isInlineNode(node) {\r\n    if (!node) {\r\n      return true;\r\n    }\r\n\r\n    switch (node.type) {\r\n      case \"plain\":\r\n      case \"quoteDouble\":\r\n      case \"quoteSingle\":\r\n      case \"alias\":\r\n      case \"flowMapping\":\r\n      case \"flowSequence\":\r\n        return true;\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  function isSingleLineNode(node) {\r\n    if (!node) {\r\n      return true;\r\n    }\r\n\r\n    switch (node.type) {\r\n      case \"plain\":\r\n      case \"quoteDouble\":\r\n      case \"quoteSingle\":\r\n        return node.position.start.line === node.position.end.line;\r\n\r\n      case \"alias\":\r\n        return true;\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  function shouldPrintDocumentBody(document) {\r\n    return document.body.children.length !== 0 || hasEndComments$1(document.body);\r\n  }\r\n\r\n  function shouldPrintDocumentEndMarker(document, nextDocument) {\r\n    return (\r\n      /**\r\n       *... # trailingComment\r\n       */\r\n      hasTrailingComment$3(document) || nextDocument && (\r\n      /**\r\n       * ...\r\n       * %DIRECTIVE\r\n       * ---\r\n       */\r\n      nextDocument.head.children.length !== 0 ||\r\n      /**\r\n       * ...\r\n       * # endComment\r\n       * ---\r\n       */\r\n      hasEndComments$1(nextDocument.head))\r\n    );\r\n  }\r\n\r\n  function shouldPrintDocumentHeadEndMarker(document, nextDocument, root, options) {\r\n    if (\r\n    /**\r\n     * ---\r\n     * preserve the first document head end marker\r\n     */\r\n    root.children[0] === document && /---(\\s|$)/.test(options.originalText.slice(options.locStart(document), options.locStart(document) + 4)) ||\r\n    /**\r\n     * %DIRECTIVE\r\n     * ---\r\n     */\r\n    document.head.children.length !== 0 ||\r\n    /**\r\n     * # end comment\r\n     * ---\r\n     */\r\n    hasEndComments$1(document.head) ||\r\n    /**\r\n     * --- # trailing comment\r\n     */\r\n    hasTrailingComment$3(document.head)) {\r\n      return \"head\";\r\n    }\r\n\r\n    if (shouldPrintDocumentEndMarker(document, nextDocument)) {\r\n      return false;\r\n    }\r\n\r\n    return nextDocument ? \"root\" : false;\r\n  }\r\n\r\n  function isAbsolutelyPrintedAsSingleLineNode(node, options) {\r\n    if (!node) {\r\n      return true;\r\n    }\r\n\r\n    switch (node.type) {\r\n      case \"plain\":\r\n      case \"quoteSingle\":\r\n      case \"quoteDouble\":\r\n        break;\r\n\r\n      case \"alias\":\r\n        return true;\r\n\r\n      default:\r\n        return false;\r\n    }\r\n\r\n    if (options.proseWrap === \"preserve\") {\r\n      return node.position.start.line === node.position.end.line;\r\n    }\r\n\r\n    if ( // backslash-newline\r\n    /\\\\$/m.test(options.originalText.slice(node.position.start.offset, node.position.end.offset))) {\r\n      return false;\r\n    }\r\n\r\n    switch (options.proseWrap) {\r\n      case \"never\":\r\n        return !node.value.includes(\"\\n\");\r\n\r\n      case \"always\":\r\n        return !/[\\n ]/.test(node.value);\r\n      // istanbul ignore next\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  function needsSpaceInFrontOfMappingValue(node) {\r\n    return node.key.content && node.key.content.type === \"alias\";\r\n  }\r\n\r\n  function printNextEmptyLine(path, originalText) {\r\n    const node = path.getValue();\r\n    const root = path.stack[0];\r\n    root.isNextEmptyLinePrintedChecklist = root.isNextEmptyLinePrintedChecklist || [];\r\n\r\n    if (!root.isNextEmptyLinePrintedChecklist[node.position.end.line]) {\r\n      if (isNextLineEmpty$6(node, originalText)) {\r\n        root.isNextEmptyLinePrintedChecklist[node.position.end.line] = true;\r\n        return softline$8;\r\n      }\r\n    }\r\n\r\n    return \"\";\r\n  }\r\n\r\n  function printFlowScalarContent(nodeType, content, options) {\r\n    const lineContents = getFlowScalarLineContents$1(nodeType, content, options);\r\n    return join$c(hardline$d, lineContents.map(lineContentWords => fill$6(join$c(line$b, lineContentWords).parts)));\r\n  }\r\n\r\n  function clean$7(node, newNode\r\n  /*, parent */\r\n  ) {\r\n    if (isNode$1(newNode)) {\r\n      delete newNode.position;\r\n\r\n      switch (newNode.type) {\r\n        case \"comment\":\r\n          // insert pragma\r\n          if (isPragma$1(newNode.value)) {\r\n            return null;\r\n          }\r\n\r\n          break;\r\n\r\n        case \"quoteDouble\":\r\n        case \"quoteSingle\":\r\n          newNode.type = \"quote\";\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  var printerYaml = {\r\n    preprocess: preprocess$3,\r\n    print: genericPrint$6,\r\n    massageAstNode: clean$7,\r\n    insertPragma: insertPragma$9\r\n  };\r\n\r\n  var options$7 = {\r\n    bracketSpacing: commonOptions.bracketSpacing,\r\n    singleQuote: commonOptions.singleQuote,\r\n    proseWrap: commonOptions.proseWrap\r\n  };\r\n\r\n  var name$h = \"YAML\";\r\n  var type$g = \"data\";\r\n  var tmScope$g = \"source.yaml\";\r\n  var aliases$6 = [\r\n  \t\"yml\"\r\n  ];\r\n  var extensions$g = [\r\n  \t\".yml\",\r\n  \t\".mir\",\r\n  \t\".reek\",\r\n  \t\".rviz\",\r\n  \t\".sublime-syntax\",\r\n  \t\".syntax\",\r\n  \t\".yaml\",\r\n  \t\".yaml-tmlanguage\",\r\n  \t\".yaml.sed\",\r\n  \t\".yml.mysql\"\r\n  ];\r\n  var filenames$4 = [\r\n  \t\".clang-format\",\r\n  \t\".clang-tidy\",\r\n  \t\".gemrc\",\r\n  \t\"glide.lock\",\r\n  \t\"yarn.lock\"\r\n  ];\r\n  var aceMode$g = \"yaml\";\r\n  var codemirrorMode$c = \"yaml\";\r\n  var codemirrorMimeType$c = \"text/x-yaml\";\r\n  var languageId$g = 407;\r\n  var YAML = {\r\n  \tname: name$h,\r\n  \ttype: type$g,\r\n  \ttmScope: tmScope$g,\r\n  \taliases: aliases$6,\r\n  \textensions: extensions$g,\r\n  \tfilenames: filenames$4,\r\n  \taceMode: aceMode$g,\r\n  \tcodemirrorMode: codemirrorMode$c,\r\n  \tcodemirrorMimeType: codemirrorMimeType$c,\r\n  \tlanguageId: languageId$g\r\n  };\r\n\r\n  var YAML$1 = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    name: name$h,\r\n    type: type$g,\r\n    tmScope: tmScope$g,\r\n    aliases: aliases$6,\r\n    extensions: extensions$g,\r\n    filenames: filenames$4,\r\n    aceMode: aceMode$g,\r\n    codemirrorMode: codemirrorMode$c,\r\n    codemirrorMimeType: codemirrorMimeType$c,\r\n    languageId: languageId$g,\r\n    'default': YAML\r\n  });\r\n\r\n  var require$$0$8 = getCjsExportFromNamespace(YAML$1);\r\n\r\n  const languages$6 = [createLanguage(require$$0$8, data => ({\r\n    since: \"1.14.0\",\r\n    parsers: [\"yaml\"],\r\n    vscodeLanguageIds: [\"yaml\"],\r\n    // yarn.lock is not YAML: https://github.com/yarnpkg/yarn/issues/5629\r\n    filenames: data.filenames.filter(filename => filename !== \"yarn.lock\")\r\n  }))];\r\n  var languageYaml = {\r\n    languages: languages$6,\r\n    printers: {\r\n      yaml: printerYaml\r\n    },\r\n    options: options$7\r\n  };\r\n\r\n  const {\r\n    version: version$2\r\n  } = require$$0;\r\n  const {\r\n    getSupportInfo: getSupportInfo$2\r\n  } = support;\r\n  const internalPlugins = [languageCss, languageGraphql, languageHandlebars, languageHtml, languageJs, languageMarkdown, languageYaml];\r\n\r\n  function withPlugins(fn, optsArgIdx = 1 // Usually `opts` is the 2nd argument\r\n  ) {\r\n    return (...args) => {\r\n      const opts = args[optsArgIdx] || {};\r\n      const plugins = opts.plugins || [];\r\n      args[optsArgIdx] = Object.assign({}, opts, {\r\n        plugins: [...internalPlugins, ...(Array.isArray(plugins) ? plugins : Object.values(plugins))]\r\n      });\r\n      return fn(...args);\r\n    };\r\n  }\r\n\r\n  const formatWithCursor = withPlugins(core.formatWithCursor);\r\n  var standalone = {\r\n    formatWithCursor,\r\n\r\n    format(text, opts) {\r\n      return formatWithCursor(text, opts).formatted;\r\n    },\r\n\r\n    check(text, opts) {\r\n      const {\r\n        formatted\r\n      } = formatWithCursor(text, opts);\r\n      return formatted === text;\r\n    },\r\n\r\n    doc: document,\r\n    getSupportInfo: withPlugins(getSupportInfo$2, 0),\r\n    version: version$2,\r\n    util: utilShared,\r\n    __debug: {\r\n      parse: withPlugins(core.parse),\r\n      formatAST: withPlugins(core.formatAST),\r\n      formatDoc: withPlugins(core.formatDoc),\r\n      printToDoc: withPlugins(core.printToDoc),\r\n      printDocToString: withPlugins(core.printDocToString)\r\n    }\r\n  };\r\n\r\n  var standalone$1 = standalone;\r\n\r\n  return standalone$1;\r\n\r\n})));\r\n",
        "path": "{prettier}/node_modules/prettier.js",
        "mapping": {}
    },
    "{3EBBA1C9-1E4E-40C3-8398-DC2E5C7C5849}": {
        "source": "!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?e(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],e):e(((t=t||self).prettierPlugins=t.prettierPlugins||{},t.prettierPlugins.babel={}))}(this,(function(t){\"use strict\";var e=function(t,e){const s=new SyntaxError(t+\" (\"+e.start.line+\":\"+e.start.column+\")\");return s.loc=e,s};function s(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,\"default\")?t.default:t}function i(t,e){return t(e={exports:{}},e.exports),e.exports}var r=Object.freeze({__proto__:null,default:{EOL:\"\\n\"}});const a=t=>{if(\"string\"!=typeof t)throw new TypeError(\"Expected a string\");const e=t.match(/(?:\\r?\\n)/g)||[];if(0===e.length)return;const s=e.filter(t=>\"\\r\\n\"===t).length;return s>e.length-s?\"\\r\\n\":\"\\n\"};var n=a;n.graceful=t=>\"string\"==typeof t&&a(t)||\"\\n\";var o,h=(o=r)&&o.default||o,p=i((function(t,e){function s(){const t=h;return s=function(){return t},t}function i(){const t=(e=n)&&e.__esModule?e:{default:e};var e;return i=function(){return t},t}Object.defineProperty(e,\"__esModule\",{value:!0}),e.extract=function(t){const e=t.match(o);return e?e[0].trimLeft():\"\"},e.strip=function(t){const e=t.match(o);return e&&e[0]?t.substring(e[0].length):t},e.parse=function(t){return m(t).pragmas},e.parseWithComments=m,e.print=function({comments:t=\"\",pragmas:e={}}){const r=(0,i().default)(t)||s().EOL,a=Object.keys(e),n=a.map(t=>f(t,e[t])).reduce((t,e)=>t.concat(e),[]).map(t=>\" * \"+t+r).join(\"\");if(!t){if(0===a.length)return\"\";if(1===a.length&&!Array.isArray(e[a[0]])){const t=e[a[0]];return\"\".concat(\"/**\",\" \").concat(f(a[0],t)[0]).concat(\" */\")}}const o=t.split(r).map(t=>\"\".concat(\" *\",\" \").concat(t)).join(r)+r;return\"/**\"+r+(t?o:\"\")+(t&&a.length?\" *\"+r:\"\")+n+\" */\"};const r=/\\*\\/$/,a=/^\\/\\*\\*/,o=/^\\s*(\\/\\*\\*?(.|\\r?\\n)*?\\*\\/)/,p=/(^|\\s+)\\/\\/([^\\r\\n]*)/g,c=/^(\\r?\\n)+/,u=/(?:^|\\r?\\n) *(@[^\\r\\n]*?) *\\r?\\n *(?![^@\\r\\n]*\\/\\/[^]*)([^@\\r\\n\\s][^@\\r\\n]+?) *\\r?\\n/g,l=/(?:^|\\r?\\n) *@(\\S+) *([^\\r\\n]*)/g,d=/(\\r?\\n|^) *\\* ?/g;function m(t){const e=(0,i().default)(t)||s().EOL;t=t.replace(a,\"\").replace(r,\"\").replace(d,\"$1\");let n=\"\";for(;n!==t;)n=t,t=t.replace(u,\"\".concat(e,\"$1 $2\").concat(e));t=t.replace(c,\"\").trimRight();const o=Object.create(null),h=t.replace(l,\"\").replace(c,\"\").trimRight();let m;for(;m=l.exec(t);){const t=m[2].replace(p,\"\");\"string\"==typeof o[m[1]]||Array.isArray(o[m[1]])?o[m[1]]=[].concat(o[m[1]],t):o[m[1]]=t}return{comments:h,pragmas:o}}function f(t,e){return[].concat(e).map(e=>\"@\".concat(t,\" \").concat(e).trim())}}));s(p);p.extract,p.strip,p.parse,p.parseWithComments,p.print;var c={hasPragma:function(t){const e=Object.keys(p.parse(p.extract(t)));return e.includes(\"prettier\")||e.includes(\"format\")},insertPragma:function(t){const e=p.parseWithComments(p.extract(t)),s=Object.assign({format:\"\"},e.pragmas),i=p.print({pragmas:s,comments:e.comments.replace(/^(\\s+?\\r?\\n)+/,\"\")}).replace(/(\\r\\n|\\r)/g,\"\\n\"),r=p.strip(t);return i+(r.startsWith(\"\\n\")?\"\\n\":\"\\n\\n\")+r}},u=t=>t[t.length-1];function l(t,e){return!(e=e||{}).ignoreDecorators&&t.declaration&&t.declaration.decorators&&t.declaration.decorators.length>0?l(t.declaration.decorators[0]):!e.ignoreDecorators&&t.decorators&&t.decorators.length>0?l(t.decorators[0]):t.__location?t.__location.startOffset:t.range?t.range[0]:\"number\"==typeof t.start?t.start:t.loc?t.loc.start:null}function d(t){const e=t.nodes&&u(t.nodes);if(e&&t.source&&!t.source.end&&(t=e),t.__location)return t.__location.endOffset;const s=t.range?t.range[1]:\"number\"==typeof t.end?t.end:null;return t.typeAnnotation?Math.max(s,d(t.typeAnnotation)):t.loc&&!s?t.loc.end:s}var m={locStart:l,locEnd:d,composeLoc:function(t,e=t){const s=\"number\"==typeof e?e:-1,i=l(t),r=-1!==s?i+s:d(e),a=t.loc.start;return{start:i,end:r,range:[i,r],loc:{start:a,end:-1!==s?{line:a.line,column:a.column+s}:e.loc.end}}}},f=t=>\"string\"==typeof t?t.replace((({onlyFirst:t=!1}={})=>{const e=[\"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:[a-zA-Z\\\\d]*(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\",\"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))\"].join(\"|\");return new RegExp(e,t?void 0:\"g\")})(),\"\"):t;const D=t=>!Number.isNaN(t)&&(t>=4352&&(t<=4447||9001===t||9002===t||11904<=t&&t<=12871&&12351!==t||12880<=t&&t<=19903||19968<=t&&t<=42182||43360<=t&&t<=43388||44032<=t&&t<=55203||63744<=t&&t<=64255||65040<=t&&t<=65049||65072<=t&&t<=65131||65281<=t&&t<=65376||65504<=t&&t<=65510||110592<=t&&t<=110593||127488<=t&&t<=127569||131072<=t&&t<=262141));var y=D,x=D;y.default=x;const g=t=>{if(\"string\"!=typeof(t=t.replace(/\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62(?:\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67|\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73)\\uDB40\\uDC7F|\\uD83D\\uDC68(?:\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C\\uDFFB|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFE])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83D\\uDC68|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D[\\uDC66\\uDC67])|[\\u2695\\u2696\\u2708]\\uFE0F|\\uD83D[\\uDC66\\uDC67]|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|(?:\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708])\\uFE0F|\\uD83C\\uDFFB\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C[\\uDFFB-\\uDFFF])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFB\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)\\uD83C\\uDFFB|\\uD83E\\uDDD1(?:\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1)|(?:\\uD83E\\uDDD1\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D(?:\\uD83D[\\uDC68\\uDC69]))(?:\\uD83C[\\uDFFB-\\uDFFE])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83D\\uDC69(?:\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFB\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFC-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]))|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|(?:\\uD83E\\uDDD1\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8|\\uD83D\\uDC69(?:\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708])|(?:(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)\\uFE0F|\\uD83D\\uDC6F|\\uD83E[\\uDD3C\\uDDDE\\uDDDF])\\u200D[\\u2640\\u2642]|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|\\u200D[\\u2640\\u2642])|\\uD83C\\uDFF4\\u200D\\u2620)\\uFE0F|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C\\uDFF3\\uFE0F\\u200D\\uD83C\\uDF08|\\uD83D\\uDC15\\u200D\\uD83E\\uDDBA|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83C\\uDDF6\\uD83C\\uDDE6|[#\\*0-9]\\uFE0F\\u20E3|\\uD83C\\uDDE7(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDF9(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF])|\\uD83C\\uDDEA(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA])|\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF7(?:\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC])|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF2(?:\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF])|\\uD83C\\uDDE6(?:\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF])|\\uD83C\\uDDF0(?:\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDED(?:\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA])|\\uD83C\\uDDE9(?:\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF])|\\uD83C\\uDDFE(?:\\uD83C[\\uDDEA\\uDDF9])|\\uD83C\\uDDEC(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE])|\\uD83C\\uDDF8(?:\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF])|\\uD83C\\uDDEB(?:\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7])|\\uD83C\\uDDF5(?:\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE])|\\uD83C\\uDDFB(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA])|\\uD83C\\uDDF3(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF])|\\uD83C\\uDDE8(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF])|\\uD83C\\uDDF1(?:\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE])|\\uD83C\\uDDFF(?:\\uD83C[\\uDDE6\\uDDF2\\uDDFC])|\\uD83C\\uDDFC(?:\\uD83C[\\uDDEB\\uDDF8])|\\uD83C\\uDDFA(?:\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF])|\\uD83C\\uDDEE(?:\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9])|\\uD83C\\uDDEF(?:\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC70\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDCAA\\uDD74\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD36\\uDDB5\\uDDB6\\uDDBB\\uDDD2-\\uDDD5])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5\\uDEEB\\uDEEC\\uDEF4-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDED5\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])\\uFE0F|(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDC8F\\uDC91\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3C-\\uDD3E\\uDDB5\\uDDB6\\uDDB8\\uDDB9\\uDDBB\\uDDCD-\\uDDCF\\uDDD1-\\uDDDD])/g,\"  \"))||0===t.length)return 0;t=f(t);let e=0;for(let s=0;s<t.length;s++){const i=t.codePointAt(s);i<=31||i>=127&&i<=159||(i>=768&&i<=879||(i>65535&&s++,e+=y(i)?2:1))}return e};var P=g,E=g;P.default=E;const C=/[|\\\\{}()[\\]^$+*?.-]/g;var b=t=>{if(\"string\"!=typeof t)throw new TypeError(\"Expected a string\");return t.replace(C,\"\\\\$&\")};const T=/[^\\x20-\\x7F]/;function A(t){return(e,s,i)=>{const r=i&&i.backwards;if(!1===s)return!1;const{length:a}=e;let n=s;for(;n>=0&&n<a;){const s=e.charAt(n);if(t instanceof RegExp){if(!t.test(s))return n}else if(!t.includes(s))return n;r?n--:n++}return(-1===n||n===a)&&n}}const w=A(/\\s/),S=A(\" \\t\"),N=A(\",; \\t\"),F=A(/[^\\r\\n]/);function k(t,e){if(!1===e)return!1;if(\"/\"===t.charAt(e)&&\"*\"===t.charAt(e+1))for(let s=e+2;s<t.length;++s)if(\"*\"===t.charAt(s)&&\"/\"===t.charAt(s+1))return s+2;return e}function I(t,e){return!1!==e&&(\"/\"===t.charAt(e)&&\"/\"===t.charAt(e+1)?F(t,e):e)}function v(t,e,s){const i=s&&s.backwards;if(!1===e)return!1;const r=t.charAt(e);if(i){if(\"\\r\"===t.charAt(e-1)&&\"\\n\"===r)return e-2;if(\"\\n\"===r||\"\\r\"===r||\"\\u2028\"===r||\"\\u2029\"===r)return e-1}else{if(\"\\r\"===r&&\"\\n\"===t.charAt(e+1))return e+2;if(\"\\n\"===r||\"\\r\"===r||\"\\u2028\"===r||\"\\u2029\"===r)return e+1}return e}function L(t,e,s){const i=S(t,(s=s||{}).backwards?e-1:e,s);return i!==v(t,i,s)}function B(t,e){let s=null,i=e;for(;i!==s;)s=i,i=N(t,i),i=k(t,i),i=S(t,i);return i=I(t,i),i=v(t,i),!1!==i&&L(t,i)}function M(t,e){let s=null,i=e;for(;i!==s;)s=i,i=S(t,i),i=k(t,i),i=I(t,i),i=v(t,i);return i}function O(t,e,s){return M(t,s(e))}const R={};function _(t){return R[t]}[[\"|>\"],[\"??\"],[\"||\"],[\"&&\"],[\"|\"],[\"^\"],[\"&\"],[\"==\",\"===\",\"!=\",\"!==\"],[\"<\",\">\",\"<=\",\">=\",\"in\",\"instanceof\"],[\">>\",\"<<\",\">>>\"],[\"+\",\"-\"],[\"*\",\"/\",\"%\"],[\"**\"]].forEach((t,e)=>{t.forEach(t=>{R[t]=e})});const j={\"==\":!0,\"!=\":!0,\"===\":!0,\"!==\":!0},U={\"*\":!0,\"/\":!0,\"%\":!0},q={\">>\":!0,\">>>\":!0,\"<<\":!0};function V(t,e,s){let i=0;for(let r=s=s||0;r<t.length;++r)\"\\t\"===t[r]?i=i+e-i%e:i++;return i}function z(t,e){const s=t.slice(1,-1),i={quote:'\"',regex:/\"/g},r={quote:\"'\",regex:/'/g},a=\"'\"===e?r:i,n=a===r?i:r;let o=a.quote;if(s.includes(a.quote)||s.includes(n.quote)){o=(s.match(a.regex)||[]).length>(s.match(n.regex)||[]).length?n.quote:a.quote}return o}function H(t,e,s){const i='\"'===e?\"'\":'\"',r=t.replace(/\\\\([\\s\\S])|(['\"])/g,(t,r,a)=>r===i?r:a===e?\"\\\\\"+a:a||(s&&/^[^\\\\nrvtbfux\\r\\n\\u2028\\u2029\"'0-7]$/.test(r)?r:\"\\\\\"+r));return e+r+e}function W(t){return t&&(t.comments&&t.comments.length>0&&t.comments.some(t=>K(t)&&!t.unignore)||t.prettierIgnore)}function K(t){return\"prettier-ignore\"===t.value.trim()}function J(t,e){(t.comments||(t.comments=[])).push(e),e.printed=!1,\"JSXText\"===t.type&&(e.printed=!0)}var X={replaceEndOfLineWith:function(t,e){const s=[];for(const i of t.split(\"\\n\"))0!==s.length&&s.push(e),s.push(i);return s},getStringWidth:function(t){return t?T.test(t)?P(t):t.length:0},getMaxContinuousCount:function(t,e){const s=t.match(new RegExp(\"(\".concat(b(e),\")+\"),\"g\"));return null===s?0:s.reduce((t,s)=>Math.max(t,s.length/e.length),0)},getMinNotPresentContinuousCount:function(t,e){const s=t.match(new RegExp(\"(\".concat(b(e),\")+\"),\"g\"));if(null===s)return 0;const i=new Map;let r=0;for(const t of s){const s=t.length/e.length;i.set(s,!0),s>r&&(r=s)}for(let t=1;t<r;t++)if(!i.get(t))return t;return r+1},getPrecedence:_,shouldFlatten:function(t,e){return _(e)===_(t)&&(\"**\"!==t&&((!j[t]||!j[e])&&(!(\"%\"===e&&U[t]||\"%\"===t&&U[e])&&((e===t||!U[e]||!U[t])&&(!q[t]||!q[e])))))},isBitwiseOperator:function(t){return!!q[t]||\"|\"===t||\"^\"===t||\"&\"===t},getPenultimate:function(t){return t.length>1?t[t.length-2]:null},getLast:u,getNextNonSpaceNonCommentCharacterIndexWithStartIndex:M,getNextNonSpaceNonCommentCharacterIndex:O,getNextNonSpaceNonCommentCharacter:function(t,e,s){return t.charAt(O(t,e,s))},skip:A,skipWhitespace:w,skipSpaces:S,skipToLineEnd:N,skipEverythingButNewLine:F,skipInlineComment:k,skipTrailingComment:I,skipNewline:v,isNextLineEmptyAfterIndex:B,isNextLineEmpty:function(t,e,s){return B(t,s(e))},isPreviousLineEmpty:function(t,e,s){let i=s(e)-1;return i=S(t,i,{backwards:!0}),i=v(t,i,{backwards:!0}),i=S(t,i,{backwards:!0}),i!==v(t,i,{backwards:!0})},hasNewline:L,hasNewlineInRange:function(t,e,s){for(let i=e;i<s;++i)if(\"\\n\"===t.charAt(i))return!0;return!1},hasSpaces:function(t,e,s){return S(t,(s=s||{}).backwards?e-1:e,s)!==e},setLocStart:function(t,e){t.range?t.range[0]=e:t.start=e},setLocEnd:function(t,e){t.range?t.range[1]=e:t.end=e},startsWithNoLookaheadToken:function t(e,s){switch((e=function t(e){if(e.left)return t(e.left);return e}(e)).type){case\"FunctionExpression\":case\"ClassExpression\":case\"DoExpression\":return s;case\"ObjectExpression\":return!0;case\"MemberExpression\":case\"OptionalMemberExpression\":return t(e.object,s);case\"TaggedTemplateExpression\":return\"FunctionExpression\"!==e.tag.type&&t(e.tag,s);case\"CallExpression\":case\"OptionalCallExpression\":return\"FunctionExpression\"!==e.callee.type&&t(e.callee,s);case\"ConditionalExpression\":return t(e.test,s);case\"UpdateExpression\":return!e.prefix&&t(e.argument,s);case\"BindExpression\":return e.object&&t(e.object,s);case\"SequenceExpression\":return t(e.expressions[0],s);case\"TSAsExpression\":return t(e.expression,s);default:return!1}},getAlignmentSize:V,getIndentSize:function(t,e){const s=t.lastIndexOf(\"\\n\");return-1===s?0:V(t.slice(s+1).match(/^[ \\t]*/)[0],e)},getPreferredQuote:z,printString:function(t,e,s){const i=t.slice(1,-1),r=!i.includes('\"')&&!i.includes(\"'\"),a=\"json\"===e.parser?'\"':e.__isInHtmlAttribute?\"'\":z(t,e.singleQuote?\"'\":'\"');return s?r?a+i+a:t:H(i,a,!(\"css\"===e.parser||\"less\"===e.parser||\"scss\"===e.parser||e.embeddedInHtml))},printNumber:function(t){return t.toLowerCase().replace(/^([+-]?[\\d.]+e)(?:\\+|(-))?0*(\\d)/,\"$1$2$3\").replace(/^([+-]?[\\d.]+)e[+-]?0+$/,\"$1\").replace(/^([+-])?\\./,\"$10.\").replace(/(\\.\\d+?)0+(?=e|$)/,\"$1\").replace(/\\.(?=e|$)/,\"\")},hasIgnoreComment:function(t){return W(t.getValue())},hasNodeIgnoreComment:W,isNodeIgnoreComment:K,makeString:H,addLeadingComment:function(t,e){e.leading=!0,e.trailing=!1,J(t,e)},addDanglingComment:function(t,e){e.leading=!1,e.trailing=!1,J(t,e)},addTrailingComment:function(t,e){e.leading=!1,e.trailing=!0,J(t,e)},isWithinParentArrayProperty:function(t,e){const s=t.getValue(),i=t.getParentNode();if(null==i)return!1;if(!Array.isArray(i[e]))return!1;const r=t.getName();return i[e][r]===s}};const{getMaxContinuousCount:G,getStringWidth:Q,getAlignmentSize:Y,getIndentSize:$,skip:Z,skipWhitespace:tt,skipSpaces:et,skipNewline:st,skipToLineEnd:it,skipEverythingButNewLine:rt,skipInlineComment:at,skipTrailingComment:nt,hasNewline:ot,hasNewlineInRange:ht,hasSpaces:pt,isNextLineEmpty:ct,isNextLineEmptyAfterIndex:ut,isPreviousLineEmpty:lt,getNextNonSpaceNonCommentCharacterIndex:dt,makeString:mt,addLeadingComment:ft,addDanglingComment:Dt,addTrailingComment:yt}=X;var xt={getMaxContinuousCount:G,getStringWidth:Q,getAlignmentSize:Y,getIndentSize:$,skip:Z,skipWhitespace:tt,skipSpaces:et,skipNewline:st,skipToLineEnd:it,skipEverythingButNewLine:rt,skipInlineComment:at,skipTrailingComment:nt,hasNewline:ot,hasNewlineInRange:ht,hasSpaces:pt,isNextLineEmpty:ct,isNextLineEmptyAfterIndex:ut,isPreviousLineEmpty:lt,getNextNonSpaceNonCommentCharacterIndex:dt,makeString:mt,addLeadingComment:ft,addDanglingComment:Dt,addTrailingComment:yt};const{addLeadingComment:gt,addTrailingComment:Pt,addDanglingComment:Et,getNextNonSpaceNonCommentCharacterIndex:Ct}=xt;function bt(t,e){const s=t.body.filter(t=>\"EmptyStatement\"!==t.type);0===s.length?Et(t,e):gt(s[0],e)}function Tt(t,e){\"BlockStatement\"===t.type?bt(t,e):gt(t,e)}function At(t,e,s,i,r,a){if(!s||\"IfStatement\"!==s.type||!i)return!1;return\")\"===X.getNextNonSpaceNonCommentCharacter(t,r,a.locEnd)?(Pt(e,r),!0):e===s.consequent&&i===s.alternate?(\"BlockStatement\"===e.type?Pt(e,r):Et(s,r),!0):\"BlockStatement\"===i.type?(bt(i,r),!0):\"IfStatement\"===i.type?(Tt(i.consequent,r),!0):s.consequent===i&&(gt(i,r),!0)}function wt(t,e,s,i,r,a){if(!s||\"WhileStatement\"!==s.type||!i)return!1;return\")\"===X.getNextNonSpaceNonCommentCharacter(t,r,a.locEnd)?(Pt(e,r),!0):\"BlockStatement\"===i.type&&(bt(i,r),!0)}function St(t,e,s,i){return!(!t||\"TryStatement\"!==t.type&&\"CatchClause\"!==t.type||!s)&&(\"CatchClause\"===t.type&&e?(Pt(e,i),!0):\"BlockStatement\"===s.type?(bt(s,i),!0):\"TryStatement\"===s.type?(Tt(s.finalizer,i),!0):\"CatchClause\"===s.type&&(Tt(s.body,i),!0))}function Nt(t,e,s,i){return!(!(t&&(\"ClassDeclaration\"===t.type||\"ClassExpression\"===t.type)&&t.decorators&&t.decorators.length>0)||s&&\"Decorator\"===s.type)&&(t.decorators&&0!==t.decorators.length?Pt(t.decorators[t.decorators.length-1],i):gt(t,i),!0)}function Ft(t,e,s,i,r){return e&&s&&(\"Property\"===e.type||\"TSDeclareMethod\"===e.type||\"TSAbstractMethodDefinition\"===e.type)&&\"Identifier\"===s.type&&e.key===s&&\":\"!==X.getNextNonSpaceNonCommentCharacter(t,s,r.locEnd)?(Pt(s,i),!0):!(!s||!e||\"Decorator\"!==s.type||\"ClassMethod\"!==e.type&&\"ClassProperty\"!==e.type&&\"TSAbstractClassProperty\"!==e.type&&\"TSAbstractMethodDefinition\"!==e.type&&\"TSDeclareMethod\"!==e.type&&\"MethodDefinition\"!==e.type)&&(Pt(s,i),!0)}function kt(t,e,s,i,r,a){if(e&&\"FunctionTypeParam\"===e.type&&s&&\"FunctionTypeAnnotation\"===s.type&&i&&\"FunctionTypeParam\"!==i.type)return Pt(e,r),!0;if(e&&(\"Identifier\"===e.type||\"AssignmentPattern\"===e.type)&&s&&Mt(s)&&\")\"===X.getNextNonSpaceNonCommentCharacter(t,r,a.locEnd))return Pt(e,r),!0;if(s&&\"FunctionDeclaration\"===s.type&&i&&\"BlockStatement\"===i.type){const e=(()=>{if(0!==(s.params||s.parameters).length)return X.getNextNonSpaceNonCommentCharacterIndexWithStartIndex(t,a.locEnd(X.getLast(s.params||s.parameters)));const e=X.getNextNonSpaceNonCommentCharacterIndexWithStartIndex(t,a.locEnd(s.id));return X.getNextNonSpaceNonCommentCharacterIndexWithStartIndex(t,e+1)})();if(a.locStart(r)>e)return bt(i,r),!0}return!1}function It(t,e){return!(!t||\"ImportSpecifier\"!==t.type)&&(gt(t,e),!0)}function vt(t,e){return!(!t||\"LabeledStatement\"!==t.type)&&(gt(t,e),!0)}function Lt(t,e,s,i){return e&&e.body&&0===e.body.length?(i?Et(e,s):gt(e,s),!0):!(!t||\"Program\"!==t.type||0!==t.body.length||!t.directives||0!==t.directives.length)&&(i?Et(t,s):gt(t,s),!0)}function Bt(t){return\"Block\"===t.type||\"CommentBlock\"===t.type}function Mt(t){return\"ArrowFunctionExpression\"===t.type||\"FunctionExpression\"===t.type||\"FunctionDeclaration\"===t.type||\"ObjectMethod\"===t.type||\"ClassMethod\"===t.type||\"TSDeclareFunction\"===t.type||\"TSCallSignatureDeclaration\"===t.type||\"TSConstructSignatureDeclaration\"===t.type||\"TSConstructSignatureDeclaration\"===t.type||\"TSMethodSignature\"===t.type||\"TSConstructorType\"===t.type||\"TSFunctionType\"===t.type||\"TSDeclareMethod\"===t.type}function Ot(t){return Bt(t)&&\"*\"===t.value[0]&&/@type\\b/.test(t.value)}var Rt={handleOwnLineComment:function(t,e,s,i,r){const{precedingNode:a,enclosingNode:n,followingNode:o}=t;return kt(e,a,n,o,t,s)||function(t,e,s){if(t&&(\"MemberExpression\"===t.type||\"OptionalMemberExpression\"===t.type)&&e&&\"Identifier\"===e.type)return gt(t,s),!0;return!1}(n,o,t)||At(e,a,n,o,t,s)||wt(e,a,n,o,t,s)||St(n,a,o,t)||Nt(n,a,o,t)||It(n,t)||function(t,e,s){if(t&&(\"ForInStatement\"===t.type||\"ForOfStatement\"===t.type))return gt(t,s),!0;return!1}(n,0,t)||function(t,e,s,i){if(e&&(\"UnionTypeAnnotation\"===e.type||\"TSUnionType\"===e.type))return X.isNodeIgnoreComment(i)&&(s.prettierIgnore=!0,i.unignore=!0),!!t&&(Pt(t,i),!0);s&&(\"UnionTypeAnnotation\"===s.type||\"TSUnionType\"===s.type)&&X.isNodeIgnoreComment(i)&&(s.types[0].prettierIgnore=!0,i.unignore=!0);return!1}(a,n,o,t)||Lt(n,i,t,r)||function(t,e,s,i,r){if(s&&\"ImportSpecifier\"===s.type&&e&&\"ImportDeclaration\"===e.type&&X.hasNewline(t,r.locEnd(i)))return Pt(s,i),!0;return!1}(e,n,a,t,s)||function(t,e){if(t&&\"AssignmentPattern\"===t.type)return gt(t,e),!0;return!1}(n,t)||Ft(e,n,a,t,s)||vt(n,t)},handleEndOfLineComment:function(t,e,s,i,r){const{precedingNode:a,enclosingNode:n,followingNode:o}=t;return function(t,e){if(t&&Ot(e))return gt(t,e),!0;return!1}(o,t)||kt(e,a,n,o,t,s)||function(t,e,s,i,r,a){const n=e&&!X.hasNewlineInRange(r,a.locEnd(e),a.locStart(i));if((!e||!n)&&t&&\"ConditionalExpression\"===t.type&&s)return gt(s,i),!0;return!1}(n,a,o,t,e,s)||It(n,t)||At(e,a,n,o,t,s)||wt(e,a,n,o,t,s)||St(n,a,o,t)||Nt(n,a,o,t)||vt(n,t)||function(t,e,s){if(e&&(\"CallExpression\"===e.type||\"OptionalCallExpression\"===e.type)&&t&&e.callee===t&&e.arguments.length>0)return gt(e.arguments[0],s),!0;return!1}(a,n,t)||function(t,e){if(t&&(\"Property\"===t.type||\"ObjectProperty\"===t.type))return gt(t,e),!0;return!1}(n,t)||Lt(n,i,t,r)||function(t,e,s){if(t&&\"TypeAlias\"===t.type)return gt(t,s),!0;return!1}(n,0,t)||function(t,e,s){if(t&&(\"VariableDeclarator\"===t.type||\"AssignmentExpression\"===t.type)&&e&&(\"ObjectExpression\"===e.type||\"ArrayExpression\"===e.type||\"TemplateLiteral\"===e.type||\"TaggedTemplateExpression\"===e.type||Bt(s)))return gt(e,s),!0;return!1}(n,o,t)},handleRemainingComment:function(t,e,s,i,r){const{precedingNode:a,enclosingNode:n,followingNode:o}=t;return!!(At(e,a,n,o,t,s)||wt(e,a,n,o,t,s)||function(t,e,s){if(t&&(\"ObjectProperty\"===t.type||\"Property\"===t.type)&&t.shorthand&&t.key===e&&\"AssignmentPattern\"===t.value.type)return Pt(t.value.left,s),!0;return!1}(n,a,t)||function(t,e,s,i){if(\")\"!==X.getNextNonSpaceNonCommentCharacter(t,s,i.locEnd))return!1;if(e&&(Mt(e)&&0===(e.params||e.parameters).length||(\"CallExpression\"===e.type||\"OptionalCallExpression\"===e.type||\"NewExpression\"===e.type)&&0===e.arguments.length))return Et(e,s),!0;if(e&&\"MethodDefinition\"===e.type&&0===e.value.params.length)return Et(e.value,s),!0;return!1}(e,n,t,s)||Ft(e,n,a,t,s)||Lt(n,i,t,r)||function(t,e,s,i){if(!e||\"ArrowFunctionExpression\"!==e.type)return!1;const r=Ct(t,s,i.locEnd);if(\"=>\"===t.slice(r,r+2))return Et(e,s),!0;return!1}(e,n,t,s)||function(t,e,s,i,r){if(\"(\"!==X.getNextNonSpaceNonCommentCharacter(t,i,r.locEnd))return!1;if(s&&e&&(\"FunctionDeclaration\"===e.type||\"FunctionExpression\"===e.type||\"ClassMethod\"===e.type||\"MethodDefinition\"===e.type||\"ObjectMethod\"===e.type))return Pt(s,i),!0;return!1}(e,n,a,t,s)||function(t,e,s,i,r){if(!e||\"TSMappedType\"!==e.type)return!1;if(i&&\"TSTypeParameter\"===i.type&&i.name)return gt(i.name,r),!0;if(s&&\"TSTypeParameter\"===s.type&&s.constraint)return Pt(s.constraint,r),!0;return!1}(0,n,a,o,t)||function(t,e){if(t&&(\"ContinueStatement\"===t.type||\"BreakStatement\"===t.type)&&!t.label)return Pt(t,e),!0;return!1}(n,t)||function(t,e,s,i,r){if(!s&&e&&(\"TSMethodSignature\"===e.type||\"TSDeclareFunction\"===e.type||\"TSAbstractMethodDefinition\"===e.type)&&\";\"===X.getNextNonSpaceNonCommentCharacter(t,i,r.locEnd))return Pt(e,i),!0;return!1}(e,n,o,t,s))},hasLeadingComment:function(t,e=(()=>!0)){return t.leadingComments?t.leadingComments.some(e):!!t.comments&&t.comments.some(t=>t.leading&&e(t))},isBlockComment:Bt,isTypeCastComment:Ot,getGapRegex:function(t){if(t&&\"BinaryExpression\"!==t.type&&\"LogicalExpression\"!==t.type)return/^[\\s(&|]*$/},getCommentChildNodes:function(t,e){if((\"typescript\"===e.parser||\"flow\"===e.parser)&&\"MethodDefinition\"===t.type&&t.value&&\"FunctionExpression\"===t.value.type&&0===t.value.params.length&&!t.value.returnType&&(!t.value.typeParameters||0===t.value.typeParameters.length)&&t.value.body)return[...t.decorators||[],t.key,t.value.body]}};const{getLast:_t,getNextNonSpaceNonCommentCharacter:jt}=X,{composeLoc:Ut,locEnd:qt}=m,{isTypeCastComment:Vt}=Rt;function zt(t,e,s,i){if(!t||\"object\"!=typeof t)return;if(Array.isArray(t)){for(let s=0;s<t.length;s++)zt(t[s],e,t,s);return}if(\"string\"!=typeof t.type)return;for(const s of Object.keys(t))zt(t[s],e,t,s);const r=e(t);r&&(s[i]=r)}function Ht(t){return\"LogicalExpression\"===t.type&&\"LogicalExpression\"===t.right.type&&t.operator===t.right.operator}var Wt=function(t,e){if(\"typescript\"!==e.parser&&\"flow\"!==e.parser){const e=new Set;zt(t,t=>{t.leadingComments&&t.leadingComments.some(Vt)&&e.add(t.start)}),zt(t,t=>{if(\"ParenthesizedExpression\"===t.type&&!e.has(t.start)){const{expression:e}=t;return e.extra||(e.extra={}),e.extra.parenthesized=!0,e.extra.parenStart=t.start,e}})}return zt(t,t=>{switch(t.type){case\"LogicalExpression\":if(Ht(t))return function t(e){if(!Ht(e))return e;return t(Object.assign({type:\"LogicalExpression\",operator:e.operator,left:t(Object.assign({type:\"LogicalExpression\",operator:e.operator,left:e.left,right:e.right.left},Ut(e.left,e.right.left))),right:e.right.right},Ut(e)))}(t);break;case\"VariableDeclaration\":{const s=_t(t.declarations);s&&s.init&&function(t,s){if(\";\"===e.originalText[qt(s)])return;Array.isArray(t.range)?t.range=[t.range[0],s.range[1]]:t.end=s.end;t.loc=Object.assign({},t.loc,{end:t.loc.end})}(t,s);break}case\"TSParenthesizedType\":return Object.assign({},t.typeAnnotation,{},Ut(t));case\"TSUnionType\":case\"TSIntersectionType\":if(1===t.types.length)return Object.assign({},t.types[0],{},Ut(t));break;case\"TSTypeParameter\":\"string\"==typeof t.name&&(t.name=Object.assign({type:\"Identifier\",name:t.name},Ut(t,t.name.length)));break;case\"SequenceExpression\":t.end&&t.end>_t(t.expressions).end&&(t.end=_t(t.expressions).end);break;case\"ClassProperty\":t.key&&\"TSPrivateIdentifier\"===t.key.type&&\"?\"===jt(e.originalText,t.key,qt)&&(t.optional=!0)}}),t},Kt=i((function(t,e){Object.defineProperty(e,\"__esModule\",{value:!0});class s{constructor(t,e={}){this.label=t,this.keyword=e.keyword,this.beforeExpr=!!e.beforeExpr,this.startsExpr=!!e.startsExpr,this.rightAssociative=!!e.rightAssociative,this.isLoop=!!e.isLoop,this.isAssign=!!e.isAssign,this.prefix=!!e.prefix,this.postfix=!!e.postfix,this.binop=null!=e.binop?e.binop:null,this.updateContext=null}}const i=new Map;function r(t,e={}){e.keyword=t;const r=new s(t,e);return i.set(t,r),r}function a(t,e){return new s(t,{beforeExpr:!0,binop:e})}const n={num:new s(\"num\",{startsExpr:!0}),bigint:new s(\"bigint\",{startsExpr:!0}),regexp:new s(\"regexp\",{startsExpr:!0}),string:new s(\"string\",{startsExpr:!0}),name:new s(\"name\",{startsExpr:!0}),eof:new s(\"eof\"),bracketL:new s(\"[\",{beforeExpr:!0,startsExpr:!0}),bracketHashL:new s(\"#[\",{beforeExpr:!0,startsExpr:!0}),bracketBarL:new s(\"[|\",{beforeExpr:!0,startsExpr:!0}),bracketR:new s(\"]\"),bracketBarR:new s(\"|]\"),braceL:new s(\"{\",{beforeExpr:!0,startsExpr:!0}),braceBarL:new s(\"{|\",{beforeExpr:!0,startsExpr:!0}),braceHashL:new s(\"#{\",{beforeExpr:!0,startsExpr:!0}),braceR:new s(\"}\"),braceBarR:new s(\"|}\"),parenL:new s(\"(\",{beforeExpr:!0,startsExpr:!0}),parenR:new s(\")\"),comma:new s(\",\",{beforeExpr:!0}),semi:new s(\";\",{beforeExpr:!0}),colon:new s(\":\",{beforeExpr:!0}),doubleColon:new s(\"::\",{beforeExpr:!0}),dot:new s(\".\"),question:new s(\"?\",{beforeExpr:!0}),questionDot:new s(\"?.\"),arrow:new s(\"=>\",{beforeExpr:!0}),template:new s(\"template\"),ellipsis:new s(\"...\",{beforeExpr:!0}),backQuote:new s(\"`\",{startsExpr:!0}),dollarBraceL:new s(\"${\",{beforeExpr:!0,startsExpr:!0}),at:new s(\"@\"),hash:new s(\"#\",{startsExpr:!0}),interpreterDirective:new s(\"#!...\"),eq:new s(\"=\",{beforeExpr:!0,isAssign:!0}),assign:new s(\"_=\",{beforeExpr:!0,isAssign:!0}),incDec:new s(\"++/--\",{prefix:!0,postfix:!0,startsExpr:!0}),bang:new s(\"!\",{beforeExpr:!0,prefix:!0,startsExpr:!0}),tilde:new s(\"~\",{beforeExpr:!0,prefix:!0,startsExpr:!0}),pipeline:a(\"|>\",0),nullishCoalescing:a(\"??\",1),logicalOR:a(\"||\",1),logicalAND:a(\"&&\",2),bitwiseOR:a(\"|\",3),bitwiseXOR:a(\"^\",4),bitwiseAND:a(\"&\",5),equality:a(\"==/!=/===/!==\",6),relational:a(\"</>/<=/>=\",7),bitShift:a(\"<</>>/>>>\",8),plusMin:new s(\"+/-\",{beforeExpr:!0,binop:9,prefix:!0,startsExpr:!0}),modulo:new s(\"%\",{beforeExpr:!0,binop:10,startsExpr:!0}),star:a(\"*\",10),slash:a(\"/\",10),exponent:new s(\"**\",{beforeExpr:!0,binop:11,rightAssociative:!0}),_break:r(\"break\"),_case:r(\"case\",{beforeExpr:!0}),_catch:r(\"catch\"),_continue:r(\"continue\"),_debugger:r(\"debugger\"),_default:r(\"default\",{beforeExpr:!0}),_do:r(\"do\",{isLoop:!0,beforeExpr:!0}),_else:r(\"else\",{beforeExpr:!0}),_finally:r(\"finally\"),_for:r(\"for\",{isLoop:!0}),_function:r(\"function\",{startsExpr:!0}),_if:r(\"if\"),_return:r(\"return\",{beforeExpr:!0}),_switch:r(\"switch\"),_throw:r(\"throw\",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_try:r(\"try\"),_var:r(\"var\"),_const:r(\"const\"),_while:r(\"while\",{isLoop:!0}),_with:r(\"with\"),_new:r(\"new\",{beforeExpr:!0,startsExpr:!0}),_this:r(\"this\",{startsExpr:!0}),_super:r(\"super\",{startsExpr:!0}),_class:r(\"class\",{startsExpr:!0}),_extends:r(\"extends\",{beforeExpr:!0}),_export:r(\"export\"),_import:r(\"import\",{startsExpr:!0}),_null:r(\"null\",{startsExpr:!0}),_true:r(\"true\",{startsExpr:!0}),_false:r(\"false\",{startsExpr:!0}),_in:r(\"in\",{beforeExpr:!0,binop:7}),_instanceof:r(\"instanceof\",{beforeExpr:!0,binop:7}),_typeof:r(\"typeof\",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_void:r(\"void\",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_delete:r(\"delete\",{beforeExpr:!0,prefix:!0,startsExpr:!0})},o=/\\r\\n?|[\\n\\u2028\\u2029]/,h=new RegExp(o.source,\"g\");function p(t){switch(t){case 10:case 13:case 8232:case 8233:return!0;default:return!1}}const c=/(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;function u(t){switch(t){case 9:case 11:case 12:case 32:case 160:case 5760:case 8192:case 8193:case 8194:case 8195:case 8196:case 8197:case 8198:case 8199:case 8200:case 8201:case 8202:case 8239:case 8287:case 12288:case 65279:return!0;default:return!1}}class l{constructor(t,e){this.line=t,this.column=e}}class d{constructor(t,e){this.start=t,this.end=e}}function m(t){return t[t.length-1]}const f=Object.freeze({ArgumentsDisallowedInInitializer:\"'arguments' is not allowed in class field initializer\",AsyncFunctionInSingleStatementContext:\"Async functions can only be declared at the top level or inside a block\",AwaitBindingIdentifier:\"Can not use 'await' as identifier inside an async function\",AwaitExpressionFormalParameter:\"await is not allowed in async function parameters\",AwaitNotInAsyncFunction:\"Can not use keyword 'await' outside an async function\",BadGetterArity:\"getter must not have any formal parameters\",BadSetterArity:\"setter must have exactly one formal parameter\",BadSetterRestParameter:\"setter function argument must not be a rest parameter\",ConstructorClassField:\"Classes may not have a field named 'constructor'\",ConstructorClassPrivateField:\"Classes may not have a private field named '#constructor'\",ConstructorIsAccessor:\"Class constructor may not be an accessor\",ConstructorIsAsync:\"Constructor can't be an async function\",ConstructorIsGenerator:\"Constructor can't be a generator\",DeclarationMissingInitializer:\"%0 require an initialization value\",DecoratorBeforeExport:\"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\",DecoratorConstructor:\"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",DecoratorExportClass:\"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",DecoratorSemicolon:\"Decorators must not be followed by a semicolon\",DeletePrivateField:\"Deleting a private field is not allowed\",DestructureNamedImport:\"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",DuplicateConstructor:\"Duplicate constructor in the same class\",DuplicateDefaultExport:\"Only one default export allowed per module.\",DuplicateExport:\"`%0` has already been exported. Exported identifiers must be unique.\",DuplicateProto:\"Redefinition of __proto__ property\",DuplicateRegExpFlags:\"Duplicate regular expression flag\",ElementAfterRest:\"Rest element must be last element\",EscapedCharNotAnIdentifier:\"Invalid Unicode escape\",ForInOfLoopInitializer:\"%0 loop variable declaration may not have an initializer\",GeneratorInSingleStatementContext:\"Generators can only be declared at the top level or inside a block\",IllegalBreakContinue:\"Unsyntactic %0\",IllegalLanguageModeDirective:\"Illegal 'use strict' directive in function with non-simple parameter list\",IllegalReturn:\"'return' outside of function\",ImportCallArgumentTrailingComma:\"Trailing comma is disallowed inside import(...) arguments\",ImportCallArity:\"import() requires exactly one argument\",ImportCallArityLtOne:\"Dynamic imports require a parameter: import('a.js')\",ImportCallNotNewExpression:\"Cannot use new with import(...)\",ImportCallSpreadArgument:\"... is not allowed in import()\",ImportMetaOutsideModule:\"import.meta may appear only with 'sourceType: \\\"module\\\"'\",ImportOutsideModule:\"'import' and 'export' may appear only with 'sourceType: \\\"module\\\"'\",InvalidCodePoint:\"Code point out of bounds\",InvalidDigit:\"Expected number in radix %0\",InvalidEscapeSequence:\"Bad character escape sequence\",InvalidEscapeSequenceTemplate:\"Invalid escape sequence in template\",InvalidEscapedReservedWord:\"Escape sequence in keyword %0\",InvalidIdentifier:\"Invalid identifier %0\",InvalidLhs:\"Invalid left-hand side in %0\",InvalidLhsBinding:\"Binding invalid left-hand side in %0\",InvalidNumber:\"Invalid number\",InvalidOrUnexpectedToken:\"Unexpected character '%0'\",InvalidParenthesizedAssignment:\"Invalid parenthesized assignment pattern\",InvalidPrivateFieldResolution:\"Private name #%0 is not defined\",InvalidPropertyBindingPattern:\"Binding member expression\",InvalidRestAssignmentPattern:\"Invalid rest operator's argument\",LabelRedeclaration:\"Label '%0' is already declared\",LetInLexicalBinding:\"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",MalformedRegExpFlags:\"Invalid regular expression flag\",MissingClassName:\"A class name is required\",MissingEqInAssignment:\"Only '=' operator can be used for specifying default value.\",MissingUnicodeEscape:\"Expecting Unicode escape sequence \\\\uXXXX\",MixingCoalesceWithLogical:\"Nullish coalescing operator(??) requires parens when mixing with logical operators\",ModuleExportUndefined:\"Export '%0' is not defined\",MultipleDefaultsInSwitch:\"Multiple default clauses\",NewlineAfterThrow:\"Illegal newline after throw\",NoCatchOrFinally:\"Missing catch or finally clause\",NumberIdentifier:\"Identifier directly after number\",NumericSeparatorInEscapeSequence:\"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",ObsoleteAwaitStar:\"await* has been removed from the async functions proposal. Use Promise.all() instead.\",OptionalChainingNoNew:\"constructors in/after an Optional Chain are not allowed\",OptionalChainingNoTemplate:\"Tagged Template Literals are not allowed in optionalChain\",ParamDupe:\"Argument name clash\",PatternHasAccessor:\"Object pattern can't contain getter or setter\",PatternHasMethod:\"Object pattern can't contain methods\",PipelineBodyNoArrow:'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized',PipelineBodySequenceExpression:\"Pipeline body may not be a comma-separated sequence expression\",PipelineHeadSequenceExpression:\"Pipeline head should not be a comma-separated sequence expression\",PipelineTopicUnused:\"Pipeline is in topic style but does not use topic reference\",PrimaryTopicNotAllowed:\"Topic reference was used in a lexical context without topic binding\",PrimaryTopicRequiresSmartPipeline:\"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",PrivateNameRedeclaration:\"Duplicate private name #%0\",RecordExpressionBarIncorrectEndSyntaxType:\"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",RecordExpressionBarIncorrectStartSyntaxType:\"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",RecordExpressionHashIncorrectStartSyntaxType:\"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",RestTrailingComma:\"Unexpected trailing comma after rest element\",SloppyFunction:\"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\",StaticPrototype:\"Classes may not have static property named prototype\",StrictDelete:\"Deleting local variable in strict mode\",StrictEvalArguments:\"Assigning to '%0' in strict mode\",StrictEvalArgumentsBinding:\"Binding '%0' in strict mode\",StrictFunction:\"In strict mode code, functions can only be declared at top level or inside a block\",StrictOctalLiteral:\"Legacy octal literals are not allowed in strict mode\",StrictWith:\"'with' in strict mode\",SuperNotAllowed:\"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",SuperPrivateField:\"Private fields can't be accessed on super\",TrailingDecorator:\"Decorators must be attached to a class element\",TupleExpressionBarIncorrectEndSyntaxType:\"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",TupleExpressionBarIncorrectStartSyntaxType:\"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",TupleExpressionHashIncorrectStartSyntaxType:\"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",UnexpectedArgumentPlaceholder:\"Unexpected argument placeholder\",UnexpectedAwaitAfterPipelineBody:'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal',UnexpectedDigitAfterHash:\"Unexpected digit after hash token\",UnexpectedImportExport:\"'import' and 'export' may only appear at the top level\",UnexpectedKeyword:\"Unexpected keyword '%0'\",UnexpectedLeadingDecorator:\"Leading decorators must be attached to a class declaration\",UnexpectedLexicalDeclaration:\"Lexical declaration cannot appear in a single-statement context\",UnexpectedNewTarget:\"new.target can only be used in functions\",UnexpectedNumericSeparator:\"A numeric separator is only allowed between two digits\",UnexpectedPrivateField:\"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",UnexpectedReservedWord:\"Unexpected reserved word '%0'\",UnexpectedSuper:\"super is only allowed in object methods and classes\",UnexpectedToken:\"Unexpected token '%'\",UnexpectedTokenUnaryExponentiation:\"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",UnsupportedBind:\"Binding should be performed on object property.\",UnsupportedDecoratorExport:\"A decorated export must export a class declaration\",UnsupportedDefaultExport:\"Only expressions, functions or classes are allowed as the `default` export.\",UnsupportedImport:\"import can only be used in import() or import.meta\",UnsupportedMetaProperty:\"The only valid meta property for %0 is %0.%1\",UnsupportedParameterDecorator:\"Decorators cannot be used to decorate parameters\",UnsupportedPropertyDecorator:\"Decorators cannot be used to decorate object literal properties\",UnsupportedSuper:\"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\",UnterminatedComment:\"Unterminated comment\",UnterminatedRegExp:\"Unterminated regular expression\",UnterminatedString:\"Unterminated string constant\",UnterminatedTemplate:\"Unterminated template\",VarRedeclaration:\"Identifier '%0' has already been declared\",YieldBindingIdentifier:\"Can not use 'yield' as identifier inside a generator\",YieldInParameter:\"yield is not allowed in generator parameters\",ZeroDigitNumericSeparator:\"Numeric separator can not be used after leading 0\"});function D(t){return null!=t&&\"Property\"===t.type&&\"init\"===t.kind&&!1===t.method}class y{constructor(t,e,s,i){this.token=t,this.isExpr=!!e,this.preserveSpace=!!s,this.override=i}}const x={braceStatement:new y(\"{\",!1),braceExpression:new y(\"{\",!0),templateQuasi:new y(\"${\",!1),parenStatement:new y(\"(\",!1),parenExpression:new y(\"(\",!0),template:new y(\"`\",!0,!0,t=>t.readTmplToken()),functionExpression:new y(\"function\",!0),functionStatement:new y(\"function\",!1)};n.parenR.updateContext=n.braceR.updateContext=function(){if(1===this.state.context.length)return void(this.state.exprAllowed=!0);let t=this.state.context.pop();t===x.braceStatement&&\"function\"===this.curContext().token&&(t=this.state.context.pop()),this.state.exprAllowed=!t.isExpr},n.name.updateContext=function(t){let e=!1;t!==n.dot&&(\"of\"===this.state.value&&!this.state.exprAllowed||\"yield\"===this.state.value&&this.prodParam.hasYield)&&(e=!0),this.state.exprAllowed=e,this.state.isIterator&&(this.state.isIterator=!1)},n.braceL.updateContext=function(t){this.state.context.push(this.braceIsBlock(t)?x.braceStatement:x.braceExpression),this.state.exprAllowed=!0},n.dollarBraceL.updateContext=function(){this.state.context.push(x.templateQuasi),this.state.exprAllowed=!0},n.parenL.updateContext=function(t){const e=t===n._if||t===n._for||t===n._with||t===n._while;this.state.context.push(e?x.parenStatement:x.parenExpression),this.state.exprAllowed=!0},n.incDec.updateContext=function(){},n._function.updateContext=n._class.updateContext=function(t){!t.beforeExpr||t===n.semi||t===n._else||t===n._return&&o.test(this.input.slice(this.state.lastTokEnd,this.state.start))||(t===n.colon||t===n.braceL)&&this.curContext()===x.b_stat?this.state.context.push(x.functionStatement):this.state.context.push(x.functionExpression),this.state.exprAllowed=!1},n.backQuote.updateContext=function(){this.curContext()===x.template?this.state.context.pop():this.state.context.push(x.template),this.state.exprAllowed=!1};let g=\"ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࢠ-ࢴࢶ-ࣇऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-鿼ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞿꟂ-ꟊꟵ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ\",P=\"‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࣓-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿᫀᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷹᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿\";const E=new RegExp(\"[\"+g+\"]\"),C=new RegExp(\"[\"+g+P+\"]\");g=P=null;const b=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938],T=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];function A(t,e){let s=65536;for(let i=0,r=e.length;i<r;i+=2){if(s+=e[i],s>t)return!1;if(s+=e[i+1],s>=t)return!0}return!1}function w(t){return t<65?36===t:t<=90||(t<97?95===t:t<=122||(t<=65535?t>=170&&E.test(String.fromCharCode(t)):A(t,b)))}function S(t){return t<48?36===t:t<58||!(t<65)&&(t<=90||(t<97?95===t:t<=122||(t<=65535?t>=170&&C.test(String.fromCharCode(t)):A(t,b)||A(t,T))))}const N=[\"implements\",\"interface\",\"let\",\"package\",\"private\",\"protected\",\"public\",\"static\",\"yield\"],F=[\"eval\",\"arguments\"],k=new Set([\"break\",\"case\",\"catch\",\"continue\",\"debugger\",\"default\",\"do\",\"else\",\"finally\",\"for\",\"function\",\"if\",\"return\",\"switch\",\"throw\",\"try\",\"var\",\"const\",\"while\",\"with\",\"new\",\"this\",\"super\",\"class\",\"extends\",\"export\",\"import\",\"null\",\"true\",\"false\",\"in\",\"instanceof\",\"typeof\",\"void\",\"delete\"]),I=new Set(N),v=new Set(F);function L(t,e){return e&&\"await\"===t||\"enum\"===t}function B(t,e){return L(t,e)||I.has(t)}function M(t){return v.has(t)}function O(t,e){return B(t,e)||M(t)}const R=/^in(stanceof)?$/;const _=new Set([\"_\",\"any\",\"bool\",\"boolean\",\"empty\",\"extends\",\"false\",\"interface\",\"mixed\",\"null\",\"number\",\"static\",\"string\",\"true\",\"typeof\",\"void\"]),j=Object.freeze({AmbiguousConditionalArrow:\"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",AmbiguousDeclareModuleKind:\"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module\",AssignReservedType:\"Cannot overwrite reserved type %0\",DeclareClassElement:\"The `declare` modifier can only appear on class fields.\",DeclareClassFieldInitializer:\"Initializers are not allowed in fields with the `declare` modifier.\",DuplicateDeclareModuleExports:\"Duplicate `declare module.exports` statement\",EnumBooleanMemberNotInitialized:\"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",EnumDuplicateMemberName:\"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",EnumInconsistentMemberValues:\"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",EnumInvalidExplicitType:\"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",EnumInvalidExplicitTypeUnknownSupplied:\"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",EnumInvalidMemberInitializerPrimaryType:\"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",EnumInvalidMemberInitializerSymbolType:\"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",EnumInvalidMemberInitializerUnknownType:\"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",EnumInvalidMemberName:\"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",EnumNumberMemberNotInitialized:\"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",EnumStringMemberInconsistentlyInitailized:\"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",ImportTypeShorthandOnlyInPureImport:\"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements\",InexactInsideExact:\"Explicit inexact syntax cannot appear inside an explicit exact object type\",InexactInsideNonObject:\"Explicit inexact syntax cannot appear in class or interface definitions\",InexactVariance:\"Explicit inexact syntax cannot have variance\",InvalidNonTypeImportInDeclareModule:\"Imports within a `declare module` body must always be `import type` or `import typeof`\",MissingTypeParamDefault:\"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",NestedDeclareModule:\"`declare module` cannot be used inside another `declare module`\",NestedFlowComment:\"Cannot have a flow comment inside another flow comment\",OptionalBindingPattern:\"A binding pattern parameter cannot be optional in an implementation signature.\",SpreadVariance:\"Spread properties cannot have variance\",TypeBeforeInitializer:\"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",TypeCastInPattern:\"The type cast expression is expected to be wrapped with parenthesis\",UnexpectedExplicitInexactInObject:\"Explicit inexact syntax must appear at the end of an inexact object\",UnexpectedReservedType:\"Unexpected reserved type %0\",UnexpectedReservedUnderscore:\"`_` is only allowed as a type argument to call or new\",UnexpectedSpaceBetweenModuloChecks:\"Spaces between `%` and `checks` are not allowed here.\",UnexpectedSpreadType:\"Spread operator cannot appear in class or interface definitions\",UnexpectedSubtractionOperand:'Unexpected token, expected \"number\" or \"bigint\"',UnexpectedTokenAfterTypeParameter:\"Expected an arrow function after this type parameter declaration\",UnsupportedDeclareExportKind:\"`declare export %0` is not supported. Use `%1` instead\",UnsupportedStatementInDeclareModule:\"Only declares and type imports are allowed inside declare module\",UnterminatedFlowComment:\"Unterminated flow-comment\"});function U(t){return\"type\"===t.importKind||\"typeof\"===t.importKind}function q(t){return(t.type===n.name||!!t.type.keyword)&&\"from\"!==t.value}const V={const:\"declare export var\",let:\"declare export var\",type:\"export type\",interface:\"export interface\"};const z=/\\*?\\s*@((?:no)?flow)\\b/;const H={quot:'\"',amp:\"&\",apos:\"'\",lt:\"<\",gt:\">\",nbsp:\" \",iexcl:\"¡\",cent:\"¢\",pound:\"£\",curren:\"¤\",yen:\"¥\",brvbar:\"¦\",sect:\"§\",uml:\"¨\",copy:\"©\",ordf:\"ª\",laquo:\"«\",not:\"¬\",shy:\"­\",reg:\"®\",macr:\"¯\",deg:\"°\",plusmn:\"±\",sup2:\"²\",sup3:\"³\",acute:\"´\",micro:\"µ\",para:\"¶\",middot:\"·\",cedil:\"¸\",sup1:\"¹\",ordm:\"º\",raquo:\"»\",frac14:\"¼\",frac12:\"½\",frac34:\"¾\",iquest:\"¿\",Agrave:\"À\",Aacute:\"Á\",Acirc:\"Â\",Atilde:\"Ã\",Auml:\"Ä\",Aring:\"Å\",AElig:\"Æ\",Ccedil:\"Ç\",Egrave:\"È\",Eacute:\"É\",Ecirc:\"Ê\",Euml:\"Ë\",Igrave:\"Ì\",Iacute:\"Í\",Icirc:\"Î\",Iuml:\"Ï\",ETH:\"Ð\",Ntilde:\"Ñ\",Ograve:\"Ò\",Oacute:\"Ó\",Ocirc:\"Ô\",Otilde:\"Õ\",Ouml:\"Ö\",times:\"×\",Oslash:\"Ø\",Ugrave:\"Ù\",Uacute:\"Ú\",Ucirc:\"Û\",Uuml:\"Ü\",Yacute:\"Ý\",THORN:\"Þ\",szlig:\"ß\",agrave:\"à\",aacute:\"á\",acirc:\"â\",atilde:\"ã\",auml:\"ä\",aring:\"å\",aelig:\"æ\",ccedil:\"ç\",egrave:\"è\",eacute:\"é\",ecirc:\"ê\",euml:\"ë\",igrave:\"ì\",iacute:\"í\",icirc:\"î\",iuml:\"ï\",eth:\"ð\",ntilde:\"ñ\",ograve:\"ò\",oacute:\"ó\",ocirc:\"ô\",otilde:\"õ\",ouml:\"ö\",divide:\"÷\",oslash:\"ø\",ugrave:\"ù\",uacute:\"ú\",ucirc:\"û\",uuml:\"ü\",yacute:\"ý\",thorn:\"þ\",yuml:\"ÿ\",OElig:\"Œ\",oelig:\"œ\",Scaron:\"Š\",scaron:\"š\",Yuml:\"Ÿ\",fnof:\"ƒ\",circ:\"ˆ\",tilde:\"˜\",Alpha:\"Α\",Beta:\"Β\",Gamma:\"Γ\",Delta:\"Δ\",Epsilon:\"Ε\",Zeta:\"Ζ\",Eta:\"Η\",Theta:\"Θ\",Iota:\"Ι\",Kappa:\"Κ\",Lambda:\"Λ\",Mu:\"Μ\",Nu:\"Ν\",Xi:\"Ξ\",Omicron:\"Ο\",Pi:\"Π\",Rho:\"Ρ\",Sigma:\"Σ\",Tau:\"Τ\",Upsilon:\"Υ\",Phi:\"Φ\",Chi:\"Χ\",Psi:\"Ψ\",Omega:\"Ω\",alpha:\"α\",beta:\"β\",gamma:\"γ\",delta:\"δ\",epsilon:\"ε\",zeta:\"ζ\",eta:\"η\",theta:\"θ\",iota:\"ι\",kappa:\"κ\",lambda:\"λ\",mu:\"μ\",nu:\"ν\",xi:\"ξ\",omicron:\"ο\",pi:\"π\",rho:\"ρ\",sigmaf:\"ς\",sigma:\"σ\",tau:\"τ\",upsilon:\"υ\",phi:\"φ\",chi:\"χ\",psi:\"ψ\",omega:\"ω\",thetasym:\"ϑ\",upsih:\"ϒ\",piv:\"ϖ\",ensp:\" \",emsp:\" \",thinsp:\" \",zwnj:\"‌\",zwj:\"‍\",lrm:\"‎\",rlm:\"‏\",ndash:\"–\",mdash:\"—\",lsquo:\"‘\",rsquo:\"’\",sbquo:\"‚\",ldquo:\"“\",rdquo:\"”\",bdquo:\"„\",dagger:\"†\",Dagger:\"‡\",bull:\"•\",hellip:\"…\",permil:\"‰\",prime:\"′\",Prime:\"″\",lsaquo:\"‹\",rsaquo:\"›\",oline:\"‾\",frasl:\"⁄\",euro:\"€\",image:\"ℑ\",weierp:\"℘\",real:\"ℜ\",trade:\"™\",alefsym:\"ℵ\",larr:\"←\",uarr:\"↑\",rarr:\"→\",darr:\"↓\",harr:\"↔\",crarr:\"↵\",lArr:\"⇐\",uArr:\"⇑\",rArr:\"⇒\",dArr:\"⇓\",hArr:\"⇔\",forall:\"∀\",part:\"∂\",exist:\"∃\",empty:\"∅\",nabla:\"∇\",isin:\"∈\",notin:\"∉\",ni:\"∋\",prod:\"∏\",sum:\"∑\",minus:\"−\",lowast:\"∗\",radic:\"√\",prop:\"∝\",infin:\"∞\",ang:\"∠\",and:\"∧\",or:\"∨\",cap:\"∩\",cup:\"∪\",int:\"∫\",there4:\"∴\",sim:\"∼\",cong:\"≅\",asymp:\"≈\",ne:\"≠\",equiv:\"≡\",le:\"≤\",ge:\"≥\",sub:\"⊂\",sup:\"⊃\",nsub:\"⊄\",sube:\"⊆\",supe:\"⊇\",oplus:\"⊕\",otimes:\"⊗\",perp:\"⊥\",sdot:\"⋅\",lceil:\"⌈\",rceil:\"⌉\",lfloor:\"⌊\",rfloor:\"⌋\",lang:\"〈\",rang:\"〉\",loz:\"◊\",spades:\"♠\",clubs:\"♣\",hearts:\"♥\",diams:\"♦\"},W=/^[\\da-fA-F]+$/,K=/^\\d+$/,J=Object.freeze({AttributeIsEmpty:\"JSX attributes must only be assigned a non-empty expression\",MissingClosingTagFragment:\"Expected corresponding JSX closing tag for <>\",MissingClosingTagElement:\"Expected corresponding JSX closing tag for <%0>\",UnsupportedJsxValue:\"JSX value should be either an expression or a quoted JSX text\",UnterminatedJsxContent:\"Unterminated JSX contents\",UnwrappedAdjacentJSXElements:\"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"});function X(t){return!!t&&(\"JSXOpeningFragment\"===t.type||\"JSXClosingFragment\"===t.type)}function G(t){if(\"JSXIdentifier\"===t.type)return t.name;if(\"JSXNamespacedName\"===t.type)return t.namespace.name+\":\"+t.name.name;if(\"JSXMemberExpression\"===t.type)return G(t.object)+\".\"+G(t.property);throw new Error(\"Node had unexpected type: \"+t.type)}x.j_oTag=new y(\"<tag\",!1),x.j_cTag=new y(\"</tag\",!1),x.j_expr=new y(\"<tag>...</tag>\",!0,!0),n.jsxName=new s(\"jsxName\"),n.jsxText=new s(\"jsxText\",{beforeExpr:!0}),n.jsxTagStart=new s(\"jsxTagStart\",{startsExpr:!0}),n.jsxTagEnd=new s(\"jsxTagEnd\"),n.jsxTagStart.updateContext=function(){this.state.context.push(x.j_expr),this.state.context.push(x.j_oTag),this.state.exprAllowed=!1},n.jsxTagEnd.updateContext=function(t){const e=this.state.context.pop();e===x.j_oTag&&t===n.slash||e===x.j_cTag?(this.state.context.pop(),this.state.exprAllowed=this.curContext()===x.j_expr):this.state.exprAllowed=!0};class Q{constructor(t){this.var=[],this.lexical=[],this.functions=[],this.flags=t}}class Y{constructor(t,e){this.scopeStack=[],this.undefinedExports=new Map,this.undefinedPrivateNames=new Map,this.raise=t,this.inModule=e}get inFunction(){return(2&this.currentVarScope().flags)>0}get allowSuper(){return(16&this.currentThisScope().flags)>0}get allowDirectSuper(){return(32&this.currentThisScope().flags)>0}get inClass(){return(64&this.currentThisScope().flags)>0}get inNonArrowFunction(){return(2&this.currentThisScope().flags)>0}get treatFunctionsAsVar(){return this.treatFunctionsAsVarInScope(this.currentScope())}createScope(t){return new Q(t)}enter(t){this.scopeStack.push(this.createScope(t))}exit(){this.scopeStack.pop()}treatFunctionsAsVarInScope(t){return!!(2&t.flags||!this.inModule&&1&t.flags)}declareName(t,e,s){let i=this.currentScope();if(8&e||16&e)this.checkRedeclarationInScope(i,t,e,s),16&e?i.functions.push(t):i.lexical.push(t),8&e&&this.maybeExportDefined(i,t);else if(4&e)for(let r=this.scopeStack.length-1;r>=0&&(i=this.scopeStack[r],this.checkRedeclarationInScope(i,t,e,s),i.var.push(t),this.maybeExportDefined(i,t),!(131&i.flags));--r);this.inModule&&1&i.flags&&this.undefinedExports.delete(t)}maybeExportDefined(t,e){this.inModule&&1&t.flags&&this.undefinedExports.delete(e)}checkRedeclarationInScope(t,e,s,i){this.isRedeclaredInScope(t,e,s)&&this.raise(i,f.VarRedeclaration,e)}isRedeclaredInScope(t,e,s){return!!(1&s)&&(8&s?t.lexical.indexOf(e)>-1||t.functions.indexOf(e)>-1||t.var.indexOf(e)>-1:16&s?t.lexical.indexOf(e)>-1||!this.treatFunctionsAsVarInScope(t)&&t.var.indexOf(e)>-1:t.lexical.indexOf(e)>-1&&!(8&t.flags&&t.lexical[0]===e)||!this.treatFunctionsAsVarInScope(t)&&t.functions.indexOf(e)>-1)}checkLocalExport(t){-1===this.scopeStack[0].lexical.indexOf(t.name)&&-1===this.scopeStack[0].var.indexOf(t.name)&&-1===this.scopeStack[0].functions.indexOf(t.name)&&this.undefinedExports.set(t.name,t.start)}currentScope(){return this.scopeStack[this.scopeStack.length-1]}currentVarScope(){for(let t=this.scopeStack.length-1;;t--){const e=this.scopeStack[t];if(131&e.flags)return e}}currentThisScope(){for(let t=this.scopeStack.length-1;;t--){const e=this.scopeStack[t];if((131&e.flags||64&e.flags)&&!(4&e.flags))return e}}}class $ extends Q{constructor(...t){super(...t),this.types=[],this.enums=[],this.constEnums=[],this.classes=[],this.exportOnlyBindings=[]}}class Z extends Y{createScope(t){return new $(t)}declareName(t,e,s){const i=this.currentScope();if(1024&e)return this.maybeExportDefined(i,t),void i.exportOnlyBindings.push(t);super.declareName(...arguments),2&e&&(1&e||(this.checkRedeclarationInScope(i,t,e,s),this.maybeExportDefined(i,t)),i.types.push(t)),256&e&&i.enums.push(t),512&e&&i.constEnums.push(t),128&e&&i.classes.push(t)}isRedeclaredInScope(t,e,s){if(t.enums.indexOf(e)>-1){if(256&s){return!!(512&s)!==t.constEnums.indexOf(e)>-1}return!0}return 128&s&&t.classes.indexOf(e)>-1?t.lexical.indexOf(e)>-1&&!!(1&s):!!(2&s&&t.types.indexOf(e)>-1)||super.isRedeclaredInScope(...arguments)}checkLocalExport(t){-1===this.scopeStack[0].types.indexOf(t.name)&&-1===this.scopeStack[0].exportOnlyBindings.indexOf(t.name)&&super.checkLocalExport(t)}}class tt{constructor(){this.stacks=[]}enter(t){this.stacks.push(t)}exit(){this.stacks.pop()}currentFlags(){return this.stacks[this.stacks.length-1]}get hasAwait(){return(2&this.currentFlags())>0}get hasYield(){return(1&this.currentFlags())>0}get hasReturn(){return(4&this.currentFlags())>0}}function et(t,e){return(t?2:0)|(e?1:0)}function st(t){if(null==t)throw new Error(\"Unexpected \".concat(t,\" value.\"));return t}function it(t){if(!t)throw new Error(\"Assert fail\")}const rt=Object.freeze({ClassMethodHasDeclare:\"Class methods cannot have the 'declare' modifier\",ClassMethodHasReadonly:\"Class methods cannot have the 'readonly' modifier\",DeclareClassFieldHasInitializer:\"'declare' class fields cannot have an initializer\",DuplicateModifier:\"Duplicate modifier: '%0'\",EmptyHeritageClauseType:\"'%0' list cannot be empty.\",IndexSignatureHasAbstract:\"Index signatures cannot have the 'abstract' modifier\",IndexSignatureHasAccessibility:\"Index signatures cannot have an accessibility modifier ('%0')\",IndexSignatureHasStatic:\"Index signatures cannot have the 'static' modifier\",OptionalTypeBeforeRequired:\"A required element cannot follow an optional element.\",PatternIsOptional:\"A binding pattern parameter cannot be optional in an implementation signature.\",PrivateElementHasAbstract:\"Private elements cannot have the 'abstract' modifier.\",PrivateElementHasAccessibility:\"Private elements cannot have an accessibility modifier ('%0')\",TemplateTypeHasSubstitution:\"Template literal types cannot have any substitution\",TypeAnnotationAfterAssign:\"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",UnexpectedReadonly:\"'readonly' type modifier is only permitted on array and tuple literal types.\",UnexpectedTypeAnnotation:\"Did not expect a type annotation here.\",UnexpectedTypeCastInParameter:\"Unexpected type cast in parameter position.\",UnsupportedImportTypeArgument:\"Argument in a type import must be a string literal\",UnsupportedParameterPropertyKind:\"A parameter property may not be declared using a binding pattern.\",UnsupportedSignatureParameterKind:\"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0\"});n.placeholder=new s(\"%%\",{startsExpr:!0});function at(t,e){return t.some(t=>Array.isArray(t)?t[0]===e:t===e)}function nt(t,e,s){const i=t.find(t=>Array.isArray(t)?t[0]===e:t===e);return i&&Array.isArray(i)?i[1][s]:null}const ot=[\"minimal\",\"smart\",\"fsharp\"],ht=[\"hash\",\"bar\"];const pt={estree:t=>class extends t{estreeParseRegExpLiteral({pattern:t,flags:e}){let s=null;try{s=new RegExp(t,e)}catch(t){}const i=this.estreeParseLiteral(s);return i.regex={pattern:t,flags:e},i}estreeParseBigIntLiteral(t){const e=\"undefined\"!=typeof BigInt?BigInt(t):null,s=this.estreeParseLiteral(e);return s.bigint=String(s.value||t),s}estreeParseLiteral(t){return this.parseLiteral(t,\"Literal\")}directiveToStmt(t){const e=t.value,s=this.startNodeAt(t.start,t.loc.start),i=this.startNodeAt(e.start,e.loc.start);return i.value=e.value,i.raw=e.extra.raw,s.expression=this.finishNodeAt(i,\"Literal\",e.end,e.loc.end),s.directive=e.extra.raw.slice(1,-1),this.finishNodeAt(s,\"ExpressionStatement\",t.end,t.loc.end)}initFunction(t,e){super.initFunction(t,e),t.expression=!1}checkDeclaration(t){D(t)?this.checkDeclaration(t.value):super.checkDeclaration(t)}checkGetterSetterParams(t){const e=t,s=\"get\"===e.kind?0:1,i=e.start;e.value.params.length!==s?\"get\"===t.kind?this.raise(i,f.BadGetterArity):this.raise(i,f.BadSetterArity):\"set\"===e.kind&&\"RestElement\"===e.value.params[0].type&&this.raise(i,f.BadSetterRestParameter)}checkLVal(t,e=64,s,i,r){switch(t.type){case\"ObjectPattern\":t.properties.forEach(t=>{this.checkLVal(\"Property\"===t.type?t.value:t,e,s,\"object destructuring pattern\",r)});break;default:super.checkLVal(t,e,s,i,r)}}checkDuplicatedProto(t,e,s){if(\"SpreadElement\"===t.type||t.computed||t.method||t.shorthand)return;const i=t.key;\"__proto__\"===(\"Identifier\"===i.type?i.name:String(i.value))&&\"init\"===t.kind&&(e.used&&(s&&-1===s.doubleProto?s.doubleProto=i.start:this.raise(i.start,f.DuplicateProto)),e.used=!0)}isValidDirective(t){return!(\"ExpressionStatement\"!==t.type||\"Literal\"!==t.expression.type||\"string\"!=typeof t.expression.value||t.expression.extra&&t.expression.extra.parenthesized)}stmtToDirective(t){const e=super.stmtToDirective(t),s=t.expression.value;return e.value.value=s,e}parseBlockBody(t,e,s,i){super.parseBlockBody(t,e,s,i);const r=t.directives.map(t=>this.directiveToStmt(t));t.body=r.concat(t.body),delete t.directives}pushClassMethod(t,e,s,i,r,a){this.parseMethod(e,s,i,r,a,\"ClassMethod\",!0),e.typeParameters&&(e.value.typeParameters=e.typeParameters,delete e.typeParameters),t.body.push(e)}parseExprAtom(t){switch(this.state.type){case n.num:case n.string:return this.estreeParseLiteral(this.state.value);case n.regexp:return this.estreeParseRegExpLiteral(this.state.value);case n.bigint:return this.estreeParseBigIntLiteral(this.state.value);case n._null:return this.estreeParseLiteral(null);case n._true:return this.estreeParseLiteral(!0);case n._false:return this.estreeParseLiteral(!1);default:return super.parseExprAtom(t)}}parseLiteral(t,e,s,i){const r=super.parseLiteral(t,e,s,i);return r.raw=r.extra.raw,delete r.extra,r}parseFunctionBody(t,e,s=!1){super.parseFunctionBody(t,e,s),t.expression=\"BlockStatement\"!==t.body.type}parseMethod(t,e,s,i,r,a,n=!1){let o=this.startNode();return o.kind=t.kind,o=super.parseMethod(o,e,s,i,r,a,n),o.type=\"FunctionExpression\",delete o.kind,t.value=o,a=\"ClassMethod\"===a?\"MethodDefinition\":a,this.finishNode(t,a)}parseObjectMethod(t,e,s,i,r){const a=super.parseObjectMethod(t,e,s,i,r);return a&&(a.type=\"Property\",\"method\"===a.kind&&(a.kind=\"init\"),a.shorthand=!1),a}parseObjectProperty(t,e,s,i,r){const a=super.parseObjectProperty(t,e,s,i,r);return a&&(a.kind=\"init\",a.type=\"Property\"),a}toAssignable(t){return D(t)?(this.toAssignable(t.value),t):super.toAssignable(t)}toAssignableObjectExpressionProp(t,e){if(\"get\"===t.kind||\"set\"===t.kind)throw this.raise(t.key.start,f.PatternHasAccessor);if(t.method)throw this.raise(t.key.start,f.PatternHasMethod);super.toAssignableObjectExpressionProp(t,e)}finishCallExpression(t,e){return super.finishCallExpression(t,e),\"Import\"===t.callee.type&&(t.type=\"ImportExpression\",t.source=t.arguments[0],delete t.arguments,delete t.callee),t}toReferencedListDeep(t,e){t&&super.toReferencedListDeep(t,e)}parseExport(t){switch(super.parseExport(t),t.type){case\"ExportAllDeclaration\":t.exported=null;break;case\"ExportNamedDeclaration\":1===t.specifiers.length&&\"ExportNamespaceSpecifier\"===t.specifiers[0].type&&(t.type=\"ExportAllDeclaration\",t.exported=t.specifiers[0].exported,delete t.specifiers)}return t}},jsx:t=>class extends t{jsxReadToken(){let t=\"\",e=this.state.pos;for(;;){if(this.state.pos>=this.length)throw this.raise(this.state.start,J.UnterminatedJsxContent);const s=this.input.charCodeAt(this.state.pos);switch(s){case 60:case 123:return this.state.pos===this.state.start?60===s&&this.state.exprAllowed?(++this.state.pos,this.finishToken(n.jsxTagStart)):super.getTokenFromCode(s):(t+=this.input.slice(e,this.state.pos),this.finishToken(n.jsxText,t));case 38:t+=this.input.slice(e,this.state.pos),t+=this.jsxReadEntity(),e=this.state.pos;break;default:p(s)?(t+=this.input.slice(e,this.state.pos),t+=this.jsxReadNewLine(!0),e=this.state.pos):++this.state.pos}}}jsxReadNewLine(t){const e=this.input.charCodeAt(this.state.pos);let s;return++this.state.pos,13===e&&10===this.input.charCodeAt(this.state.pos)?(++this.state.pos,s=t?\"\\n\":\"\\r\\n\"):s=String.fromCharCode(e),++this.state.curLine,this.state.lineStart=this.state.pos,s}jsxReadString(t){let e=\"\",s=++this.state.pos;for(;;){if(this.state.pos>=this.length)throw this.raise(this.state.start,f.UnterminatedString);const i=this.input.charCodeAt(this.state.pos);if(i===t)break;38===i?(e+=this.input.slice(s,this.state.pos),e+=this.jsxReadEntity(),s=this.state.pos):p(i)?(e+=this.input.slice(s,this.state.pos),e+=this.jsxReadNewLine(!1),s=this.state.pos):++this.state.pos}return e+=this.input.slice(s,this.state.pos++),this.finishToken(n.string,e)}jsxReadEntity(){let t,e=\"\",s=0,i=this.input[this.state.pos];const r=++this.state.pos;for(;this.state.pos<this.length&&s++<10;){if(i=this.input[this.state.pos++],\";\"===i){\"#\"===e[0]?\"x\"===e[1]?(e=e.substr(2),W.test(e)&&(t=String.fromCodePoint(parseInt(e,16)))):(e=e.substr(1),K.test(e)&&(t=String.fromCodePoint(parseInt(e,10)))):t=H[e];break}e+=i}return t||(this.state.pos=r,\"&\")}jsxReadWord(){let t;const e=this.state.pos;do{t=this.input.charCodeAt(++this.state.pos)}while(S(t)||45===t);return this.finishToken(n.jsxName,this.input.slice(e,this.state.pos))}jsxParseIdentifier(){const t=this.startNode();return this.match(n.jsxName)?t.name=this.state.value:this.state.type.keyword?t.name=this.state.type.keyword:this.unexpected(),this.next(),this.finishNode(t,\"JSXIdentifier\")}jsxParseNamespacedName(){const t=this.state.start,e=this.state.startLoc,s=this.jsxParseIdentifier();if(!this.eat(n.colon))return s;const i=this.startNodeAt(t,e);return i.namespace=s,i.name=this.jsxParseIdentifier(),this.finishNode(i,\"JSXNamespacedName\")}jsxParseElementName(){const t=this.state.start,e=this.state.startLoc;let s=this.jsxParseNamespacedName();if(\"JSXNamespacedName\"===s.type)return s;for(;this.eat(n.dot);){const i=this.startNodeAt(t,e);i.object=s,i.property=this.jsxParseIdentifier(),s=this.finishNode(i,\"JSXMemberExpression\")}return s}jsxParseAttributeValue(){let t;switch(this.state.type){case n.braceL:return t=this.startNode(),this.next(),t=this.jsxParseExpressionContainer(t),\"JSXEmptyExpression\"===t.expression.type&&this.raise(t.start,J.AttributeIsEmpty),t;case n.jsxTagStart:case n.string:return this.parseExprAtom();default:throw this.raise(this.state.start,J.UnsupportedJsxValue)}}jsxParseEmptyExpression(){const t=this.startNodeAt(this.state.lastTokEnd,this.state.lastTokEndLoc);return this.finishNodeAt(t,\"JSXEmptyExpression\",this.state.start,this.state.startLoc)}jsxParseSpreadChild(t){return this.next(),t.expression=this.parseExpression(),this.expect(n.braceR),this.finishNode(t,\"JSXSpreadChild\")}jsxParseExpressionContainer(t){return this.match(n.braceR)?t.expression=this.jsxParseEmptyExpression():t.expression=this.parseExpression(),this.expect(n.braceR),this.finishNode(t,\"JSXExpressionContainer\")}jsxParseAttribute(){const t=this.startNode();return this.eat(n.braceL)?(this.expect(n.ellipsis),t.argument=this.parseMaybeAssign(),this.expect(n.braceR),this.finishNode(t,\"JSXSpreadAttribute\")):(t.name=this.jsxParseNamespacedName(),t.value=this.eat(n.eq)?this.jsxParseAttributeValue():null,this.finishNode(t,\"JSXAttribute\"))}jsxParseOpeningElementAt(t,e){const s=this.startNodeAt(t,e);return this.match(n.jsxTagEnd)?(this.expect(n.jsxTagEnd),this.finishNode(s,\"JSXOpeningFragment\")):(s.name=this.jsxParseElementName(),this.jsxParseOpeningElementAfterName(s))}jsxParseOpeningElementAfterName(t){const e=[];for(;!this.match(n.slash)&&!this.match(n.jsxTagEnd);)e.push(this.jsxParseAttribute());return t.attributes=e,t.selfClosing=this.eat(n.slash),this.expect(n.jsxTagEnd),this.finishNode(t,\"JSXOpeningElement\")}jsxParseClosingElementAt(t,e){const s=this.startNodeAt(t,e);return this.match(n.jsxTagEnd)?(this.expect(n.jsxTagEnd),this.finishNode(s,\"JSXClosingFragment\")):(s.name=this.jsxParseElementName(),this.expect(n.jsxTagEnd),this.finishNode(s,\"JSXClosingElement\"))}jsxParseElementAt(t,e){const s=this.startNodeAt(t,e),i=[],r=this.jsxParseOpeningElementAt(t,e);let a=null;if(!r.selfClosing){t:for(;;)switch(this.state.type){case n.jsxTagStart:if(t=this.state.start,e=this.state.startLoc,this.next(),this.eat(n.slash)){a=this.jsxParseClosingElementAt(t,e);break t}i.push(this.jsxParseElementAt(t,e));break;case n.jsxText:i.push(this.parseExprAtom());break;case n.braceL:{const t=this.startNode();this.next(),this.match(n.ellipsis)?i.push(this.jsxParseSpreadChild(t)):i.push(this.jsxParseExpressionContainer(t));break}default:throw this.unexpected()}X(r)&&!X(a)?this.raise(a.start,J.MissingClosingTagFragment):!X(r)&&X(a)?this.raise(a.start,J.MissingClosingTagElement,G(r.name)):X(r)||X(a)||G(a.name)!==G(r.name)&&this.raise(a.start,J.MissingClosingTagElement,G(r.name))}if(X(r)?(s.openingFragment=r,s.closingFragment=a):(s.openingElement=r,s.closingElement=a),s.children=i,this.isRelational(\"<\"))throw this.raise(this.state.start,J.UnwrappedAdjacentJSXElements);return X(r)?this.finishNode(s,\"JSXFragment\"):this.finishNode(s,\"JSXElement\")}jsxParseElement(){const t=this.state.start,e=this.state.startLoc;return this.next(),this.jsxParseElementAt(t,e)}parseExprAtom(t){return this.match(n.jsxText)?this.parseLiteral(this.state.value,\"JSXText\"):this.match(n.jsxTagStart)?this.jsxParseElement():this.isRelational(\"<\")&&33!==this.input.charCodeAt(this.state.pos)?(this.finishToken(n.jsxTagStart),this.jsxParseElement()):super.parseExprAtom(t)}getTokenFromCode(t){if(this.state.inPropertyName)return super.getTokenFromCode(t);const e=this.curContext();if(e===x.j_expr)return this.jsxReadToken();if(e===x.j_oTag||e===x.j_cTag){if(w(t))return this.jsxReadWord();if(62===t)return++this.state.pos,this.finishToken(n.jsxTagEnd);if((34===t||39===t)&&e===x.j_oTag)return this.jsxReadString(t)}return 60===t&&this.state.exprAllowed&&33!==this.input.charCodeAt(this.state.pos+1)?(++this.state.pos,this.finishToken(n.jsxTagStart)):super.getTokenFromCode(t)}updateContext(t){if(this.match(n.braceL)){const e=this.curContext();e===x.j_oTag?this.state.context.push(x.braceExpression):e===x.j_expr?this.state.context.push(x.templateQuasi):super.updateContext(t),this.state.exprAllowed=!0}else{if(!this.match(n.slash)||t!==n.jsxTagStart)return super.updateContext(t);this.state.context.length-=2,this.state.context.push(x.j_cTag),this.state.exprAllowed=!1}}},flow:t=>class extends t{constructor(t,e){super(t,e),this.flowPragma=void 0}shouldParseTypes(){return this.getPluginOption(\"flow\",\"all\")||\"flow\"===this.flowPragma}shouldParseEnums(){return!!this.getPluginOption(\"flow\",\"enums\")}finishToken(t,e){return t!==n.string&&t!==n.semi&&t!==n.interpreterDirective&&void 0===this.flowPragma&&(this.flowPragma=null),super.finishToken(t,e)}addComment(t){if(void 0===this.flowPragma){const e=z.exec(t.value);if(e)if(\"flow\"===e[1])this.flowPragma=\"flow\";else{if(\"noflow\"!==e[1])throw new Error(\"Unexpected flow pragma\");this.flowPragma=\"noflow\"}else;}return super.addComment(t)}flowParseTypeInitialiser(t){const e=this.state.inType;this.state.inType=!0,this.expect(t||n.colon);const s=this.flowParseType();return this.state.inType=e,s}flowParsePredicate(){const t=this.startNode(),e=this.state.startLoc,s=this.state.start;this.expect(n.modulo);const i=this.state.startLoc;return this.expectContextual(\"checks\"),e.line===i.line&&e.column===i.column-1||this.raise(s,j.UnexpectedSpaceBetweenModuloChecks),this.eat(n.parenL)?(t.value=this.parseExpression(),this.expect(n.parenR),this.finishNode(t,\"DeclaredPredicate\")):this.finishNode(t,\"InferredPredicate\")}flowParseTypeAndPredicateInitialiser(){const t=this.state.inType;this.state.inType=!0,this.expect(n.colon);let e=null,s=null;return this.match(n.modulo)?(this.state.inType=t,s=this.flowParsePredicate()):(e=this.flowParseType(),this.state.inType=t,this.match(n.modulo)&&(s=this.flowParsePredicate())),[e,s]}flowParseDeclareClass(t){return this.next(),this.flowParseInterfaceish(t,!0),this.finishNode(t,\"DeclareClass\")}flowParseDeclareFunction(t){this.next();const e=t.id=this.parseIdentifier(),s=this.startNode(),i=this.startNode();this.isRelational(\"<\")?s.typeParameters=this.flowParseTypeParameterDeclaration():s.typeParameters=null,this.expect(n.parenL);const r=this.flowParseFunctionTypeParams();return s.params=r.params,s.rest=r.rest,this.expect(n.parenR),[s.returnType,t.predicate]=this.flowParseTypeAndPredicateInitialiser(),i.typeAnnotation=this.finishNode(s,\"FunctionTypeAnnotation\"),e.typeAnnotation=this.finishNode(i,\"TypeAnnotation\"),this.resetEndLocation(e),this.semicolon(),this.finishNode(t,\"DeclareFunction\")}flowParseDeclare(t,e){if(this.match(n._class))return this.flowParseDeclareClass(t);if(this.match(n._function))return this.flowParseDeclareFunction(t);if(this.match(n._var))return this.flowParseDeclareVariable(t);if(this.eatContextual(\"module\"))return this.match(n.dot)?this.flowParseDeclareModuleExports(t):(e&&this.raise(this.state.lastTokStart,j.NestedDeclareModule),this.flowParseDeclareModule(t));if(this.isContextual(\"type\"))return this.flowParseDeclareTypeAlias(t);if(this.isContextual(\"opaque\"))return this.flowParseDeclareOpaqueType(t);if(this.isContextual(\"interface\"))return this.flowParseDeclareInterface(t);if(this.match(n._export))return this.flowParseDeclareExportDeclaration(t,e);throw this.unexpected()}flowParseDeclareVariable(t){return this.next(),t.id=this.flowParseTypeAnnotatableIdentifier(!0),this.scope.declareName(t.id.name,5,t.id.start),this.semicolon(),this.finishNode(t,\"DeclareVariable\")}flowParseDeclareModule(t){this.scope.enter(0),this.match(n.string)?t.id=this.parseExprAtom():t.id=this.parseIdentifier();const e=t.body=this.startNode(),s=e.body=[];for(this.expect(n.braceL);!this.match(n.braceR);){let t=this.startNode();this.match(n._import)?(this.next(),this.isContextual(\"type\")||this.match(n._typeof)||this.raise(this.state.lastTokStart,j.InvalidNonTypeImportInDeclareModule),this.parseImport(t)):(this.expectContextual(\"declare\",j.UnsupportedStatementInDeclareModule),t=this.flowParseDeclare(t,!0)),s.push(t)}this.scope.exit(),this.expect(n.braceR),this.finishNode(e,\"BlockStatement\");let i=null,r=!1;return s.forEach(t=>{!function(t){return\"DeclareExportAllDeclaration\"===t.type||\"DeclareExportDeclaration\"===t.type&&(!t.declaration||\"TypeAlias\"!==t.declaration.type&&\"InterfaceDeclaration\"!==t.declaration.type)}(t)?\"DeclareModuleExports\"===t.type&&(r&&this.raise(t.start,j.DuplicateDeclareModuleExports),\"ES\"===i&&this.raise(t.start,j.AmbiguousDeclareModuleKind),i=\"CommonJS\",r=!0):(\"CommonJS\"===i&&this.raise(t.start,j.AmbiguousDeclareModuleKind),i=\"ES\")}),t.kind=i||\"CommonJS\",this.finishNode(t,\"DeclareModule\")}flowParseDeclareExportDeclaration(t,e){if(this.expect(n._export),this.eat(n._default))return this.match(n._function)||this.match(n._class)?t.declaration=this.flowParseDeclare(this.startNode()):(t.declaration=this.flowParseType(),this.semicolon()),t.default=!0,this.finishNode(t,\"DeclareExportDeclaration\");if(this.match(n._const)||this.isLet()||(this.isContextual(\"type\")||this.isContextual(\"interface\"))&&!e){const t=this.state.value,e=V[t];throw this.raise(this.state.start,j.UnsupportedDeclareExportKind,t,e)}if(this.match(n._var)||this.match(n._function)||this.match(n._class)||this.isContextual(\"opaque\"))return t.declaration=this.flowParseDeclare(this.startNode()),t.default=!1,this.finishNode(t,\"DeclareExportDeclaration\");if(this.match(n.star)||this.match(n.braceL)||this.isContextual(\"interface\")||this.isContextual(\"type\")||this.isContextual(\"opaque\"))return\"ExportNamedDeclaration\"===(t=this.parseExport(t)).type&&(t.type=\"ExportDeclaration\",t.default=!1,delete t.exportKind),t.type=\"Declare\"+t.type,t;throw this.unexpected()}flowParseDeclareModuleExports(t){return this.next(),this.expectContextual(\"exports\"),t.typeAnnotation=this.flowParseTypeAnnotation(),this.semicolon(),this.finishNode(t,\"DeclareModuleExports\")}flowParseDeclareTypeAlias(t){return this.next(),this.flowParseTypeAlias(t),t.type=\"DeclareTypeAlias\",t}flowParseDeclareOpaqueType(t){return this.next(),this.flowParseOpaqueType(t,!0),t.type=\"DeclareOpaqueType\",t}flowParseDeclareInterface(t){return this.next(),this.flowParseInterfaceish(t),this.finishNode(t,\"DeclareInterface\")}flowParseInterfaceish(t,e=!1){if(t.id=this.flowParseRestrictedIdentifier(!e,!0),this.scope.declareName(t.id.name,e?17:9,t.id.start),this.isRelational(\"<\")?t.typeParameters=this.flowParseTypeParameterDeclaration():t.typeParameters=null,t.extends=[],t.implements=[],t.mixins=[],this.eat(n._extends))do{t.extends.push(this.flowParseInterfaceExtends())}while(!e&&this.eat(n.comma));if(this.isContextual(\"mixins\")){this.next();do{t.mixins.push(this.flowParseInterfaceExtends())}while(this.eat(n.comma))}if(this.isContextual(\"implements\")){this.next();do{t.implements.push(this.flowParseInterfaceExtends())}while(this.eat(n.comma))}t.body=this.flowParseObjectType({allowStatic:e,allowExact:!1,allowSpread:!1,allowProto:e,allowInexact:!1})}flowParseInterfaceExtends(){const t=this.startNode();return t.id=this.flowParseQualifiedTypeIdentifier(),this.isRelational(\"<\")?t.typeParameters=this.flowParseTypeParameterInstantiation():t.typeParameters=null,this.finishNode(t,\"InterfaceExtends\")}flowParseInterface(t){return this.flowParseInterfaceish(t),this.finishNode(t,\"InterfaceDeclaration\")}checkNotUnderscore(t){\"_\"===t&&this.raise(this.state.start,j.UnexpectedReservedUnderscore)}checkReservedType(t,e,s){_.has(t)&&this.raise(e,s?j.AssignReservedType:j.UnexpectedReservedType,t)}flowParseRestrictedIdentifier(t,e){return this.checkReservedType(this.state.value,this.state.start,e),this.parseIdentifier(t)}flowParseTypeAlias(t){return t.id=this.flowParseRestrictedIdentifier(!1,!0),this.scope.declareName(t.id.name,9,t.id.start),this.isRelational(\"<\")?t.typeParameters=this.flowParseTypeParameterDeclaration():t.typeParameters=null,t.right=this.flowParseTypeInitialiser(n.eq),this.semicolon(),this.finishNode(t,\"TypeAlias\")}flowParseOpaqueType(t,e){return this.expectContextual(\"type\"),t.id=this.flowParseRestrictedIdentifier(!0,!0),this.scope.declareName(t.id.name,9,t.id.start),this.isRelational(\"<\")?t.typeParameters=this.flowParseTypeParameterDeclaration():t.typeParameters=null,t.supertype=null,this.match(n.colon)&&(t.supertype=this.flowParseTypeInitialiser(n.colon)),t.impltype=null,e||(t.impltype=this.flowParseTypeInitialiser(n.eq)),this.semicolon(),this.finishNode(t,\"OpaqueType\")}flowParseTypeParameter(t=!1){const e=this.state.start,s=this.startNode(),i=this.flowParseVariance(),r=this.flowParseTypeAnnotatableIdentifier();return s.name=r.name,s.variance=i,s.bound=r.typeAnnotation,this.match(n.eq)?(this.eat(n.eq),s.default=this.flowParseType()):t&&this.raise(e,j.MissingTypeParamDefault),this.finishNode(s,\"TypeParameter\")}flowParseTypeParameterDeclaration(){const t=this.state.inType,e=this.startNode();e.params=[],this.state.inType=!0,this.isRelational(\"<\")||this.match(n.jsxTagStart)?this.next():this.unexpected();let s=!1;do{const t=this.flowParseTypeParameter(s);e.params.push(t),t.default&&(s=!0),this.isRelational(\">\")||this.expect(n.comma)}while(!this.isRelational(\">\"));return this.expectRelational(\">\"),this.state.inType=t,this.finishNode(e,\"TypeParameterDeclaration\")}flowParseTypeParameterInstantiation(){const t=this.startNode(),e=this.state.inType;t.params=[],this.state.inType=!0,this.expectRelational(\"<\");const s=this.state.noAnonFunctionType;for(this.state.noAnonFunctionType=!1;!this.isRelational(\">\");)t.params.push(this.flowParseType()),this.isRelational(\">\")||this.expect(n.comma);return this.state.noAnonFunctionType=s,this.expectRelational(\">\"),this.state.inType=e,this.finishNode(t,\"TypeParameterInstantiation\")}flowParseTypeParameterInstantiationCallOrNew(){const t=this.startNode(),e=this.state.inType;for(t.params=[],this.state.inType=!0,this.expectRelational(\"<\");!this.isRelational(\">\");)t.params.push(this.flowParseTypeOrImplicitInstantiation()),this.isRelational(\">\")||this.expect(n.comma);return this.expectRelational(\">\"),this.state.inType=e,this.finishNode(t,\"TypeParameterInstantiation\")}flowParseInterfaceType(){const t=this.startNode();if(this.expectContextual(\"interface\"),t.extends=[],this.eat(n._extends))do{t.extends.push(this.flowParseInterfaceExtends())}while(this.eat(n.comma));return t.body=this.flowParseObjectType({allowStatic:!1,allowExact:!1,allowSpread:!1,allowProto:!1,allowInexact:!1}),this.finishNode(t,\"InterfaceTypeAnnotation\")}flowParseObjectPropertyKey(){return this.match(n.num)||this.match(n.string)?this.parseExprAtom():this.parseIdentifier(!0)}flowParseObjectTypeIndexer(t,e,s){return t.static=e,this.lookahead().type===n.colon?(t.id=this.flowParseObjectPropertyKey(),t.key=this.flowParseTypeInitialiser()):(t.id=null,t.key=this.flowParseType()),this.expect(n.bracketR),t.value=this.flowParseTypeInitialiser(),t.variance=s,this.finishNode(t,\"ObjectTypeIndexer\")}flowParseObjectTypeInternalSlot(t,e){return t.static=e,t.id=this.flowParseObjectPropertyKey(),this.expect(n.bracketR),this.expect(n.bracketR),this.isRelational(\"<\")||this.match(n.parenL)?(t.method=!0,t.optional=!1,t.value=this.flowParseObjectTypeMethodish(this.startNodeAt(t.start,t.loc.start))):(t.method=!1,this.eat(n.question)&&(t.optional=!0),t.value=this.flowParseTypeInitialiser()),this.finishNode(t,\"ObjectTypeInternalSlot\")}flowParseObjectTypeMethodish(t){for(t.params=[],t.rest=null,t.typeParameters=null,this.isRelational(\"<\")&&(t.typeParameters=this.flowParseTypeParameterDeclaration()),this.expect(n.parenL);!this.match(n.parenR)&&!this.match(n.ellipsis);)t.params.push(this.flowParseFunctionTypeParam()),this.match(n.parenR)||this.expect(n.comma);return this.eat(n.ellipsis)&&(t.rest=this.flowParseFunctionTypeParam()),this.expect(n.parenR),t.returnType=this.flowParseTypeInitialiser(),this.finishNode(t,\"FunctionTypeAnnotation\")}flowParseObjectTypeCallProperty(t,e){const s=this.startNode();return t.static=e,t.value=this.flowParseObjectTypeMethodish(s),this.finishNode(t,\"ObjectTypeCallProperty\")}flowParseObjectType({allowStatic:t,allowExact:e,allowSpread:s,allowProto:i,allowInexact:r}){const a=this.state.inType;this.state.inType=!0;const o=this.startNode();let h,p;o.callProperties=[],o.properties=[],o.indexers=[],o.internalSlots=[];let c=!1;for(e&&this.match(n.braceBarL)?(this.expect(n.braceBarL),h=n.braceBarR,p=!0):(this.expect(n.braceL),h=n.braceR,p=!1),o.exact=p;!this.match(h);){let e=!1,a=null,h=null;const u=this.startNode();if(i&&this.isContextual(\"proto\")){const e=this.lookahead();e.type!==n.colon&&e.type!==n.question&&(this.next(),a=this.state.start,t=!1)}if(t&&this.isContextual(\"static\")){const t=this.lookahead();t.type!==n.colon&&t.type!==n.question&&(this.next(),e=!0)}const l=this.flowParseVariance();if(this.eat(n.bracketL))null!=a&&this.unexpected(a),this.eat(n.bracketL)?(l&&this.unexpected(l.start),o.internalSlots.push(this.flowParseObjectTypeInternalSlot(u,e))):o.indexers.push(this.flowParseObjectTypeIndexer(u,e,l));else if(this.match(n.parenL)||this.isRelational(\"<\"))null!=a&&this.unexpected(a),l&&this.unexpected(l.start),o.callProperties.push(this.flowParseObjectTypeCallProperty(u,e));else{let t=\"init\";if(this.isContextual(\"get\")||this.isContextual(\"set\")){const e=this.lookahead();e.type!==n.name&&e.type!==n.string&&e.type!==n.num||(t=this.state.value,this.next())}const i=this.flowParseObjectTypeProperty(u,e,a,l,t,s,null!=r?r:!p);null===i?(c=!0,h=this.state.lastTokStart):o.properties.push(i)}this.flowObjectTypeSemicolon(),!h||this.match(n.braceR)||this.match(n.braceBarR)||this.raise(h,j.UnexpectedExplicitInexactInObject)}this.expect(h),s&&(o.inexact=c);const u=this.finishNode(o,\"ObjectTypeAnnotation\");return this.state.inType=a,u}flowParseObjectTypeProperty(t,e,s,i,r,a,o){if(this.eat(n.ellipsis)){return this.match(n.comma)||this.match(n.semi)||this.match(n.braceR)||this.match(n.braceBarR)?(a?o||this.raise(this.state.lastTokStart,j.InexactInsideExact):this.raise(this.state.lastTokStart,j.InexactInsideNonObject),i&&this.raise(i.start,j.InexactVariance),null):(a||this.raise(this.state.lastTokStart,j.UnexpectedSpreadType),null!=s&&this.unexpected(s),i&&this.raise(i.start,j.SpreadVariance),t.argument=this.flowParseType(),this.finishNode(t,\"ObjectTypeSpreadProperty\"))}{t.key=this.flowParseObjectPropertyKey(),t.static=e,t.proto=null!=s,t.kind=r;let a=!1;return this.isRelational(\"<\")||this.match(n.parenL)?(t.method=!0,null!=s&&this.unexpected(s),i&&this.unexpected(i.start),t.value=this.flowParseObjectTypeMethodish(this.startNodeAt(t.start,t.loc.start)),\"get\"!==r&&\"set\"!==r||this.flowCheckGetterSetterParams(t)):(\"init\"!==r&&this.unexpected(),t.method=!1,this.eat(n.question)&&(a=!0),t.value=this.flowParseTypeInitialiser(),t.variance=i),t.optional=a,this.finishNode(t,\"ObjectTypeProperty\")}}flowCheckGetterSetterParams(t){const e=\"get\"===t.kind?0:1,s=t.start;t.value.params.length+(t.value.rest?1:0)!==e&&(\"get\"===t.kind?this.raise(s,f.BadGetterArity):this.raise(s,f.BadSetterArity)),\"set\"===t.kind&&t.value.rest&&this.raise(s,f.BadSetterRestParameter)}flowObjectTypeSemicolon(){this.eat(n.semi)||this.eat(n.comma)||this.match(n.braceR)||this.match(n.braceBarR)||this.unexpected()}flowParseQualifiedTypeIdentifier(t,e,s){t=t||this.state.start,e=e||this.state.startLoc;let i=s||this.flowParseRestrictedIdentifier(!0);for(;this.eat(n.dot);){const s=this.startNodeAt(t,e);s.qualification=i,s.id=this.flowParseRestrictedIdentifier(!0),i=this.finishNode(s,\"QualifiedTypeIdentifier\")}return i}flowParseGenericType(t,e,s){const i=this.startNodeAt(t,e);return i.typeParameters=null,i.id=this.flowParseQualifiedTypeIdentifier(t,e,s),this.isRelational(\"<\")&&(i.typeParameters=this.flowParseTypeParameterInstantiation()),this.finishNode(i,\"GenericTypeAnnotation\")}flowParseTypeofType(){const t=this.startNode();return this.expect(n._typeof),t.argument=this.flowParsePrimaryType(),this.finishNode(t,\"TypeofTypeAnnotation\")}flowParseTupleType(){const t=this.startNode();for(t.types=[],this.expect(n.bracketL);this.state.pos<this.length&&!this.match(n.bracketR)&&(t.types.push(this.flowParseType()),!this.match(n.bracketR));)this.expect(n.comma);return this.expect(n.bracketR),this.finishNode(t,\"TupleTypeAnnotation\")}flowParseFunctionTypeParam(){let t=null,e=!1,s=null;const i=this.startNode(),r=this.lookahead();return r.type===n.colon||r.type===n.question?(t=this.parseIdentifier(),this.eat(n.question)&&(e=!0),s=this.flowParseTypeInitialiser()):s=this.flowParseType(),i.name=t,i.optional=e,i.typeAnnotation=s,this.finishNode(i,\"FunctionTypeParam\")}reinterpretTypeAsFunctionTypeParam(t){const e=this.startNodeAt(t.start,t.loc.start);return e.name=null,e.optional=!1,e.typeAnnotation=t,this.finishNode(e,\"FunctionTypeParam\")}flowParseFunctionTypeParams(t=[]){let e=null;for(;!this.match(n.parenR)&&!this.match(n.ellipsis);)t.push(this.flowParseFunctionTypeParam()),this.match(n.parenR)||this.expect(n.comma);return this.eat(n.ellipsis)&&(e=this.flowParseFunctionTypeParam()),{params:t,rest:e}}flowIdentToTypeAnnotation(t,e,s,i){switch(i.name){case\"any\":return this.finishNode(s,\"AnyTypeAnnotation\");case\"bool\":case\"boolean\":return this.finishNode(s,\"BooleanTypeAnnotation\");case\"mixed\":return this.finishNode(s,\"MixedTypeAnnotation\");case\"empty\":return this.finishNode(s,\"EmptyTypeAnnotation\");case\"number\":return this.finishNode(s,\"NumberTypeAnnotation\");case\"string\":return this.finishNode(s,\"StringTypeAnnotation\");case\"symbol\":return this.finishNode(s,\"SymbolTypeAnnotation\");default:return this.checkNotUnderscore(i.name),this.flowParseGenericType(t,e,i)}}flowParsePrimaryType(){const t=this.state.start,e=this.state.startLoc,s=this.startNode();let i,r,a=!1;const o=this.state.noAnonFunctionType;switch(this.state.type){case n.name:return this.isContextual(\"interface\")?this.flowParseInterfaceType():this.flowIdentToTypeAnnotation(t,e,s,this.parseIdentifier());case n.braceL:return this.flowParseObjectType({allowStatic:!1,allowExact:!1,allowSpread:!0,allowProto:!1,allowInexact:!0});case n.braceBarL:return this.flowParseObjectType({allowStatic:!1,allowExact:!0,allowSpread:!0,allowProto:!1,allowInexact:!1});case n.bracketL:return this.state.noAnonFunctionType=!1,r=this.flowParseTupleType(),this.state.noAnonFunctionType=o,r;case n.relational:if(\"<\"===this.state.value)return s.typeParameters=this.flowParseTypeParameterDeclaration(),this.expect(n.parenL),i=this.flowParseFunctionTypeParams(),s.params=i.params,s.rest=i.rest,this.expect(n.parenR),this.expect(n.arrow),s.returnType=this.flowParseType(),this.finishNode(s,\"FunctionTypeAnnotation\");break;case n.parenL:if(this.next(),!this.match(n.parenR)&&!this.match(n.ellipsis))if(this.match(n.name)){const t=this.lookahead().type;a=t!==n.question&&t!==n.colon}else a=!0;if(a){if(this.state.noAnonFunctionType=!1,r=this.flowParseType(),this.state.noAnonFunctionType=o,this.state.noAnonFunctionType||!(this.match(n.comma)||this.match(n.parenR)&&this.lookahead().type===n.arrow))return this.expect(n.parenR),r;this.eat(n.comma)}return i=r?this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(r)]):this.flowParseFunctionTypeParams(),s.params=i.params,s.rest=i.rest,this.expect(n.parenR),this.expect(n.arrow),s.returnType=this.flowParseType(),s.typeParameters=null,this.finishNode(s,\"FunctionTypeAnnotation\");case n.string:return this.parseLiteral(this.state.value,\"StringLiteralTypeAnnotation\");case n._true:case n._false:return s.value=this.match(n._true),this.next(),this.finishNode(s,\"BooleanLiteralTypeAnnotation\");case n.plusMin:if(\"-\"===this.state.value){if(this.next(),this.match(n.num))return this.parseLiteral(-this.state.value,\"NumberLiteralTypeAnnotation\",s.start,s.loc.start);if(this.match(n.bigint))return this.parseLiteral(-this.state.value,\"BigIntLiteralTypeAnnotation\",s.start,s.loc.start);throw this.raise(this.state.start,j.UnexpectedSubtractionOperand)}throw this.unexpected();case n.num:return this.parseLiteral(this.state.value,\"NumberLiteralTypeAnnotation\");case n.bigint:return this.parseLiteral(this.state.value,\"BigIntLiteralTypeAnnotation\");case n._void:return this.next(),this.finishNode(s,\"VoidTypeAnnotation\");case n._null:return this.next(),this.finishNode(s,\"NullLiteralTypeAnnotation\");case n._this:return this.next(),this.finishNode(s,\"ThisTypeAnnotation\");case n.star:return this.next(),this.finishNode(s,\"ExistsTypeAnnotation\");default:if(\"typeof\"===this.state.type.keyword)return this.flowParseTypeofType();if(this.state.type.keyword){const t=this.state.type.label;return this.next(),super.createIdentifier(s,t)}}throw this.unexpected()}flowParsePostfixType(){const t=this.state.start,e=this.state.startLoc;let s=this.flowParsePrimaryType();for(;this.match(n.bracketL)&&!this.canInsertSemicolon();){const i=this.startNodeAt(t,e);i.elementType=s,this.expect(n.bracketL),this.expect(n.bracketR),s=this.finishNode(i,\"ArrayTypeAnnotation\")}return s}flowParsePrefixType(){const t=this.startNode();return this.eat(n.question)?(t.typeAnnotation=this.flowParsePrefixType(),this.finishNode(t,\"NullableTypeAnnotation\")):this.flowParsePostfixType()}flowParseAnonFunctionWithoutParens(){const t=this.flowParsePrefixType();if(!this.state.noAnonFunctionType&&this.eat(n.arrow)){const e=this.startNodeAt(t.start,t.loc.start);return e.params=[this.reinterpretTypeAsFunctionTypeParam(t)],e.rest=null,e.returnType=this.flowParseType(),e.typeParameters=null,this.finishNode(e,\"FunctionTypeAnnotation\")}return t}flowParseIntersectionType(){const t=this.startNode();this.eat(n.bitwiseAND);const e=this.flowParseAnonFunctionWithoutParens();for(t.types=[e];this.eat(n.bitwiseAND);)t.types.push(this.flowParseAnonFunctionWithoutParens());return 1===t.types.length?e:this.finishNode(t,\"IntersectionTypeAnnotation\")}flowParseUnionType(){const t=this.startNode();this.eat(n.bitwiseOR);const e=this.flowParseIntersectionType();for(t.types=[e];this.eat(n.bitwiseOR);)t.types.push(this.flowParseIntersectionType());return 1===t.types.length?e:this.finishNode(t,\"UnionTypeAnnotation\")}flowParseType(){const t=this.state.inType;this.state.inType=!0;const e=this.flowParseUnionType();return this.state.inType=t,this.state.exprAllowed=this.state.exprAllowed||this.state.noAnonFunctionType,e}flowParseTypeOrImplicitInstantiation(){if(this.state.type===n.name&&\"_\"===this.state.value){const t=this.state.start,e=this.state.startLoc,s=this.parseIdentifier();return this.flowParseGenericType(t,e,s)}return this.flowParseType()}flowParseTypeAnnotation(){const t=this.startNode();return t.typeAnnotation=this.flowParseTypeInitialiser(),this.finishNode(t,\"TypeAnnotation\")}flowParseTypeAnnotatableIdentifier(t){const e=t?this.parseIdentifier():this.flowParseRestrictedIdentifier();return this.match(n.colon)&&(e.typeAnnotation=this.flowParseTypeAnnotation(),this.resetEndLocation(e)),e}typeCastToParameter(t){return t.expression.typeAnnotation=t.typeAnnotation,this.resetEndLocation(t.expression,t.typeAnnotation.end,t.typeAnnotation.loc.end),t.expression}flowParseVariance(){let t=null;return this.match(n.plusMin)&&(t=this.startNode(),\"+\"===this.state.value?t.kind=\"plus\":t.kind=\"minus\",this.next(),this.finishNode(t,\"Variance\")),t}parseFunctionBody(t,e,s=!1){return e?this.forwardNoArrowParamsConversionAt(t,()=>super.parseFunctionBody(t,!0,s)):super.parseFunctionBody(t,!1,s)}parseFunctionBodyAndFinish(t,e,s=!1){if(this.match(n.colon)){const e=this.startNode();[e.typeAnnotation,t.predicate]=this.flowParseTypeAndPredicateInitialiser(),t.returnType=e.typeAnnotation?this.finishNode(e,\"TypeAnnotation\"):null}super.parseFunctionBodyAndFinish(t,e,s)}parseStatement(t,e){if(this.state.strict&&this.match(n.name)&&\"interface\"===this.state.value){const t=this.startNode();return this.next(),this.flowParseInterface(t)}if(this.shouldParseEnums()&&this.isContextual(\"enum\")){const t=this.startNode();return this.next(),this.flowParseEnumDeclaration(t)}{const s=super.parseStatement(t,e);return void 0!==this.flowPragma||this.isValidDirective(s)||(this.flowPragma=null),s}}parseExpressionStatement(t,e){if(\"Identifier\"===e.type)if(\"declare\"===e.name){if(this.match(n._class)||this.match(n.name)||this.match(n._function)||this.match(n._var)||this.match(n._export))return this.flowParseDeclare(t)}else if(this.match(n.name)){if(\"interface\"===e.name)return this.flowParseInterface(t);if(\"type\"===e.name)return this.flowParseTypeAlias(t);if(\"opaque\"===e.name)return this.flowParseOpaqueType(t,!1)}return super.parseExpressionStatement(t,e)}shouldParseExportDeclaration(){return this.isContextual(\"type\")||this.isContextual(\"interface\")||this.isContextual(\"opaque\")||this.shouldParseEnums()&&this.isContextual(\"enum\")||super.shouldParseExportDeclaration()}isExportDefaultSpecifier(){return(!this.match(n.name)||!(\"type\"===this.state.value||\"interface\"===this.state.value||\"opaque\"===this.state.value||this.shouldParseEnums()&&\"enum\"===this.state.value))&&super.isExportDefaultSpecifier()}parseExportDefaultExpression(){if(this.shouldParseEnums()&&this.isContextual(\"enum\")){const t=this.startNode();return this.next(),this.flowParseEnumDeclaration(t)}return super.parseExportDefaultExpression()}parseConditional(t,e,s,i,r){if(!this.match(n.question))return t;if(r){const a=this.tryParse(()=>super.parseConditional(t,e,s,i));return a.node?(a.error&&(this.state=a.failState),a.node):(r.start=a.error.pos||this.state.start,t)}this.expect(n.question);const a=this.state.clone(),o=this.state.noArrowAt,h=this.startNodeAt(s,i);let{consequent:p,failed:c}=this.tryParseConditionalConsequent(),[u,l]=this.getArrowLikeExpressions(p);if(c||l.length>0){const t=[...o];if(l.length>0){this.state=a,this.state.noArrowAt=t;for(let e=0;e<l.length;e++)t.push(l[e].start);({consequent:p,failed:c}=this.tryParseConditionalConsequent()),[u,l]=this.getArrowLikeExpressions(p)}c&&u.length>1&&this.raise(a.start,j.AmbiguousConditionalArrow),c&&1===u.length&&(this.state=a,this.state.noArrowAt=t.concat(u[0].start),({consequent:p,failed:c}=this.tryParseConditionalConsequent()))}return this.getArrowLikeExpressions(p,!0),this.state.noArrowAt=o,this.expect(n.colon),h.test=t,h.consequent=p,h.alternate=this.forwardNoArrowParamsConversionAt(h,()=>this.parseMaybeAssign(e,void 0,void 0,void 0)),this.finishNode(h,\"ConditionalExpression\")}tryParseConditionalConsequent(){this.state.noArrowParamsConversionAt.push(this.state.start);const t=this.parseMaybeAssign(),e=!this.match(n.colon);return this.state.noArrowParamsConversionAt.pop(),{consequent:t,failed:e}}getArrowLikeExpressions(t,e){const s=[t],i=[];for(;0!==s.length;){const t=s.pop();\"ArrowFunctionExpression\"===t.type?(t.typeParameters||!t.returnType?this.finishArrowValidation(t):i.push(t),s.push(t.body)):\"ConditionalExpression\"===t.type&&(s.push(t.consequent),s.push(t.alternate))}return e?(i.forEach(t=>this.finishArrowValidation(t)),[i,[]]):function(t,e){const s=[],i=[];for(let r=0;r<t.length;r++)(e(t[r],r,t)?s:i).push(t[r]);return[s,i]}(i,t=>t.params.every(t=>this.isAssignable(t,!0)))}finishArrowValidation(t){var e;this.toAssignableList(t.params,null==(e=t.extra)?void 0:e.trailingComma),this.scope.enter(6),super.checkParams(t,!1,!0),this.scope.exit()}forwardNoArrowParamsConversionAt(t,e){let s;return-1!==this.state.noArrowParamsConversionAt.indexOf(t.start)?(this.state.noArrowParamsConversionAt.push(this.state.start),s=e(),this.state.noArrowParamsConversionAt.pop()):s=e(),s}parseParenItem(t,e,s){if(t=super.parseParenItem(t,e,s),this.eat(n.question)&&(t.optional=!0,this.resetEndLocation(t)),this.match(n.colon)){const i=this.startNodeAt(e,s);return i.expression=t,i.typeAnnotation=this.flowParseTypeAnnotation(),this.finishNode(i,\"TypeCastExpression\")}return t}assertModuleNodeAllowed(t){\"ImportDeclaration\"===t.type&&(\"type\"===t.importKind||\"typeof\"===t.importKind)||\"ExportNamedDeclaration\"===t.type&&\"type\"===t.exportKind||\"ExportAllDeclaration\"===t.type&&\"type\"===t.exportKind||super.assertModuleNodeAllowed(t)}parseExport(t){const e=super.parseExport(t);return\"ExportNamedDeclaration\"!==e.type&&\"ExportAllDeclaration\"!==e.type||(e.exportKind=e.exportKind||\"value\"),e}parseExportDeclaration(t){if(this.isContextual(\"type\")){t.exportKind=\"type\";const e=this.startNode();return this.next(),this.match(n.braceL)?(t.specifiers=this.parseExportSpecifiers(),this.parseExportFrom(t),null):this.flowParseTypeAlias(e)}if(this.isContextual(\"opaque\")){t.exportKind=\"type\";const e=this.startNode();return this.next(),this.flowParseOpaqueType(e,!1)}if(this.isContextual(\"interface\")){t.exportKind=\"type\";const e=this.startNode();return this.next(),this.flowParseInterface(e)}if(this.shouldParseEnums()&&this.isContextual(\"enum\")){t.exportKind=\"value\";const e=this.startNode();return this.next(),this.flowParseEnumDeclaration(e)}return super.parseExportDeclaration(t)}eatExportStar(t){return!!super.eatExportStar(...arguments)||!(!this.isContextual(\"type\")||this.lookahead().type!==n.star)&&(t.exportKind=\"type\",this.next(),this.next(),!0)}maybeParseExportNamespaceSpecifier(t){const e=this.state.start,s=super.maybeParseExportNamespaceSpecifier(t);return s&&\"type\"===t.exportKind&&this.unexpected(e),s}parseClassId(t,e,s){super.parseClassId(t,e,s),this.isRelational(\"<\")&&(t.typeParameters=this.flowParseTypeParameterDeclaration())}parseClassMember(t,e,s,i){const r=this.state.start;if(this.isContextual(\"declare\")){if(this.parseClassMemberFromModifier(t,e))return;e.declare=!0}super.parseClassMember(t,e,s,i),e.declare&&(\"ClassProperty\"!==e.type&&\"ClassPrivateProperty\"!==e.type?this.raise(r,j.DeclareClassElement):e.value&&this.raise(e.value.start,j.DeclareClassFieldInitializer))}getTokenFromCode(t){const e=this.input.charCodeAt(this.state.pos+1);return 123===t&&124===e?this.finishOp(n.braceBarL,2):!this.state.inType||62!==t&&60!==t?function(t,e){return 64===t&&64===e}(t,e)?(this.state.isIterator=!0,super.readWord()):super.getTokenFromCode(t):this.finishOp(n.relational,1)}isAssignable(t,e){switch(t.type){case\"Identifier\":case\"ObjectPattern\":case\"ArrayPattern\":case\"AssignmentPattern\":return!0;case\"ObjectExpression\":{const e=t.properties.length-1;return t.properties.every((t,s)=>\"ObjectMethod\"!==t.type&&(s===e||\"SpreadElement\"===t.type)&&this.isAssignable(t))}case\"ObjectProperty\":return this.isAssignable(t.value);case\"SpreadElement\":return this.isAssignable(t.argument);case\"ArrayExpression\":return t.elements.every(t=>this.isAssignable(t));case\"AssignmentExpression\":return\"=\"===t.operator;case\"ParenthesizedExpression\":case\"TypeCastExpression\":return this.isAssignable(t.expression);case\"MemberExpression\":case\"OptionalMemberExpression\":return!e;default:return!1}}toAssignable(t){return\"TypeCastExpression\"===t.type?super.toAssignable(this.typeCastToParameter(t)):super.toAssignable(t)}toAssignableList(t,e){for(let e=0;e<t.length;e++){const s=t[e];s&&\"TypeCastExpression\"===s.type&&(t[e]=this.typeCastToParameter(s))}return super.toAssignableList(t,e)}toReferencedList(t,e){for(let s=0;s<t.length;s++){const i=t[s];!i||\"TypeCastExpression\"!==i.type||i.extra&&i.extra.parenthesized||!(t.length>1)&&e||this.raise(i.typeAnnotation.start,j.TypeCastInPattern)}return t}checkLVal(t,e=64,s,i){if(\"TypeCastExpression\"!==t.type)return super.checkLVal(t,e,s,i)}parseClassProperty(t){return this.match(n.colon)&&(t.typeAnnotation=this.flowParseTypeAnnotation()),super.parseClassProperty(t)}parseClassPrivateProperty(t){return this.match(n.colon)&&(t.typeAnnotation=this.flowParseTypeAnnotation()),super.parseClassPrivateProperty(t)}isClassMethod(){return this.isRelational(\"<\")||super.isClassMethod()}isClassProperty(){return this.match(n.colon)||super.isClassProperty()}isNonstaticConstructor(t){return!this.match(n.colon)&&super.isNonstaticConstructor(t)}pushClassMethod(t,e,s,i,r,a){e.variance&&this.unexpected(e.variance.start),delete e.variance,this.isRelational(\"<\")&&(e.typeParameters=this.flowParseTypeParameterDeclaration()),super.pushClassMethod(t,e,s,i,r,a)}pushClassPrivateMethod(t,e,s,i){e.variance&&this.unexpected(e.variance.start),delete e.variance,this.isRelational(\"<\")&&(e.typeParameters=this.flowParseTypeParameterDeclaration()),super.pushClassPrivateMethod(t,e,s,i)}parseClassSuper(t){if(super.parseClassSuper(t),t.superClass&&this.isRelational(\"<\")&&(t.superTypeParameters=this.flowParseTypeParameterInstantiation()),this.isContextual(\"implements\")){this.next();const e=t.implements=[];do{const t=this.startNode();t.id=this.flowParseRestrictedIdentifier(!0),this.isRelational(\"<\")?t.typeParameters=this.flowParseTypeParameterInstantiation():t.typeParameters=null,e.push(this.finishNode(t,\"ClassImplements\"))}while(this.eat(n.comma))}}parsePropertyName(t,e){const s=this.flowParseVariance(),i=super.parsePropertyName(t,e);return t.variance=s,i}parseObjPropValue(t,e,s,i,r,a,o,h){let p;t.variance&&this.unexpected(t.variance.start),delete t.variance,this.isRelational(\"<\")&&(p=this.flowParseTypeParameterDeclaration(),this.match(n.parenL)||this.unexpected()),super.parseObjPropValue(t,e,s,i,r,a,o,h),p&&((t.value||t).typeParameters=p)}parseAssignableListItemTypes(t){return this.eat(n.question)&&(\"Identifier\"!==t.type&&this.raise(t.start,j.OptionalBindingPattern),t.optional=!0),this.match(n.colon)&&(t.typeAnnotation=this.flowParseTypeAnnotation()),this.resetEndLocation(t),t}parseMaybeDefault(t,e,s){const i=super.parseMaybeDefault(t,e,s);return\"AssignmentPattern\"===i.type&&i.typeAnnotation&&i.right.start<i.typeAnnotation.start&&this.raise(i.typeAnnotation.start,j.TypeBeforeInitializer),i}shouldParseDefaultImport(t){return U(t)?q(this.state):super.shouldParseDefaultImport(t)}parseImportSpecifierLocal(t,e,s,i){e.local=U(t)?this.flowParseRestrictedIdentifier(!0,!0):this.parseIdentifier(),this.checkLVal(e.local,9,void 0,i),t.specifiers.push(this.finishNode(e,s))}maybeParseDefaultImportSpecifier(t){t.importKind=\"value\";let e=null;if(this.match(n._typeof)?e=\"typeof\":this.isContextual(\"type\")&&(e=\"type\"),e){const s=this.lookahead();\"type\"===e&&s.type===n.star&&this.unexpected(s.start),(q(s)||s.type===n.braceL||s.type===n.star)&&(this.next(),t.importKind=e)}return super.maybeParseDefaultImportSpecifier(t)}parseImportSpecifier(t){const e=this.startNode(),s=this.state.start,i=this.parseIdentifier(!0);let r=null;\"type\"===i.name?r=\"type\":\"typeof\"===i.name&&(r=\"typeof\");let a=!1;if(this.isContextual(\"as\")&&!this.isLookaheadContextual(\"as\")){const t=this.parseIdentifier(!0);null===r||this.match(n.name)||this.state.type.keyword?(e.imported=i,e.importKind=null,e.local=this.parseIdentifier()):(e.imported=t,e.importKind=r,e.local=t.__clone())}else null!==r&&(this.match(n.name)||this.state.type.keyword)?(e.imported=this.parseIdentifier(!0),e.importKind=r,this.eatContextual(\"as\")?e.local=this.parseIdentifier():(a=!0,e.local=e.imported.__clone())):(a=!0,e.imported=i,e.importKind=null,e.local=e.imported.__clone());const o=U(t),h=U(e);o&&h&&this.raise(s,j.ImportTypeShorthandOnlyInPureImport),(o||h)&&this.checkReservedType(e.local.name,e.local.start,!0),!a||o||h||this.checkReservedWord(e.local.name,e.start,!0,!0),this.checkLVal(e.local,9,void 0,\"import specifier\"),t.specifiers.push(this.finishNode(e,\"ImportSpecifier\"))}parseFunctionParams(t,e){const s=t.kind;\"get\"!==s&&\"set\"!==s&&this.isRelational(\"<\")&&(t.typeParameters=this.flowParseTypeParameterDeclaration()),super.parseFunctionParams(t,e)}parseVarId(t,e){super.parseVarId(t,e),this.match(n.colon)&&(t.id.typeAnnotation=this.flowParseTypeAnnotation(),this.resetEndLocation(t.id))}parseAsyncArrowFromCallExpression(t,e){if(this.match(n.colon)){const e=this.state.noAnonFunctionType;this.state.noAnonFunctionType=!0,t.returnType=this.flowParseTypeAnnotation(),this.state.noAnonFunctionType=e}return super.parseAsyncArrowFromCallExpression(t,e)}shouldParseAsyncArrow(){return this.match(n.colon)||super.shouldParseAsyncArrow()}parseMaybeAssign(t,e,s,i){let r,a=null;if(this.hasPlugin(\"jsx\")&&(this.match(n.jsxTagStart)||this.isRelational(\"<\"))){if(a=this.state.clone(),r=this.tryParse(()=>super.parseMaybeAssign(t,e,s,i),a),!r.error)return r.node;const{context:n}=this.state;n[n.length-1]===x.j_oTag?n.length-=2:n[n.length-1]===x.j_expr&&(n.length-=1)}if(r&&r.error||this.isRelational(\"<\")){let n;a=a||this.state.clone();const o=this.tryParse(()=>{n=this.flowParseTypeParameterDeclaration();const r=this.forwardNoArrowParamsConversionAt(n,()=>super.parseMaybeAssign(t,e,s,i));return r.typeParameters=n,this.resetStartLocationFromNode(r,n),r},a),h=o.node&&\"ArrowFunctionExpression\"===o.node.type?o.node:null;if(!o.error&&h)return h;if(r&&r.node)return this.state=r.failState,r.node;if(h)return this.state=o.failState,h;if(r&&r.thrown)throw r.error;if(o.thrown)throw o.error;throw this.raise(n.start,j.UnexpectedTokenAfterTypeParameter)}return super.parseMaybeAssign(t,e,s,i)}parseArrow(t){if(this.match(n.colon)){const e=this.tryParse(()=>{const e=this.state.noAnonFunctionType;this.state.noAnonFunctionType=!0;const s=this.startNode();return[s.typeAnnotation,t.predicate]=this.flowParseTypeAndPredicateInitialiser(),this.state.noAnonFunctionType=e,this.canInsertSemicolon()&&this.unexpected(),this.match(n.arrow)||this.unexpected(),s});if(e.thrown)return null;e.error&&(this.state=e.failState),t.returnType=e.node.typeAnnotation?this.finishNode(e.node,\"TypeAnnotation\"):null}return super.parseArrow(t)}shouldParseArrow(){return this.match(n.colon)||super.shouldParseArrow()}setArrowFunctionParameters(t,e){-1!==this.state.noArrowParamsConversionAt.indexOf(t.start)?t.params=e:super.setArrowFunctionParameters(t,e)}checkParams(t,e,s){if(!s||-1===this.state.noArrowParamsConversionAt.indexOf(t.start))return super.checkParams(...arguments)}parseParenAndDistinguishExpression(t){return super.parseParenAndDistinguishExpression(t&&-1===this.state.noArrowAt.indexOf(this.state.start))}parseSubscripts(t,e,s,i){if(\"Identifier\"===t.type&&\"async\"===t.name&&-1!==this.state.noArrowAt.indexOf(e)){this.next();const i=this.startNodeAt(e,s);i.callee=t,i.arguments=this.parseCallExpressionArguments(n.parenR,!1),t=this.finishNode(i,\"CallExpression\")}else if(\"Identifier\"===t.type&&\"async\"===t.name&&this.isRelational(\"<\")){const r=this.state.clone(),a=this.tryParse(t=>this.parseAsyncArrowWithTypeParameters(e,s)||t(),r);if(!a.error&&!a.aborted)return a.node;const n=this.tryParse(()=>super.parseSubscripts(t,e,s,i),r);if(n.node&&!n.error)return n.node;if(a.node)return this.state=a.failState,a.node;if(n.node)return this.state=n.failState,n.node;throw a.error||n.error}return super.parseSubscripts(t,e,s,i)}parseSubscript(t,e,s,i,r){if(this.match(n.questionDot)&&this.isLookaheadRelational(\"<\")){if(r.optionalChainMember=!0,i)return r.stop=!0,t;this.next();const a=this.startNodeAt(e,s);return a.callee=t,a.typeArguments=this.flowParseTypeParameterInstantiation(),this.expect(n.parenL),a.arguments=this.parseCallExpressionArguments(n.parenR,!1),a.optional=!0,this.finishCallExpression(a,!0)}if(!i&&this.shouldParseTypes()&&this.isRelational(\"<\")){const i=this.startNodeAt(e,s);i.callee=t;const a=this.tryParse(()=>(i.typeArguments=this.flowParseTypeParameterInstantiationCallOrNew(),this.expect(n.parenL),i.arguments=this.parseCallExpressionArguments(n.parenR,!1),r.optionalChainMember&&(i.optional=!1),this.finishCallExpression(i,r.optionalChainMember)));if(a.node)return a.error&&(this.state=a.failState),a.node}return super.parseSubscript(t,e,s,i,r)}parseNewArguments(t){let e=null;this.shouldParseTypes()&&this.isRelational(\"<\")&&(e=this.tryParse(()=>this.flowParseTypeParameterInstantiationCallOrNew()).node),t.typeArguments=e,super.parseNewArguments(t)}parseAsyncArrowWithTypeParameters(t,e){const s=this.startNodeAt(t,e);if(this.parseFunctionParams(s),this.parseArrow(s))return this.parseArrowExpression(s,void 0,!0)}readToken_mult_modulo(t){const e=this.input.charCodeAt(this.state.pos+1);if(42===t&&47===e&&this.state.hasFlowComment)return this.state.hasFlowComment=!1,this.state.pos+=2,void this.nextToken();super.readToken_mult_modulo(t)}readToken_pipe_amp(t){const e=this.input.charCodeAt(this.state.pos+1);124!==t||125!==e?super.readToken_pipe_amp(t):this.finishOp(n.braceBarR,2)}parseTopLevel(t,e){const s=super.parseTopLevel(t,e);return this.state.hasFlowComment&&this.raise(this.state.pos,j.UnterminatedFlowComment),s}skipBlockComment(){if(this.hasPlugin(\"flowComments\")&&this.skipFlowComment())return this.state.hasFlowComment&&this.unexpected(null,j.NestedFlowComment),this.hasFlowCommentCompletion(),this.state.pos+=this.skipFlowComment(),void(this.state.hasFlowComment=!0);if(this.state.hasFlowComment){const t=this.input.indexOf(\"*-/\",this.state.pos+=2);if(-1===t)throw this.raise(this.state.pos-2,f.UnterminatedComment);this.state.pos=t+3}else super.skipBlockComment()}skipFlowComment(){const{pos:t}=this.state;let e=2;for(;[32,9].includes(this.input.charCodeAt(t+e));)e++;const s=this.input.charCodeAt(e+t),i=this.input.charCodeAt(e+t+1);return 58===s&&58===i?e+2:\"flow-include\"===this.input.slice(e+t,e+t+12)?e+12:58===s&&58!==i&&e}hasFlowCommentCompletion(){if(-1===this.input.indexOf(\"*/\",this.state.pos))throw this.raise(this.state.pos,f.UnterminatedComment)}flowEnumErrorBooleanMemberNotInitialized(t,{enumName:e,memberName:s}){this.raise(t,j.EnumBooleanMemberNotInitialized,s,e)}flowEnumErrorInvalidMemberName(t,{enumName:e,memberName:s}){const i=s[0].toUpperCase()+s.slice(1);this.raise(t,j.EnumInvalidMemberName,s,i,e)}flowEnumErrorDuplicateMemberName(t,{enumName:e,memberName:s}){this.raise(t,j.EnumDuplicateMemberName,s,e)}flowEnumErrorInconsistentMemberValues(t,{enumName:e}){this.raise(t,j.EnumInconsistentMemberValues,e)}flowEnumErrorInvalidExplicitType(t,{enumName:e,suppliedType:s}){return this.raise(t,null===s?j.EnumInvalidExplicitTypeUnknownSupplied:j.EnumInvalidExplicitType,e,s)}flowEnumErrorInvalidMemberInitializer(t,{enumName:e,explicitType:s,memberName:i}){let r=null;switch(s){case\"boolean\":case\"number\":case\"string\":r=j.EnumInvalidMemberInitializerPrimaryType;break;case\"symbol\":r=j.EnumInvalidMemberInitializerSymbolType;break;default:r=j.EnumInvalidMemberInitializerUnknownType}return this.raise(t,r,e,i,s)}flowEnumErrorNumberMemberNotInitialized(t,{enumName:e,memberName:s}){this.raise(t,j.EnumNumberMemberNotInitialized,e,s)}flowEnumErrorStringMemberInconsistentlyInitailized(t,{enumName:e}){this.raise(t,j.EnumStringMemberInconsistentlyInitailized,e)}flowEnumMemberInit(){const t=this.state.start,e=()=>this.match(n.comma)||this.match(n.braceR);switch(this.state.type){case n.num:{const s=this.parseLiteral(this.state.value,\"NumericLiteral\");return e()?{type:\"number\",pos:s.start,value:s}:{type:\"invalid\",pos:t}}case n.string:{const s=this.parseLiteral(this.state.value,\"StringLiteral\");return e()?{type:\"string\",pos:s.start,value:s}:{type:\"invalid\",pos:t}}case n._true:case n._false:{const s=this.parseBooleanLiteral();return e()?{type:\"boolean\",pos:s.start,value:s}:{type:\"invalid\",pos:t}}default:return{type:\"invalid\",pos:t}}}flowEnumMemberRaw(){const t=this.state.start;return{id:this.parseIdentifier(!0),init:this.eat(n.eq)?this.flowEnumMemberInit():{type:\"none\",pos:t}}}flowEnumCheckExplicitTypeMismatch(t,e,s){const{explicitType:i}=e;null!==i&&i!==s&&this.flowEnumErrorInvalidMemberInitializer(t,e)}flowEnumMembers({enumName:t,explicitType:e}){const s=new Set,i={booleanMembers:[],numberMembers:[],stringMembers:[],defaultedMembers:[]};for(;!this.match(n.braceR);){const r=this.startNode(),{id:a,init:o}=this.flowEnumMemberRaw(),h=a.name;if(\"\"===h)continue;/^[a-z]/.test(h)&&this.flowEnumErrorInvalidMemberName(a.start,{enumName:t,memberName:h}),s.has(h)&&this.flowEnumErrorDuplicateMemberName(a.start,{enumName:t,memberName:h}),s.add(h);const p={enumName:t,explicitType:e,memberName:h};switch(r.id=a,o.type){case\"boolean\":this.flowEnumCheckExplicitTypeMismatch(o.pos,p,\"boolean\"),r.init=o.value,i.booleanMembers.push(this.finishNode(r,\"EnumBooleanMember\"));break;case\"number\":this.flowEnumCheckExplicitTypeMismatch(o.pos,p,\"number\"),r.init=o.value,i.numberMembers.push(this.finishNode(r,\"EnumNumberMember\"));break;case\"string\":this.flowEnumCheckExplicitTypeMismatch(o.pos,p,\"string\"),r.init=o.value,i.stringMembers.push(this.finishNode(r,\"EnumStringMember\"));break;case\"invalid\":throw this.flowEnumErrorInvalidMemberInitializer(o.pos,p);case\"none\":switch(e){case\"boolean\":this.flowEnumErrorBooleanMemberNotInitialized(o.pos,p);break;case\"number\":this.flowEnumErrorNumberMemberNotInitialized(o.pos,p);break;default:i.defaultedMembers.push(this.finishNode(r,\"EnumDefaultedMember\"))}}this.match(n.braceR)||this.expect(n.comma)}return i}flowEnumStringMembers(t,e,{enumName:s}){if(0===t.length)return e;if(0===e.length)return t;if(e.length>t.length){for(let e=0;e<t.length;e++){const i=t[e];this.flowEnumErrorStringMemberInconsistentlyInitailized(i.start,{enumName:s})}return e}for(let t=0;t<e.length;t++){const i=e[t];this.flowEnumErrorStringMemberInconsistentlyInitailized(i.start,{enumName:s})}return t}flowEnumParseExplicitType({enumName:t}){if(this.eatContextual(\"of\")){if(!this.match(n.name))throw this.flowEnumErrorInvalidExplicitType(this.state.start,{enumName:t,suppliedType:null});const{value:e}=this.state;return this.next(),\"boolean\"!==e&&\"number\"!==e&&\"string\"!==e&&\"symbol\"!==e&&this.flowEnumErrorInvalidExplicitType(this.state.start,{enumName:t,suppliedType:e}),e}return null}flowEnumBody(t,{enumName:e,nameLoc:s}){const i=this.flowEnumParseExplicitType({enumName:e});this.expect(n.braceL);const r=this.flowEnumMembers({enumName:e,explicitType:i});switch(i){case\"boolean\":return t.explicitType=!0,t.members=r.booleanMembers,this.expect(n.braceR),this.finishNode(t,\"EnumBooleanBody\");case\"number\":return t.explicitType=!0,t.members=r.numberMembers,this.expect(n.braceR),this.finishNode(t,\"EnumNumberBody\");case\"string\":return t.explicitType=!0,t.members=this.flowEnumStringMembers(r.stringMembers,r.defaultedMembers,{enumName:e}),this.expect(n.braceR),this.finishNode(t,\"EnumStringBody\");case\"symbol\":return t.members=r.defaultedMembers,this.expect(n.braceR),this.finishNode(t,\"EnumSymbolBody\");default:{const i=()=>(t.members=[],this.expect(n.braceR),this.finishNode(t,\"EnumStringBody\"));t.explicitType=!1;const a=r.booleanMembers.length,o=r.numberMembers.length,h=r.stringMembers.length,p=r.defaultedMembers.length;if(a||o||h||p){if(a||o){if(!o&&!h&&a>=p){for(let t=0,s=r.defaultedMembers;t<s.length;t++){const i=s[t];this.flowEnumErrorBooleanMemberNotInitialized(i.start,{enumName:e,memberName:i.id.name})}return t.members=r.booleanMembers,this.expect(n.braceR),this.finishNode(t,\"EnumBooleanBody\")}if(!a&&!h&&o>=p){for(let t=0,s=r.defaultedMembers;t<s.length;t++){const i=s[t];this.flowEnumErrorNumberMemberNotInitialized(i.start,{enumName:e,memberName:i.id.name})}return t.members=r.numberMembers,this.expect(n.braceR),this.finishNode(t,\"EnumNumberBody\")}return this.flowEnumErrorInconsistentMemberValues(s,{enumName:e}),i()}return t.members=this.flowEnumStringMembers(r.stringMembers,r.defaultedMembers,{enumName:e}),this.expect(n.braceR),this.finishNode(t,\"EnumStringBody\")}return i()}}}flowParseEnumDeclaration(t){const e=this.parseIdentifier();return t.id=e,t.body=this.flowEnumBody(this.startNode(),{enumName:e.name,nameLoc:e.start}),this.finishNode(t,\"EnumDeclaration\")}},typescript:t=>class extends t{getScopeHandler(){return Z}tsIsIdentifier(){return this.match(n.name)}tsNextTokenCanFollowModifier(){return this.next(),!(this.hasPrecedingLineBreak()||this.match(n.parenL)||this.match(n.parenR)||this.match(n.colon)||this.match(n.eq)||this.match(n.question)||this.match(n.bang))}tsParseModifier(t){if(!this.match(n.name))return;const e=this.state.value;return-1!==t.indexOf(e)&&this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))?e:void 0}tsParseModifiers(t,e){for(;;){const s=this.state.start,i=this.tsParseModifier(e);if(!i)break;Object.hasOwnProperty.call(t,i)&&this.raise(s,rt.DuplicateModifier,i),t[i]=!0}}tsIsListTerminator(t){switch(t){case\"EnumMembers\":case\"TypeMembers\":return this.match(n.braceR);case\"HeritageClauseElement\":return this.match(n.braceL);case\"TupleElementTypes\":return this.match(n.bracketR);case\"TypeParametersOrArguments\":return this.isRelational(\">\")}throw new Error(\"Unreachable\")}tsParseList(t,e){const s=[];for(;!this.tsIsListTerminator(t);)s.push(e());return s}tsParseDelimitedList(t,e){return st(this.tsParseDelimitedListWorker(t,e,!0))}tsParseDelimitedListWorker(t,e,s){const i=[];for(;!this.tsIsListTerminator(t);){const r=e();if(null==r)return;if(i.push(r),!this.eat(n.comma)){if(this.tsIsListTerminator(t))break;return void(s&&this.expect(n.comma))}}return i}tsParseBracketedList(t,e,s,i){i||(s?this.expect(n.bracketL):this.expectRelational(\"<\"));const r=this.tsParseDelimitedList(t,e);return s?this.expect(n.bracketR):this.expectRelational(\">\"),r}tsParseImportType(){const t=this.startNode();return this.expect(n._import),this.expect(n.parenL),this.match(n.string)||this.raise(this.state.start,rt.UnsupportedImportTypeArgument),t.argument=this.parseExprAtom(),this.expect(n.parenR),this.eat(n.dot)&&(t.qualifier=this.tsParseEntityName(!0)),this.isRelational(\"<\")&&(t.typeParameters=this.tsParseTypeArguments()),this.finishNode(t,\"TSImportType\")}tsParseEntityName(t){let e=this.parseIdentifier();for(;this.eat(n.dot);){const s=this.startNodeAtNode(e);s.left=e,s.right=this.parseIdentifier(t),e=this.finishNode(s,\"TSQualifiedName\")}return e}tsParseTypeReference(){const t=this.startNode();return t.typeName=this.tsParseEntityName(!1),!this.hasPrecedingLineBreak()&&this.isRelational(\"<\")&&(t.typeParameters=this.tsParseTypeArguments()),this.finishNode(t,\"TSTypeReference\")}tsParseThisTypePredicate(t){this.next();const e=this.startNodeAtNode(t);return e.parameterName=t,e.typeAnnotation=this.tsParseTypeAnnotation(!1),this.finishNode(e,\"TSTypePredicate\")}tsParseThisTypeNode(){const t=this.startNode();return this.next(),this.finishNode(t,\"TSThisType\")}tsParseTypeQuery(){const t=this.startNode();return this.expect(n._typeof),this.match(n._import)?t.exprName=this.tsParseImportType():t.exprName=this.tsParseEntityName(!0),this.finishNode(t,\"TSTypeQuery\")}tsParseTypeParameter(){const t=this.startNode();return t.name=this.parseIdentifierName(t.start),t.constraint=this.tsEatThenParseType(n._extends),t.default=this.tsEatThenParseType(n.eq),this.finishNode(t,\"TSTypeParameter\")}tsTryParseTypeParameters(){if(this.isRelational(\"<\"))return this.tsParseTypeParameters()}tsParseTypeParameters(){const t=this.startNode();return this.isRelational(\"<\")||this.match(n.jsxTagStart)?this.next():this.unexpected(),t.params=this.tsParseBracketedList(\"TypeParametersOrArguments\",this.tsParseTypeParameter.bind(this),!1,!0),this.finishNode(t,\"TSTypeParameterDeclaration\")}tsTryNextParseConstantContext(){return this.lookahead().type===n._const?(this.next(),this.tsParseTypeReference()):null}tsFillSignature(t,e){const s=t===n.arrow;e.typeParameters=this.tsTryParseTypeParameters(),this.expect(n.parenL),e.parameters=this.tsParseBindingListForSignature(),s?e.typeAnnotation=this.tsParseTypeOrTypePredicateAnnotation(t):this.match(t)&&(e.typeAnnotation=this.tsParseTypeOrTypePredicateAnnotation(t))}tsParseBindingListForSignature(){return this.parseBindingList(n.parenR,41).map(t=>(\"Identifier\"!==t.type&&\"RestElement\"!==t.type&&\"ObjectPattern\"!==t.type&&\"ArrayPattern\"!==t.type&&this.raise(t.start,rt.UnsupportedSignatureParameterKind,t.type),t))}tsParseTypeMemberSemicolon(){this.eat(n.comma)||this.semicolon()}tsParseSignatureMember(t,e){return this.tsFillSignature(n.colon,e),this.tsParseTypeMemberSemicolon(),this.finishNode(e,t)}tsIsUnambiguouslyIndexSignature(){return this.next(),this.eat(n.name)&&this.match(n.colon)}tsTryParseIndexSignature(t){if(!this.match(n.bracketL)||!this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))return;this.expect(n.bracketL);const e=this.parseIdentifier();e.typeAnnotation=this.tsParseTypeAnnotation(),this.resetEndLocation(e),this.expect(n.bracketR),t.parameters=[e];const s=this.tsTryParseTypeAnnotation();return s&&(t.typeAnnotation=s),this.tsParseTypeMemberSemicolon(),this.finishNode(t,\"TSIndexSignature\")}tsParsePropertyOrMethodSignature(t,e){this.eat(n.question)&&(t.optional=!0);const s=t;if(e||!this.match(n.parenL)&&!this.isRelational(\"<\")){const t=s;e&&(t.readonly=!0);const i=this.tsTryParseTypeAnnotation();return i&&(t.typeAnnotation=i),this.tsParseTypeMemberSemicolon(),this.finishNode(t,\"TSPropertySignature\")}{const t=s;return this.tsFillSignature(n.colon,t),this.tsParseTypeMemberSemicolon(),this.finishNode(t,\"TSMethodSignature\")}}tsParseTypeMember(){const t=this.startNode();if(this.match(n.parenL)||this.isRelational(\"<\"))return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\",t);if(this.match(n._new)){const e=this.startNode();return this.next(),this.match(n.parenL)||this.isRelational(\"<\")?this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\",t):(t.key=this.createIdentifier(e,\"new\"),this.tsParsePropertyOrMethodSignature(t,!1))}const e=!!this.tsParseModifier([\"readonly\"]),s=this.tsTryParseIndexSignature(t);return s?(e&&(t.readonly=!0),s):(this.parsePropertyName(t,!1),this.tsParsePropertyOrMethodSignature(t,e))}tsParseTypeLiteral(){const t=this.startNode();return t.members=this.tsParseObjectTypeMembers(),this.finishNode(t,\"TSTypeLiteral\")}tsParseObjectTypeMembers(){this.expect(n.braceL);const t=this.tsParseList(\"TypeMembers\",this.tsParseTypeMember.bind(this));return this.expect(n.braceR),t}tsIsStartOfMappedType(){return this.next(),this.eat(n.plusMin)?this.isContextual(\"readonly\"):(this.isContextual(\"readonly\")&&this.next(),!!this.match(n.bracketL)&&(this.next(),!!this.tsIsIdentifier()&&(this.next(),this.match(n._in))))}tsParseMappedTypeParameter(){const t=this.startNode();return t.name=this.parseIdentifierName(t.start),t.constraint=this.tsExpectThenParseType(n._in),this.finishNode(t,\"TSTypeParameter\")}tsParseMappedType(){const t=this.startNode();return this.expect(n.braceL),this.match(n.plusMin)?(t.readonly=this.state.value,this.next(),this.expectContextual(\"readonly\")):this.eatContextual(\"readonly\")&&(t.readonly=!0),this.expect(n.bracketL),t.typeParameter=this.tsParseMappedTypeParameter(),this.expect(n.bracketR),this.match(n.plusMin)?(t.optional=this.state.value,this.next(),this.expect(n.question)):this.eat(n.question)&&(t.optional=!0),t.typeAnnotation=this.tsTryParseType(),this.semicolon(),this.expect(n.braceR),this.finishNode(t,\"TSMappedType\")}tsParseTupleType(){const t=this.startNode();t.elementTypes=this.tsParseBracketedList(\"TupleElementTypes\",this.tsParseTupleElementType.bind(this),!0,!1);let e=!1;return t.elementTypes.forEach(t=>{\"TSOptionalType\"===t.type?e=!0:e&&\"TSRestType\"!==t.type&&this.raise(t.start,rt.OptionalTypeBeforeRequired)}),this.finishNode(t,\"TSTupleType\")}tsParseTupleElementType(){if(this.match(n.ellipsis)){const t=this.startNode();return this.next(),t.typeAnnotation=this.tsParseType(),this.match(n.comma)&&93!==this.lookaheadCharCode()&&this.raiseRestNotLast(this.state.start),this.finishNode(t,\"TSRestType\")}const t=this.tsParseType();if(this.eat(n.question)){const e=this.startNodeAtNode(t);return e.typeAnnotation=t,this.finishNode(e,\"TSOptionalType\")}return t}tsParseParenthesizedType(){const t=this.startNode();return this.expect(n.parenL),t.typeAnnotation=this.tsParseType(),this.expect(n.parenR),this.finishNode(t,\"TSParenthesizedType\")}tsParseFunctionOrConstructorType(t){const e=this.startNode();return\"TSConstructorType\"===t&&this.expect(n._new),this.tsFillSignature(n.arrow,e),this.finishNode(e,t)}tsParseLiteralTypeNode(){const t=this.startNode();return t.literal=(()=>{switch(this.state.type){case n.num:case n.string:case n._true:case n._false:return this.parseExprAtom();default:throw this.unexpected()}})(),this.finishNode(t,\"TSLiteralType\")}tsParseTemplateLiteralType(){const t=this.startNode(),e=this.parseTemplate(!1);return e.expressions.length>0&&this.raise(e.expressions[0].start,rt.TemplateTypeHasSubstitution),t.literal=e,this.finishNode(t,\"TSLiteralType\")}tsParseThisTypeOrThisTypePredicate(){const t=this.tsParseThisTypeNode();return this.isContextual(\"is\")&&!this.hasPrecedingLineBreak()?this.tsParseThisTypePredicate(t):t}tsParseNonArrayType(){switch(this.state.type){case n.name:case n._void:case n._null:{const t=this.match(n._void)?\"TSVoidKeyword\":this.match(n._null)?\"TSNullKeyword\":function(t){switch(t){case\"any\":return\"TSAnyKeyword\";case\"boolean\":return\"TSBooleanKeyword\";case\"bigint\":return\"TSBigIntKeyword\";case\"never\":return\"TSNeverKeyword\";case\"number\":return\"TSNumberKeyword\";case\"object\":return\"TSObjectKeyword\";case\"string\":return\"TSStringKeyword\";case\"symbol\":return\"TSSymbolKeyword\";case\"undefined\":return\"TSUndefinedKeyword\";case\"unknown\":return\"TSUnknownKeyword\";default:return}}(this.state.value);if(void 0!==t&&46!==this.lookaheadCharCode()){const e=this.startNode();return this.next(),this.finishNode(e,t)}return this.tsParseTypeReference()}case n.string:case n.num:case n._true:case n._false:return this.tsParseLiteralTypeNode();case n.plusMin:if(\"-\"===this.state.value){const t=this.startNode();if(this.lookahead().type!==n.num)throw this.unexpected();return t.literal=this.parseMaybeUnary(),this.finishNode(t,\"TSLiteralType\")}break;case n._this:return this.tsParseThisTypeOrThisTypePredicate();case n._typeof:return this.tsParseTypeQuery();case n._import:return this.tsParseImportType();case n.braceL:return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))?this.tsParseMappedType():this.tsParseTypeLiteral();case n.bracketL:return this.tsParseTupleType();case n.parenL:return this.tsParseParenthesizedType();case n.backQuote:return this.tsParseTemplateLiteralType()}throw this.unexpected()}tsParseArrayTypeOrHigher(){let t=this.tsParseNonArrayType();for(;!this.hasPrecedingLineBreak()&&this.eat(n.bracketL);)if(this.match(n.bracketR)){const e=this.startNodeAtNode(t);e.elementType=t,this.expect(n.bracketR),t=this.finishNode(e,\"TSArrayType\")}else{const e=this.startNodeAtNode(t);e.objectType=t,e.indexType=this.tsParseType(),this.expect(n.bracketR),t=this.finishNode(e,\"TSIndexedAccessType\")}return t}tsParseTypeOperator(t){const e=this.startNode();return this.expectContextual(t),e.operator=t,e.typeAnnotation=this.tsParseTypeOperatorOrHigher(),\"readonly\"===t&&this.tsCheckTypeAnnotationForReadOnly(e),this.finishNode(e,\"TSTypeOperator\")}tsCheckTypeAnnotationForReadOnly(t){switch(t.typeAnnotation.type){case\"TSTupleType\":case\"TSArrayType\":return;default:this.raise(t.start,rt.UnexpectedReadonly)}}tsParseInferType(){const t=this.startNode();this.expectContextual(\"infer\");const e=this.startNode();return e.name=this.parseIdentifierName(e.start),t.typeParameter=this.finishNode(e,\"TSTypeParameter\"),this.finishNode(t,\"TSInferType\")}tsParseTypeOperatorOrHigher(){const t=[\"keyof\",\"unique\",\"readonly\"].find(t=>this.isContextual(t));return t?this.tsParseTypeOperator(t):this.isContextual(\"infer\")?this.tsParseInferType():this.tsParseArrayTypeOrHigher()}tsParseUnionOrIntersectionType(t,e,s){this.eat(s);let i=e();if(this.match(s)){const r=[i];for(;this.eat(s);)r.push(e());const a=this.startNodeAtNode(i);a.types=r,i=this.finishNode(a,t)}return i}tsParseIntersectionTypeOrHigher(){return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\",this.tsParseTypeOperatorOrHigher.bind(this),n.bitwiseAND)}tsParseUnionTypeOrHigher(){return this.tsParseUnionOrIntersectionType(\"TSUnionType\",this.tsParseIntersectionTypeOrHigher.bind(this),n.bitwiseOR)}tsIsStartOfFunctionType(){return!!this.isRelational(\"<\")||this.match(n.parenL)&&this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))}tsSkipParameterStart(){if(this.match(n.name)||this.match(n._this))return this.next(),!0;if(this.match(n.braceL)){let t=1;for(this.next();t>0;)this.match(n.braceL)?++t:this.match(n.braceR)&&--t,this.next();return!0}if(this.match(n.bracketL)){let t=1;for(this.next();t>0;)this.match(n.bracketL)?++t:this.match(n.bracketR)&&--t,this.next();return!0}return!1}tsIsUnambiguouslyStartOfFunctionType(){if(this.next(),this.match(n.parenR)||this.match(n.ellipsis))return!0;if(this.tsSkipParameterStart()){if(this.match(n.colon)||this.match(n.comma)||this.match(n.question)||this.match(n.eq))return!0;if(this.match(n.parenR)&&(this.next(),this.match(n.arrow)))return!0}return!1}tsParseTypeOrTypePredicateAnnotation(t){return this.tsInType(()=>{const e=this.startNode();this.expect(t);const s=this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));if(s&&this.match(n._this)){let t=this.tsParseThisTypeOrThisTypePredicate();if(\"TSThisType\"===t.type){const s=this.startNodeAtNode(e);s.parameterName=t,s.asserts=!0,t=this.finishNode(s,\"TSTypePredicate\")}else t.asserts=!0;return e.typeAnnotation=t,this.finishNode(e,\"TSTypeAnnotation\")}const i=this.tsIsIdentifier()&&this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));if(!i){if(!s)return this.tsParseTypeAnnotation(!1,e);const t=this.startNodeAtNode(e);return t.parameterName=this.parseIdentifier(),t.asserts=s,e.typeAnnotation=this.finishNode(t,\"TSTypePredicate\"),this.finishNode(e,\"TSTypeAnnotation\")}const r=this.tsParseTypeAnnotation(!1),a=this.startNodeAtNode(e);return a.parameterName=i,a.typeAnnotation=r,a.asserts=s,e.typeAnnotation=this.finishNode(a,\"TSTypePredicate\"),this.finishNode(e,\"TSTypeAnnotation\")})}tsTryParseTypeOrTypePredicateAnnotation(){return this.match(n.colon)?this.tsParseTypeOrTypePredicateAnnotation(n.colon):void 0}tsTryParseTypeAnnotation(){return this.match(n.colon)?this.tsParseTypeAnnotation():void 0}tsTryParseType(){return this.tsEatThenParseType(n.colon)}tsParseTypePredicatePrefix(){const t=this.parseIdentifier();if(this.isContextual(\"is\")&&!this.hasPrecedingLineBreak())return this.next(),t}tsParseTypePredicateAsserts(){if(!this.match(n.name)||\"asserts\"!==this.state.value||this.hasPrecedingLineBreak())return!1;const t=this.state.containsEsc;return this.next(),!(!this.match(n.name)&&!this.match(n._this))&&(t&&this.raise(this.state.lastTokStart,f.InvalidEscapedReservedWord,\"asserts\"),!0)}tsParseTypeAnnotation(t=!0,e=this.startNode()){return this.tsInType(()=>{t&&this.expect(n.colon),e.typeAnnotation=this.tsParseType()}),this.finishNode(e,\"TSTypeAnnotation\")}tsParseType(){it(this.state.inType);const t=this.tsParseNonConditionalType();if(this.hasPrecedingLineBreak()||!this.eat(n._extends))return t;const e=this.startNodeAtNode(t);return e.checkType=t,e.extendsType=this.tsParseNonConditionalType(),this.expect(n.question),e.trueType=this.tsParseType(),this.expect(n.colon),e.falseType=this.tsParseType(),this.finishNode(e,\"TSConditionalType\")}tsParseNonConditionalType(){return this.tsIsStartOfFunctionType()?this.tsParseFunctionOrConstructorType(\"TSFunctionType\"):this.match(n._new)?this.tsParseFunctionOrConstructorType(\"TSConstructorType\"):this.tsParseUnionTypeOrHigher()}tsParseTypeAssertion(){const t=this.startNode(),e=this.tsTryNextParseConstantContext();return t.typeAnnotation=e||this.tsNextThenParseType(),this.expectRelational(\">\"),t.expression=this.parseMaybeUnary(),this.finishNode(t,\"TSTypeAssertion\")}tsParseHeritageClause(t){const e=this.state.start,s=this.tsParseDelimitedList(\"HeritageClauseElement\",this.tsParseExpressionWithTypeArguments.bind(this));return s.length||this.raise(e,rt.EmptyHeritageClauseType,t),s}tsParseExpressionWithTypeArguments(){const t=this.startNode();return t.expression=this.tsParseEntityName(!1),this.isRelational(\"<\")&&(t.typeParameters=this.tsParseTypeArguments()),this.finishNode(t,\"TSExpressionWithTypeArguments\")}tsParseInterfaceDeclaration(t){t.id=this.parseIdentifier(),this.checkLVal(t.id,130,void 0,\"typescript interface declaration\"),t.typeParameters=this.tsTryParseTypeParameters(),this.eat(n._extends)&&(t.extends=this.tsParseHeritageClause(\"extends\"));const e=this.startNode();return e.body=this.tsInType(this.tsParseObjectTypeMembers.bind(this)),t.body=this.finishNode(e,\"TSInterfaceBody\"),this.finishNode(t,\"TSInterfaceDeclaration\")}tsParseTypeAliasDeclaration(t){return t.id=this.parseIdentifier(),this.checkLVal(t.id,2,void 0,\"typescript type alias\"),t.typeParameters=this.tsTryParseTypeParameters(),t.typeAnnotation=this.tsExpectThenParseType(n.eq),this.semicolon(),this.finishNode(t,\"TSTypeAliasDeclaration\")}tsInNoContext(t){const e=this.state.context;this.state.context=[e[0]];try{return t()}finally{this.state.context=e}}tsInType(t){const e=this.state.inType;this.state.inType=!0;try{return t()}finally{this.state.inType=e}}tsEatThenParseType(t){return this.match(t)?this.tsNextThenParseType():void 0}tsExpectThenParseType(t){return this.tsDoThenParseType(()=>this.expect(t))}tsNextThenParseType(){return this.tsDoThenParseType(()=>this.next())}tsDoThenParseType(t){return this.tsInType(()=>(t(),this.tsParseType()))}tsParseEnumMember(){const t=this.startNode();return t.id=this.match(n.string)?this.parseExprAtom():this.parseIdentifier(!0),this.eat(n.eq)&&(t.initializer=this.parseMaybeAssign()),this.finishNode(t,\"TSEnumMember\")}tsParseEnumDeclaration(t,e){return e&&(t.const=!0),t.id=this.parseIdentifier(),this.checkLVal(t.id,e?779:267,void 0,\"typescript enum declaration\"),this.expect(n.braceL),t.members=this.tsParseDelimitedList(\"EnumMembers\",this.tsParseEnumMember.bind(this)),this.expect(n.braceR),this.finishNode(t,\"TSEnumDeclaration\")}tsParseModuleBlock(){const t=this.startNode();return this.scope.enter(0),this.expect(n.braceL),this.parseBlockOrModuleBlockBody(t.body=[],void 0,!0,n.braceR),this.scope.exit(),this.finishNode(t,\"TSModuleBlock\")}tsParseModuleOrNamespaceDeclaration(t,e=!1){if(t.id=this.parseIdentifier(),e||this.checkLVal(t.id,1024,null,\"module or namespace declaration\"),this.eat(n.dot)){const e=this.startNode();this.tsParseModuleOrNamespaceDeclaration(e,!0),t.body=e}else this.scope.enter(128),this.prodParam.enter(0),t.body=this.tsParseModuleBlock(),this.prodParam.exit(),this.scope.exit();return this.finishNode(t,\"TSModuleDeclaration\")}tsParseAmbientExternalModuleDeclaration(t){return this.isContextual(\"global\")?(t.global=!0,t.id=this.parseIdentifier()):this.match(n.string)?t.id=this.parseExprAtom():this.unexpected(),this.match(n.braceL)?(this.scope.enter(128),this.prodParam.enter(0),t.body=this.tsParseModuleBlock(),this.prodParam.exit(),this.scope.exit()):this.semicolon(),this.finishNode(t,\"TSModuleDeclaration\")}tsParseImportEqualsDeclaration(t,e){return t.isExport=e||!1,t.id=this.parseIdentifier(),this.checkLVal(t.id,9,void 0,\"import equals declaration\"),this.expect(n.eq),t.moduleReference=this.tsParseModuleReference(),this.semicolon(),this.finishNode(t,\"TSImportEqualsDeclaration\")}tsIsExternalModuleReference(){return this.isContextual(\"require\")&&40===this.lookaheadCharCode()}tsParseModuleReference(){return this.tsIsExternalModuleReference()?this.tsParseExternalModuleReference():this.tsParseEntityName(!1)}tsParseExternalModuleReference(){const t=this.startNode();if(this.expectContextual(\"require\"),this.expect(n.parenL),!this.match(n.string))throw this.unexpected();return t.expression=this.parseExprAtom(),this.expect(n.parenR),this.finishNode(t,\"TSExternalModuleReference\")}tsLookAhead(t){const e=this.state.clone(),s=t();return this.state=e,s}tsTryParseAndCatch(t){const e=this.tryParse(e=>t()||e());if(!e.aborted&&e.node)return e.error&&(this.state=e.failState),e.node}tsTryParse(t){const e=this.state.clone(),s=t();return void 0!==s&&!1!==s?s:void(this.state=e)}tsTryParseDeclare(t){if(this.isLineTerminator())return;let e,s=this.state.type;switch(this.isContextual(\"let\")&&(s=n._var,e=\"let\"),s){case n._function:return this.parseFunctionStatement(t,!1,!0);case n._class:return t.declare=!0,this.parseClass(t,!0,!1);case n._const:if(this.match(n._const)&&this.isLookaheadContextual(\"enum\"))return this.expect(n._const),this.expectContextual(\"enum\"),this.tsParseEnumDeclaration(t,!0);case n._var:return e=e||this.state.value,this.parseVarStatement(t,e);case n.name:{const e=this.state.value;return\"global\"===e?this.tsParseAmbientExternalModuleDeclaration(t):this.tsParseDeclaration(t,e,!0)}}}tsTryParseExportDeclaration(){return this.tsParseDeclaration(this.startNode(),this.state.value,!0)}tsParseExpressionStatement(t,e){switch(e.name){case\"declare\":{const e=this.tsTryParseDeclare(t);if(e)return e.declare=!0,e;break}case\"global\":if(this.match(n.braceL)){this.scope.enter(128),this.prodParam.enter(0);const s=t;return s.global=!0,s.id=e,s.body=this.tsParseModuleBlock(),this.scope.exit(),this.prodParam.exit(),this.finishNode(s,\"TSModuleDeclaration\")}break;default:return this.tsParseDeclaration(t,e.name,!1)}}tsParseDeclaration(t,e,s){switch(e){case\"abstract\":if(this.tsCheckLineTerminatorAndMatch(n._class,s)){const e=t;return e.abstract=!0,s&&(this.next(),this.match(n._class)||this.unexpected(null,n._class)),this.parseClass(e,!0,!1)}break;case\"enum\":if(s||this.match(n.name))return s&&this.next(),this.tsParseEnumDeclaration(t,!1);break;case\"interface\":if(this.tsCheckLineTerminatorAndMatch(n.name,s))return s&&this.next(),this.tsParseInterfaceDeclaration(t);break;case\"module\":if(s&&this.next(),this.match(n.string))return this.tsParseAmbientExternalModuleDeclaration(t);if(this.tsCheckLineTerminatorAndMatch(n.name,s))return this.tsParseModuleOrNamespaceDeclaration(t);break;case\"namespace\":if(this.tsCheckLineTerminatorAndMatch(n.name,s))return s&&this.next(),this.tsParseModuleOrNamespaceDeclaration(t);break;case\"type\":if(this.tsCheckLineTerminatorAndMatch(n.name,s))return s&&this.next(),this.tsParseTypeAliasDeclaration(t)}}tsCheckLineTerminatorAndMatch(t,e){return(e||this.match(t))&&!this.isLineTerminator()}tsTryParseGenericAsyncArrowFunction(t,e){if(!this.isRelational(\"<\"))return;const s=this.state.maybeInArrowParameters,i=this.state.yieldPos,r=this.state.awaitPos;this.state.maybeInArrowParameters=!0,this.state.yieldPos=-1,this.state.awaitPos=-1;const a=this.tsTryParseAndCatch(()=>{const s=this.startNodeAt(t,e);return s.typeParameters=this.tsParseTypeParameters(),super.parseFunctionParams(s),s.returnType=this.tsTryParseTypeOrTypePredicateAnnotation(),this.expect(n.arrow),s});return this.state.maybeInArrowParameters=s,this.state.yieldPos=i,this.state.awaitPos=r,a?this.parseArrowExpression(a,null,!0):void 0}tsParseTypeArguments(){const t=this.startNode();return t.params=this.tsInType(()=>this.tsInNoContext(()=>(this.expectRelational(\"<\"),this.tsParseDelimitedList(\"TypeParametersOrArguments\",this.tsParseType.bind(this))))),this.state.exprAllowed=!1,this.expectRelational(\">\"),this.finishNode(t,\"TSTypeParameterInstantiation\")}tsIsDeclarationStart(){if(this.match(n.name))switch(this.state.value){case\"abstract\":case\"declare\":case\"enum\":case\"interface\":case\"module\":case\"namespace\":case\"type\":return!0}return!1}isExportDefaultSpecifier(){return!this.tsIsDeclarationStart()&&super.isExportDefaultSpecifier()}parseAssignableListItem(t,e){const s=this.state.start,i=this.state.startLoc;let r,a=!1;t&&(r=this.parseAccessModifier(),a=!!this.tsParseModifier([\"readonly\"]));const n=this.parseMaybeDefault();this.parseAssignableListItemTypes(n);const o=this.parseMaybeDefault(n.start,n.loc.start,n);if(r||a){const t=this.startNodeAt(s,i);return e.length&&(t.decorators=e),r&&(t.accessibility=r),a&&(t.readonly=a),\"Identifier\"!==o.type&&\"AssignmentPattern\"!==o.type&&this.raise(t.start,rt.UnsupportedParameterPropertyKind),t.parameter=o,this.finishNode(t,\"TSParameterProperty\")}return e.length&&(n.decorators=e),o}parseFunctionBodyAndFinish(t,e,s=!1){this.match(n.colon)&&(t.returnType=this.tsParseTypeOrTypePredicateAnnotation(n.colon));const i=\"FunctionDeclaration\"===e?\"TSDeclareFunction\":\"ClassMethod\"===e?\"TSDeclareMethod\":void 0;i&&!this.match(n.braceL)&&this.isLineTerminator()?this.finishNode(t,i):super.parseFunctionBodyAndFinish(t,e,s)}registerFunctionStatementId(t){!t.body&&t.id?this.checkLVal(t.id,1024,null,\"function name\"):super.registerFunctionStatementId(...arguments)}parseSubscript(t,e,s,i,r){if(!this.hasPrecedingLineBreak()&&this.match(n.bang)){this.state.exprAllowed=!1,this.next();const i=this.startNodeAt(e,s);return i.expression=t,this.finishNode(i,\"TSNonNullExpression\")}if(this.isRelational(\"<\")){const a=this.tsTryParseAndCatch(()=>{if(!i&&this.atPossibleAsyncArrow(t)){const t=this.tsTryParseGenericAsyncArrowFunction(e,s);if(t)return t}const a=this.startNodeAt(e,s);a.callee=t;const o=this.tsParseTypeArguments();if(o){if(!i&&this.eat(n.parenL))return a.arguments=this.parseCallExpressionArguments(n.parenR,!1),a.typeParameters=o,this.finishCallExpression(a,r.optionalChainMember);if(this.match(n.backQuote))return this.parseTaggedTemplateExpression(e,s,t,r,o)}this.unexpected()});if(a)return a}return super.parseSubscript(t,e,s,i,r)}parseNewArguments(t){if(this.isRelational(\"<\")){const e=this.tsTryParseAndCatch(()=>{const t=this.tsParseTypeArguments();return this.match(n.parenL)||this.unexpected(),t});e&&(t.typeParameters=e)}super.parseNewArguments(t)}parseExprOp(t,e,s,i,r){if(st(n._in.binop)>i&&!this.hasPrecedingLineBreak()&&this.isContextual(\"as\")){const a=this.startNodeAt(e,s);a.expression=t;const n=this.tsTryNextParseConstantContext();return a.typeAnnotation=n||this.tsNextThenParseType(),this.finishNode(a,\"TSAsExpression\"),this.parseExprOp(a,e,s,i,r)}return super.parseExprOp(t,e,s,i,r)}checkReservedWord(t,e,s,i){}checkDuplicateExports(){}parseImport(t){if(this.match(n.name)||this.match(n.star)||this.match(n.braceL)){const e=this.lookahead();if(this.match(n.name)&&e.type===n.eq)return this.tsParseImportEqualsDeclaration(t);!this.isContextual(\"type\")||e.type===n.comma||e.type===n.name&&\"from\"===e.value?t.importKind=\"value\":(t.importKind=\"type\",this.next())}const e=super.parseImport(t);return\"type\"===e.importKind&&e.specifiers.length>1&&\"ImportDefaultSpecifier\"===e.specifiers[0].type&&this.raise(e.start,\"A type-only import can specify a default import or named bindings, but not both.\"),e}parseExport(t){if(this.match(n._import))return this.expect(n._import),this.tsParseImportEqualsDeclaration(t,!0);if(this.eat(n.eq)){const e=t;return e.expression=this.parseExpression(),this.semicolon(),this.finishNode(e,\"TSExportAssignment\")}if(this.eatContextual(\"as\")){const e=t;return this.expectContextual(\"namespace\"),e.id=this.parseIdentifier(),this.semicolon(),this.finishNode(e,\"TSNamespaceExportDeclaration\")}return this.isContextual(\"type\")&&this.lookahead().type===n.braceL?(this.next(),t.exportKind=\"type\"):t.exportKind=\"value\",super.parseExport(t)}isAbstractClass(){return this.isContextual(\"abstract\")&&this.lookahead().type===n._class}parseExportDefaultExpression(){if(this.isAbstractClass()){const t=this.startNode();return this.next(),this.parseClass(t,!0,!0),t.abstract=!0,t}if(\"interface\"===this.state.value){const t=this.tsParseDeclaration(this.startNode(),this.state.value,!0);if(t)return t}return super.parseExportDefaultExpression()}parseStatementContent(t,e){if(this.state.type===n._const){const t=this.lookahead();if(t.type===n.name&&\"enum\"===t.value){const t=this.startNode();return this.expect(n._const),this.expectContextual(\"enum\"),this.tsParseEnumDeclaration(t,!0)}}return super.parseStatementContent(t,e)}parseAccessModifier(){return this.tsParseModifier([\"public\",\"protected\",\"private\"])}parseClassMember(t,e,s,i){this.tsParseModifiers(e,[\"declare\"]);const r=this.parseAccessModifier();r&&(e.accessibility=r),this.tsParseModifiers(e,[\"declare\"]),super.parseClassMember(t,e,s,i)}parseClassMemberWithIsStatic(t,e,s,i,r){this.tsParseModifiers(e,[\"abstract\",\"readonly\",\"declare\"]);const a=this.tsTryParseIndexSignature(e);if(a)return t.body.push(a),e.abstract&&this.raise(e.start,rt.IndexSignatureHasAbstract),i&&this.raise(e.start,rt.IndexSignatureHasStatic),void(e.accessibility&&this.raise(e.start,rt.IndexSignatureHasAccessibility,e.accessibility));super.parseClassMemberWithIsStatic(t,e,s,i,r)}parsePostMemberNameModifiers(t){this.eat(n.question)&&(t.optional=!0),t.readonly&&this.match(n.parenL)&&this.raise(t.start,rt.ClassMethodHasReadonly),t.declare&&this.match(n.parenL)&&this.raise(t.start,rt.ClassMethodHasDeclare)}parseExpressionStatement(t,e){return(\"Identifier\"===e.type?this.tsParseExpressionStatement(t,e):void 0)||super.parseExpressionStatement(t,e)}shouldParseExportDeclaration(){return!!this.tsIsDeclarationStart()||super.shouldParseExportDeclaration()}parseConditional(t,e,s,i,r){if(!r||!this.match(n.question))return super.parseConditional(t,e,s,i,r);const a=this.tryParse(()=>super.parseConditional(t,e,s,i));return a.node?(a.error&&(this.state=a.failState),a.node):(r.start=a.error.pos||this.state.start,t)}parseParenItem(t,e,s){if(t=super.parseParenItem(t,e,s),this.eat(n.question)&&(t.optional=!0,this.resetEndLocation(t)),this.match(n.colon)){const i=this.startNodeAt(e,s);return i.expression=t,i.typeAnnotation=this.tsParseTypeAnnotation(),this.finishNode(i,\"TSTypeCastExpression\")}return t}parseExportDeclaration(t){const e=this.state.start,s=this.state.startLoc,i=this.eatContextual(\"declare\");let r;return this.match(n.name)&&(r=this.tsTryParseExportDeclaration()),r||(r=super.parseExportDeclaration(t)),r&&(\"TSInterfaceDeclaration\"===r.type||\"TSTypeAliasDeclaration\"===r.type||i)&&(t.exportKind=\"type\"),r&&i&&(this.resetStartLocation(r,e,s),r.declare=!0),r}parseClassId(t,e,s){if((!e||s)&&this.isContextual(\"implements\"))return;super.parseClassId(t,e,s,t.declare?1024:139);const i=this.tsTryParseTypeParameters();i&&(t.typeParameters=i)}parseClassPropertyAnnotation(t){!t.optional&&this.eat(n.bang)&&(t.definite=!0);const e=this.tsTryParseTypeAnnotation();e&&(t.typeAnnotation=e)}parseClassProperty(t){return this.parseClassPropertyAnnotation(t),t.declare&&this.match(n.equal)&&this.raise(this.state.start,rt.DeclareClassFieldHasInitializer),super.parseClassProperty(t)}parseClassPrivateProperty(t){return t.abstract&&this.raise(t.start,rt.PrivateElementHasAbstract),t.accessibility&&this.raise(t.start,rt.PrivateElementHasAccessibility,t.accessibility),this.parseClassPropertyAnnotation(t),super.parseClassPrivateProperty(t)}pushClassMethod(t,e,s,i,r,a){const n=this.tsTryParseTypeParameters();n&&(e.typeParameters=n),super.pushClassMethod(t,e,s,i,r,a)}pushClassPrivateMethod(t,e,s,i){const r=this.tsTryParseTypeParameters();r&&(e.typeParameters=r),super.pushClassPrivateMethod(t,e,s,i)}parseClassSuper(t){super.parseClassSuper(t),t.superClass&&this.isRelational(\"<\")&&(t.superTypeParameters=this.tsParseTypeArguments()),this.eatContextual(\"implements\")&&(t.implements=this.tsParseHeritageClause(\"implements\"))}parseObjPropValue(t,...e){const s=this.tsTryParseTypeParameters();s&&(t.typeParameters=s),super.parseObjPropValue(t,...e)}parseFunctionParams(t,e){const s=this.tsTryParseTypeParameters();s&&(t.typeParameters=s),super.parseFunctionParams(t,e)}parseVarId(t,e){super.parseVarId(t,e),\"Identifier\"===t.id.type&&this.eat(n.bang)&&(t.definite=!0);const s=this.tsTryParseTypeAnnotation();s&&(t.id.typeAnnotation=s,this.resetEndLocation(t.id))}parseAsyncArrowFromCallExpression(t,e){return this.match(n.colon)&&(t.returnType=this.tsParseTypeAnnotation()),super.parseAsyncArrowFromCallExpression(t,e)}parseMaybeAssign(...t){let e,s,i,r;if(this.match(n.jsxTagStart)){if(e=this.state.clone(),s=this.tryParse(()=>super.parseMaybeAssign(...t),e),!s.error)return s.node;const{context:i}=this.state;i[i.length-1]===x.j_oTag?i.length-=2:i[i.length-1]===x.j_expr&&(i.length-=1)}if(!(s&&s.error||this.isRelational(\"<\")))return super.parseMaybeAssign(...t);e=e||this.state.clone();const a=this.tryParse(e=>{r=this.tsParseTypeParameters();const s=super.parseMaybeAssign(...t);return(\"ArrowFunctionExpression\"!==s.type||s.extra&&s.extra.parenthesized)&&e(),r&&0!==r.params.length&&this.resetStartLocationFromNode(s,r),s.typeParameters=r,s},e);if(!a.error&&!a.aborted)return a.node;if(!s&&(it(!this.hasPlugin(\"jsx\")),i=this.tryParse(()=>super.parseMaybeAssign(...t),e),!i.error))return i.node;if(s&&s.node)return this.state=s.failState,s.node;if(a.node)return this.state=a.failState,a.node;if(i&&i.node)return this.state=i.failState,i.node;if(s&&s.thrown)throw s.error;if(a.thrown)throw a.error;if(i&&i.thrown)throw i.error;throw s&&s.error||a.error||i&&i.error}parseMaybeUnary(t){return!this.hasPlugin(\"jsx\")&&this.isRelational(\"<\")?this.tsParseTypeAssertion():super.parseMaybeUnary(t)}parseArrow(t){if(this.match(n.colon)){const e=this.tryParse(t=>{const e=this.tsParseTypeOrTypePredicateAnnotation(n.colon);return!this.canInsertSemicolon()&&this.match(n.arrow)||t(),e});if(e.aborted)return;e.thrown||(e.error&&(this.state=e.failState),t.returnType=e.node)}return super.parseArrow(t)}parseAssignableListItemTypes(t){this.eat(n.question)&&(\"Identifier\"!==t.type&&this.raise(t.start,rt.PatternIsOptional),t.optional=!0);const e=this.tsTryParseTypeAnnotation();return e&&(t.typeAnnotation=e),this.resetEndLocation(t),t}toAssignable(t){switch(t.type){case\"TSTypeCastExpression\":return super.toAssignable(this.typeCastToParameter(t));case\"TSParameterProperty\":return super.toAssignable(t);case\"TSAsExpression\":case\"TSNonNullExpression\":case\"TSTypeAssertion\":return t.expression=this.toAssignable(t.expression),t;default:return super.toAssignable(t)}}checkLVal(t,e=64,s,i){switch(t.type){case\"TSTypeCastExpression\":return;case\"TSParameterProperty\":return void this.checkLVal(t.parameter,e,s,\"parameter property\");case\"TSAsExpression\":case\"TSNonNullExpression\":case\"TSTypeAssertion\":return void this.checkLVal(t.expression,e,s,i);default:return void super.checkLVal(t,e,s,i)}}parseBindingAtom(){switch(this.state.type){case n._this:return this.parseIdentifier(!0);default:return super.parseBindingAtom()}}parseMaybeDecoratorArguments(t){if(this.isRelational(\"<\")){const e=this.tsParseTypeArguments();if(this.match(n.parenL)){const s=super.parseMaybeDecoratorArguments(t);return s.typeParameters=e,s}this.unexpected(this.state.start,n.parenL)}return super.parseMaybeDecoratorArguments(t)}isClassMethod(){return this.isRelational(\"<\")||super.isClassMethod()}isClassProperty(){return this.match(n.bang)||this.match(n.colon)||super.isClassProperty()}parseMaybeDefault(...t){const e=super.parseMaybeDefault(...t);return\"AssignmentPattern\"===e.type&&e.typeAnnotation&&e.right.start<e.typeAnnotation.start&&this.raise(e.typeAnnotation.start,rt.TypeAnnotationAfterAssign),e}getTokenFromCode(t){return!this.state.inType||62!==t&&60!==t?super.getTokenFromCode(t):this.finishOp(n.relational,1)}toAssignableList(t){for(let e=0;e<t.length;e++){const s=t[e];if(s)switch(s.type){case\"TSTypeCastExpression\":t[e]=this.typeCastToParameter(s);break;case\"TSAsExpression\":case\"TSTypeAssertion\":this.state.maybeInArrowParameters?this.raise(s.start,rt.UnexpectedTypeCastInParameter):t[e]=this.typeCastToParameter(s)}}return super.toAssignableList(...arguments)}typeCastToParameter(t){return t.expression.typeAnnotation=t.typeAnnotation,this.resetEndLocation(t.expression,t.typeAnnotation.end,t.typeAnnotation.loc.end),t.expression}toReferencedList(t,e){for(let e=0;e<t.length;e++){const s=t[e];s&&\"TSTypeCastExpression\"===s.type&&this.raise(s.start,rt.UnexpectedTypeAnnotation)}return t}shouldParseArrow(){return this.match(n.colon)||super.shouldParseArrow()}shouldParseAsyncArrow(){return this.match(n.colon)||super.shouldParseAsyncArrow()}canHaveLeadingDecorator(){return super.canHaveLeadingDecorator()||this.isAbstractClass()}jsxParseOpeningElementAfterName(t){if(this.isRelational(\"<\")){const e=this.tsTryParseAndCatch(()=>this.tsParseTypeArguments());e&&(t.typeParameters=e)}return super.jsxParseOpeningElementAfterName(t)}getGetterSetterExpectedParamCount(t){const e=super.getGetterSetterExpectedParamCount(t),s=t.params[0];return s&&\"Identifier\"===s.type&&\"this\"===s.name?e+1:e}},v8intrinsic:t=>class extends t{parseV8Intrinsic(){if(this.match(n.modulo)){const t=this.state.start,e=this.startNode();if(this.eat(n.modulo),this.match(n.name)){const t=this.parseIdentifierName(this.state.start),s=this.createIdentifier(e,t);if(s.type=\"V8IntrinsicIdentifier\",this.match(n.parenL))return s}this.unexpected(t)}}parseExprAtom(){return this.parseV8Intrinsic()||super.parseExprAtom(...arguments)}},placeholders:t=>class extends t{parsePlaceholder(t){if(this.match(n.placeholder)){const e=this.startNode();return this.next(),this.assertNoSpace(\"Unexpected space in placeholder.\"),e.name=super.parseIdentifier(!0),this.assertNoSpace(\"Unexpected space in placeholder.\"),this.expect(n.placeholder),this.finishPlaceholder(e,t)}}finishPlaceholder(t,e){const s=!(!t.expectedNode||\"Placeholder\"!==t.type);return t.expectedNode=e,s?t:this.finishNode(t,\"Placeholder\")}getTokenFromCode(t){return 37===t&&37===this.input.charCodeAt(this.state.pos+1)?this.finishOp(n.placeholder,2):super.getTokenFromCode(...arguments)}parseExprAtom(){return this.parsePlaceholder(\"Expression\")||super.parseExprAtom(...arguments)}parseIdentifier(){return this.parsePlaceholder(\"Identifier\")||super.parseIdentifier(...arguments)}checkReservedWord(t){void 0!==t&&super.checkReservedWord(...arguments)}parseBindingAtom(){return this.parsePlaceholder(\"Pattern\")||super.parseBindingAtom(...arguments)}checkLVal(t){\"Placeholder\"!==t.type&&super.checkLVal(...arguments)}toAssignable(t){return t&&\"Placeholder\"===t.type&&\"Expression\"===t.expectedNode?(t.expectedNode=\"Pattern\",t):super.toAssignable(...arguments)}verifyBreakContinue(t){t.label&&\"Placeholder\"===t.label.type||super.verifyBreakContinue(...arguments)}parseExpressionStatement(t,e){if(\"Placeholder\"!==e.type||e.extra&&e.extra.parenthesized)return super.parseExpressionStatement(...arguments);if(this.match(n.colon)){const s=t;return s.label=this.finishPlaceholder(e,\"Identifier\"),this.next(),s.body=this.parseStatement(\"label\"),this.finishNode(s,\"LabeledStatement\")}return this.semicolon(),t.name=e.name,this.finishPlaceholder(t,\"Statement\")}parseBlock(){return this.parsePlaceholder(\"BlockStatement\")||super.parseBlock(...arguments)}parseFunctionId(){return this.parsePlaceholder(\"Identifier\")||super.parseFunctionId(...arguments)}parseClass(t,e,s){const i=e?\"ClassDeclaration\":\"ClassExpression\";this.next(),this.takeDecorators(t);const r=this.parsePlaceholder(\"Identifier\");if(r)if(this.match(n._extends)||this.match(n.placeholder)||this.match(n.braceL))t.id=r;else{if(s||!e)return t.id=null,t.body=this.finishPlaceholder(r,\"ClassBody\"),this.finishNode(t,i);this.unexpected(null,\"A class name is required\")}else this.parseClassId(t,e,s);return this.parseClassSuper(t),t.body=this.parsePlaceholder(\"ClassBody\")||this.parseClassBody(!!t.superClass),this.finishNode(t,i)}parseExport(t){const e=this.parsePlaceholder(\"Identifier\");if(!e)return super.parseExport(...arguments);if(!this.isContextual(\"from\")&&!this.match(n.comma))return t.specifiers=[],t.source=null,t.declaration=this.finishPlaceholder(e,\"Declaration\"),this.finishNode(t,\"ExportNamedDeclaration\");this.expectPlugin(\"exportDefaultFrom\");const s=this.startNode();return s.exported=e,t.specifiers=[this.finishNode(s,\"ExportDefaultSpecifier\")],super.parseExport(t)}maybeParseExportDefaultSpecifier(t){return!!(t.specifiers&&t.specifiers.length>0)||super.maybeParseExportDefaultSpecifier(...arguments)}checkExport(t){const{specifiers:e}=t;e&&e.length&&(t.specifiers=e.filter(t=>\"Placeholder\"===t.exported.type)),super.checkExport(t),t.specifiers=e}parseImport(t){const e=this.parsePlaceholder(\"Identifier\");if(!e)return super.parseImport(...arguments);if(t.specifiers=[],!this.isContextual(\"from\")&&!this.match(n.comma))return t.source=this.finishPlaceholder(e,\"StringLiteral\"),this.semicolon(),this.finishNode(t,\"ImportDeclaration\");const s=this.startNodeAtNode(e);if(s.local=e,this.finishNode(s,\"ImportDefaultSpecifier\"),t.specifiers.push(s),this.eat(n.comma)){this.maybeParseStarImportSpecifier(t)||this.parseNamedImportSpecifiers(t)}return this.expectContextual(\"from\"),t.source=this.parseImportSource(),this.semicolon(),this.finishNode(t,\"ImportDeclaration\")}parseImportSource(){return this.parsePlaceholder(\"StringLiteral\")||super.parseImportSource(...arguments)}}},ct=Object.keys(pt),ut={sourceType:\"script\",sourceFilename:void 0,startLine:1,allowAwaitOutsideFunction:!1,allowReturnOutsideFunction:!1,allowImportExportEverywhere:!1,allowSuperOutsideMethod:!1,allowUndeclaredExports:!1,plugins:[],strictMode:null,ranges:!1,tokens:!1,createParenthesizedExpressions:!1,errorRecovery:!1};class lt{constructor(){this.errors=[],this.potentialArrowAt=-1,this.noArrowAt=[],this.noArrowParamsConversionAt=[],this.inParameters=!1,this.maybeInArrowParameters=!1,this.maybeInAsyncArrowHead=!1,this.inPipeline=!1,this.inType=!1,this.noAnonFunctionType=!1,this.inPropertyName=!1,this.hasFlowComment=!1,this.isIterator=!1,this.topicContext={maxNumOfResolvableTopics:0,maxTopicIndex:null},this.soloAwait=!1,this.inFSharpPipelineDirectBody=!1,this.labels=[],this.decoratorStack=[[]],this.yieldPos=-1,this.awaitPos=-1,this.comments=[],this.trailingComments=[],this.leadingComments=[],this.commentStack=[],this.commentPreviousNode=null,this.pos=0,this.lineStart=0,this.type=n.eof,this.value=null,this.start=0,this.end=0,this.lastTokEndLoc=null,this.lastTokStartLoc=null,this.lastTokStart=0,this.lastTokEnd=0,this.context=[x.braceStatement],this.exprAllowed=!0,this.containsEsc=!1,this.octalPositions=[],this.exportedIdentifiers=[],this.tokensLength=0}init(t){this.strict=!1!==t.strictMode&&\"module\"===t.sourceType,this.curLine=t.startLine,this.startLoc=this.endLoc=this.curPosition()}curPosition(){return new l(this.curLine,this.pos-this.lineStart)}clone(t){const e=new lt,s=Object.keys(this);for(let i=0,r=s.length;i<r;i++){const r=s[i];let a=this[r];!t&&Array.isArray(a)&&(a=a.slice()),e[r]=a}return e}}var dt=function(t){return t>=48&&t<=57};const mt=new Set([\"g\",\"m\",\"s\",\"i\",\"y\",\"u\"]),ft={decBinOct:[46,66,69,79,95,98,101,111],hex:[46,88,95,120]},Dt={bin:[48,49]};Dt.oct=[...Dt.bin,50,51,52,53,54,55],Dt.dec=[...Dt.oct,56,57],Dt.hex=[...Dt.dec,65,66,67,68,69,70,97,98,99,100,101,102];class yt{constructor(t){this.type=t.type,this.value=t.value,this.start=t.start,this.end=t.end,this.loc=new d(t.startLoc,t.endLoc)}}class xt{constructor(){this.shorthandAssign=-1,this.doubleProto=-1}}class gt{constructor(t,e,s){this.type=\"\",this.start=e,this.end=0,this.loc=new d(s),t&&t.options.ranges&&(this.range=[e,0]),t&&t.filename&&(this.loc.filename=t.filename)}__clone(){const t=new gt,e=Object.keys(this);for(let s=0,i=e.length;s<i;s++){const i=e[s];\"leadingComments\"!==i&&\"trailingComments\"!==i&&\"innerComments\"!==i&&(t[i]=this[i])}return t}}const Pt=t=>\"ParenthesizedExpression\"===t.type?Pt(t.expression):t;const Et={kind:\"loop\"},Ct={kind:\"switch\"};class bt{constructor(){this.privateNames=new Set,this.loneAccessors=new Map,this.undefinedPrivateNames=new Map}}class Tt{constructor(t){this.stack=[],this.undefinedPrivateNames=new Map,this.raise=t}current(){return this.stack[this.stack.length-1]}enter(){this.stack.push(new bt)}exit(){const t=this.stack.pop(),e=this.current();for(let s=0,i=Array.from(t.undefinedPrivateNames);s<i.length;s++){const[t,r]=i[s];e?e.undefinedPrivateNames.has(t)||e.undefinedPrivateNames.set(t,r):this.raise(r,f.InvalidPrivateFieldResolution,t)}}declarePrivateName(t,e,s){const i=this.current();let r=i.privateNames.has(t);if(3&e){const s=r&&i.loneAccessors.get(t);if(s){const a=4&s,n=4&e;r=(3&s)===(3&e)||a!==n,r||i.loneAccessors.delete(t)}else r||i.loneAccessors.set(t,e)}r&&this.raise(s,f.PrivateNameRedeclaration,t),i.privateNames.add(t),i.undefinedPrivateNames.delete(t)}usePrivateName(t,e){let s;for(let e=0,i=this.stack;e<i.length;e++)if(s=i[e],s.privateNames.has(t))return;s?s.undefinedPrivateNames.set(t,e):this.raise(e,f.InvalidPrivateFieldResolution,t)}}class At extends class extends class extends class extends class extends class extends class extends class extends class extends class{constructor(){this.sawUnambiguousESM=!1,this.ambiguousScriptDifferentAst=!1}hasPlugin(t){return this.plugins.has(t)}getPluginOption(t,e){if(this.hasPlugin(t))return this.plugins.get(t)[e]}}{addComment(t){this.filename&&(t.loc.filename=this.filename),this.state.trailingComments.push(t),this.state.leadingComments.push(t)}adjustCommentsAfterTrailingComma(t,e,s){if(0===this.state.leadingComments.length)return;let i=null,r=e.length;for(;null===i&&r>0;)i=e[--r];if(null===i)return;for(let t=0;t<this.state.leadingComments.length;t++)this.state.leadingComments[t].end<this.state.commentPreviousNode.end&&(this.state.leadingComments.splice(t,1),t--);const a=[];for(let e=0;e<this.state.leadingComments.length;e++){const i=this.state.leadingComments[e];i.end<t.end?(a.push(i),s||(this.state.leadingComments.splice(e,1),e--)):(void 0===t.trailingComments&&(t.trailingComments=[]),t.trailingComments.push(i))}s&&(this.state.leadingComments=[]),a.length>0?i.trailingComments=a:void 0!==i.trailingComments&&(i.trailingComments=[])}processComment(t){if(\"Program\"===t.type&&t.body.length>0)return;const e=this.state.commentStack;let s,i,r,a,n;if(this.state.trailingComments.length>0)this.state.trailingComments[0].start>=t.end?(r=this.state.trailingComments,this.state.trailingComments=[]):this.state.trailingComments.length=0;else if(e.length>0){const s=m(e);s.trailingComments&&s.trailingComments[0].start>=t.end&&(r=s.trailingComments,delete s.trailingComments)}for(e.length>0&&m(e).start>=t.start&&(s=e.pop());e.length>0&&m(e).start>=t.start;)i=e.pop();if(!i&&s&&(i=s),s)switch(t.type){case\"ObjectExpression\":this.adjustCommentsAfterTrailingComma(t,t.properties);break;case\"ObjectPattern\":this.adjustCommentsAfterTrailingComma(t,t.properties,!0);break;case\"CallExpression\":this.adjustCommentsAfterTrailingComma(t,t.arguments);break;case\"ArrayExpression\":this.adjustCommentsAfterTrailingComma(t,t.elements);break;case\"ArrayPattern\":this.adjustCommentsAfterTrailingComma(t,t.elements,!0)}else this.state.commentPreviousNode&&(\"ImportSpecifier\"===this.state.commentPreviousNode.type&&\"ImportSpecifier\"!==t.type||\"ExportSpecifier\"===this.state.commentPreviousNode.type&&\"ExportSpecifier\"!==t.type)&&this.adjustCommentsAfterTrailingComma(t,[this.state.commentPreviousNode]);if(i){if(i.leadingComments)if(i!==t&&i.leadingComments.length>0&&m(i.leadingComments).end<=t.start)t.leadingComments=i.leadingComments,delete i.leadingComments;else for(a=i.leadingComments.length-2;a>=0;--a)if(i.leadingComments[a].end<=t.start){t.leadingComments=i.leadingComments.splice(0,a+1);break}}else if(this.state.leadingComments.length>0)if(m(this.state.leadingComments).end<=t.start){if(this.state.commentPreviousNode)for(n=0;n<this.state.leadingComments.length;n++)this.state.leadingComments[n].end<this.state.commentPreviousNode.end&&(this.state.leadingComments.splice(n,1),n--);this.state.leadingComments.length>0&&(t.leadingComments=this.state.leadingComments,this.state.leadingComments=[])}else{for(a=0;a<this.state.leadingComments.length&&!(this.state.leadingComments[a].end>t.start);a++);const e=this.state.leadingComments.slice(0,a);e.length&&(t.leadingComments=e),r=this.state.leadingComments.slice(a),0===r.length&&(r=null)}this.state.commentPreviousNode=t,r&&(r.length&&r[0].start>=t.start&&m(r).end<=t.end?t.innerComments=r:t.trailingComments=r),e.push(t)}}{getLocationForPosition(t){let e;return e=t===this.state.start?this.state.startLoc:t===this.state.lastTokStart?this.state.lastTokStartLoc:t===this.state.end?this.state.endLoc:t===this.state.lastTokEnd?this.state.lastTokEndLoc:function(t,e){let s,i=1,r=0;for(h.lastIndex=0;(s=h.exec(t))&&s.index<e;)i++,r=h.lastIndex;return new l(i,e-r)}(this.input,t),e}raise(t,e,...s){return this.raiseWithData(t,void 0,e,...s)}raiseWithData(t,e,s,...i){const r=this.getLocationForPosition(t),a=s.replace(/%(\\d+)/g,(t,e)=>i[e])+\" (\".concat(r.line,\":\").concat(r.column,\")\");return this._raise(Object.assign({loc:r,pos:t},e),a)}_raise(t,e){const s=new SyntaxError(e);if(Object.assign(s,t),this.options.errorRecovery)return this.isLookahead||this.state.errors.push(s),s;throw s}}{constructor(t,e){super(),this.tokens=[],this.state=new lt,this.state.init(t),this.input=e,this.length=e.length,this.isLookahead=!1}pushToken(t){this.tokens.length=this.state.tokensLength,this.tokens.push(t),++this.state.tokensLength}next(){this.isLookahead||(this.checkKeywordEscapes(),this.options.tokens&&this.pushToken(new yt(this.state))),this.state.lastTokEnd=this.state.end,this.state.lastTokStart=this.state.start,this.state.lastTokEndLoc=this.state.endLoc,this.state.lastTokStartLoc=this.state.startLoc,this.nextToken()}eat(t){return!!this.match(t)&&(this.next(),!0)}match(t){return this.state.type===t}lookahead(){const t=this.state;this.state=t.clone(!0),this.isLookahead=!0,this.next(),this.isLookahead=!1;const e=this.state;return this.state=t,e}nextTokenStart(){const t=this.state.pos;return c.lastIndex=t,t+c.exec(this.input)[0].length}lookaheadCharCode(){return this.input.charCodeAt(this.nextTokenStart())}setStrict(t){if(this.state.strict=t,this.match(n.num)||this.match(n.string)){for(this.state.pos=this.state.start;this.state.pos<this.state.lineStart;)this.state.lineStart=this.input.lastIndexOf(\"\\n\",this.state.lineStart-2)+1,--this.state.curLine;this.nextToken()}}curContext(){return this.state.context[this.state.context.length-1]}nextToken(){const t=this.curContext();if(t&&t.preserveSpace||this.skipSpace(),this.state.octalPositions=[],this.state.start=this.state.pos,this.state.startLoc=this.state.curPosition(),this.state.pos>=this.length)return void this.finishToken(n.eof);const e=null==t?void 0:t.override;e?e(this):this.getTokenFromCode(this.input.codePointAt(this.state.pos))}pushComment(t,e,s,i,r,a){const n={type:t?\"CommentBlock\":\"CommentLine\",value:e,start:s,end:i,loc:new d(r,a)};this.options.tokens&&this.pushToken(n),this.state.comments.push(n),this.addComment(n)}skipBlockComment(){const t=this.state.curPosition(),e=this.state.pos,s=this.input.indexOf(\"*/\",this.state.pos+2);if(-1===s)throw this.raise(e,f.UnterminatedComment);let i;for(this.state.pos=s+2,h.lastIndex=e;(i=h.exec(this.input))&&i.index<this.state.pos;)++this.state.curLine,this.state.lineStart=i.index+i[0].length;this.isLookahead||this.pushComment(!0,this.input.slice(e+2,s),e,this.state.pos,t,this.state.curPosition())}skipLineComment(t){const e=this.state.pos,s=this.state.curPosition();let i=this.input.charCodeAt(this.state.pos+=t);if(this.state.pos<this.length)for(;!p(i)&&++this.state.pos<this.length;)i=this.input.charCodeAt(this.state.pos);this.isLookahead||this.pushComment(!1,this.input.slice(e+t,this.state.pos),e,this.state.pos,s,this.state.curPosition())}skipSpace(){t:for(;this.state.pos<this.length;){const t=this.input.charCodeAt(this.state.pos);switch(t){case 32:case 160:case 9:++this.state.pos;break;case 13:10===this.input.charCodeAt(this.state.pos+1)&&++this.state.pos;case 10:case 8232:case 8233:++this.state.pos,++this.state.curLine,this.state.lineStart=this.state.pos;break;case 47:switch(this.input.charCodeAt(this.state.pos+1)){case 42:this.skipBlockComment();break;case 47:this.skipLineComment(2);break;default:break t}break;default:if(!u(t))break t;++this.state.pos}}}finishToken(t,e){this.state.end=this.state.pos,this.state.endLoc=this.state.curPosition();const s=this.state.type;this.state.type=t,this.state.value=e,this.isLookahead||this.updateContext(s)}readToken_numberSign(){if(0===this.state.pos&&this.readToken_interpreter())return;const t=this.state.pos+1,e=this.input.charCodeAt(t);if(e>=48&&e<=57)throw this.raise(this.state.pos,f.UnexpectedDigitAfterHash);if(!this.hasPlugin(\"recordAndTuple\")||123!==e&&91!==e){if(!this.hasPlugin(\"classPrivateProperties\")&&!this.hasPlugin(\"classPrivateMethods\")&&\"smart\"!==this.getPluginOption(\"pipelineOperator\",\"proposal\"))throw this.raise(this.state.pos,f.InvalidOrUnexpectedToken,\"#\");this.finishOp(n.hash,1)}else{if(\"hash\"!==this.getPluginOption(\"recordAndTuple\",\"syntaxType\"))throw this.raise(this.state.pos,123===e?f.RecordExpressionHashIncorrectStartSyntaxType:f.TupleExpressionHashIncorrectStartSyntaxType);123===e?this.finishToken(n.braceHashL):this.finishToken(n.bracketHashL),this.state.pos+=2}}readToken_dot(){const t=this.input.charCodeAt(this.state.pos+1);t>=48&&t<=57?this.readNumber(!0):46===t&&46===this.input.charCodeAt(this.state.pos+2)?(this.state.pos+=3,this.finishToken(n.ellipsis)):(++this.state.pos,this.finishToken(n.dot))}readToken_slash(){if(this.state.exprAllowed&&!this.state.inType)return++this.state.pos,void this.readRegexp();61===this.input.charCodeAt(this.state.pos+1)?this.finishOp(n.assign,2):this.finishOp(n.slash,1)}readToken_interpreter(){if(0!==this.state.pos||this.length<2)return!1;let t=this.input.charCodeAt(this.state.pos+1);if(33!==t)return!1;const e=this.state.pos;for(this.state.pos+=1;!p(t)&&++this.state.pos<this.length;)t=this.input.charCodeAt(this.state.pos);const s=this.input.slice(e+2,this.state.pos);return this.finishToken(n.interpreterDirective,s),!0}readToken_mult_modulo(t){let e=42===t?n.star:n.modulo,s=1,i=this.input.charCodeAt(this.state.pos+1);const r=this.state.exprAllowed;42===t&&42===i&&(s++,i=this.input.charCodeAt(this.state.pos+2),e=n.exponent),61!==i||r||(s++,e=n.assign),this.finishOp(e,s)}readToken_pipe_amp(t){const e=this.input.charCodeAt(this.state.pos+1);if(e!==t){if(124===t){if(62===e)return void this.finishOp(n.pipeline,2);if(this.hasPlugin(\"recordAndTuple\")&&125===e){if(\"bar\"!==this.getPluginOption(\"recordAndTuple\",\"syntaxType\"))throw this.raise(this.state.pos,f.RecordExpressionBarIncorrectEndSyntaxType);return void this.finishOp(n.braceBarR,2)}if(this.hasPlugin(\"recordAndTuple\")&&93===e){if(\"bar\"!==this.getPluginOption(\"recordAndTuple\",\"syntaxType\"))throw this.raise(this.state.pos,f.TupleExpressionBarIncorrectEndSyntaxType);return void this.finishOp(n.bracketBarR,2)}}61!==e?this.finishOp(124===t?n.bitwiseOR:n.bitwiseAND,1):this.finishOp(n.assign,2)}else 61===this.input.charCodeAt(this.state.pos+2)?this.finishOp(n.assign,3):this.finishOp(124===t?n.logicalOR:n.logicalAND,2)}readToken_caret(){61===this.input.charCodeAt(this.state.pos+1)?this.finishOp(n.assign,2):this.finishOp(n.bitwiseXOR,1)}readToken_plus_min(t){const e=this.input.charCodeAt(this.state.pos+1);if(e===t)return 45!==e||this.inModule||62!==this.input.charCodeAt(this.state.pos+2)||0!==this.state.lastTokEnd&&!o.test(this.input.slice(this.state.lastTokEnd,this.state.pos))?void this.finishOp(n.incDec,2):(this.skipLineComment(3),this.skipSpace(),void this.nextToken());61===e?this.finishOp(n.assign,2):this.finishOp(n.plusMin,1)}readToken_lt_gt(t){const e=this.input.charCodeAt(this.state.pos+1);let s=1;return e===t?(s=62===t&&62===this.input.charCodeAt(this.state.pos+2)?3:2,61===this.input.charCodeAt(this.state.pos+s)?void this.finishOp(n.assign,s+1):void this.finishOp(n.bitShift,s)):33!==e||60!==t||this.inModule||45!==this.input.charCodeAt(this.state.pos+2)||45!==this.input.charCodeAt(this.state.pos+3)?(61===e&&(s=2),void this.finishOp(n.relational,s)):(this.skipLineComment(4),this.skipSpace(),void this.nextToken())}readToken_eq_excl(t){const e=this.input.charCodeAt(this.state.pos+1);if(61!==e)return 61===t&&62===e?(this.state.pos+=2,void this.finishToken(n.arrow)):void this.finishOp(61===t?n.eq:n.bang,1);this.finishOp(n.equality,61===this.input.charCodeAt(this.state.pos+2)?3:2)}readToken_question(){const t=this.input.charCodeAt(this.state.pos+1),e=this.input.charCodeAt(this.state.pos+2);63!==t||this.state.inType?46!==t||e>=48&&e<=57?(++this.state.pos,this.finishToken(n.question)):(this.state.pos+=2,this.finishToken(n.questionDot)):61===e?this.finishOp(n.assign,3):this.finishOp(n.nullishCoalescing,2)}getTokenFromCode(t){switch(t){case 46:return void this.readToken_dot();case 40:return++this.state.pos,void this.finishToken(n.parenL);case 41:return++this.state.pos,void this.finishToken(n.parenR);case 59:return++this.state.pos,void this.finishToken(n.semi);case 44:return++this.state.pos,void this.finishToken(n.comma);case 91:if(this.hasPlugin(\"recordAndTuple\")&&124===this.input.charCodeAt(this.state.pos+1)){if(\"bar\"!==this.getPluginOption(\"recordAndTuple\",\"syntaxType\"))throw this.raise(this.state.pos,f.TupleExpressionBarIncorrectStartSyntaxType);this.finishToken(n.bracketBarL),this.state.pos+=2}else++this.state.pos,this.finishToken(n.bracketL);return;case 93:return++this.state.pos,void this.finishToken(n.bracketR);case 123:if(this.hasPlugin(\"recordAndTuple\")&&124===this.input.charCodeAt(this.state.pos+1)){if(\"bar\"!==this.getPluginOption(\"recordAndTuple\",\"syntaxType\"))throw this.raise(this.state.pos,f.RecordExpressionBarIncorrectStartSyntaxType);this.finishToken(n.braceBarL),this.state.pos+=2}else++this.state.pos,this.finishToken(n.braceL);return;case 125:return++this.state.pos,void this.finishToken(n.braceR);case 58:return void(this.hasPlugin(\"functionBind\")&&58===this.input.charCodeAt(this.state.pos+1)?this.finishOp(n.doubleColon,2):(++this.state.pos,this.finishToken(n.colon)));case 63:return void this.readToken_question();case 96:return++this.state.pos,void this.finishToken(n.backQuote);case 48:{const t=this.input.charCodeAt(this.state.pos+1);if(120===t||88===t)return void this.readRadixNumber(16);if(111===t||79===t)return void this.readRadixNumber(8);if(98===t||66===t)return void this.readRadixNumber(2)}case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return void this.readNumber(!1);case 34:case 39:return void this.readString(t);case 47:return void this.readToken_slash();case 37:case 42:return void this.readToken_mult_modulo(t);case 124:case 38:return void this.readToken_pipe_amp(t);case 94:return void this.readToken_caret();case 43:case 45:return void this.readToken_plus_min(t);case 60:case 62:return void this.readToken_lt_gt(t);case 61:case 33:return void this.readToken_eq_excl(t);case 126:return void this.finishOp(n.tilde,1);case 64:return++this.state.pos,void this.finishToken(n.at);case 35:return void this.readToken_numberSign();case 92:return void this.readWord();default:if(w(t))return void this.readWord()}throw this.raise(this.state.pos,f.InvalidOrUnexpectedToken,String.fromCodePoint(t))}finishOp(t,e){const s=this.input.slice(this.state.pos,this.state.pos+e);this.state.pos+=e,this.finishToken(t,s)}readRegexp(){const t=this.state.pos;let e,s;for(;;){if(this.state.pos>=this.length)throw this.raise(t,f.UnterminatedRegExp);const i=this.input.charAt(this.state.pos);if(o.test(i))throw this.raise(t,f.UnterminatedRegExp);if(e)e=!1;else{if(\"[\"===i)s=!0;else if(\"]\"===i&&s)s=!1;else if(\"/\"===i&&!s)break;e=\"\\\\\"===i}++this.state.pos}const i=this.input.slice(t,this.state.pos);++this.state.pos;let r=\"\";for(;this.state.pos<this.length;){const t=this.input[this.state.pos],e=this.input.codePointAt(this.state.pos);if(mt.has(t))r.indexOf(t)>-1&&this.raise(this.state.pos+1,f.DuplicateRegExpFlags);else{if(!S(e)&&92!==e)break;this.raise(this.state.pos+1,f.MalformedRegExpFlags)}++this.state.pos,r+=t}this.finishToken(n.regexp,{pattern:i,flags:r})}readInt(t,e,s,i=!0){const r=this.state.pos,a=16===t?ft.hex:ft.decBinOct,n=16===t?Dt.hex:10===t?Dt.dec:8===t?Dt.oct:Dt.bin;let o=!1,h=0;for(let r=0,p=null==e?1/0:e;r<p;++r){const e=this.input.charCodeAt(this.state.pos);let p;if(this.hasPlugin(\"numericSeparator\")&&95===e){const t=this.input.charCodeAt(this.state.pos-1),e=this.input.charCodeAt(this.state.pos+1);-1===n.indexOf(e)?this.raise(this.state.pos,f.UnexpectedNumericSeparator):(a.indexOf(t)>-1||a.indexOf(e)>-1||Number.isNaN(e))&&this.raise(this.state.pos,f.UnexpectedNumericSeparator),i||this.raise(this.state.pos,f.NumericSeparatorInEscapeSequence),++this.state.pos}else{if(p=e>=97?e-97+10:e>=65?e-65+10:dt(e)?e-48:1/0,p>=t)if(this.options.errorRecovery&&p<=9)p=0,this.raise(this.state.start+r+2,f.InvalidDigit,t);else{if(!s)break;p=0,o=!0}++this.state.pos,h=h*t+p}}return this.state.pos===r||null!=e&&this.state.pos-r!==e||o?null:h}readRadixNumber(t){const e=this.state.pos;let s=!1;this.state.pos+=2;const i=this.readInt(t);if(null==i&&this.raise(this.state.start+2,f.InvalidDigit,t),110===this.input.charCodeAt(this.state.pos)&&(++this.state.pos,s=!0),w(this.input.codePointAt(this.state.pos)))throw this.raise(this.state.pos,f.NumberIdentifier);if(s){const t=this.input.slice(e,this.state.pos).replace(/[_n]/g,\"\");this.finishToken(n.bigint,t)}else this.finishToken(n.num,i)}readNumber(t){const e=this.state.pos;let s=!1,i=!1,r=!1;t||null!==this.readInt(10)||this.raise(e,f.InvalidNumber);let a=this.state.pos-e>=2&&48===this.input.charCodeAt(e);a&&(this.state.strict&&this.raise(e,f.StrictOctalLiteral),/[89]/.test(this.input.slice(e,this.state.pos))&&(a=!1,r=!0));let o=this.input.charCodeAt(this.state.pos);if(46!==o||a||(++this.state.pos,this.readInt(10),s=!0,o=this.input.charCodeAt(this.state.pos)),69!==o&&101!==o||a||(o=this.input.charCodeAt(++this.state.pos),43!==o&&45!==o||++this.state.pos,null===this.readInt(10)&&this.raise(e,\"Invalid number\"),s=!0,o=this.input.charCodeAt(this.state.pos)),this.hasPlugin(\"numericSeparator\")&&(a||r)){const t=this.input.slice(e,this.state.pos).indexOf(\"_\");t>0&&this.raise(t+e,f.ZeroDigitNumericSeparator)}if(110===o&&((s||a||r)&&this.raise(e,\"Invalid BigIntLiteral\"),++this.state.pos,i=!0),w(this.input.codePointAt(this.state.pos)))throw this.raise(this.state.pos,f.NumberIdentifier);const h=this.input.slice(e,this.state.pos).replace(/[_n]/g,\"\");if(i)return void this.finishToken(n.bigint,h);const p=a?parseInt(h,8):parseFloat(h);this.finishToken(n.num,p)}readCodePoint(t){let e;if(123===this.input.charCodeAt(this.state.pos)){const s=++this.state.pos;if(e=this.readHexChar(this.input.indexOf(\"}\",this.state.pos)-this.state.pos,!0,t),++this.state.pos,null!==e&&e>1114111){if(!t)return null;this.raise(s,f.InvalidCodePoint)}}else e=this.readHexChar(4,!1,t);return e}readString(t){let e=\"\",s=++this.state.pos;for(;;){if(this.state.pos>=this.length)throw this.raise(this.state.start,f.UnterminatedString);const i=this.input.charCodeAt(this.state.pos);if(i===t)break;if(92===i)e+=this.input.slice(s,this.state.pos),e+=this.readEscapedChar(!1),s=this.state.pos;else if(8232===i||8233===i)++this.state.pos,++this.state.curLine,this.state.lineStart=this.state.pos;else{if(p(i))throw this.raise(this.state.start,f.UnterminatedString);++this.state.pos}}e+=this.input.slice(s,this.state.pos++),this.finishToken(n.string,e)}readTmplToken(){let t=\"\",e=this.state.pos,s=!1;for(;;){if(this.state.pos>=this.length)throw this.raise(this.state.start,f.UnterminatedTemplate);const i=this.input.charCodeAt(this.state.pos);if(96===i||36===i&&123===this.input.charCodeAt(this.state.pos+1))return this.state.pos===this.state.start&&this.match(n.template)?36===i?(this.state.pos+=2,void this.finishToken(n.dollarBraceL)):(++this.state.pos,void this.finishToken(n.backQuote)):(t+=this.input.slice(e,this.state.pos),void this.finishToken(n.template,s?null:t));if(92===i){t+=this.input.slice(e,this.state.pos);const i=this.readEscapedChar(!0);null===i?s=!0:t+=i,e=this.state.pos}else if(p(i)){switch(t+=this.input.slice(e,this.state.pos),++this.state.pos,i){case 13:10===this.input.charCodeAt(this.state.pos)&&++this.state.pos;case 10:t+=\"\\n\";break;default:t+=String.fromCharCode(i)}++this.state.curLine,this.state.lineStart=this.state.pos,e=this.state.pos}else++this.state.pos}}readEscapedChar(t){const e=!t,s=this.input.charCodeAt(++this.state.pos);switch(++this.state.pos,s){case 110:return\"\\n\";case 114:return\"\\r\";case 120:{const t=this.readHexChar(2,!1,e);return null===t?null:String.fromCharCode(t)}case 117:{const t=this.readCodePoint(e);return null===t?null:String.fromCodePoint(t)}case 116:return\"\\t\";case 98:return\"\\b\";case 118:return\"\\v\";case 102:return\"\\f\";case 13:10===this.input.charCodeAt(this.state.pos)&&++this.state.pos;case 10:this.state.lineStart=this.state.pos,++this.state.curLine;case 8232:case 8233:return\"\";case 56:case 57:if(t)return null;default:if(s>=48&&s<=55){const e=this.state.pos-1;let s=this.input.substr(this.state.pos-1,3).match(/^[0-7]+/)[0],i=parseInt(s,8);i>255&&(s=s.slice(0,-1),i=parseInt(s,8)),this.state.pos+=s.length-1;const r=this.input.charCodeAt(this.state.pos);if(\"0\"!==s||56===r||57===r){if(t)return null;this.state.strict?this.raise(e,f.StrictOctalLiteral):this.state.octalPositions.push(e)}return String.fromCharCode(i)}return String.fromCharCode(s)}}readHexChar(t,e,s){const i=this.state.pos,r=this.readInt(16,t,e,!1);return null===r&&(s?this.raise(i,f.InvalidEscapeSequence):this.state.pos=i-1),r}readWord1(){let t=\"\";this.state.containsEsc=!1;const e=this.state.pos;let s=this.state.pos;for(;this.state.pos<this.length;){const i=this.input.codePointAt(this.state.pos);if(S(i))this.state.pos+=i<=65535?1:2;else if(this.state.isIterator&&64===i)++this.state.pos;else{if(92!==i)break;{this.state.containsEsc=!0,t+=this.input.slice(s,this.state.pos);const i=this.state.pos,r=this.state.pos===e?w:S;if(117!==this.input.charCodeAt(++this.state.pos)){this.raise(this.state.pos,f.MissingUnicodeEscape);continue}++this.state.pos;const a=this.readCodePoint(!0);null!==a&&(r(a)||this.raise(i,f.EscapedCharNotAnIdentifier),t+=String.fromCodePoint(a)),s=this.state.pos}}}return t+this.input.slice(s,this.state.pos)}isIterator(t){return\"@@iterator\"===t||\"@@asyncIterator\"===t}readWord(){const t=this.readWord1(),e=i.get(t)||n.name;!this.state.isIterator||this.isIterator(t)&&this.state.inType||this.raise(this.state.pos,f.InvalidIdentifier,t),this.finishToken(e,t)}checkKeywordEscapes(){const t=this.state.type.keyword;t&&this.state.containsEsc&&this.raise(this.state.start,f.InvalidEscapedReservedWord,t)}braceIsBlock(t){const e=this.curContext();return e===x.functionExpression||e===x.functionStatement||(t!==n.colon||e!==x.braceStatement&&e!==x.braceExpression?t===n._return||t===n.name&&this.state.exprAllowed?o.test(this.input.slice(this.state.lastTokEnd,this.state.start)):t===n._else||t===n.semi||t===n.eof||t===n.parenR||t===n.arrow||(t===n.braceL?e===x.braceStatement:t!==n._var&&t!==n._const&&t!==n.name&&(t===n.relational||!this.state.exprAllowed)):!e.isExpr)}updateContext(t){const e=this.state.type;let s;!e.keyword||t!==n.dot&&t!==n.questionDot?(s=e.updateContext)?s.call(this,t):this.state.exprAllowed=e.beforeExpr:this.state.exprAllowed=!1}}{addExtra(t,e,s){if(!t)return;(t.extra=t.extra||{})[e]=s}isRelational(t){return this.match(n.relational)&&this.state.value===t}isLookaheadRelational(t){const e=this.nextTokenStart();if(this.input.charAt(e)===t){if(e+1===this.input.length)return!0;const s=this.input.charCodeAt(e+1);return s!==t.charCodeAt(0)&&61!==s}return!1}expectRelational(t){this.isRelational(t)?this.next():this.unexpected(null,n.relational)}isContextual(t){return this.match(n.name)&&this.state.value===t&&!this.state.containsEsc}isUnparsedContextual(t,e){const s=t+e.length;return this.input.slice(t,s)===e&&(s===this.input.length||!S(this.input.charCodeAt(s)))}isLookaheadContextual(t){const e=this.nextTokenStart();return this.isUnparsedContextual(e,t)}eatContextual(t){return this.isContextual(t)&&this.eat(n.name)}expectContextual(t,e){this.eatContextual(t)||this.unexpected(null,e)}canInsertSemicolon(){return this.match(n.eof)||this.match(n.braceR)||this.hasPrecedingLineBreak()}hasPrecedingLineBreak(){return o.test(this.input.slice(this.state.lastTokEnd,this.state.start))}isLineTerminator(){return this.eat(n.semi)||this.canInsertSemicolon()}semicolon(){this.isLineTerminator()||this.unexpected(null,n.semi)}expect(t,e){this.eat(t)||this.unexpected(e,t)}assertNoSpace(t=\"Unexpected space.\"){this.state.start>this.state.lastTokEnd&&this.raise(this.state.lastTokEnd,t)}unexpected(t,e=\"Unexpected token\"){throw\"string\"!=typeof e&&(e='Unexpected token, expected \"'.concat(e.label,'\"')),this.raise(null!=t?t:this.state.start,e)}expectPlugin(t,e){if(!this.hasPlugin(t))throw this.raiseWithData(null!=e?e:this.state.start,{missingPlugin:[t]},\"This experimental syntax requires enabling the parser plugin: '\".concat(t,\"'\"));return!0}expectOnePlugin(t,e){if(!t.some(t=>this.hasPlugin(t)))throw this.raiseWithData(null!=e?e:this.state.start,{missingPlugin:t},\"This experimental syntax requires enabling one of the following parser plugin(s): '\".concat(t.join(\", \"),\"'\"))}checkYieldAwaitInDefaultParams(){-1!==this.state.yieldPos&&(-1===this.state.awaitPos||this.state.yieldPos<this.state.awaitPos)&&this.raise(this.state.yieldPos,\"Yield cannot be used as name inside a generator function\"),-1!==this.state.awaitPos&&this.raise(this.state.awaitPos,\"Await cannot be used as name inside an async function\")}tryParse(t,e=this.state.clone()){const s={node:null};try{const i=t((t=null)=>{throw s.node=t,s});if(this.state.errors.length>e.errors.length){const t=this.state;return this.state=e,{node:i,error:t.errors[e.errors.length],thrown:!1,aborted:!1,failState:t}}return{node:i,error:null,thrown:!1,aborted:!1,failState:null}}catch(t){const i=this.state;if(this.state=e,t instanceof SyntaxError)return{node:null,error:t,thrown:!0,aborted:!1,failState:i};if(t===s)return{node:s.node,error:null,thrown:!1,aborted:!0,failState:i};throw t}}checkExpressionErrors(t,e){if(!t)return!1;const{shorthandAssign:s,doubleProto:i}=t;if(!e)return s>=0||i>=0;s>=0&&this.unexpected(s),i>=0&&this.raise(i,f.DuplicateProto)}}{startNode(){return new gt(this,this.state.start,this.state.startLoc)}startNodeAt(t,e){return new gt(this,t,e)}startNodeAtNode(t){return this.startNodeAt(t.start,t.loc.start)}finishNode(t,e){return this.finishNodeAt(t,e,this.state.lastTokEnd,this.state.lastTokEndLoc)}finishNodeAt(t,e,s,i){return t.type=e,t.end=s,t.loc.end=i,this.options.ranges&&(t.range[1]=s),this.processComment(t),t}resetStartLocation(t,e,s){t.start=e,t.loc.start=s,this.options.ranges&&(t.range[0]=e)}resetEndLocation(t,e=this.state.lastTokEnd,s=this.state.lastTokEndLoc){t.end=e,t.loc.end=s,this.options.ranges&&(t.range[1]=e)}resetStartLocationFromNode(t,e){this.resetStartLocation(t,e.start,e.loc.start)}}{toAssignable(t){var e,s;let i=void 0;switch((\"ParenthesizedExpression\"===t.type||(null==(e=t.extra)?void 0:e.parenthesized))&&(i=Pt(t),\"Identifier\"!==i.type&&\"MemberExpression\"!==i.type&&this.raise(t.start,f.InvalidParenthesizedAssignment)),t.type){case\"Identifier\":case\"ObjectPattern\":case\"ArrayPattern\":case\"AssignmentPattern\":break;case\"ObjectExpression\":t.type=\"ObjectPattern\";for(let e=0,s=t.properties.length,i=s-1;e<s;e++){var r;const s=t.properties[e],a=e===i;this.toAssignableObjectExpressionProp(s,a),a&&\"RestElement\"===s.type&&(null==(r=t.extra)?void 0:r.trailingComma)&&this.raiseRestNotLast(t.extra.trailingComma)}break;case\"ObjectProperty\":this.toAssignable(t.value);break;case\"SpreadElement\":{this.checkToRestConversion(t),t.type=\"RestElement\";const e=t.argument;this.toAssignable(e);break}case\"ArrayExpression\":t.type=\"ArrayPattern\",this.toAssignableList(t.elements,null==(s=t.extra)?void 0:s.trailingComma);break;case\"AssignmentExpression\":\"=\"!==t.operator&&this.raise(t.left.end,f.MissingEqInAssignment),t.type=\"AssignmentPattern\",delete t.operator,this.toAssignable(t.left);break;case\"ParenthesizedExpression\":this.toAssignable(i)}return t}toAssignableObjectExpressionProp(t,e){if(\"ObjectMethod\"===t.type){const e=\"get\"===t.kind||\"set\"===t.kind?f.PatternHasAccessor:f.PatternHasMethod;this.raise(t.key.start,e)}else\"SpreadElement\"!==t.type||e?this.toAssignable(t):this.raiseRestNotLast(t.start)}toAssignableList(t,e){let s=t.length;if(s){const i=t[s-1];if(i&&\"RestElement\"===i.type)--s;else if(i&&\"SpreadElement\"===i.type){i.type=\"RestElement\";const t=i.argument;this.toAssignable(t),\"Identifier\"!==t.type&&\"MemberExpression\"!==t.type&&\"ArrayPattern\"!==t.type&&\"ObjectPattern\"!==t.type&&this.unexpected(t.start),e&&this.raiseTrailingCommaAfterRest(e),--s}}for(let e=0;e<s;e++){const s=t[e];s&&(this.toAssignable(s),\"RestElement\"===s.type&&this.raiseRestNotLast(s.start))}return t}toReferencedList(t,e){return t}toReferencedListDeep(t,e){this.toReferencedList(t,e);for(let e=0;e<t.length;e++){const s=t[e];s&&\"ArrayExpression\"===s.type&&this.toReferencedListDeep(s.elements)}}parseSpread(t,e){const s=this.startNode();return this.next(),s.argument=this.parseMaybeAssign(!1,t,void 0,e),this.finishNode(s,\"SpreadElement\")}parseRestBinding(){const t=this.startNode();return this.next(),t.argument=this.parseBindingAtom(),this.finishNode(t,\"RestElement\")}parseBindingAtom(){switch(this.state.type){case n.bracketL:{const t=this.startNode();return this.next(),t.elements=this.parseBindingList(n.bracketR,93,!0),this.finishNode(t,\"ArrayPattern\")}case n.braceL:return this.parseObj(n.braceR,!0)}return this.parseIdentifier()}parseBindingList(t,e,s,i){const r=[];let a=!0;for(;!this.eat(t);)if(a?a=!1:this.expect(n.comma),s&&this.match(n.comma))r.push(null);else{if(this.eat(t))break;if(this.match(n.ellipsis)){r.push(this.parseAssignableListItemTypes(this.parseRestBinding())),this.checkCommaAfterRest(e),this.expect(t);break}{const t=[];for(this.match(n.at)&&this.hasPlugin(\"decorators\")&&this.raise(this.state.start,f.UnsupportedParameterDecorator);this.match(n.at);)t.push(this.parseDecorator());r.push(this.parseAssignableListItem(i,t))}}return r}parseAssignableListItem(t,e){const s=this.parseMaybeDefault();this.parseAssignableListItemTypes(s);const i=this.parseMaybeDefault(s.start,s.loc.start,s);return e.length&&(s.decorators=e),i}parseAssignableListItemTypes(t){return t}parseMaybeDefault(t,e,s){if(e=e||this.state.startLoc,t=t||this.state.start,s=s||this.parseBindingAtom(),!this.eat(n.eq))return s;const i=this.startNodeAt(t,e);return i.left=s,i.right=this.parseMaybeAssign(),this.finishNode(i,\"AssignmentPattern\")}checkLVal(t,e=64,s,i,r,a=!1){switch(t.type){case\"Identifier\":if(this.state.strict&&(a?O(t.name,this.inModule):M(t.name))&&this.raise(t.start,64===e?f.StrictEvalArguments:f.StrictEvalArgumentsBinding,t.name),s){const e=\"_\".concat(t.name);s[e]?this.raise(t.start,f.ParamDupe):s[e]=!0}r&&\"let\"===t.name&&this.raise(t.start,f.LetInLexicalBinding),64&e||this.scope.declareName(t.name,e,t.start);break;case\"MemberExpression\":64!==e&&this.raise(t.start,f.InvalidPropertyBindingPattern);break;case\"ObjectPattern\":for(let i=0,a=t.properties;i<a.length;i++){let t=a[i];if(\"ObjectProperty\"===t.type)t=t.value;else if(\"ObjectMethod\"===t.type)continue;this.checkLVal(t,e,s,\"object destructuring pattern\",r)}break;case\"ArrayPattern\":for(let i=0,a=t.elements;i<a.length;i++){const t=a[i];t&&this.checkLVal(t,e,s,\"array destructuring pattern\",r)}break;case\"AssignmentPattern\":this.checkLVal(t.left,e,s,\"assignment pattern\");break;case\"RestElement\":this.checkLVal(t.argument,e,s,\"rest element\");break;case\"ParenthesizedExpression\":this.checkLVal(t.expression,e,s,\"parenthesized expression\");break;default:this.raise(t.start,64===e?f.InvalidLhs:f.InvalidLhsBinding,i)}}checkToRestConversion(t){\"Identifier\"!==t.argument.type&&\"MemberExpression\"!==t.argument.type&&this.raise(t.argument.start,f.InvalidRestAssignmentPattern)}checkCommaAfterRest(t){this.match(n.comma)&&(this.lookaheadCharCode()===t?this.raiseTrailingCommaAfterRest(this.state.start):this.raiseRestNotLast(this.state.start))}raiseRestNotLast(t){throw this.raise(t,f.ElementAfterRest)}raiseTrailingCommaAfterRest(t){this.raise(t,f.RestTrailingComma)}}{checkDuplicatedProto(t,e,s){if(\"SpreadElement\"===t.type||t.computed||t.kind||t.shorthand)return;const i=t.key;\"__proto__\"===(\"Identifier\"===i.type?i.name:String(i.value))&&(e.used&&(s?-1===s.doubleProto&&(s.doubleProto=i.start):this.raise(i.start,f.DuplicateProto)),e.used=!0)}getExpression(){let t=0;this.hasPlugin(\"topLevelAwait\")&&this.inModule&&(t|=2),this.scope.enter(1),this.prodParam.enter(t),this.nextToken();const e=this.parseExpression();return this.match(n.eof)||this.unexpected(),e.comments=this.state.comments,e.errors=this.state.errors,e}parseExpression(t,e){const s=this.state.start,i=this.state.startLoc,r=this.parseMaybeAssign(t,e);if(this.match(n.comma)){const a=this.startNodeAt(s,i);for(a.expressions=[r];this.eat(n.comma);)a.expressions.push(this.parseMaybeAssign(t,e));return this.toReferencedList(a.expressions),this.finishNode(a,\"SequenceExpression\")}return r}parseMaybeAssign(t,e,s,i){const r=this.state.start,a=this.state.startLoc;if(this.isContextual(\"yield\")){if(this.prodParam.hasYield){let e=this.parseYield(t);return s&&(e=s.call(this,e,r,a)),e}this.state.exprAllowed=!1}let o;e?o=!1:(e=new xt,o=!0),(this.match(n.parenL)||this.match(n.name))&&(this.state.potentialArrowAt=this.state.start);let h=this.parseMaybeConditional(t,e,i);if(s&&(h=s.call(this,h,r,a)),this.state.type.isAssign){const s=this.startNodeAt(r,a),i=this.state.value;return s.operator=i,\"??=\"===i&&this.expectPlugin(\"logicalAssignment\"),\"||=\"!==i&&\"&&=\"!==i||this.expectPlugin(\"logicalAssignment\"),this.match(n.eq)?(s.left=this.toAssignable(h),e.doubleProto=-1):s.left=h,e.shorthandAssign>=s.left.start&&(e.shorthandAssign=-1),this.checkLVal(h,void 0,void 0,\"assignment expression\"),this.next(),s.right=this.parseMaybeAssign(t),this.finishNode(s,\"AssignmentExpression\")}return o&&this.checkExpressionErrors(e,!0),h}parseMaybeConditional(t,e,s){const i=this.state.start,r=this.state.startLoc,a=this.state.potentialArrowAt,n=this.parseExprOps(t,e);return\"ArrowFunctionExpression\"===n.type&&n.start===a?n:this.checkExpressionErrors(e,!1)?n:this.parseConditional(n,t,i,r,s)}parseConditional(t,e,s,i,r){if(this.eat(n.question)){const r=this.startNodeAt(s,i);return r.test=t,r.consequent=this.parseMaybeAssign(),this.expect(n.colon),r.alternate=this.parseMaybeAssign(e),this.finishNode(r,\"ConditionalExpression\")}return t}parseExprOps(t,e){const s=this.state.start,i=this.state.startLoc,r=this.state.potentialArrowAt,a=this.parseMaybeUnary(e);return\"ArrowFunctionExpression\"===a.type&&a.start===r?a:this.checkExpressionErrors(e,!1)?a:this.parseExprOp(a,s,i,-1,t)}parseExprOp(t,e,s,i,r){let a=this.state.type.binop;if(!(null==a||r&&this.match(n._in))&&a>i){const o=this.state.value;if(\"|>\"===o&&this.state.inFSharpPipelineDirectBody)return t;const h=this.startNodeAt(e,s);h.left=t,h.operator=o,\"**\"!==o||\"UnaryExpression\"!==t.type||!this.options.createParenthesizedExpressions&&t.extra&&t.extra.parenthesized||this.raise(t.argument.start,f.UnexpectedTokenUnaryExponentiation);const p=this.state.type,c=p===n.logicalOR||p===n.logicalAND,u=p===n.nullishCoalescing;if(p===n.pipeline?(this.expectPlugin(\"pipelineOperator\"),this.state.inPipeline=!0,this.checkPipelineAtInfixOperator(t,e)):u&&(a=n.logicalAND.binop),this.next(),p===n.pipeline&&\"minimal\"===this.getPluginOption(\"pipelineOperator\",\"proposal\")&&this.match(n.name)&&\"await\"===this.state.value&&this.prodParam.hasAwait)throw this.raise(this.state.start,f.UnexpectedAwaitAfterPipelineBody);h.right=this.parseExprOpRightExpr(p,a,r),this.finishNode(h,c||u?\"LogicalExpression\":\"BinaryExpression\");const l=this.state.type;if(u&&(l===n.logicalOR||l===n.logicalAND)||c&&l===n.nullishCoalescing)throw this.raise(this.state.start,f.MixingCoalesceWithLogical);return this.parseExprOp(h,e,s,i,r)}return t}parseExprOpRightExpr(t,e,s){const i=this.state.start,r=this.state.startLoc;switch(t){case n.pipeline:switch(this.getPluginOption(\"pipelineOperator\",\"proposal\")){case\"smart\":return this.withTopicPermittingContext(()=>this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(t,e,s),i,r));case\"fsharp\":return this.withSoloAwaitPermittingContext(()=>this.parseFSharpPipelineBody(e,s))}default:return this.parseExprOpBaseRightExpr(t,e,s)}}parseExprOpBaseRightExpr(t,e,s){const i=this.state.start,r=this.state.startLoc;return this.parseExprOp(this.parseMaybeUnary(),i,r,t.rightAssociative?e-1:e,s)}parseMaybeUnary(t){if(this.isContextual(\"await\")&&this.isAwaitAllowed())return this.parseAwait();if(this.state.type.prefix){const e=this.startNode(),s=this.match(n.incDec);if(e.operator=this.state.value,e.prefix=!0,\"throw\"===e.operator&&this.expectPlugin(\"throwExpressions\"),this.next(),e.argument=this.parseMaybeUnary(),this.checkExpressionErrors(t,!0),s)this.checkLVal(e.argument,void 0,void 0,\"prefix operation\");else if(this.state.strict&&\"delete\"===e.operator){const t=e.argument;\"Identifier\"===t.type?this.raise(e.start,f.StrictDelete):\"MemberExpression\"===t.type&&\"PrivateName\"===t.property.type&&this.raise(e.start,f.DeletePrivateField)}return this.finishNode(e,s?\"UpdateExpression\":\"UnaryExpression\")}const e=this.state.start,s=this.state.startLoc;let i=this.parseExprSubscripts(t);if(this.checkExpressionErrors(t,!1))return i;for(;this.state.type.postfix&&!this.canInsertSemicolon();){const t=this.startNodeAt(e,s);t.operator=this.state.value,t.prefix=!1,t.argument=i,this.checkLVal(i,void 0,void 0,\"postfix operation\"),this.next(),i=this.finishNode(t,\"UpdateExpression\")}return i}parseExprSubscripts(t){const e=this.state.start,s=this.state.startLoc,i=this.state.potentialArrowAt,r=this.parseExprAtom(t);return\"ArrowFunctionExpression\"===r.type&&r.start===i?r:this.parseSubscripts(r,e,s)}parseSubscripts(t,e,s,i){const r={optionalChainMember:!1,maybeAsyncArrow:this.atPossibleAsyncArrow(t),stop:!1};do{const a=this.state.maybeInAsyncArrowHead;r.maybeAsyncArrow&&(this.state.maybeInAsyncArrowHead=!0),t=this.parseSubscript(t,e,s,i,r),r.maybeAsyncArrow=!1,this.state.maybeInAsyncArrowHead=a}while(!r.stop);return t}parseSubscript(t,e,s,i,r){if(!i&&this.eat(n.doubleColon)){const a=this.startNodeAt(e,s);return a.object=t,a.callee=this.parseNoCallExpr(),r.stop=!0,this.parseSubscripts(this.finishNode(a,\"BindExpression\"),e,s,i)}let a=!1;if(this.match(n.questionDot)){if(r.optionalChainMember=a=!0,i&&40===this.lookaheadCharCode())return r.stop=!0,t;this.next()}const o=this.eat(n.bracketL);if(a&&!this.match(n.parenL)&&!this.match(n.backQuote)||o||this.eat(n.dot)){const i=this.startNodeAt(e,s);return i.object=t,i.property=o?this.parseExpression():a?this.parseIdentifier(!0):this.parseMaybePrivateName(!0),i.computed=o,\"PrivateName\"===i.property.type&&(\"Super\"===i.object.type&&this.raise(e,f.SuperPrivateField),this.classScope.usePrivateName(i.property.id.name,i.property.start)),o&&this.expect(n.bracketR),r.optionalChainMember?(i.optional=a,this.finishNode(i,\"OptionalMemberExpression\")):this.finishNode(i,\"MemberExpression\")}if(!i&&this.match(n.parenL)){const i=this.state.maybeInArrowParameters,o=this.state.yieldPos,h=this.state.awaitPos;this.state.maybeInArrowParameters=!0,this.state.yieldPos=-1,this.state.awaitPos=-1,this.next();let p=this.startNodeAt(e,s);return p.callee=t,a?(p.optional=!0,p.arguments=this.parseCallExpressionArguments(n.parenR,!1)):p.arguments=this.parseCallExpressionArguments(n.parenR,r.maybeAsyncArrow,\"Import\"===t.type,\"Super\"!==t.type,p),this.finishCallExpression(p,r.optionalChainMember),r.maybeAsyncArrow&&this.shouldParseAsyncArrow()&&!a?(r.stop=!0,p=this.parseAsyncArrowFromCallExpression(this.startNodeAt(e,s),p),this.checkYieldAwaitInDefaultParams(),this.state.yieldPos=o,this.state.awaitPos=h):(this.toReferencedListDeep(p.arguments),-1!==o&&(this.state.yieldPos=o),(this.isAwaitAllowed()||i)&&-1===h||(this.state.awaitPos=h)),this.state.maybeInArrowParameters=i,p}return this.match(n.backQuote)?this.parseTaggedTemplateExpression(e,s,t,r):(r.stop=!0,t)}parseTaggedTemplateExpression(t,e,s,i,r){const a=this.startNodeAt(t,e);return a.tag=s,a.quasi=this.parseTemplate(!0),r&&(a.typeParameters=r),i.optionalChainMember&&this.raise(t,f.OptionalChainingNoTemplate),this.finishNode(a,\"TaggedTemplateExpression\")}atPossibleAsyncArrow(t){return\"Identifier\"===t.type&&\"async\"===t.name&&this.state.lastTokEnd===t.end&&!this.canInsertSemicolon()&&t.end-t.start==5&&t.start===this.state.potentialArrowAt}finishCallExpression(t,e){if(\"Import\"===t.callee.type)if(1!==t.arguments.length)this.raise(t.start,f.ImportCallArity);else{const e=t.arguments[0];e&&\"SpreadElement\"===e.type&&this.raise(e.start,f.ImportCallSpreadArgument)}return this.finishNode(t,e?\"OptionalCallExpression\":\"CallExpression\")}parseCallExpressionArguments(t,e,s,i,r){const a=[];let o,h=!0;const p=this.state.inFSharpPipelineDirectBody;for(this.state.inFSharpPipelineDirectBody=!1;!this.eat(t);){if(h)h=!1;else if(this.expect(n.comma),this.match(t)){s&&this.raise(this.state.lastTokStart,f.ImportCallArgumentTrailingComma),r&&this.addExtra(r,\"trailingComma\",this.state.lastTokStart),this.next();break}this.match(n.parenL)&&!o&&(o=this.state.start),a.push(this.parseExprListItem(!1,e?new xt:void 0,e?{start:0}:void 0,i))}return e&&o&&this.shouldParseAsyncArrow()&&this.unexpected(),this.state.inFSharpPipelineDirectBody=p,a}shouldParseAsyncArrow(){return this.match(n.arrow)&&!this.canInsertSemicolon()}parseAsyncArrowFromCallExpression(t,e){var s;return this.expect(n.arrow),this.parseArrowExpression(t,e.arguments,!0,null==(s=e.extra)?void 0:s.trailingComma),t}parseNoCallExpr(){const t=this.state.start,e=this.state.startLoc;return this.parseSubscripts(this.parseExprAtom(),t,e,!0)}parseExprAtom(t){this.state.type===n.slash&&this.readRegexp();const e=this.state.potentialArrowAt===this.state.start;let s;switch(this.state.type){case n._super:return s=this.startNode(),this.next(),!this.match(n.parenL)||this.scope.allowDirectSuper||this.options.allowSuperOutsideMethod?this.scope.allowSuper||this.options.allowSuperOutsideMethod||this.raise(s.start,f.UnexpectedSuper):this.raise(s.start,f.SuperNotAllowed),this.match(n.parenL)||this.match(n.bracketL)||this.match(n.dot)||this.raise(s.start,f.UnsupportedSuper),this.finishNode(s,\"Super\");case n._import:return s=this.startNode(),this.next(),this.match(n.dot)?this.parseImportMetaProperty(s):(this.match(n.parenL)||this.raise(this.state.lastTokStart,f.UnsupportedImport),this.finishNode(s,\"Import\"));case n._this:return s=this.startNode(),this.next(),this.finishNode(s,\"ThisExpression\");case n.name:{s=this.startNode();const t=this.state.containsEsc,i=this.parseIdentifier();if(!t&&\"async\"===i.name&&this.match(n._function)&&!this.canInsertSemicolon()){const t=this.state.context.length-1;if(this.state.context[t]!==x.functionStatement)throw new Error(\"Internal error\");return this.state.context[t]=x.functionExpression,this.next(),this.parseFunction(s,void 0,!0)}if(e&&!t&&\"async\"===i.name&&this.match(n.name)&&!this.canInsertSemicolon()){const t=this.state.maybeInArrowParameters,e=this.state.maybeInAsyncArrowHead,i=this.state.yieldPos,r=this.state.awaitPos;this.state.maybeInArrowParameters=!0,this.state.maybeInAsyncArrowHead=!0,this.state.yieldPos=-1,this.state.awaitPos=-1;const a=[this.parseIdentifier()];return this.expect(n.arrow),this.checkYieldAwaitInDefaultParams(),this.state.maybeInArrowParameters=t,this.state.maybeInAsyncArrowHead=e,this.state.yieldPos=i,this.state.awaitPos=r,this.parseArrowExpression(s,a,!0),s}return e&&this.match(n.arrow)&&!this.canInsertSemicolon()?(this.next(),this.parseArrowExpression(s,[i],!1),s):i}case n._do:{this.expectPlugin(\"doExpressions\");const t=this.startNode();this.next();const e=this.state.labels;return this.state.labels=[],t.body=this.parseBlock(),this.state.labels=e,this.finishNode(t,\"DoExpression\")}case n.regexp:{const t=this.state.value;return s=this.parseLiteral(t.value,\"RegExpLiteral\"),s.pattern=t.pattern,s.flags=t.flags,s}case n.num:return this.parseLiteral(this.state.value,\"NumericLiteral\");case n.bigint:return this.parseLiteral(this.state.value,\"BigIntLiteral\");case n.string:return this.parseLiteral(this.state.value,\"StringLiteral\");case n._null:return s=this.startNode(),this.next(),this.finishNode(s,\"NullLiteral\");case n._true:case n._false:return this.parseBooleanLiteral();case n.parenL:return this.parseParenAndDistinguishExpression(e);case n.bracketBarL:case n.bracketHashL:{this.expectPlugin(\"recordAndTuple\");const e=this.state.inFSharpPipelineDirectBody,i=this.state.type===n.bracketBarL?n.bracketBarR:n.bracketR;return this.state.inFSharpPipelineDirectBody=!1,s=this.startNode(),this.next(),s.elements=this.parseExprList(i,!0,t,s),this.state.inFSharpPipelineDirectBody=e,this.finishNode(s,\"TupleExpression\")}case n.bracketL:{const e=this.state.inFSharpPipelineDirectBody;return this.state.inFSharpPipelineDirectBody=!1,s=this.startNode(),this.next(),s.elements=this.parseExprList(n.bracketR,!0,t,s),this.state.maybeInArrowParameters||this.toReferencedList(s.elements),this.state.inFSharpPipelineDirectBody=e,this.finishNode(s,\"ArrayExpression\")}case n.braceBarL:case n.braceHashL:{this.expectPlugin(\"recordAndTuple\");const e=this.state.inFSharpPipelineDirectBody,s=this.state.type===n.braceBarL?n.braceBarR:n.braceR;this.state.inFSharpPipelineDirectBody=!1;const i=this.parseObj(s,!1,!0,t);return this.state.inFSharpPipelineDirectBody=e,i}case n.braceL:{const e=this.state.inFSharpPipelineDirectBody;this.state.inFSharpPipelineDirectBody=!1;const s=this.parseObj(n.braceR,!1,!1,t);return this.state.inFSharpPipelineDirectBody=e,s}case n._function:return this.parseFunctionExpression();case n.at:this.parseDecorators();case n._class:return s=this.startNode(),this.takeDecorators(s),this.parseClass(s,!1);case n._new:return this.parseNew();case n.backQuote:return this.parseTemplate(!1);case n.doubleColon:{s=this.startNode(),this.next(),s.object=null;const t=s.callee=this.parseNoCallExpr();if(\"MemberExpression\"===t.type)return this.finishNode(s,\"BindExpression\");throw this.raise(t.start,f.UnsupportedBind)}case n.hash:if(this.state.inPipeline)return s=this.startNode(),\"smart\"!==this.getPluginOption(\"pipelineOperator\",\"proposal\")&&this.raise(s.start,f.PrimaryTopicRequiresSmartPipeline),this.next(),this.primaryTopicReferenceIsAllowedInCurrentTopicContext()||this.raise(s.start,f.PrimaryTopicNotAllowed),this.registerTopicReference(),this.finishNode(s,\"PipelinePrimaryTopicReference\");default:throw this.unexpected()}}parseBooleanLiteral(){const t=this.startNode();return t.value=this.match(n._true),this.next(),this.finishNode(t,\"BooleanLiteral\")}parseMaybePrivateName(t){if(this.match(n.hash)){this.expectOnePlugin([\"classPrivateProperties\",\"classPrivateMethods\"]),t||this.raise(this.state.pos,f.UnexpectedPrivateField);const e=this.startNode();return this.next(),this.assertNoSpace(\"Unexpected space between # and identifier\"),e.id=this.parseIdentifier(!0),this.finishNode(e,\"PrivateName\")}return this.parseIdentifier(!0)}parseFunctionExpression(){const t=this.startNode();let e=this.startNode();return this.next(),e=this.createIdentifier(e,\"function\"),this.prodParam.hasYield&&this.eat(n.dot)?this.parseMetaProperty(t,e,\"sent\"):this.parseFunction(t)}parseMetaProperty(t,e,s){t.meta=e,\"function\"===e.name&&\"sent\"===s&&(this.isContextual(s)?this.expectPlugin(\"functionSent\"):this.hasPlugin(\"functionSent\")||this.unexpected());const i=this.state.containsEsc;return t.property=this.parseIdentifier(!0),(t.property.name!==s||i)&&this.raise(t.property.start,f.UnsupportedMetaProperty,e.name,s),this.finishNode(t,\"MetaProperty\")}parseImportMetaProperty(t){const e=this.createIdentifier(this.startNodeAtNode(t),\"import\");return this.expect(n.dot),this.isContextual(\"meta\")?(this.expectPlugin(\"importMeta\"),this.inModule||this.raiseWithData(e.start,{code:\"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"},f.ImportMetaOutsideModule),this.sawUnambiguousESM=!0):this.hasPlugin(\"importMeta\")||this.raise(e.start,f.ImportCallArityLtOne),this.parseMetaProperty(t,e,\"meta\")}parseLiteral(t,e,s,i){s=s||this.state.start,i=i||this.state.startLoc;const r=this.startNodeAt(s,i);return this.addExtra(r,\"rawValue\",t),this.addExtra(r,\"raw\",this.input.slice(s,this.state.end)),r.value=t,this.next(),this.finishNode(r,e)}parseParenAndDistinguishExpression(t){const e=this.state.start,s=this.state.startLoc;let i;this.expect(n.parenL);const r=this.state.maybeInArrowParameters,a=this.state.yieldPos,o=this.state.awaitPos,h=this.state.inFSharpPipelineDirectBody;this.state.maybeInArrowParameters=!0,this.state.yieldPos=-1,this.state.awaitPos=-1,this.state.inFSharpPipelineDirectBody=!1;const p=this.state.start,c=this.state.startLoc,u=[],l=new xt,d={start:0};let m,f,D=!0;for(;!this.match(n.parenR);){if(D)D=!1;else if(this.expect(n.comma,d.start||null),this.match(n.parenR)){f=this.state.start;break}if(this.match(n.ellipsis)){const t=this.state.start,e=this.state.startLoc;m=this.state.start,u.push(this.parseParenItem(this.parseRestBinding(),t,e)),this.checkCommaAfterRest(41);break}u.push(this.parseMaybeAssign(!1,l,this.parseParenItem,d))}const y=this.state.start,x=this.state.startLoc;this.expect(n.parenR),this.state.maybeInArrowParameters=r,this.state.inFSharpPipelineDirectBody=h;let g=this.startNodeAt(e,s);if(t&&this.shouldParseArrow()&&(g=this.parseArrow(g))){this.isAwaitAllowed()||this.state.maybeInAsyncArrowHead||(this.state.awaitPos=o),this.checkYieldAwaitInDefaultParams(),this.state.yieldPos=a,this.state.awaitPos=o;for(let t=0;t<u.length;t++){const e=u[t];e.extra&&e.extra.parenthesized&&this.unexpected(e.extra.parenStart)}return this.parseArrowExpression(g,u,!1),g}if(-1!==a&&(this.state.yieldPos=a),-1!==o&&(this.state.awaitPos=o),u.length||this.unexpected(this.state.lastTokStart),f&&this.unexpected(f),m&&this.unexpected(m),this.checkExpressionErrors(l,!0),d.start&&this.unexpected(d.start),this.toReferencedListDeep(u,!0),u.length>1?(i=this.startNodeAt(p,c),i.expressions=u,this.finishNodeAt(i,\"SequenceExpression\",y,x)):i=u[0],!this.options.createParenthesizedExpressions)return this.addExtra(i,\"parenthesized\",!0),this.addExtra(i,\"parenStart\",e),i;const P=this.startNodeAt(e,s);return P.expression=i,this.finishNode(P,\"ParenthesizedExpression\"),P}shouldParseArrow(){return!this.canInsertSemicolon()}parseArrow(t){if(this.eat(n.arrow))return t}parseParenItem(t,e,s){return t}parseNew(){const t=this.startNode();let e=this.startNode();if(this.next(),e=this.createIdentifier(e,\"new\"),this.eat(n.dot)){const s=this.parseMetaProperty(t,e,\"target\");if(!this.scope.inNonArrowFunction&&!this.scope.inClass){let t=f.UnexpectedNewTarget;this.hasPlugin(\"classProperties\")&&(t+=\" or class properties\"),this.raise(s.start,t)}return s}return t.callee=this.parseNoCallExpr(),\"Import\"===t.callee.type?this.raise(t.callee.start,f.ImportCallNotNewExpression):\"OptionalMemberExpression\"===t.callee.type||\"OptionalCallExpression\"===t.callee.type?this.raise(this.state.lastTokEnd,f.OptionalChainingNoNew):this.eat(n.questionDot)&&this.raise(this.state.start,f.OptionalChainingNoNew),this.parseNewArguments(t),this.finishNode(t,\"NewExpression\")}parseNewArguments(t){if(this.eat(n.parenL)){const e=this.parseExprList(n.parenR);this.toReferencedList(e),t.arguments=e}else t.arguments=[]}parseTemplateElement(t){const e=this.startNode();return null===this.state.value&&(t||this.raise(this.state.start+1,f.InvalidEscapeSequenceTemplate)),e.value={raw:this.input.slice(this.state.start,this.state.end).replace(/\\r\\n?/g,\"\\n\"),cooked:this.state.value},this.next(),e.tail=this.match(n.backQuote),this.finishNode(e,\"TemplateElement\")}parseTemplate(t){const e=this.startNode();this.next(),e.expressions=[];let s=this.parseTemplateElement(t);for(e.quasis=[s];!s.tail;)this.expect(n.dollarBraceL),e.expressions.push(this.parseExpression()),this.expect(n.braceR),e.quasis.push(s=this.parseTemplateElement(t));return this.next(),this.finishNode(e,\"TemplateLiteral\")}parseObj(t,e,s,i){const r=Object.create(null);let a=!0;const o=this.startNode();for(o.properties=[],this.next();!this.eat(t);){if(a)a=!1;else if(this.expect(n.comma),this.match(t)){this.addExtra(o,\"trailingComma\",this.state.lastTokStart),this.next();break}const s=this.parseObjectMember(e,i);e||this.checkDuplicatedProto(s,r,i),s.shorthand&&this.addExtra(s,\"shorthand\",!0),o.properties.push(s)}let h=\"ObjectExpression\";return e?h=\"ObjectPattern\":s&&(h=\"RecordExpression\"),this.finishNode(o,h)}isAsyncProp(t){return!t.computed&&\"Identifier\"===t.key.type&&\"async\"===t.key.name&&(this.match(n.name)||this.match(n.num)||this.match(n.string)||this.match(n.bracketL)||this.state.type.keyword||this.match(n.star))&&!this.hasPrecedingLineBreak()}parseObjectMember(t,e){let s=[];if(this.match(n.at))for(this.hasPlugin(\"decorators\")&&this.raise(this.state.start,f.UnsupportedPropertyDecorator);this.match(n.at);)s.push(this.parseDecorator());const i=this.startNode();let r,a,o=!1,h=!1;if(this.match(n.ellipsis))return s.length&&this.unexpected(),t?(this.next(),i.argument=this.parseIdentifier(),this.checkCommaAfterRest(125),this.finishNode(i,\"RestElement\")):this.parseSpread();s.length&&(i.decorators=s,s=[]),i.method=!1,(t||e)&&(r=this.state.start,a=this.state.startLoc),t||(o=this.eat(n.star));const p=this.state.containsEsc;return this.parsePropertyName(i,!1),t||p||o||!this.isAsyncProp(i)?h=!1:(h=!0,o=this.eat(n.star),this.parsePropertyName(i,!1)),this.parseObjPropValue(i,r,a,o,h,t,e,p),i}isGetterOrSetterMethod(t,e){return!e&&!t.computed&&\"Identifier\"===t.key.type&&(\"get\"===t.key.name||\"set\"===t.key.name)&&(this.match(n.string)||this.match(n.num)||this.match(n.bracketL)||this.match(n.name)||!!this.state.type.keyword)}getGetterSetterExpectedParamCount(t){return\"get\"===t.kind?0:1}checkGetterSetterParams(t){const e=this.getGetterSetterExpectedParamCount(t),s=t.start;t.params.length!==e&&(\"get\"===t.kind?this.raise(s,f.BadGetterArity):this.raise(s,f.BadSetterArity)),\"set\"===t.kind&&\"RestElement\"===t.params[t.params.length-1].type&&this.raise(s,f.BadSetterRestParameter)}parseObjectMethod(t,e,s,i,r){return s||e||this.match(n.parenL)?(i&&this.unexpected(),t.kind=\"method\",t.method=!0,this.parseMethod(t,e,s,!1,!1,\"ObjectMethod\")):!r&&this.isGetterOrSetterMethod(t,i)?((e||s)&&this.unexpected(),t.kind=t.key.name,this.parsePropertyName(t,!1),this.parseMethod(t,!1,!1,!1,!1,\"ObjectMethod\"),this.checkGetterSetterParams(t),t):void 0}parseObjectProperty(t,e,s,i,r){return t.shorthand=!1,this.eat(n.colon)?(t.value=i?this.parseMaybeDefault(this.state.start,this.state.startLoc):this.parseMaybeAssign(!1,r),this.finishNode(t,\"ObjectProperty\")):t.computed||\"Identifier\"!==t.key.type?void 0:(this.checkReservedWord(t.key.name,t.key.start,!0,!0),i?t.value=this.parseMaybeDefault(e,s,t.key.__clone()):this.match(n.eq)&&r?(-1===r.shorthandAssign&&(r.shorthandAssign=this.state.start),t.value=this.parseMaybeDefault(e,s,t.key.__clone())):t.value=t.key.__clone(),t.shorthand=!0,this.finishNode(t,\"ObjectProperty\"))}parseObjPropValue(t,e,s,i,r,a,n,o){const h=this.parseObjectMethod(t,i,r,a,o)||this.parseObjectProperty(t,e,s,a,n);return h||this.unexpected(),h}parsePropertyName(t,e){if(this.eat(n.bracketL))t.computed=!0,t.key=this.parseMaybeAssign(),this.expect(n.bracketR);else{const s=this.state.inPropertyName;this.state.inPropertyName=!0,t.key=this.match(n.num)||this.match(n.string)||this.match(n.bigint)?this.parseExprAtom():this.parseMaybePrivateName(e),\"PrivateName\"!==t.key.type&&(t.computed=!1),this.state.inPropertyName=s}return t.key}initFunction(t,e){t.id=null,t.generator=!1,t.async=!!e}parseMethod(t,e,s,i,r,a,n=!1){const o=this.state.yieldPos,h=this.state.awaitPos;this.state.yieldPos=-1,this.state.awaitPos=-1,this.initFunction(t,s),t.generator=!!e;const p=i;return this.scope.enter(18|(n?64:0)|(r?32:0)),this.prodParam.enter(et(s,t.generator)),this.parseFunctionParams(t,p),this.parseFunctionBodyAndFinish(t,a,!0),this.prodParam.exit(),this.scope.exit(),this.state.yieldPos=o,this.state.awaitPos=h,t}parseArrowExpression(t,e,s,i){this.scope.enter(6),this.prodParam.enter(et(s,!1)),this.initFunction(t,s);const r=this.state.maybeInArrowParameters,a=this.state.yieldPos,n=this.state.awaitPos;return e&&(this.state.maybeInArrowParameters=!0,this.setArrowFunctionParameters(t,e,i)),this.state.maybeInArrowParameters=!1,this.state.yieldPos=-1,this.state.awaitPos=-1,this.parseFunctionBody(t,!0),this.prodParam.exit(),this.scope.exit(),this.state.maybeInArrowParameters=r,this.state.yieldPos=a,this.state.awaitPos=n,this.finishNode(t,\"ArrowFunctionExpression\")}setArrowFunctionParameters(t,e,s){t.params=this.toAssignableList(e,s)}parseFunctionBodyAndFinish(t,e,s=!1){this.parseFunctionBody(t,!1,s),this.finishNode(t,e)}parseFunctionBody(t,e,s=!1){const i=e&&!this.match(n.braceL),r=this.state.inParameters;if(this.state.inParameters=!1,i)t.body=this.parseMaybeAssign(),this.checkParams(t,!1,e,!1);else{const i=this.state.strict,r=this.state.labels;this.state.labels=[],this.prodParam.enter(4|this.prodParam.currentFlags()),t.body=this.parseBlock(!0,!1,r=>{const a=!this.isSimpleParamList(t.params);if(r&&a){const e=\"method\"!==t.kind&&\"constructor\"!==t.kind||!t.key?t.start:t.key.end;this.raise(e,f.IllegalLanguageModeDirective)}const n=!i&&this.state.strict;this.checkParams(t,!(this.state.strict||e||s||a),e,n),this.state.strict&&t.id&&this.checkLVal(t.id,65,void 0,\"function name\",void 0,n)}),this.prodParam.exit(),this.state.labels=r}this.state.inParameters=r}isSimpleParamList(t){for(let e=0,s=t.length;e<s;e++)if(\"Identifier\"!==t[e].type)return!1;return!0}checkParams(t,e,s,i=!0){const r=Object.create(null);for(let s=0;s<t.params.length;s++)this.checkLVal(t.params[s],5,e?null:r,\"function parameter list\",void 0,i)}parseExprList(t,e,s,i){const r=[];let a=!0;for(;!this.eat(t);){if(a)a=!1;else if(this.expect(n.comma),this.match(t)){i&&this.addExtra(i,\"trailingComma\",this.state.lastTokStart),this.next();break}r.push(this.parseExprListItem(e,s))}return r}parseExprListItem(t,e,s,i){let r;if(t&&this.match(n.comma))r=null;else if(this.match(n.ellipsis)){const t=this.state.start,i=this.state.startLoc;r=this.parseParenItem(this.parseSpread(e,s),t,i)}else if(this.match(n.question)){this.expectPlugin(\"partialApplication\"),i||this.raise(this.state.start,f.UnexpectedArgumentPlaceholder);const t=this.startNode();this.next(),r=this.finishNode(t,\"ArgumentPlaceholder\")}else r=this.parseMaybeAssign(!1,e,this.parseParenItem,s);return r}parseIdentifier(t){const e=this.startNode(),s=this.parseIdentifierName(e.start,t);return this.createIdentifier(e,s)}createIdentifier(t,e){return t.name=e,t.loc.identifierName=e,this.finishNode(t,\"Identifier\")}parseIdentifierName(t,e){let s;if(this.match(n.name))s=this.state.value;else{if(!this.state.type.keyword)throw this.unexpected();s=this.state.type.keyword,\"class\"!==s&&\"function\"!==s||this.state.lastTokEnd===this.state.lastTokStart+1&&46===this.input.charCodeAt(this.state.lastTokStart)||this.state.context.pop()}return e?this.state.type=n.name:this.checkReservedWord(s,this.state.start,!!this.state.type.keyword,!1),this.next(),s}checkReservedWord(t,e,s,i){if(this.prodParam.hasYield&&\"yield\"===t)return void this.raise(e,f.YieldBindingIdentifier);if(\"await\"===t){if(this.prodParam.hasAwait)return void this.raise(e,f.AwaitBindingIdentifier);-1===this.state.awaitPos&&(this.state.maybeInAsyncArrowHead||this.isAwaitAllowed())&&(this.state.awaitPos=this.state.start)}if(this.scope.inClass&&!this.scope.inNonArrowFunction&&\"arguments\"===t)return void this.raise(e,f.ArgumentsDisallowedInInitializer);if(s&&function(t){return k.has(t)}(t))return void this.raise(e,f.UnexpectedKeyword,t);(this.state.strict?i?O:B:L)(t,this.inModule)&&(this.prodParam.hasAwait||\"await\"!==t?this.raise(e,f.UnexpectedReservedWord,t):this.raise(e,f.AwaitNotInAsyncFunction))}isAwaitAllowed(){return this.scope.inFunction?this.prodParam.hasAwait:!!this.options.allowAwaitOutsideFunction||!!this.hasPlugin(\"topLevelAwait\")&&(this.inModule&&this.prodParam.hasAwait)}parseAwait(){const t=this.startNode();return this.next(),this.state.inParameters?this.raise(t.start,f.AwaitExpressionFormalParameter):-1===this.state.awaitPos&&(this.state.awaitPos=t.start),this.eat(n.star)&&this.raise(t.start,f.ObsoleteAwaitStar),this.scope.inFunction||this.options.allowAwaitOutsideFunction||(this.hasPrecedingLineBreak()||this.match(n.plusMin)||this.match(n.parenL)||this.match(n.bracketL)||this.match(n.backQuote)||this.match(n.regexp)||this.match(n.slash)||this.hasPlugin(\"v8intrinsic\")&&this.match(n.modulo)?this.ambiguousScriptDifferentAst=!0:this.sawUnambiguousESM=!0),this.state.soloAwait||(t.argument=this.parseMaybeUnary()),this.finishNode(t,\"AwaitExpression\")}parseYield(t){const e=this.startNode();return this.state.inParameters?this.raise(e.start,f.YieldInParameter):-1===this.state.yieldPos&&(this.state.yieldPos=e.start),this.next(),this.match(n.semi)||!this.match(n.star)&&!this.state.type.startsExpr||this.hasPrecedingLineBreak()?(e.delegate=!1,e.argument=null):(e.delegate=this.eat(n.star),e.argument=this.parseMaybeAssign(t)),this.finishNode(e,\"YieldExpression\")}checkPipelineAtInfixOperator(t,e){\"smart\"===this.getPluginOption(\"pipelineOperator\",\"proposal\")&&\"SequenceExpression\"===t.type&&this.raise(e,f.PipelineHeadSequenceExpression)}parseSmartPipelineBody(t,e,s){const i=this.checkSmartPipelineBodyStyle(t);return this.checkSmartPipelineBodyEarlyErrors(t,i,e),this.parseSmartPipelineBodyInStyle(t,i,e,s)}checkSmartPipelineBodyEarlyErrors(t,e,s){if(this.match(n.arrow))throw this.raise(this.state.start,f.PipelineBodyNoArrow);\"PipelineTopicExpression\"===e&&\"SequenceExpression\"===t.type&&this.raise(s,f.PipelineBodySequenceExpression)}parseSmartPipelineBodyInStyle(t,e,s,i){const r=this.startNodeAt(s,i);switch(e){case\"PipelineBareFunction\":r.callee=t;break;case\"PipelineBareConstructor\":r.callee=t.callee;break;case\"PipelineBareAwaitedFunction\":r.callee=t.argument;break;case\"PipelineTopicExpression\":this.topicReferenceWasUsedInCurrentTopicContext()||this.raise(s,f.PipelineTopicUnused),r.expression=t;break;default:throw new Error(\"Internal @babel/parser error: Unknown pipeline style (\".concat(e,\")\"))}return this.finishNode(r,e)}checkSmartPipelineBodyStyle(t){return t.type,this.isSimpleReference(t)?\"PipelineBareFunction\":\"PipelineTopicExpression\"}isSimpleReference(t){switch(t.type){case\"MemberExpression\":return!t.computed&&this.isSimpleReference(t.object);case\"Identifier\":return!0;default:return!1}}withTopicPermittingContext(t){const e=this.state.topicContext;this.state.topicContext={maxNumOfResolvableTopics:1,maxTopicIndex:null};try{return t()}finally{this.state.topicContext=e}}withTopicForbiddingContext(t){const e=this.state.topicContext;this.state.topicContext={maxNumOfResolvableTopics:0,maxTopicIndex:null};try{return t()}finally{this.state.topicContext=e}}withSoloAwaitPermittingContext(t){const e=this.state.soloAwait;this.state.soloAwait=!0;try{return t()}finally{this.state.soloAwait=e}}registerTopicReference(){this.state.topicContext.maxTopicIndex=0}primaryTopicReferenceIsAllowedInCurrentTopicContext(){return this.state.topicContext.maxNumOfResolvableTopics>=1}topicReferenceWasUsedInCurrentTopicContext(){return null!=this.state.topicContext.maxTopicIndex&&this.state.topicContext.maxTopicIndex>=0}parseFSharpPipelineBody(t,e){const s=this.state.start,i=this.state.startLoc;this.state.potentialArrowAt=this.state.start;const r=this.state.inFSharpPipelineDirectBody;this.state.inFSharpPipelineDirectBody=!0;const a=this.parseExprOp(this.parseMaybeUnary(),s,i,t,e);return this.state.inFSharpPipelineDirectBody=r,a}}{parseTopLevel(t,e){if(e.sourceType=this.options.sourceType,e.interpreter=this.parseInterpreterDirective(),this.parseBlockBody(e,!0,!0,n.eof),this.inModule&&!this.options.allowUndeclaredExports&&this.scope.undefinedExports.size>0)for(let t=0,e=Array.from(this.scope.undefinedExports);t<e.length;t++){const[s]=e[t],i=this.scope.undefinedExports.get(s);this.raise(i,f.ModuleExportUndefined,s)}return t.program=this.finishNode(e,\"Program\"),t.comments=this.state.comments,this.options.tokens&&(t.tokens=this.tokens),this.finishNode(t,\"File\")}stmtToDirective(t){const e=t.expression,s=this.startNodeAt(e.start,e.loc.start),i=this.startNodeAt(t.start,t.loc.start),r=this.input.slice(e.start,e.end),a=s.value=r.slice(1,-1);return this.addExtra(s,\"raw\",r),this.addExtra(s,\"rawValue\",a),i.value=this.finishNodeAt(s,\"DirectiveLiteral\",e.end,e.loc.end),this.finishNodeAt(i,\"Directive\",t.end,t.loc.end)}parseInterpreterDirective(){if(!this.match(n.interpreterDirective))return null;const t=this.startNode();return t.value=this.state.value,this.next(),this.finishNode(t,\"InterpreterDirective\")}isLet(t){if(!this.isContextual(\"let\"))return!1;const e=this.nextTokenStart(),s=this.input.charCodeAt(e);if(91===s)return!0;if(t)return!1;if(123===s)return!0;if(w(s)){let t=e+1;for(;S(this.input.charCodeAt(t));)++t;const s=this.input.slice(e,t);if(!R.test(s))return!0}return!1}parseStatement(t,e){return this.match(n.at)&&this.parseDecorators(!0),this.parseStatementContent(t,e)}parseStatementContent(t,e){let s=this.state.type;const i=this.startNode();let r;switch(this.isLet(t)&&(s=n._var,r=\"let\"),s){case n._break:case n._continue:return this.parseBreakContinueStatement(i,s.keyword);case n._debugger:return this.parseDebuggerStatement(i);case n._do:return this.parseDoStatement(i);case n._for:return this.parseForStatement(i);case n._function:if(46===this.lookaheadCharCode())break;return t&&(this.state.strict?this.raise(this.state.start,f.StrictFunction):\"if\"!==t&&\"label\"!==t&&this.raise(this.state.start,f.SloppyFunction)),this.parseFunctionStatement(i,!1,!t);case n._class:return t&&this.unexpected(),this.parseClass(i,!0);case n._if:return this.parseIfStatement(i);case n._return:return this.parseReturnStatement(i);case n._switch:return this.parseSwitchStatement(i);case n._throw:return this.parseThrowStatement(i);case n._try:return this.parseTryStatement(i);case n._const:case n._var:return r=r||this.state.value,t&&\"var\"!==r&&this.raise(this.state.start,f.UnexpectedLexicalDeclaration),this.parseVarStatement(i,r);case n._while:return this.parseWhileStatement(i);case n._with:return this.parseWithStatement(i);case n.braceL:return this.parseBlock();case n.semi:return this.parseEmptyStatement(i);case n._export:case n._import:{const t=this.lookaheadCharCode();if(40===t||46===t)break;let r;return this.options.allowImportExportEverywhere||e||this.raise(this.state.start,f.UnexpectedImportExport),this.next(),s===n._import?(r=this.parseImport(i),\"ImportDeclaration\"!==r.type||r.importKind&&\"value\"!==r.importKind||(this.sawUnambiguousESM=!0)):(r=this.parseExport(i),(\"ExportNamedDeclaration\"!==r.type||r.exportKind&&\"value\"!==r.exportKind)&&(\"ExportAllDeclaration\"!==r.type||r.exportKind&&\"value\"!==r.exportKind)&&\"ExportDefaultDeclaration\"!==r.type||(this.sawUnambiguousESM=!0)),this.assertModuleNodeAllowed(i),r}default:if(this.isAsyncFunction())return t&&this.raise(this.state.start,f.AsyncFunctionInSingleStatementContext),this.next(),this.parseFunctionStatement(i,!0,!t)}const a=this.state.value,o=this.parseExpression();return s===n.name&&\"Identifier\"===o.type&&this.eat(n.colon)?this.parseLabeledStatement(i,a,o,t):this.parseExpressionStatement(i,o)}assertModuleNodeAllowed(t){this.options.allowImportExportEverywhere||this.inModule||this.raiseWithData(t.start,{code:\"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"},f.ImportOutsideModule)}takeDecorators(t){const e=this.state.decoratorStack[this.state.decoratorStack.length-1];e.length&&(t.decorators=e,this.resetStartLocationFromNode(t,e[0]),this.state.decoratorStack[this.state.decoratorStack.length-1]=[])}canHaveLeadingDecorator(){return this.match(n._class)}parseDecorators(t){const e=this.state.decoratorStack[this.state.decoratorStack.length-1];for(;this.match(n.at);){const t=this.parseDecorator();e.push(t)}if(this.match(n._export))t||this.unexpected(),this.hasPlugin(\"decorators\")&&!this.getPluginOption(\"decorators\",\"decoratorsBeforeExport\")&&this.raise(this.state.start,f.DecoratorExportClass);else if(!this.canHaveLeadingDecorator())throw this.raise(this.state.start,f.UnexpectedLeadingDecorator)}parseDecorator(){this.expectOnePlugin([\"decorators-legacy\",\"decorators\"]);const t=this.startNode();if(this.next(),this.hasPlugin(\"decorators\")){this.state.decoratorStack.push([]);const e=this.state.start,s=this.state.startLoc;let i;if(this.eat(n.parenL))i=this.parseExpression(),this.expect(n.parenR);else for(i=this.parseIdentifier(!1);this.eat(n.dot);){const t=this.startNodeAt(e,s);t.object=i,t.property=this.parseIdentifier(!0),t.computed=!1,i=this.finishNode(t,\"MemberExpression\")}t.expression=this.parseMaybeDecoratorArguments(i),this.state.decoratorStack.pop()}else t.expression=this.parseExprSubscripts();return this.finishNode(t,\"Decorator\")}parseMaybeDecoratorArguments(t){if(this.eat(n.parenL)){const e=this.startNodeAtNode(t);return e.callee=t,e.arguments=this.parseCallExpressionArguments(n.parenR,!1),this.toReferencedList(e.arguments),this.finishNode(e,\"CallExpression\")}return t}parseBreakContinueStatement(t,e){const s=\"break\"===e;return this.next(),this.isLineTerminator()?t.label=null:(t.label=this.parseIdentifier(),this.semicolon()),this.verifyBreakContinue(t,e),this.finishNode(t,s?\"BreakStatement\":\"ContinueStatement\")}verifyBreakContinue(t,e){const s=\"break\"===e;let i;for(i=0;i<this.state.labels.length;++i){const e=this.state.labels[i];if(null==t.label||e.name===t.label.name){if(null!=e.kind&&(s||\"loop\"===e.kind))break;if(t.label&&s)break}}i===this.state.labels.length&&this.raise(t.start,f.IllegalBreakContinue,e)}parseDebuggerStatement(t){return this.next(),this.semicolon(),this.finishNode(t,\"DebuggerStatement\")}parseHeaderExpression(){this.expect(n.parenL);const t=this.parseExpression();return this.expect(n.parenR),t}parseDoStatement(t){return this.next(),this.state.labels.push(Et),t.body=this.withTopicForbiddingContext(()=>this.parseStatement(\"do\")),this.state.labels.pop(),this.expect(n._while),t.test=this.parseHeaderExpression(),this.eat(n.semi),this.finishNode(t,\"DoWhileStatement\")}parseForStatement(t){this.next(),this.state.labels.push(Et);let e=-1;if(this.isAwaitAllowed()&&this.eatContextual(\"await\")&&(e=this.state.lastTokStart),this.scope.enter(0),this.expect(n.parenL),this.match(n.semi))return e>-1&&this.unexpected(e),this.parseFor(t,null);const s=this.isLet();if(this.match(n._var)||this.match(n._const)||s){const i=this.startNode(),r=s?\"let\":this.state.value;return this.next(),this.parseVar(i,!0,r),this.finishNode(i,\"VariableDeclaration\"),(this.match(n._in)||this.isContextual(\"of\"))&&1===i.declarations.length?this.parseForIn(t,i,e):(e>-1&&this.unexpected(e),this.parseFor(t,i))}const i=new xt,r=this.parseExpression(!0,i);if(this.match(n._in)||this.isContextual(\"of\")){this.toAssignable(r);const s=this.isContextual(\"of\")?\"for-of statement\":\"for-in statement\";return this.checkLVal(r,void 0,void 0,s),this.parseForIn(t,r,e)}return this.checkExpressionErrors(i,!0),e>-1&&this.unexpected(e),this.parseFor(t,r)}parseFunctionStatement(t,e,s){return this.next(),this.parseFunction(t,1|(s?0:2),e)}parseIfStatement(t){return this.next(),t.test=this.parseHeaderExpression(),t.consequent=this.parseStatement(\"if\"),t.alternate=this.eat(n._else)?this.parseStatement(\"if\"):null,this.finishNode(t,\"IfStatement\")}parseReturnStatement(t){return this.prodParam.hasReturn||this.options.allowReturnOutsideFunction||this.raise(this.state.start,f.IllegalReturn),this.next(),this.isLineTerminator()?t.argument=null:(t.argument=this.parseExpression(),this.semicolon()),this.finishNode(t,\"ReturnStatement\")}parseSwitchStatement(t){this.next(),t.discriminant=this.parseHeaderExpression();const e=t.cases=[];let s,i;for(this.expect(n.braceL),this.state.labels.push(Ct),this.scope.enter(0);!this.match(n.braceR);)if(this.match(n._case)||this.match(n._default)){const t=this.match(n._case);s&&this.finishNode(s,\"SwitchCase\"),e.push(s=this.startNode()),s.consequent=[],this.next(),t?s.test=this.parseExpression():(i&&this.raise(this.state.lastTokStart,f.MultipleDefaultsInSwitch),i=!0,s.test=null),this.expect(n.colon)}else s?s.consequent.push(this.parseStatement(null)):this.unexpected();return this.scope.exit(),s&&this.finishNode(s,\"SwitchCase\"),this.next(),this.state.labels.pop(),this.finishNode(t,\"SwitchStatement\")}parseThrowStatement(t){return this.next(),o.test(this.input.slice(this.state.lastTokEnd,this.state.start))&&this.raise(this.state.lastTokEnd,f.NewlineAfterThrow),t.argument=this.parseExpression(),this.semicolon(),this.finishNode(t,\"ThrowStatement\")}parseTryStatement(t){if(this.next(),t.block=this.parseBlock(),t.handler=null,this.match(n._catch)){const e=this.startNode();if(this.next(),this.match(n.parenL)){this.expect(n.parenL),e.param=this.parseBindingAtom();const t=\"Identifier\"===e.param.type;this.scope.enter(t?8:0),this.checkLVal(e.param,9,null,\"catch clause\"),this.expect(n.parenR)}else e.param=null,this.scope.enter(0);e.body=this.withTopicForbiddingContext(()=>this.parseBlock(!1,!1)),this.scope.exit(),t.handler=this.finishNode(e,\"CatchClause\")}return t.finalizer=this.eat(n._finally)?this.parseBlock():null,t.handler||t.finalizer||this.raise(t.start,f.NoCatchOrFinally),this.finishNode(t,\"TryStatement\")}parseVarStatement(t,e){return this.next(),this.parseVar(t,!1,e),this.semicolon(),this.finishNode(t,\"VariableDeclaration\")}parseWhileStatement(t){return this.next(),t.test=this.parseHeaderExpression(),this.state.labels.push(Et),t.body=this.withTopicForbiddingContext(()=>this.parseStatement(\"while\")),this.state.labels.pop(),this.finishNode(t,\"WhileStatement\")}parseWithStatement(t){return this.state.strict&&this.raise(this.state.start,f.StrictWith),this.next(),t.object=this.parseHeaderExpression(),t.body=this.withTopicForbiddingContext(()=>this.parseStatement(\"with\")),this.finishNode(t,\"WithStatement\")}parseEmptyStatement(t){return this.next(),this.finishNode(t,\"EmptyStatement\")}parseLabeledStatement(t,e,s,i){for(let t=0,i=this.state.labels;t<i.length;t++){i[t].name===e&&this.raise(s.start,f.LabelRedeclaration,e)}const r=this.state.type.isLoop?\"loop\":this.match(n._switch)?\"switch\":null;for(let e=this.state.labels.length-1;e>=0;e--){const s=this.state.labels[e];if(s.statementStart!==t.start)break;s.statementStart=this.state.start,s.kind=r}return this.state.labels.push({name:e,kind:r,statementStart:this.state.start}),t.body=this.parseStatement(i?-1===i.indexOf(\"label\")?i+\"label\":i:\"label\"),this.state.labels.pop(),t.label=s,this.finishNode(t,\"LabeledStatement\")}parseExpressionStatement(t,e){return t.expression=e,this.semicolon(),this.finishNode(t,\"ExpressionStatement\")}parseBlock(t=!1,e=!0,s){const i=this.startNode();return this.expect(n.braceL),e&&this.scope.enter(0),this.parseBlockBody(i,t,!1,n.braceR,s),e&&this.scope.exit(),this.finishNode(i,\"BlockStatement\")}isValidDirective(t){return\"ExpressionStatement\"===t.type&&\"StringLiteral\"===t.expression.type&&!t.expression.extra.parenthesized}parseBlockBody(t,e,s,i,r){const a=t.body=[],n=t.directives=[];this.parseBlockOrModuleBlockBody(a,e?n:void 0,s,i,r)}parseBlockOrModuleBlockBody(t,e,s,i,r){const a=[],n=this.state.strict;let o=!1,h=!1;for(;!this.match(i);){!h&&this.state.octalPositions.length&&a.push(...this.state.octalPositions);const i=this.parseStatement(null,s);if(e&&!h&&this.isValidDirective(i)){const t=this.stmtToDirective(i);e.push(t),o||\"use strict\"!==t.value.value||(o=!0,this.setStrict(!0))}else h=!0,t.push(i)}if(this.state.strict&&a.length)for(let t=0;t<a.length;t++){const e=a[t];this.raise(e,f.StrictOctalLiteral)}r&&r.call(this,o),n||this.setStrict(!1),this.next()}parseFor(t,e){return t.init=e,this.expect(n.semi),t.test=this.match(n.semi)?null:this.parseExpression(),this.expect(n.semi),t.update=this.match(n.parenR)?null:this.parseExpression(),this.expect(n.parenR),t.body=this.withTopicForbiddingContext(()=>this.parseStatement(\"for\")),this.scope.exit(),this.state.labels.pop(),this.finishNode(t,\"ForStatement\")}parseForIn(t,e,s){const i=this.match(n._in);return this.next(),i?s>-1&&this.unexpected(s):t.await=s>-1,\"VariableDeclaration\"!==e.type||null==e.declarations[0].init||i&&!this.state.strict&&\"var\"===e.kind&&\"Identifier\"===e.declarations[0].id.type?\"AssignmentPattern\"===e.type&&this.raise(e.start,f.InvalidLhs,\"for-loop\"):this.raise(e.start,f.ForInOfLoopInitializer,i?\"for-in\":\"for-of\"),t.left=e,t.right=i?this.parseExpression():this.parseMaybeAssign(),this.expect(n.parenR),t.body=this.withTopicForbiddingContext(()=>this.parseStatement(\"for\")),this.scope.exit(),this.state.labels.pop(),this.finishNode(t,i?\"ForInStatement\":\"ForOfStatement\")}parseVar(t,e,s){const i=t.declarations=[],r=this.hasPlugin(\"typescript\");for(t.kind=s;;){const t=this.startNode();if(this.parseVarId(t,s),this.eat(n.eq)?t.init=this.parseMaybeAssign(e):(\"const\"!==s||this.match(n._in)||this.isContextual(\"of\")?\"Identifier\"===t.id.type||e&&(this.match(n._in)||this.isContextual(\"of\"))||this.raise(this.state.lastTokEnd,f.DeclarationMissingInitializer,\"Complex binding patterns\"):r||this.unexpected(),t.init=null),i.push(this.finishNode(t,\"VariableDeclarator\")),!this.eat(n.comma))break}return t}parseVarId(t,e){t.id=this.parseBindingAtom(),this.checkLVal(t.id,\"var\"===e?5:9,void 0,\"variable declaration\",\"var\"!==e)}parseFunction(t,e=0,s=!1){const i=1&e,r=2&e,a=!(!i||4&e);this.initFunction(t,s),this.match(n.star)&&r&&this.raise(this.state.start,f.GeneratorInSingleStatementContext),t.generator=this.eat(n.star),i&&(t.id=this.parseFunctionId(a));const o=this.state.maybeInArrowParameters,h=this.state.yieldPos,p=this.state.awaitPos;return this.state.maybeInArrowParameters=!1,this.state.yieldPos=-1,this.state.awaitPos=-1,this.scope.enter(2),this.prodParam.enter(et(s,t.generator)),i||(t.id=this.parseFunctionId()),this.parseFunctionParams(t),this.withTopicForbiddingContext(()=>{this.parseFunctionBodyAndFinish(t,i?\"FunctionDeclaration\":\"FunctionExpression\")}),this.prodParam.exit(),this.scope.exit(),i&&!r&&this.registerFunctionStatementId(t),this.state.maybeInArrowParameters=o,this.state.yieldPos=h,this.state.awaitPos=p,t}parseFunctionId(t){return t||this.match(n.name)?this.parseIdentifier():null}parseFunctionParams(t,e){const s=this.state.inParameters;this.state.inParameters=!0,this.expect(n.parenL),t.params=this.parseBindingList(n.parenR,41,!1,e),this.state.inParameters=s,this.checkYieldAwaitInDefaultParams()}registerFunctionStatementId(t){t.id&&this.scope.declareName(t.id.name,this.state.strict||t.generator||t.async?this.scope.treatFunctionsAsVar?5:9:17,t.id.start)}parseClass(t,e,s){this.next(),this.takeDecorators(t);const i=this.state.strict;return this.state.strict=!0,this.parseClassId(t,e,s),this.parseClassSuper(t),t.body=this.parseClassBody(!!t.superClass,i),this.state.strict=i,this.finishNode(t,e?\"ClassDeclaration\":\"ClassExpression\")}isClassProperty(){return this.match(n.eq)||this.match(n.semi)||this.match(n.braceR)}isClassMethod(){return this.match(n.parenL)}isNonstaticConstructor(t){return!(t.computed||t.static||\"constructor\"!==t.key.name&&\"constructor\"!==t.key.value)}parseClassBody(t,e){this.classScope.enter();const s={hadConstructor:!1};let i=[];const r=this.startNode();if(r.body=[],this.expect(n.braceL),this.withTopicForbiddingContext(()=>{for(;!this.match(n.braceR);){if(this.eat(n.semi)){if(i.length>0)throw this.raise(this.state.lastTokEnd,f.DecoratorSemicolon);continue}if(this.match(n.at)){i.push(this.parseDecorator());continue}const e=this.startNode();i.length&&(e.decorators=i,this.resetStartLocationFromNode(e,i[0]),i=[]),this.parseClassMember(r,e,s,t),\"constructor\"===e.kind&&e.decorators&&e.decorators.length>0&&this.raise(e.start,f.DecoratorConstructor)}}),e||(this.state.strict=!1),this.next(),i.length)throw this.raise(this.state.start,f.TrailingDecorator);return this.classScope.exit(),this.finishNode(r,\"ClassBody\")}parseClassMemberFromModifier(t,e){const s=this.state.containsEsc,i=this.parseIdentifier(!0);if(this.isClassMethod()){const s=e;return s.kind=\"method\",s.computed=!1,s.key=i,s.static=!1,this.pushClassMethod(t,s,!1,!1,!1,!1),!0}if(this.isClassProperty()){const s=e;return s.computed=!1,s.key=i,s.static=!1,t.body.push(this.parseClassProperty(s)),!0}if(s)throw this.unexpected();return!1}parseClassMember(t,e,s,i){const r=this.isContextual(\"static\");r&&this.parseClassMemberFromModifier(t,e)||this.parseClassMemberWithIsStatic(t,e,s,r,i)}parseClassMemberWithIsStatic(t,e,s,i,r){const a=e,o=e,h=e,p=e,c=a,u=a;if(e.static=i,this.eat(n.star))return c.kind=\"method\",this.parseClassPropertyName(c),\"PrivateName\"===c.key.type?void this.pushClassPrivateMethod(t,o,!0,!1):(this.isNonstaticConstructor(a)&&this.raise(a.key.start,f.ConstructorIsGenerator),void this.pushClassMethod(t,a,!0,!1,!1,!1));const l=this.state.containsEsc,d=this.parseClassPropertyName(e),m=\"PrivateName\"===d.type,D=\"Identifier\"===d.type,y=this.state.start;if(this.parsePostMemberNameModifiers(u),this.isClassMethod()){if(c.kind=\"method\",m)return void this.pushClassPrivateMethod(t,o,!1,!1);const e=this.isNonstaticConstructor(a);let i=!1;e&&(a.kind=\"constructor\",s.hadConstructor&&!this.hasPlugin(\"typescript\")&&this.raise(d.start,f.DuplicateConstructor),s.hadConstructor=!0,i=r),this.pushClassMethod(t,a,!1,!1,e,i)}else if(this.isClassProperty())m?this.pushClassPrivateProperty(t,p):this.pushClassProperty(t,h);else if(!D||\"async\"!==d.name||l||this.isLineTerminator())!D||\"get\"!==d.name&&\"set\"!==d.name||l||this.match(n.star)&&this.isLineTerminator()?this.isLineTerminator()?m?this.pushClassPrivateProperty(t,p):this.pushClassProperty(t,h):this.unexpected():(c.kind=d.name,this.parseClassPropertyName(a),\"PrivateName\"===c.key.type?this.pushClassPrivateMethod(t,o,!1,!1):(this.isNonstaticConstructor(a)&&this.raise(a.key.start,f.ConstructorIsAccessor),this.pushClassMethod(t,a,!1,!1,!1,!1)),this.checkGetterSetterParams(a));else{const e=this.eat(n.star);u.optional&&this.unexpected(y),c.kind=\"method\",this.parseClassPropertyName(c),this.parsePostMemberNameModifiers(u),\"PrivateName\"===c.key.type?this.pushClassPrivateMethod(t,o,e,!0):(this.isNonstaticConstructor(a)&&this.raise(a.key.start,f.ConstructorIsAsync),this.pushClassMethod(t,a,e,!0,!1,!1))}}parseClassPropertyName(t){const e=this.parsePropertyName(t,!0);return t.computed||!t.static||\"prototype\"!==e.name&&\"prototype\"!==e.value||this.raise(e.start,f.StaticPrototype),\"PrivateName\"===e.type&&\"constructor\"===e.id.name&&this.raise(e.start,f.ConstructorClassPrivateField),e}pushClassProperty(t,e){e.computed||\"constructor\"!==e.key.name&&\"constructor\"!==e.key.value||this.raise(e.key.start,f.ConstructorClassField),t.body.push(this.parseClassProperty(e))}pushClassPrivateProperty(t,e){this.expectPlugin(\"classPrivateProperties\",e.key.start);const s=this.parseClassPrivateProperty(e);t.body.push(s),this.classScope.declarePrivateName(s.key.id.name,0,s.key.start)}pushClassMethod(t,e,s,i,r,a){t.body.push(this.parseMethod(e,s,i,r,a,\"ClassMethod\",!0))}pushClassPrivateMethod(t,e,s,i){this.expectPlugin(\"classPrivateMethods\",e.key.start);const r=this.parseMethod(e,s,i,!1,!1,\"ClassPrivateMethod\",!0);t.body.push(r);const a=\"get\"===r.kind?r.static?6:2:\"set\"===r.kind?r.static?5:1:0;this.classScope.declarePrivateName(r.key.id.name,a,r.key.start)}parsePostMemberNameModifiers(t){}parseAccessModifier(){}parseClassPrivateProperty(t){return this.scope.enter(80),this.prodParam.enter(0),t.value=this.eat(n.eq)?this.parseMaybeAssign():null,this.semicolon(),this.prodParam.exit(),this.scope.exit(),this.finishNode(t,\"ClassPrivateProperty\")}parseClassProperty(t){return t.typeAnnotation||this.expectPlugin(\"classProperties\"),this.scope.enter(80),this.prodParam.enter(0),this.match(n.eq)?(this.expectPlugin(\"classProperties\"),this.next(),t.value=this.parseMaybeAssign()):t.value=null,this.semicolon(),this.prodParam.exit(),this.scope.exit(),this.finishNode(t,\"ClassProperty\")}parseClassId(t,e,s,i=139){this.match(n.name)?(t.id=this.parseIdentifier(),e&&this.checkLVal(t.id,i,void 0,\"class name\")):s||!e?t.id=null:this.unexpected(null,f.MissingClassName)}parseClassSuper(t){t.superClass=this.eat(n._extends)?this.parseExprSubscripts():null}parseExport(t){const e=this.maybeParseExportDefaultSpecifier(t),s=!e||this.eat(n.comma),i=s&&this.eatExportStar(t),r=i&&this.maybeParseExportNamespaceSpecifier(t),a=s&&(!r||this.eat(n.comma)),o=e||i;if(i&&!r)return e&&this.unexpected(),this.parseExportFrom(t,!0),this.finishNode(t,\"ExportAllDeclaration\");const h=this.maybeParseExportNamedSpecifiers(t);if(e&&s&&!i&&!h||r&&a&&!h)throw this.unexpected(null,n.braceL);let p;if(o||h?(p=!1,this.parseExportFrom(t,o)):p=this.maybeParseExportDeclaration(t),o||h||p)return this.checkExport(t,!0,!1,!!t.source),this.finishNode(t,\"ExportNamedDeclaration\");if(this.eat(n._default))return t.declaration=this.parseExportDefaultExpression(),this.checkExport(t,!0,!0),this.finishNode(t,\"ExportDefaultDeclaration\");throw this.unexpected(null,n.braceL)}eatExportStar(t){return this.eat(n.star)}maybeParseExportDefaultSpecifier(t){if(this.isExportDefaultSpecifier()){this.expectPlugin(\"exportDefaultFrom\");const e=this.startNode();return e.exported=this.parseIdentifier(!0),t.specifiers=[this.finishNode(e,\"ExportDefaultSpecifier\")],!0}return!1}maybeParseExportNamespaceSpecifier(t){if(this.isContextual(\"as\")){t.specifiers||(t.specifiers=[]);const e=this.startNodeAt(this.state.lastTokStart,this.state.lastTokStartLoc);return this.next(),e.exported=this.parseIdentifier(!0),t.specifiers.push(this.finishNode(e,\"ExportNamespaceSpecifier\")),!0}return!1}maybeParseExportNamedSpecifiers(t){return!!this.match(n.braceL)&&(t.specifiers||(t.specifiers=[]),t.specifiers.push(...this.parseExportSpecifiers()),t.source=null,t.declaration=null,!0)}maybeParseExportDeclaration(t){if(this.shouldParseExportDeclaration()){if(this.isContextual(\"async\")){const t=this.nextTokenStart();this.isUnparsedContextual(t,\"function\")||this.unexpected(t,n._function)}return t.specifiers=[],t.source=null,t.declaration=this.parseExportDeclaration(t),!0}return!1}isAsyncFunction(){if(!this.isContextual(\"async\"))return!1;const t=this.nextTokenStart();return!o.test(this.input.slice(this.state.pos,t))&&this.isUnparsedContextual(t,\"function\")}parseExportDefaultExpression(){const t=this.startNode(),e=this.isAsyncFunction();if(this.match(n._function)||e)return this.next(),e&&this.next(),this.parseFunction(t,5,e);if(this.match(n._class))return this.parseClass(t,!0,!0);if(this.match(n.at))return this.hasPlugin(\"decorators\")&&this.getPluginOption(\"decorators\",\"decoratorsBeforeExport\")&&this.raise(this.state.start,f.DecoratorBeforeExport),this.parseDecorators(!1),this.parseClass(t,!0,!0);if(this.match(n._const)||this.match(n._var)||this.isLet())throw this.raise(this.state.start,f.UnsupportedDefaultExport);{const t=this.parseMaybeAssign();return this.semicolon(),t}}parseExportDeclaration(t){return this.parseStatement(null)}isExportDefaultSpecifier(){if(this.match(n.name))return\"async\"!==this.state.value&&\"let\"!==this.state.value;if(!this.match(n._default))return!1;const t=this.nextTokenStart();return 44===this.input.charCodeAt(t)||this.isUnparsedContextual(t,\"from\")}parseExportFrom(t,e){this.eatContextual(\"from\")?(t.source=this.parseImportSource(),this.checkExport(t)):e?this.unexpected():t.source=null,this.semicolon()}shouldParseExportDeclaration(){if(this.match(n.at)&&(this.expectOnePlugin([\"decorators\",\"decorators-legacy\"]),this.hasPlugin(\"decorators\"))){if(!this.getPluginOption(\"decorators\",\"decoratorsBeforeExport\"))return!0;this.unexpected(this.state.start,f.DecoratorBeforeExport)}return\"var\"===this.state.type.keyword||\"const\"===this.state.type.keyword||\"function\"===this.state.type.keyword||\"class\"===this.state.type.keyword||this.isLet()||this.isAsyncFunction()}checkExport(t,e,s,i){if(e)if(s)this.checkDuplicateExports(t,\"default\");else if(t.specifiers&&t.specifiers.length)for(let e=0,s=t.specifiers;e<s.length;e++){const t=s[e];this.checkDuplicateExports(t,t.exported.name),!i&&t.local&&(this.checkReservedWord(t.local.name,t.local.start,!0,!1),this.scope.checkLocalExport(t.local))}else if(t.declaration)if(\"FunctionDeclaration\"===t.declaration.type||\"ClassDeclaration\"===t.declaration.type){const e=t.declaration.id;if(!e)throw new Error(\"Assertion failure\");this.checkDuplicateExports(t,e.name)}else if(\"VariableDeclaration\"===t.declaration.type)for(let e=0,s=t.declaration.declarations;e<s.length;e++){const t=s[e];this.checkDeclaration(t.id)}if(this.state.decoratorStack[this.state.decoratorStack.length-1].length){const e=t.declaration&&(\"ClassDeclaration\"===t.declaration.type||\"ClassExpression\"===t.declaration.type);if(!t.declaration||!e)throw this.raise(t.start,f.UnsupportedDecoratorExport);this.takeDecorators(t.declaration)}}checkDeclaration(t){if(\"Identifier\"===t.type)this.checkDuplicateExports(t,t.name);else if(\"ObjectPattern\"===t.type)for(let e=0,s=t.properties;e<s.length;e++){const t=s[e];this.checkDeclaration(t)}else if(\"ArrayPattern\"===t.type)for(let e=0,s=t.elements;e<s.length;e++){const t=s[e];t&&this.checkDeclaration(t)}else\"ObjectProperty\"===t.type?this.checkDeclaration(t.value):\"RestElement\"===t.type?this.checkDeclaration(t.argument):\"AssignmentPattern\"===t.type&&this.checkDeclaration(t.left)}checkDuplicateExports(t,e){this.state.exportedIdentifiers.indexOf(e)>-1&&this.raise(t.start,\"default\"===e?f.DuplicateDefaultExport:f.DuplicateExport,e),this.state.exportedIdentifiers.push(e)}parseExportSpecifiers(){const t=[];let e=!0;for(this.expect(n.braceL);!this.eat(n.braceR);){if(e)e=!1;else if(this.expect(n.comma),this.eat(n.braceR))break;const s=this.startNode();s.local=this.parseIdentifier(!0),s.exported=this.eatContextual(\"as\")?this.parseIdentifier(!0):s.local.__clone(),t.push(this.finishNode(s,\"ExportSpecifier\"))}return t}parseImport(t){if(t.specifiers=[],!this.match(n.string)){const e=!this.maybeParseDefaultImportSpecifier(t)||this.eat(n.comma),s=e&&this.maybeParseStarImportSpecifier(t);e&&!s&&this.parseNamedImportSpecifiers(t),this.expectContextual(\"from\")}return t.source=this.parseImportSource(),this.semicolon(),this.finishNode(t,\"ImportDeclaration\")}parseImportSource(){return this.match(n.string)||this.unexpected(),this.parseExprAtom()}shouldParseDefaultImport(t){return this.match(n.name)}parseImportSpecifierLocal(t,e,s,i){e.local=this.parseIdentifier(),this.checkLVal(e.local,9,void 0,i),t.specifiers.push(this.finishNode(e,s))}maybeParseDefaultImportSpecifier(t){return!!this.shouldParseDefaultImport(t)&&(this.parseImportSpecifierLocal(t,this.startNode(),\"ImportDefaultSpecifier\",\"default import specifier\"),!0)}maybeParseStarImportSpecifier(t){if(this.match(n.star)){const e=this.startNode();return this.next(),this.expectContextual(\"as\"),this.parseImportSpecifierLocal(t,e,\"ImportNamespaceSpecifier\",\"import namespace specifier\"),!0}return!1}parseNamedImportSpecifiers(t){let e=!0;for(this.expect(n.braceL);!this.eat(n.braceR);){if(e)e=!1;else{if(this.eat(n.colon))throw this.raise(this.state.start,f.DestructureNamedImport);if(this.expect(n.comma),this.eat(n.braceR))break}this.parseImportSpecifier(t)}}parseImportSpecifier(t){const e=this.startNode();e.imported=this.parseIdentifier(!0),this.eatContextual(\"as\")?e.local=this.parseIdentifier():(this.checkReservedWord(e.imported.name,e.start,!0,!0),e.local=e.imported.__clone()),this.checkLVal(e.local,9,void 0,\"import specifier\"),t.specifiers.push(this.finishNode(e,\"ImportSpecifier\"))}}{constructor(t,e){super(t=function(t){const e={};for(let s=0,i=Object.keys(ut);s<i.length;s++){const r=i[s];e[r]=t&&null!=t[r]?t[r]:ut[r]}return e}(t),e);const s=this.getScopeHandler();this.options=t,this.inModule=\"module\"===this.options.sourceType,this.scope=new s(this.raise.bind(this),this.inModule),this.prodParam=new tt,this.classScope=new Tt(this.raise.bind(this)),this.plugins=function(t){const e=new Map;for(let s=0;s<t.length;s++){const i=t[s],[r,a]=Array.isArray(i)?i:[i,{}];e.has(r)||e.set(r,a||{})}return e}(this.options.plugins),this.filename=t.sourceFilename}getScopeHandler(){return Y}parse(){let t=0;this.hasPlugin(\"topLevelAwait\")&&this.inModule&&(t|=2),this.scope.enter(1),this.prodParam.enter(t);const e=this.startNode(),s=this.startNode();return this.nextToken(),e.errors=null,this.parseTopLevel(e,s),e.errors=this.state.errors,e}}function wt(t,e){let s=At;return t&&t.plugins&&(!function(t){if(at(t,\"decorators\")){if(at(t,\"decorators-legacy\"))throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");const e=nt(t,\"decorators\",\"decoratorsBeforeExport\");if(null==e)throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option, whose value must be a boolean. If you are migrating from Babylon/Babel 6 or want to use the old decorators proposal, you should use the 'decorators-legacy' plugin instead of 'decorators'.\");if(\"boolean\"!=typeof e)throw new Error(\"'decoratorsBeforeExport' must be a boolean.\")}if(at(t,\"flow\")&&at(t,\"typescript\"))throw new Error(\"Cannot combine flow and typescript plugins.\");if(at(t,\"placeholders\")&&at(t,\"v8intrinsic\"))throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");if(at(t,\"pipelineOperator\")&&!ot.includes(nt(t,\"pipelineOperator\",\"proposal\")))throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \"+ot.map(t=>\"'\".concat(t,\"'\")).join(\", \"));if(at(t,\"recordAndTuple\")&&!ht.includes(nt(t,\"recordAndTuple\",\"syntaxType\")))throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \"+ht.map(t=>\"'\".concat(t,\"'\")).join(\", \"))}(t.plugins),s=function(t){const e=ct.filter(e=>at(t,e)),s=e.join(\"/\");let i=St[s];if(!i){i=At;for(let t=0;t<e.length;t++){const s=e[t];i=pt[s](i)}St[s]=i}return i}(t.plugins)),new s(t,e)}const St={};e.parse=function(t,e){if(!e||\"unambiguous\"!==e.sourceType)return wt(e,t).parse();e=Object.assign({},e);try{e.sourceType=\"module\";const s=wt(e,t),i=s.parse();if(s.sawUnambiguousESM)return i;if(s.ambiguousScriptDifferentAst)try{return e.sourceType=\"script\",wt(e,t).parse()}catch(t){}else i.program.sourceType=\"script\";return i}catch(s){try{return e.sourceType=\"script\",wt(e,t).parse()}catch(t){}throw s}},e.parseExpression=function(t,e){const s=wt(e,t);return s.options.strictMode&&(s.state.strict=!0),s.getExpression()},e.tokTypes=n}));s(Kt);Kt.parse,Kt.parseExpression,Kt.tokTypes;const{hasPragma:Jt}=c;function Xt(t=[]){return{sourceType:\"module\",allowAwaitOutsideFunction:!0,allowImportExportEverywhere:!0,allowReturnOutsideFunction:!0,allowSuperOutsideMethod:!0,allowUndeclaredExports:!0,errorRecovery:!0,createParenthesizedExpressions:!0,plugins:[\"doExpressions\",\"objectRestSpread\",\"classProperties\",\"exportDefaultFrom\",\"exportNamespaceFrom\",\"asyncGenerators\",\"functionBind\",\"functionSent\",\"dynamicImport\",\"numericSeparator\",\"importMeta\",\"optionalCatchBinding\",\"optionalChaining\",\"classPrivateProperties\",[\"pipelineOperator\",{proposal:\"minimal\"}],\"nullishCoalescingOperator\",\"bigInt\",\"throwExpressions\",\"logicalAssignment\",\"classPrivateMethods\",\"v8intrinsic\",\"partialApplication\",[\"decorators\",{decoratorsBeforeExport:!1}],...t]}}function Gt(t,...s){return(i,r,a)=>{const n=Kt;let o;try{o=function(t,e){let s;for(let i=0;i<e.length;i++)try{return t(e[i])}catch(t){s||(s=t)}throw s}(e=>n[t](i,e),s.map(Xt))}catch(t){throw e(t.message.replace(/ \\(.*\\)/,\"\"),{start:{line:t.loc.line,column:t.loc.column+1}})}return delete o.tokens,Wt(o,Object.assign({},a,{originalText:i}))}}const Qt=Gt(\"parse\",[\"jsx\",\"flow\"]),Yt=Gt(\"parse\",[\"jsx\",[\"flow\",{all:!0,enums:!0}]]),$t=Gt(\"parse\",[\"jsx\",\"typescript\"],[\"typescript\"]),Zt=Gt(\"parseExpression\",[\"jsx\"]);function te(t,s){switch(t.type){case\"ArrayExpression\":return t.elements.forEach(i);case\"ObjectExpression\":return t.properties.forEach(i);case\"ObjectProperty\":if(t.computed)throw r(\"computed\");if(t.shorthand)throw r(\"shorthand\");return[t.key,t.value].forEach(i);case\"UnaryExpression\":switch(t.operator){case\"+\":case\"-\":return i(t.argument);default:throw r(\"operator\")}case\"Identifier\":if(s&&\"ObjectProperty\"===s.type&&s.key===t)return;throw r();case\"NullLiteral\":case\"BooleanLiteral\":case\"NumericLiteral\":case\"StringLiteral\":return;default:throw r()}function i(e){return te(e,t)}function r(s){const i=s?\"\".concat(t.type,\" with \").concat(s,\"=\").concat(JSON.stringify(t[s])):t.type;return e(\"\".concat(i,\" is not allowed in JSON.\"),{start:{line:t.loc.start.line,column:t.loc.start.column+1}})}}const ee=Object.assign({parse:Qt,astFormat:\"estree\",hasPragma:Jt},m),se=Object.assign({},ee,{parse:Yt}),ie=Object.assign({},ee,{parse:$t}),re=Object.assign({},ee,{parse:Zt});var ae={parsers:{babel:ee,\"babel-flow\":se,\"babel-ts\":ie,json:Object.assign({},re,{hasPragma:()=>!0}),json5:re,\"json-stringify\":Object.assign({parse:function(t,e,s){const i=Zt(t,e,s);return i.comments.forEach(te),te(i),i},astFormat:\"estree-json\"},m),__js_expression:re,__vue_expression:re,__vue_event_binding:ee}},ne=ae.parsers;t.default=ae,t.parsers=ne,Object.defineProperty(t,\"__esModule\",{value:!0})}));\r\n",
        "path": "{prettier}/node_modules/parser-babylon.js",
        "mapping": {}
    }
}